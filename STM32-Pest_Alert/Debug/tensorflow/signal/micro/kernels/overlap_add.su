overlap_add.cc:51:6:void tflite::{anonymous}::ResetState(tflite::{anonymous}::TFLMSignalOverlapAddParams<T>*) [with T = short int]	16	static
overlap_add.cc:147:6:void tflite::{anonymous}::Reset(TfLiteContext*, void*) [with T = short int]	0	static
overlap_add.cc:51:6:void tflite::{anonymous}::ResetState(tflite::{anonymous}::TFLMSignalOverlapAddParams<T>*) [with T = float]	16	static
overlap_add.cc:147:6:void tflite::{anonymous}::Reset(TfLiteContext*, void*) [with T = float]	0	static
overlap_add.cc:200:6:void tflite::{anonymous}::ResetAll(TfLiteContext*, void*)	0	static
overlap_add.cc:123:14:TfLiteStatus tflite::{anonymous}::Eval(TfLiteContext*, TfLiteNode*) [with T = short int]	40	static
overlap_add.cc:123:14:TfLiteStatus tflite::{anonymous}::Eval(TfLiteContext*, TfLiteNode*) [with T = float]	40	static
overlap_add.cc:184:14:TfLiteStatus tflite::{anonymous}::EvalAll(TfLiteContext*, TfLiteNode*)	0	static
flexbuffers.h:870:26:int flexbuffers::KeyCompare(const void*, const void*) [with T = unsigned char]	0	static
flexbuffers.h:870:26:int flexbuffers::KeyCompare(const void*, const void*) [with T = short unsigned int]	0	static
flexbuffers.h:870:26:int flexbuffers::KeyCompare(const void*, const void*) [with T = long unsigned int]	0	static
flexbuffers.h:870:26:int flexbuffers::KeyCompare(const void*, const void*) [with T = long long unsigned int]	0	static
overlap_add.cc:58:7:void* tflite::{anonymous}::Init(TfLiteContext*, const char*, size_t) [with T = short int]	32	static
overlap_add.cc:58:7:void* tflite::{anonymous}::Init(TfLiteContext*, const char*, size_t) [with T = float]	32	static
runtime_shape.h:67:11:int32_t tflite::RuntimeShape::Dims(int) const	8	static
runtime_shape.h:96:7:int tflite::RuntimeShape::FlatSize() const	8	static
overlap_add.cc:76:14:TfLiteStatus tflite::{anonymous}::Prepare(TfLiteContext*, TfLiteNode*) [with T = short int; TfLiteType TfLiteTypeEnum = (TfLiteType)7]	104	static
overlap_add.cc:76:14:TfLiteStatus tflite::{anonymous}::Prepare(TfLiteContext*, TfLiteNode*) [with T = float; TfLiteType TfLiteTypeEnum = (TfLiteType)1]	104	static
overlap_add.cc:168:14:TfLiteStatus tflite::{anonymous}::PrepareAll(TfLiteContext*, TfLiteNode*)	0	static
overlap_add.cc:220:19:TFLMRegistration* tflite::tflm_signal::Register_OVERLAP_ADD()	24	static
overlap_add.cc:226:19:TFLMRegistration* tflite::tflm_signal::Register_OVERLAP_ADD_FLOAT()	24	static
overlap_add.cc:233:19:TFLMRegistration* tflite::tflm_signal::Register_OVERLAP_ADD_INT16()	24	static
util.h:287:13:bool flatbuffers::StringToIntegerImpl(T*, const char*, int, bool) [with T = long long int]	32	static
flexbuffers.h:138:3:R flexbuffers::ReadSizedScalar(const uint8_t*, uint8_t) [with R = long long int; T1 = signed char; T2 = short int; T4 = long int; T8 = long long int]	0	static
flexbuffers.h:138:3:R flexbuffers::ReadSizedScalar(const uint8_t*, uint8_t) [with R = long long unsigned int; T1 = unsigned char; T2 = short unsigned int; T4 = long unsigned int; T8 = long long unsigned int]	0	static
flexbuffers.h:232:10:size_t flexbuffers::Sized::read_size() const	8	static
flexbuffers.h:877:18:flexbuffers::Reference flexbuffers::Map::operator[](const char*) const	56	static
flexbuffers.h:764:18:const uint8_t* flexbuffers::Reference::Indirect() const	8	static
flexbuffers.h:424:11:int64_t flexbuffers::Reference::AsInt64() const	24	static
overlap_add.cc:151:7:void* tflite::{anonymous}::InitAll(TfLiteContext*, const char*, size_t)	48	static
