tanh.cc:44:7:void* tflite::{anonymous}::TanhInit(TfLiteContext*, const char*, size_t)	8	static
tanh.cc:134:14:TfLiteStatus tflite::{anonymous}::TanhPrepare(TfLiteContext*, TfLiteNode*)	72	static
fixedpoint.h:329:21:IntegerType gemmlowp::SaturatingRoundingDoublingHighMul(IntegerType, IntegerType) [with IntegerType = long int]	12	static
types.h:313:12:int tflite::MatchingFlatSize(const tflite::RuntimeShape&, const tflite::RuntimeShape&)	16	static
tanh.cc:195:18:TFLMRegistration tflite::Register_TANH()	16	static
fixedpoint.h:687:47:typename FixedPointType::ScalarRawType gemmlowp::RescaleConstantInitializer(int32_t) [with FixedPointType = gemmlowp::FixedPoint<long int, 0>]	0	static
fixedpoint.h:385:22:static IntegerType gemmlowp::ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType, 1>::eval(IntegerType) [with int Exponent = 2; IntegerType = long int]	16	static
fixedpoint.h:795:25:gemmlowp::FixedPoint<tRawType, 0> gemmlowp::one_minus_x_over_one_plus_x_for_x_in_0_1(gemmlowp::FixedPoint<tRawType, 0>) [with tRawType = long int]	16	static
fixedpoint.h:539:55:gemmlowp::FixedPoint<tRawType, (tIntegerBits_a + tIntegerBits_b)> gemmlowp::operator*(gemmlowp::FixedPoint<tRawType, tIntegerBits_a>, gemmlowp::FixedPoint<tRawType, tIntegerBits_b>) [with tRawType = long int; int tIntegerBits_a = 0; int tIntegerBits_b = 0]	8	static
fixedpoint.h:721:25:gemmlowp::FixedPoint<tRawType, 0> gemmlowp::exp_on_interval_between_negative_one_quarter_and_0_excl(gemmlowp::FixedPoint<tRawType, 0>) [with tRawType = long int]	24	static
fixedpoint.h:746:25:gemmlowp::FixedPoint<tRawType, 0> gemmlowp::exp_on_negative_values(gemmlowp::FixedPoint<tRawType, tIntegerBits_a>) [with tRawType = long int; int tIntegerBits = 5]	32	static
tanh.h:27:13:void tflite::reference_integer_ops::Tanh(int32_t, int32_t, int32_t, int32_t, const tflite::RuntimeShape&, const int8_t*, const tflite::RuntimeShape&, int8_t*)	48	static
tanh.cc:150:14:TfLiteStatus tflite::{anonymous}::TanhEval(TfLiteContext*, TfLiteNode*)	224	static
