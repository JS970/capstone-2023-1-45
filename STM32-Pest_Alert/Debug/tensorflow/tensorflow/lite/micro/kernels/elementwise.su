std_abs.h:74:3:constexpr float std::abs(float)	0	static
elementwise.cc:365:47:static float tflite::{anonymous}::SquareEval(TfLiteContext*, TfLiteNode*)::<lambda(float)>::_FUN(float)	0	static
elementwise.cc:283:14:TfLiteStatus tflite::{anonymous}::validate_input_func(TfLiteContext*, TfLiteNode*, T) [with T = signed char]	8	static
elementwise.cc:283:14:TfLiteStatus tflite::{anonymous}::validate_input_func(TfLiteContext*, TfLiteNode*, T) [with T = short int]	8	static
elementwise.cc:234:10:T tflite::{anonymous}::AbsEvalQuantized(TfLiteContext*, TfLiteNode*, T) [with T = short int]	24	static
elementwise.cc:234:10:T tflite::{anonymous}::AbsEvalQuantized(TfLiteContext*, TfLiteNode*, T) [with T = signed char]	24	static
elementwise.cc:227:7:void* tflite::{anonymous}::ElementWiseAbsRsqrtInit(TfLiteContext*, const char*, size_t)	8	static
elementwise.cc:169:21:TfLiteStatus tflite::{anonymous}::EvalImplQuantized(TfLiteContext*, TfLiteNode*, T (*)(TfLiteContext*, TfLiteNode*, T), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*, T), TfLiteType) [with T = signed char]	48	static
elementwise.cc:169:21:TfLiteStatus tflite::{anonymous}::EvalImplQuantized(TfLiteContext*, TfLiteNode*, T (*)(TfLiteContext*, TfLiteNode*, T), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*, T), TfLiteType) [with T = short int]	56	static
elementwise.cc:79:14:TfLiteStatus tflite::{anonymous}::GenericPrepare(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::{anonymous}::IsNumericSupportedType]	40	static
elementwise.cc:79:14:TfLiteStatus tflite::{anonymous}::GenericPrepare(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::{anonymous}::IsLogicalSupportedType]	0	static
elementwise.cc:103:14:TfLiteStatus tflite::{anonymous}::PrepareAbsRsqrt(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::{anonymous}::IsAbsSupportedType; int op_nameid = 0]	48	static
cmath:425:3:constexpr float std::sin(float)	0	static
cmath:184:3:constexpr float std::cos(float)	0	static
cmath:338:3:constexpr float std::log(float)	0	static
cmath:463:3:constexpr float std::sqrt(float)	0	static
elementwise.cc:103:14:TfLiteStatus tflite::{anonymous}::PrepareAbsRsqrt(TfLiteContext*, TfLiteNode*) [with bool (* <anonymous>)(TfLiteType) = tflite::{anonymous}::IsRsqrtSupportedType; int op_nameid = 1]	56	static
elementwise.cc:348:36:static float tflite::{anonymous}::RsqrtEval(TfLiteContext*, TfLiteNode*)::<lambda(float)>::_FUN(float)	8	static
elementwise.cc:196:21:TfLiteStatus tflite::{anonymous}::EvalImpl(TfLiteContext*, TfLiteNode*, T (*)(T), TfLiteStatus (*)(T), TfLiteType) [with T = float]	40	static
elementwise.cc:342:14:TfLiteStatus tflite::{anonymous}::RsqrtEval(TfLiteContext*, TfLiteNode*)	16	static
elementwise.cc:214:21:TfLiteStatus tflite::{anonymous}::EvalNumeric(TfLiteContext*, TfLiteNode*, float (*)(float))	0	static
elementwise.cc:326:14:TfLiteStatus tflite::{anonymous}::SinEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:330:14:TfLiteStatus tflite::{anonymous}::CosEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:334:14:TfLiteStatus tflite::{anonymous}::LogEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:338:14:TfLiteStatus tflite::{anonymous}::SqrtEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:364:14:TfLiteStatus tflite::{anonymous}::SquareEval(TfLiteContext*, TfLiteNode*)	0	static
elementwise.cc:368:14:TfLiteStatus tflite::{anonymous}::LogicalNotEval(TfLiteContext*, TfLiteNode*)	32	static
elementwise.cc:292:14:TfLiteStatus tflite::{anonymous}::AbsEval(TfLiteContext*, TfLiteNode*)	40	static
fixedpoint.h:329:21:IntegerType gemmlowp::SaturatingRoundingDoublingHighMul(IntegerType, IntegerType) [with IntegerType = long int]	12	static
common.h:961:13:void tflite::GetInvSqrtQuantizedMultiplierExp(int32_t, int, int32_t*, int*)	48	static
elementwise.cc:256:10:T tflite::{anonymous}::RsqrtEvalQuantized(TfLiteContext*, TfLiteNode*, T) [with T = short int]	32	static
elementwise.cc:256:10:T tflite::{anonymous}::RsqrtEvalQuantized(TfLiteContext*, TfLiteNode*, T) [with T = signed char]	32	static
elementwise.cc:374:18:TFLMRegistration tflite::Register_ABS()	16	static
elementwise.cc:380:18:TFLMRegistration tflite::Register_SIN()	16	static
elementwise.cc:385:18:TFLMRegistration tflite::Register_COS()	16	static
elementwise.cc:390:18:TFLMRegistration tflite::Register_LOG()	16	static
elementwise.cc:395:18:TFLMRegistration tflite::Register_SQRT()	16	static
elementwise.cc:400:18:TFLMRegistration tflite::Register_RSQRT()	16	static
elementwise.cc:406:18:TFLMRegistration tflite::Register_SQUARE()	16	static
elementwise.cc:411:18:TFLMRegistration tflite::Register_LOGICAL_NOT()	16	static
