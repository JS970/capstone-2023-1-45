
STM32F746G_Pest_Alert.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017bf0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e55a8  08017dc0  08017dc0  00027dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080fd368  080fd368  0011008c  2**0
                  CONTENTS
  4 .ARM          00000008  080fd368  080fd368  0010d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080fd370  080fd370  0011008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080fd370  080fd370  0010d370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080fd378  080fd378  0010d378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080fd380  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004d980  20000090  080fd40c  00110090  2**4
                  ALLOC
 10 ._user_heap_stack 00000600  2004da10  080fd40c  0011da10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0011008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   004ad5d9  00000000  00000000  001100bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0002c59c  00000000  00000000  005bd695  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00067259  00000000  00000000  005e9c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00003948  00000000  00000000  00650e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00011440  00000000  00000000  006547d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00059b7b  00000000  00000000  00665c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00087311  00000000  00000000  006bf793  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0020dd4e  00000000  00000000  00746aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  009547f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cf08  00000000  00000000  00954870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017da8 	.word	0x08017da8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08017da8 	.word	0x08017da8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	; 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000402:	f1a4 0401 	sub.w	r4, r4, #1
 8000406:	d1e9      	bne.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__gedf2>:
 8000a60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a64:	e006      	b.n	8000a74 <__cmpdf2+0x4>
 8000a66:	bf00      	nop

08000a68 <__ledf2>:
 8000a68:	f04f 0c01 	mov.w	ip, #1
 8000a6c:	e002      	b.n	8000a74 <__cmpdf2+0x4>
 8000a6e:	bf00      	nop

08000a70 <__cmpdf2>:
 8000a70:	f04f 0c01 	mov.w	ip, #1
 8000a74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8a:	d01b      	beq.n	8000ac4 <__cmpdf2+0x54>
 8000a8c:	b001      	add	sp, #4
 8000a8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a92:	bf0c      	ite	eq
 8000a94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a98:	ea91 0f03 	teqne	r1, r3
 8000a9c:	bf02      	ittt	eq
 8000a9e:	ea90 0f02 	teqeq	r0, r2
 8000aa2:	2000      	moveq	r0, #0
 8000aa4:	4770      	bxeq	lr
 8000aa6:	f110 0f00 	cmn.w	r0, #0
 8000aaa:	ea91 0f03 	teq	r1, r3
 8000aae:	bf58      	it	pl
 8000ab0:	4299      	cmppl	r1, r3
 8000ab2:	bf08      	it	eq
 8000ab4:	4290      	cmpeq	r0, r2
 8000ab6:	bf2c      	ite	cs
 8000ab8:	17d8      	asrcs	r0, r3, #31
 8000aba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000abe:	f040 0001 	orr.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__cmpdf2+0x64>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d107      	bne.n	8000ae4 <__cmpdf2+0x74>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d1d6      	bne.n	8000a8c <__cmpdf2+0x1c>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d0d3      	beq.n	8000a8c <__cmpdf2+0x1c>
 8000ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_cdrcmple>:
 8000aec:	4684      	mov	ip, r0
 8000aee:	4610      	mov	r0, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	468c      	mov	ip, r1
 8000af4:	4619      	mov	r1, r3
 8000af6:	4663      	mov	r3, ip
 8000af8:	e000      	b.n	8000afc <__aeabi_cdcmpeq>
 8000afa:	bf00      	nop

08000afc <__aeabi_cdcmpeq>:
 8000afc:	b501      	push	{r0, lr}
 8000afe:	f7ff ffb7 	bl	8000a70 <__cmpdf2>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	bf48      	it	mi
 8000b06:	f110 0f00 	cmnmi.w	r0, #0
 8000b0a:	bd01      	pop	{r0, pc}

08000b0c <__aeabi_dcmpeq>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff fff4 	bl	8000afc <__aeabi_cdcmpeq>
 8000b14:	bf0c      	ite	eq
 8000b16:	2001      	moveq	r0, #1
 8000b18:	2000      	movne	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmplt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffea 	bl	8000afc <__aeabi_cdcmpeq>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmple>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffe0 	bl	8000afc <__aeabi_cdcmpeq>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpge>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffce 	bl	8000aec <__aeabi_cdrcmple>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpgt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffc4 	bl	8000aec <__aeabi_cdrcmple>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2f>:
 8000bc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc8:	bf24      	itt	cs
 8000bca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bd2:	d90d      	bls.n	8000bf0 <__aeabi_d2f+0x30>
 8000bd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be8:	bf08      	it	eq
 8000bea:	f020 0001 	biceq.w	r0, r0, #1
 8000bee:	4770      	bx	lr
 8000bf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf4:	d121      	bne.n	8000c3a <__aeabi_d2f+0x7a>
 8000bf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bfa:	bfbc      	itt	lt
 8000bfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	4770      	bxlt	lr
 8000c02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c0a:	f1c2 0218 	rsb	r2, r2, #24
 8000c0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c16:	fa20 f002 	lsr.w	r0, r0, r2
 8000c1a:	bf18      	it	ne
 8000c1c:	f040 0001 	orrne.w	r0, r0, #1
 8000c20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c2c:	ea40 000c 	orr.w	r0, r0, ip
 8000c30:	fa23 f302 	lsr.w	r3, r3, r2
 8000c34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c38:	e7cc      	b.n	8000bd4 <__aeabi_d2f+0x14>
 8000c3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3e:	d107      	bne.n	8000c50 <__aeabi_d2f+0x90>
 8000c40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c44:	bf1e      	ittt	ne
 8000c46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4e:	4770      	bxne	lr
 8000c50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__aeabi_ldivmod>:
 8000c60:	b97b      	cbnz	r3, 8000c82 <__aeabi_ldivmod+0x22>
 8000c62:	b972      	cbnz	r2, 8000c82 <__aeabi_ldivmod+0x22>
 8000c64:	2900      	cmp	r1, #0
 8000c66:	bfbe      	ittt	lt
 8000c68:	2000      	movlt	r0, #0
 8000c6a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c6e:	e006      	blt.n	8000c7e <__aeabi_ldivmod+0x1e>
 8000c70:	bf08      	it	eq
 8000c72:	2800      	cmpeq	r0, #0
 8000c74:	bf1c      	itt	ne
 8000c76:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c7a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7e:	f000 b9f7 	b.w	8001070 <__aeabi_idiv0>
 8000c82:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c86:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	db09      	blt.n	8000ca2 <__aeabi_ldivmod+0x42>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db1a      	blt.n	8000cc8 <__aeabi_ldivmod+0x68>
 8000c92:	f000 f887 	bl	8000da4 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4770      	bx	lr
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db1b      	blt.n	8000ce4 <__aeabi_ldivmod+0x84>
 8000cac:	f000 f87a 	bl	8000da4 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4240      	negs	r0, r0
 8000cbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	4770      	bx	lr
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	f000 f869 	bl	8000da4 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4240      	negs	r0, r0
 8000cde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce2:	4770      	bx	lr
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	f000 f85b 	bl	8000da4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_uldivmod>:
 8000d00:	b953      	cbnz	r3, 8000d18 <__aeabi_uldivmod+0x18>
 8000d02:	b94a      	cbnz	r2, 8000d18 <__aeabi_uldivmod+0x18>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bf08      	it	eq
 8000d08:	2800      	cmpeq	r0, #0
 8000d0a:	bf1c      	itt	ne
 8000d0c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d14:	f000 b9ac 	b.w	8001070 <__aeabi_idiv0>
 8000d18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d20:	f000 f840 	bl	8000da4 <__udivmoddi4>
 8000d24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2c:	b004      	add	sp, #16
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_d2lz>:
 8000d30:	b538      	push	{r3, r4, r5, lr}
 8000d32:	2200      	movs	r2, #0
 8000d34:	2300      	movs	r3, #0
 8000d36:	4604      	mov	r4, r0
 8000d38:	460d      	mov	r5, r1
 8000d3a:	f7ff fef1 	bl	8000b20 <__aeabi_dcmplt>
 8000d3e:	b928      	cbnz	r0, 8000d4c <__aeabi_d2lz+0x1c>
 8000d40:	4620      	mov	r0, r4
 8000d42:	4629      	mov	r1, r5
 8000d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d48:	f000 b80a 	b.w	8000d60 <__aeabi_d2ulz>
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d52:	f000 f805 	bl	8000d60 <__aeabi_d2ulz>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	bf00      	nop

08000d60 <__aeabi_d2ulz>:
 8000d60:	b5d0      	push	{r4, r6, r7, lr}
 8000d62:	2200      	movs	r2, #0
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <__aeabi_d2ulz+0x3c>)
 8000d66:	4606      	mov	r6, r0
 8000d68:	460f      	mov	r7, r1
 8000d6a:	f7ff fc67 	bl	800063c <__aeabi_dmul>
 8000d6e:	f000 f981 	bl	8001074 <__aeabi_d2uiz>
 8000d72:	4604      	mov	r4, r0
 8000d74:	f7ff fbe8 	bl	8000548 <__aeabi_ui2d>
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <__aeabi_d2ulz+0x40>)
 8000d7c:	f7ff fc5e 	bl	800063c <__aeabi_dmul>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4630      	mov	r0, r6
 8000d86:	4639      	mov	r1, r7
 8000d88:	f7ff faa0 	bl	80002cc <__aeabi_dsub>
 8000d8c:	f000 f972 	bl	8001074 <__aeabi_d2uiz>
 8000d90:	2200      	movs	r2, #0
 8000d92:	4623      	mov	r3, r4
 8000d94:	4310      	orrs	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9e08      	ldr	r6, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	4688      	mov	r8, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14b      	bne.n	8000e4a <__udivmoddi4+0xa6>
 8000db2:	428a      	cmp	r2, r1
 8000db4:	4615      	mov	r5, r2
 8000db6:	d967      	bls.n	8000e88 <__udivmoddi4+0xe4>
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b14a      	cbz	r2, 8000dd2 <__udivmoddi4+0x2e>
 8000dbe:	f1c2 0720 	rsb	r7, r2, #32
 8000dc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc6:	fa20 f707 	lsr.w	r7, r0, r7
 8000dca:	4095      	lsls	r5, r2
 8000dcc:	ea47 0803 	orr.w	r8, r7, r3
 8000dd0:	4094      	lsls	r4, r2
 8000dd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd6:	0c23      	lsrs	r3, r4, #16
 8000dd8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ddc:	fa1f fc85 	uxth.w	ip, r5
 8000de0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000de4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de8:	fb07 f10c 	mul.w	r1, r7, ip
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x60>
 8000df0:	18eb      	adds	r3, r5, r3
 8000df2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000df6:	f080 811b 	bcs.w	8001030 <__udivmoddi4+0x28c>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 8118 	bls.w	8001030 <__udivmoddi4+0x28c>
 8000e00:	3f02      	subs	r7, #2
 8000e02:	442b      	add	r3, r5
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e14:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e18:	45a4      	cmp	ip, r4
 8000e1a:	d909      	bls.n	8000e30 <__udivmoddi4+0x8c>
 8000e1c:	192c      	adds	r4, r5, r4
 8000e1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e22:	f080 8107 	bcs.w	8001034 <__udivmoddi4+0x290>
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	f240 8104 	bls.w	8001034 <__udivmoddi4+0x290>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	442c      	add	r4, r5
 8000e30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e34:	eba4 040c 	sub.w	r4, r4, ip
 8000e38:	2700      	movs	r7, #0
 8000e3a:	b11e      	cbz	r6, 8000e44 <__udivmoddi4+0xa0>
 8000e3c:	40d4      	lsrs	r4, r2
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e9c6 4300 	strd	r4, r3, [r6]
 8000e44:	4639      	mov	r1, r7
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0xbe>
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	f000 80eb 	beq.w	800102a <__udivmoddi4+0x286>
 8000e54:	2700      	movs	r7, #0
 8000e56:	e9c6 0100 	strd	r0, r1, [r6]
 8000e5a:	4638      	mov	r0, r7
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f783 	clz	r7, r3
 8000e66:	2f00      	cmp	r7, #0
 8000e68:	d147      	bne.n	8000efa <__udivmoddi4+0x156>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0xd0>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80fa 	bhi.w	8001068 <__udivmoddi4+0x2c4>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	4698      	mov	r8, r3
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d0e0      	beq.n	8000e44 <__udivmoddi4+0xa0>
 8000e82:	e9c6 4800 	strd	r4, r8, [r6]
 8000e86:	e7dd      	b.n	8000e44 <__udivmoddi4+0xa0>
 8000e88:	b902      	cbnz	r2, 8000e8c <__udivmoddi4+0xe8>
 8000e8a:	deff      	udf	#255	; 0xff
 8000e8c:	fab2 f282 	clz	r2, r2
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	f040 808f 	bne.w	8000fb4 <__udivmoddi4+0x210>
 8000e96:	1b49      	subs	r1, r1, r5
 8000e98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9c:	fa1f f885 	uxth.w	r8, r5
 8000ea0:	2701      	movs	r7, #1
 8000ea2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ea6:	0c23      	lsrs	r3, r4, #16
 8000ea8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb08 f10c 	mul.w	r1, r8, ip
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x124>
 8000eb8:	18eb      	adds	r3, r5, r3
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x122>
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	f200 80cd 	bhi.w	8001060 <__udivmoddi4+0x2bc>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1a59      	subs	r1, r3, r1
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ed4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x14c>
 8000ee0:	192c      	adds	r4, r5, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x14a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80b6 	bhi.w	800105a <__udivmoddi4+0x2b6>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e79f      	b.n	8000e3a <__udivmoddi4+0x96>
 8000efa:	f1c7 0c20 	rsb	ip, r7, #32
 8000efe:	40bb      	lsls	r3, r7
 8000f00:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000f04:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f08:	fa01 f407 	lsl.w	r4, r1, r7
 8000f0c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f10:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f14:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f18:	4325      	orrs	r5, r4
 8000f1a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f1e:	0c2c      	lsrs	r4, r5, #16
 8000f20:	fb08 3319 	mls	r3, r8, r9, r3
 8000f24:	fa1f fa8e 	uxth.w	sl, lr
 8000f28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f2c:	fb09 f40a 	mul.w	r4, r9, sl
 8000f30:	429c      	cmp	r4, r3
 8000f32:	fa02 f207 	lsl.w	r2, r2, r7
 8000f36:	fa00 f107 	lsl.w	r1, r0, r7
 8000f3a:	d90b      	bls.n	8000f54 <__udivmoddi4+0x1b0>
 8000f3c:	eb1e 0303 	adds.w	r3, lr, r3
 8000f40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f44:	f080 8087 	bcs.w	8001056 <__udivmoddi4+0x2b2>
 8000f48:	429c      	cmp	r4, r3
 8000f4a:	f240 8084 	bls.w	8001056 <__udivmoddi4+0x2b2>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4473      	add	r3, lr
 8000f54:	1b1b      	subs	r3, r3, r4
 8000f56:	b2ad      	uxth	r5, r5
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f64:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f68:	45a2      	cmp	sl, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x1da>
 8000f6c:	eb1e 0404 	adds.w	r4, lr, r4
 8000f70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f74:	d26b      	bcs.n	800104e <__udivmoddi4+0x2aa>
 8000f76:	45a2      	cmp	sl, r4
 8000f78:	d969      	bls.n	800104e <__udivmoddi4+0x2aa>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4474      	add	r4, lr
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	fba0 8902 	umull	r8, r9, r0, r2
 8000f86:	eba4 040a 	sub.w	r4, r4, sl
 8000f8a:	454c      	cmp	r4, r9
 8000f8c:	46c2      	mov	sl, r8
 8000f8e:	464b      	mov	r3, r9
 8000f90:	d354      	bcc.n	800103c <__udivmoddi4+0x298>
 8000f92:	d051      	beq.n	8001038 <__udivmoddi4+0x294>
 8000f94:	2e00      	cmp	r6, #0
 8000f96:	d069      	beq.n	800106c <__udivmoddi4+0x2c8>
 8000f98:	ebb1 050a 	subs.w	r5, r1, sl
 8000f9c:	eb64 0403 	sbc.w	r4, r4, r3
 8000fa0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000fa4:	40fd      	lsrs	r5, r7
 8000fa6:	40fc      	lsrs	r4, r7
 8000fa8:	ea4c 0505 	orr.w	r5, ip, r5
 8000fac:	e9c6 5400 	strd	r5, r4, [r6]
 8000fb0:	2700      	movs	r7, #0
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0xa0>
 8000fb4:	f1c2 0320 	rsb	r3, r2, #32
 8000fb8:	fa20 f703 	lsr.w	r7, r0, r3
 8000fbc:	4095      	lsls	r5, r2
 8000fbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000fc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fca:	4338      	orrs	r0, r7
 8000fcc:	0c01      	lsrs	r1, r0, #16
 8000fce:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fd2:	fa1f f885 	uxth.w	r8, r5
 8000fd6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb07 f308 	mul.w	r3, r7, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe8:	d907      	bls.n	8000ffa <__udivmoddi4+0x256>
 8000fea:	1869      	adds	r1, r5, r1
 8000fec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ff0:	d22f      	bcs.n	8001052 <__udivmoddi4+0x2ae>
 8000ff2:	428b      	cmp	r3, r1
 8000ff4:	d92d      	bls.n	8001052 <__udivmoddi4+0x2ae>
 8000ff6:	3f02      	subs	r7, #2
 8000ff8:	4429      	add	r1, r5
 8000ffa:	1acb      	subs	r3, r1, r3
 8000ffc:	b281      	uxth	r1, r0
 8000ffe:	fbb3 f0fe 	udiv	r0, r3, lr
 8001002:	fb0e 3310 	mls	r3, lr, r0, r3
 8001006:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800100a:	fb00 f308 	mul.w	r3, r0, r8
 800100e:	428b      	cmp	r3, r1
 8001010:	d907      	bls.n	8001022 <__udivmoddi4+0x27e>
 8001012:	1869      	adds	r1, r5, r1
 8001014:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001018:	d217      	bcs.n	800104a <__udivmoddi4+0x2a6>
 800101a:	428b      	cmp	r3, r1
 800101c:	d915      	bls.n	800104a <__udivmoddi4+0x2a6>
 800101e:	3802      	subs	r0, #2
 8001020:	4429      	add	r1, r5
 8001022:	1ac9      	subs	r1, r1, r3
 8001024:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001028:	e73b      	b.n	8000ea2 <__udivmoddi4+0xfe>
 800102a:	4637      	mov	r7, r6
 800102c:	4630      	mov	r0, r6
 800102e:	e709      	b.n	8000e44 <__udivmoddi4+0xa0>
 8001030:	4607      	mov	r7, r0
 8001032:	e6e7      	b.n	8000e04 <__udivmoddi4+0x60>
 8001034:	4618      	mov	r0, r3
 8001036:	e6fb      	b.n	8000e30 <__udivmoddi4+0x8c>
 8001038:	4541      	cmp	r1, r8
 800103a:	d2ab      	bcs.n	8000f94 <__udivmoddi4+0x1f0>
 800103c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001040:	eb69 020e 	sbc.w	r2, r9, lr
 8001044:	3801      	subs	r0, #1
 8001046:	4613      	mov	r3, r2
 8001048:	e7a4      	b.n	8000f94 <__udivmoddi4+0x1f0>
 800104a:	4660      	mov	r0, ip
 800104c:	e7e9      	b.n	8001022 <__udivmoddi4+0x27e>
 800104e:	4618      	mov	r0, r3
 8001050:	e795      	b.n	8000f7e <__udivmoddi4+0x1da>
 8001052:	4667      	mov	r7, ip
 8001054:	e7d1      	b.n	8000ffa <__udivmoddi4+0x256>
 8001056:	4681      	mov	r9, r0
 8001058:	e77c      	b.n	8000f54 <__udivmoddi4+0x1b0>
 800105a:	3802      	subs	r0, #2
 800105c:	442c      	add	r4, r5
 800105e:	e747      	b.n	8000ef0 <__udivmoddi4+0x14c>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	442b      	add	r3, r5
 8001066:	e72f      	b.n	8000ec8 <__udivmoddi4+0x124>
 8001068:	4638      	mov	r0, r7
 800106a:	e708      	b.n	8000e7e <__udivmoddi4+0xda>
 800106c:	4637      	mov	r7, r6
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0xa0>

08001070 <__aeabi_idiv0>:
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_d2uiz>:
 8001074:	004a      	lsls	r2, r1, #1
 8001076:	d211      	bcs.n	800109c <__aeabi_d2uiz+0x28>
 8001078:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800107c:	d211      	bcs.n	80010a2 <__aeabi_d2uiz+0x2e>
 800107e:	d50d      	bpl.n	800109c <__aeabi_d2uiz+0x28>
 8001080:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001084:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001088:	d40e      	bmi.n	80010a8 <__aeabi_d2uiz+0x34>
 800108a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800108e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001092:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001096:	fa23 f002 	lsr.w	r0, r3, r2
 800109a:	4770      	bx	lr
 800109c:	f04f 0000 	mov.w	r0, #0
 80010a0:	4770      	bx	lr
 80010a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010a6:	d102      	bne.n	80010ae <__aeabi_d2uiz+0x3a>
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <_ZN11JPEGDecoderC1Ev>:
#include "picojpeg.h"
#include <string.h>

JPEGDecoder JpegDec;

JPEGDecoder::JPEGDecoder() {
 80010b4:	2200      	movs	r2, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
  mcu_x = 0;
  mcu_y = 0;
  is_available = 0;
 80010bc:	6302      	str	r2, [r0, #48]	; 0x30
  mcu_y = 0;
 80010be:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  thisPtr = this;
 80010c2:	6658      	str	r0, [r3, #100]	; 0x64
}
 80010c4:	4770      	bx	lr

080010c6 <_ZN11JPEGDecoderD1Ev>:

JPEGDecoder::~JPEGDecoder() {
 80010c6:	b510      	push	{r4, lr}
 80010c8:	4604      	mov	r4, r0
  if (pImage)
 80010ca:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80010cc:	b108      	cbz	r0, 80010d2 <_ZN11JPEGDecoderD1Ev+0xc>
    delete[] pImage;
 80010ce:	f015 fbaa 	bl	8016826 <_ZdaPv>
  pImage = NULL;
}
 80010d2:	4620      	mov	r0, r4
 80010d4:	bd10      	pop	{r4, pc}

080010d6 <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv>:
  return 0;
}

uint8_t JPEGDecoder::pjpeg_need_bytes_callback(uint8_t *pBuf, uint8_t buf_size,
                                               uint8_t *pBytes_actually_read,
                                               void *pCallback_data) {
 80010d6:	b570      	push	{r4, r5, r6, lr}
  uint n;

  n = jpg_min(g_nInFileSize - g_nInFileOfs, buf_size);
 80010d8:	e9d0 450f 	ldrd	r4, r5, [r0, #60]	; 0x3c
 80010dc:	1b64      	subs	r4, r4, r5
 80010de:	42a2      	cmp	r2, r4
 80010e0:	bf28      	it	cs
 80010e2:	4622      	movcs	r2, r4

  if (jpg_source == JPEG_ARRAY) {
 80010e4:	f890 4059 	ldrb.w	r4, [r0, #89]	; 0x59
 80010e8:	b94c      	cbnz	r4, 80010fe <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv+0x28>
 80010ea:	188e      	adds	r6, r1, r2
    for (int i = 0; i < n; i++) {
 80010ec:	42b1      	cmp	r1, r6
 80010ee:	d006      	beq.n	80010fe <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv+0x28>
      pBuf[i] = *jpg_data++;
 80010f0:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80010f2:	1c65      	adds	r5, r4, #1
 80010f4:	65c5      	str	r5, [r0, #92]	; 0x5c
 80010f6:	7824      	ldrb	r4, [r4, #0]
 80010f8:	f801 4b01 	strb.w	r4, [r1], #1
    for (int i = 0; i < n; i++) {
 80010fc:	e7f6      	b.n	80010ec <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv+0x16>
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    g_pInFileSd.read(pBuf, n);
#endif

  *pBytes_actually_read = (uint8_t)(n);
 80010fe:	701a      	strb	r2, [r3, #0]
  g_nInFileOfs += n;
 8001100:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001102:	441a      	add	r2, r3
 8001104:	6402      	str	r2, [r0, #64]	; 0x40
  return 0;
}
 8001106:	2000      	movs	r0, #0
 8001108:	bd70      	pop	{r4, r5, r6, pc}
	...

0800110c <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv>:
                                    void *pCallback_data) {
 800110c:	b507      	push	{r0, r1, r2, lr}
  thisPtr->pjpeg_need_bytes_callback(pBuf, buf_size, pBytes_actually_read,
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4613      	mov	r3, r2
 8001112:	460a      	mov	r2, r1
 8001114:	4601      	mov	r1, r0
 8001116:	4804      	ldr	r0, [pc, #16]	; (8001128 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x1c>)
 8001118:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800111a:	f7ff ffdc 	bl	80010d6 <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv>
}
 800111e:	2000      	movs	r0, #0
 8001120:	b003      	add	sp, #12
 8001122:	f85d fb04 	ldr.w	pc, [sp], #4
 8001126:	bf00      	nop
 8001128:	200000ac 	.word	0x200000ac

0800112c <_ZN11JPEGDecoder10decode_mcuEv>:

int JPEGDecoder::decode_mcu(void) {
 800112c:	b510      	push	{r4, lr}
 800112e:	4604      	mov	r4, r0

  status = pjpeg_decode_mcu();
 8001130:	f001 ff36 	bl	8002fa0 <pjpeg_decode_mcu>
 8001134:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58

  if (status) {
 8001138:	b118      	cbz	r0, 8001142 <_ZN11JPEGDecoder10decode_mcuEv+0x16>
    is_available = 0;
 800113a:	2300      	movs	r3, #0

    if (status != PJPG_NO_MORE_BLOCKS) {
 800113c:	2801      	cmp	r0, #1
    is_available = 0;
 800113e:	6323      	str	r3, [r4, #48]	; 0x30
    if (status != PJPG_NO_MORE_BLOCKS) {
 8001140:	d101      	bne.n	8001146 <_ZN11JPEGDecoder10decode_mcuEv+0x1a>
//#endif

      return -1;
    }
  }
  return 1;
 8001142:	2001      	movs	r0, #1
}
 8001144:	bd10      	pop	{r4, pc}
      return -1;
 8001146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114a:	e7fb      	b.n	8001144 <_ZN11JPEGDecoder10decode_mcuEv+0x18>

0800114c <_ZN11JPEGDecoder12decodeCommonEv>:
  g_nInFileSize = array_size;

  return decodeCommon();
}

int JPEGDecoder::decodeCommon(void) {
 800114c:	b570      	push	{r4, r5, r6, lr}

  width = 0;
 800114e:	2500      	movs	r5, #0
int JPEGDecoder::decodeCommon(void) {
 8001150:	4604      	mov	r4, r0
  MCUSPerCol = 0;
  scanType = (pjpeg_scan_type_t)0;
  MCUWidth = 0;
  MCUHeight = 0;

  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 8001152:	4923      	ldr	r1, [pc, #140]	; (80011e0 <_ZN11JPEGDecoder12decodeCommonEv+0x94>)
  MCUSPerCol = 0;
 8001154:	6785      	str	r5, [r0, #120]	; 0x78
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 8001156:	462b      	mov	r3, r5
  scanType = (pjpeg_scan_type_t)0;
 8001158:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800115c:	462a      	mov	r2, r5
  height = 0;
 800115e:	e9c0 551a 	strd	r5, r5, [r0, #104]	; 0x68
  MCUSPerRow = 0;
 8001162:	e9c0 551c 	strd	r5, r5, [r0, #112]	; 0x70
  MCUHeight = 0;
 8001166:	e9c0 5520 	strd	r5, r5, [r0, #128]	; 0x80
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800116a:	3004      	adds	r0, #4
 800116c:	f002 fd06 	bl	8003b7c <pjpeg_decode_init>
 8001170:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58

  if (status) {
 8001174:	2800      	cmp	r0, #0
 8001176:	d131      	bne.n	80011dc <_ZN11JPEGDecoder12decodeCommonEv+0x90>
//#endif

    return 0;
  }

  decoded_width = image_info.m_width;
 8001178:	6863      	ldr	r3, [r4, #4]
  decoded_height = image_info.m_height;

  row_pitch = image_info.m_MCUWidth;
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800117a:	6a20      	ldr	r0, [r4, #32]
  decoded_width = image_info.m_width;
 800117c:	64a3      	str	r3, [r4, #72]	; 0x48
  decoded_height = image_info.m_height;
 800117e:	68a3      	ldr	r3, [r4, #8]
 8001180:	64e3      	str	r3, [r4, #76]	; 0x4c
  row_pitch = image_info.m_MCUWidth;
 8001182:	69e3      	ldr	r3, [r4, #28]
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 8001184:	4358      	muls	r0, r3
  row_pitch = image_info.m_MCUWidth;
 8001186:	6463      	str	r3, [r4, #68]	; 0x44
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <_ZN11JPEGDecoder12decodeCommonEv+0x98>)
 800118a:	4298      	cmp	r0, r3
 800118c:	bf94      	ite	ls
 800118e:	0040      	lslls	r0, r0, #1
 8001190:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8001194:	f015 fb49 	bl	801682a <_Znaj>

  memset(pImage, 0,
 8001198:	2100      	movs	r1, #0
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800119a:	6620      	str	r0, [r4, #96]	; 0x60
         image_info.m_MCUWidth * image_info.m_MCUHeight * sizeof(*pImage));
 800119c:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
 80011a0:	fb05 f206 	mul.w	r2, r5, r6
  memset(pImage, 0,
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	f015 fe5f 	bl	8016e68 <memset>
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;

  is_available = 1;

  width = decoded_width;
 80011aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 80011ac:	10f3      	asrs	r3, r6, #3
  MCUSPerCol = image_info.m_MCUSPerCol;
  scanType = image_info.m_scanType;
  MCUWidth = image_info.m_MCUWidth;
  MCUHeight = image_info.m_MCUHeight;

  return decode_mcu();
 80011ae:	4620      	mov	r0, r4
  width = decoded_width;
 80011b0:	66a2      	str	r2, [r4, #104]	; 0x68
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 80011b2:	6523      	str	r3, [r4, #80]	; 0x50
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 80011b4:	10eb      	asrs	r3, r5, #3
  height = decoded_height;
 80011b6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 80011b8:	6563      	str	r3, [r4, #84]	; 0x54
  is_available = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	6323      	str	r3, [r4, #48]	; 0x30
  comps = 1;
 80011be:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
  MCUSPerRow = image_info.m_MCUSPerRow;
 80011c2:	6923      	ldr	r3, [r4, #16]
 80011c4:	6763      	str	r3, [r4, #116]	; 0x74
  MCUSPerCol = image_info.m_MCUSPerCol;
 80011c6:	6963      	ldr	r3, [r4, #20]
 80011c8:	67a3      	str	r3, [r4, #120]	; 0x78
  scanType = image_info.m_scanType;
 80011ca:	7e23      	ldrb	r3, [r4, #24]
  MCUHeight = image_info.m_MCUHeight;
 80011cc:	e9c4 6520 	strd	r6, r5, [r4, #128]	; 0x80
  scanType = image_info.m_scanType;
 80011d0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80011d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return decode_mcu();
 80011d8:	f7ff bfa8 	b.w	800112c <_ZN11JPEGDecoder10decode_mcuEv>
}
 80011dc:	4628      	mov	r0, r5
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	0800110d 	.word	0x0800110d
 80011e4:	3ffffffc 	.word	0x3ffffffc

080011e8 <_ZN11JPEGDecoder11decodeArrayEPKhm>:
int JPEGDecoder::decodeArray(const uint8_t array[], uint32_t array_size) {
 80011e8:	b410      	push	{r4}
  jpg_source = JPEG_ARRAY;
 80011ea:	2400      	movs	r4, #0
  jpg_data = (uint8_t *)array;
 80011ec:	65c1      	str	r1, [r0, #92]	; 0x5c
  g_nInFileSize = array_size;
 80011ee:	63c2      	str	r2, [r0, #60]	; 0x3c
  jpg_source = JPEG_ARRAY;
 80011f0:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  g_nInFileOfs = 0;
 80011f4:	6404      	str	r4, [r0, #64]	; 0x40
}
 80011f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return decodeCommon();
 80011fa:	f7ff bfa7 	b.w	800114c <_ZN11JPEGDecoder12decodeCommonEv>

080011fe <_ZN11JPEGDecoder5abortEv>:

void JPEGDecoder::abort(void) {
 80011fe:	b538      	push	{r3, r4, r5, lr}

  mcu_x = 0;
 8001200:	2400      	movs	r4, #0
void JPEGDecoder::abort(void) {
 8001202:	4605      	mov	r5, r0
  mcu_y = 0;
 8001204:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  is_available = 0;
 8001208:	6304      	str	r4, [r0, #48]	; 0x30
  if (pImage)
 800120a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800120c:	b108      	cbz	r0, 8001212 <_ZN11JPEGDecoder5abortEv+0x14>
    delete[] pImage;
 800120e:	f015 fb0a 	bl	8016826 <_ZdaPv>
  pImage = NULL;
 8001212:	662c      	str	r4, [r5, #96]	; 0x60
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 8001214:	bd38      	pop	{r3, r4, r5, pc}
	...

08001218 <_ZN11JPEGDecoder4readEv>:
  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 8001218:	6b03      	ldr	r3, [r0, #48]	; 0x30
int JPEGDecoder::read(void) {
 800121a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	b089      	sub	sp, #36	; 0x24
  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 8001222:	b123      	cbz	r3, 800122e <_ZN11JPEGDecoder4readEv+0x16>
 8001224:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 8001228:	6943      	ldr	r3, [r0, #20]
 800122a:	459b      	cmp	fp, r3
 800122c:	db06      	blt.n	800123c <_ZN11JPEGDecoder4readEv+0x24>
    abort();
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff ffe5 	bl	80011fe <_ZN11JPEGDecoder5abortEv>
    return 0;
 8001234:	2000      	movs	r0, #0
}
 8001236:	b009      	add	sp, #36	; 0x24
 8001238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pDst_row = pImage;
 800123c:	6e03      	ldr	r3, [r0, #96]	; 0x60
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800123e:	f04f 0c00 	mov.w	ip, #0
  pDst_row = pImage;
 8001242:	9302      	str	r3, [sp, #8]
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 8001244:	6a03      	ldr	r3, [r0, #32]
 8001246:	9303      	str	r3, [sp, #12]
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));
 8001248:	fb03 f30b 	mul.w	r3, r3, fp
 800124c:	9305      	str	r3, [sp, #20]
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800124e:	9b03      	ldr	r3, [sp, #12]
 8001250:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001252:	4563      	cmp	r3, ip
 8001254:	f340 8085 	ble.w	8001362 <_ZN11JPEGDecoder4readEv+0x14a>
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));
 8001258:	9b05      	ldr	r3, [sp, #20]
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800125a:	2500      	movs	r5, #0
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));
 800125c:	eb03 060c 	add.w	r6, r3, ip
 8001260:	68a3      	ldr	r3, [r4, #8]
 8001262:	1b9b      	subs	r3, r3, r6
    const int by_limit =
 8001264:	2b08      	cmp	r3, #8
 8001266:	bfa8      	it	ge
 8001268:	2308      	movge	r3, #8
 800126a:	9301      	str	r3, [sp, #4]
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800126c:	69e3      	ldr	r3, [r4, #28]
 800126e:	9304      	str	r3, [sp, #16]
 8001270:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8001274:	9307      	str	r3, [sp, #28]
          jpg_min(8, image_info.m_width - (mcu_x * image_info.m_MCUWidth + x));
 8001276:	9b04      	ldr	r3, [sp, #16]
 8001278:	4353      	muls	r3, r2
 800127a:	9306      	str	r3, [sp, #24]
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800127c:	9b04      	ldr	r3, [sp, #16]
 800127e:	42ab      	cmp	r3, r5
 8001280:	dd67      	ble.n	8001352 <_ZN11JPEGDecoder4readEv+0x13a>
 8001282:	9b02      	ldr	r3, [sp, #8]
          jpg_min(8, image_info.m_width - (mcu_x * image_info.m_MCUWidth + x));
 8001284:	6861      	ldr	r1, [r4, #4]
 8001286:	eb03 0745 	add.w	r7, r3, r5, lsl #1
 800128a:	9b07      	ldr	r3, [sp, #28]
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800128c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800128e:	18ea      	adds	r2, r5, r3
          jpg_min(8, image_info.m_width - (mcu_x * image_info.m_MCUWidth + x));
 8001290:	9b06      	ldr	r3, [sp, #24]
 8001292:	442b      	add	r3, r5
 8001294:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 8001298:	1acb      	subs	r3, r1, r3
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800129a:	7e21      	ldrb	r1, [r4, #24]
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800129c:	4470      	add	r0, lr
      const int bx_limit =
 800129e:	2b08      	cmp	r3, #8
 80012a0:	bfa8      	it	ge
 80012a2:	2308      	movge	r3, #8
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 80012a4:	b341      	cbz	r1, 80012f8 <_ZN11JPEGDecoder4readEv+0xe0>
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 80012a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        for (by = 0; by < by_limit; by++) {
 80012a8:	f04f 0900 	mov.w	r9, #0
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 80012ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 80012ae:	eb01 080e 	add.w	r8, r1, lr
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 80012b2:	4472      	add	r2, lr
          pSrcR += (8 - bx_limit);
 80012b4:	f1c3 0e08 	rsb	lr, r3, #8
 80012b8:	454b      	cmp	r3, r9
 80012ba:	bfac      	ite	ge
 80012bc:	449e      	addge	lr, r3
 80012be:	44ce      	addlt	lr, r9
        for (by = 0; by < by_limit; by++) {
 80012c0:	9901      	ldr	r1, [sp, #4]
 80012c2:	4589      	cmp	r9, r1
 80012c4:	da43      	bge.n	800134e <_ZN11JPEGDecoder4readEv+0x136>
          for (bx = 0; bx < bx_limit; bx++) {
 80012c6:	f04f 0a00 	mov.w	sl, #0
 80012ca:	459a      	cmp	sl, r3
 80012cc:	da36      	bge.n	800133c <_ZN11JPEGDecoder4readEv+0x124>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 80012ce:	f810 100a 	ldrb.w	r1, [r0, sl]
 80012d2:	4e2f      	ldr	r6, [pc, #188]	; (8001390 <_ZN11JPEGDecoder4readEv+0x178>)
 80012d4:	ea06 2101 	and.w	r1, r6, r1, lsl #8
 80012d8:	460e      	mov	r6, r1
 80012da:	f818 100a 	ldrb.w	r1, [r8, sl]
 80012de:	00c9      	lsls	r1, r1, #3
 80012e0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80012e4:	4331      	orrs	r1, r6
 80012e6:	f812 600a 	ldrb.w	r6, [r2, sl]
 80012ea:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
 80012ee:	f827 101a 	strh.w	r1, [r7, sl, lsl #1]
          for (bx = 0; bx < bx_limit; bx++) {
 80012f2:	f10a 0a01 	add.w	sl, sl, #1
 80012f6:	e7e8      	b.n	80012ca <_ZN11JPEGDecoder4readEv+0xb2>
          pSrcR += (8 - bx_limit);
 80012f8:	f1c3 0808 	rsb	r8, r3, #8
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bfa8      	it	ge
 8001300:	4498      	addge	r8, r3
        for (by = 0; by < by_limit; by++) {
 8001302:	9a01      	ldr	r2, [sp, #4]
 8001304:	4291      	cmp	r1, r2
 8001306:	da22      	bge.n	800134e <_ZN11JPEGDecoder4readEv+0x136>
          for (bx = 0; bx < bx_limit; bx++) {
 8001308:	2200      	movs	r2, #0
 800130a:	429a      	cmp	r2, r3
 800130c:	da10      	bge.n	8001330 <_ZN11JPEGDecoder4readEv+0x118>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800130e:	f810 9002 	ldrb.w	r9, [r0, r2]
 8001312:	4e1f      	ldr	r6, [pc, #124]	; (8001390 <_ZN11JPEGDecoder4readEv+0x178>)
 8001314:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8001318:	ea06 2e09 	and.w	lr, r6, r9, lsl #8
 800131c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8001320:	ea4e 0e0a 	orr.w	lr, lr, sl
 8001324:	ea4e 0ed9 	orr.w	lr, lr, r9, lsr #3
 8001328:	f827 e012 	strh.w	lr, [r7, r2, lsl #1]
          for (bx = 0; bx < bx_limit; bx++) {
 800132c:	3201      	adds	r2, #1
 800132e:	e7ec      	b.n	800130a <_ZN11JPEGDecoder4readEv+0xf2>
          pDst_block += row_pitch;
 8001330:	6c62      	ldr	r2, [r4, #68]	; 0x44
          pSrcR += (8 - bx_limit);
 8001332:	4440      	add	r0, r8
        for (by = 0; by < by_limit; by++) {
 8001334:	3101      	adds	r1, #1
          pDst_block += row_pitch;
 8001336:	eb07 0742 	add.w	r7, r7, r2, lsl #1
        for (by = 0; by < by_limit; by++) {
 800133a:	e7e2      	b.n	8001302 <_ZN11JPEGDecoder4readEv+0xea>
          pDst_block += row_pitch;
 800133c:	6c61      	ldr	r1, [r4, #68]	; 0x44
          pSrcR += (8 - bx_limit);
 800133e:	4470      	add	r0, lr
          pSrcG += (8 - bx_limit);
 8001340:	44f0      	add	r8, lr
          pSrcB += (8 - bx_limit);
 8001342:	4472      	add	r2, lr
          pDst_block += row_pitch;
 8001344:	eb07 0741 	add.w	r7, r7, r1, lsl #1
        for (by = 0; by < by_limit; by++) {
 8001348:	f109 0901 	add.w	r9, r9, #1
 800134c:	e7b8      	b.n	80012c0 <_ZN11JPEGDecoder4readEv+0xa8>
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800134e:	3508      	adds	r5, #8
 8001350:	e794      	b.n	800127c <_ZN11JPEGDecoder4readEv+0x64>
    pDst_row += (row_pitch * 8);
 8001352:	9a02      	ldr	r2, [sp, #8]
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 8001354:	f10c 0c08 	add.w	ip, ip, #8
    pDst_row += (row_pitch * 8);
 8001358:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800135a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800135e:	9302      	str	r3, [sp, #8]
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 8001360:	e775      	b.n	800124e <_ZN11JPEGDecoder4readEv+0x36>
  if (mcu_x == image_info.m_MCUSPerRow) {
 8001362:	6923      	ldr	r3, [r4, #16]
  if (decode_mcu() == -1)
 8001364:	4620      	mov	r0, r4
  MCUy = mcu_y;
 8001366:	e9c4 2b22 	strd	r2, fp, [r4, #136]	; 0x88
  mcu_x++;
 800136a:	3201      	adds	r2, #1
  if (mcu_x == image_info.m_MCUSPerRow) {
 800136c:	429a      	cmp	r2, r3
  mcu_x++;
 800136e:	6362      	str	r2, [r4, #52]	; 0x34
    mcu_x = 0;
 8001370:	bf01      	itttt	eq
 8001372:	2300      	moveq	r3, #0
 8001374:	6363      	streq	r3, [r4, #52]	; 0x34
    mcu_y++;
 8001376:	f10b 0301 	addeq.w	r3, fp, #1
 800137a:	63a3      	streq	r3, [r4, #56]	; 0x38
  if (decode_mcu() == -1)
 800137c:	f7ff fed6 	bl	800112c <_ZN11JPEGDecoder10decode_mcuEv>
 8001380:	3001      	adds	r0, #1
  return 1;
 8001382:	f04f 0001 	mov.w	r0, #1
    is_available = 0;
 8001386:	bf04      	itt	eq
 8001388:	2300      	moveq	r3, #0
 800138a:	6323      	streq	r3, [r4, #48]	; 0x30
 800138c:	e753      	b.n	8001236 <_ZN11JPEGDecoder4readEv+0x1e>
 800138e:	bf00      	nop
 8001390:	fffff800 	.word	0xfffff800

08001394 <_GLOBAL__sub_I_JpegDec>:
JPEGDecoder JpegDec;
 8001394:	4801      	ldr	r0, [pc, #4]	; (800139c <_GLOBAL__sub_I_JpegDec+0x8>)
 8001396:	f7ff be8d 	b.w	80010b4 <_ZN11JPEGDecoderC1Ev>
 800139a:	bf00      	nop
 800139c:	200000ac 	.word	0x200000ac

080013a0 <_GLOBAL__sub_D_JpegDec>:
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <_GLOBAL__sub_D_JpegDec+0x8>)
 80013a2:	f7ff be90 	b.w	80010c6 <_ZN11JPEGDecoderD1Ev>
 80013a6:	bf00      	nop
 80013a8:	200000ac 	.word	0x200000ac

080013ac <_Z10flush_fifov>:
uint8_t imgBuf[5120];
uint32_t imgLength;
bool is_header = false;
static byte m_fmt = JPEG;

void flush_fifo(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 80013ac:	2101      	movs	r1, #1
 80013ae:	2004      	movs	r0, #4
 80013b0:	f000 ba54 	b.w	800185c <_Z11camWriteReghh>

080013b4 <_Z13start_capturev>:

void clear_fifo_flag(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }

void start_capture(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_START_MASK); }
 80013b4:	2102      	movs	r1, #2
 80013b6:	2004      	movs	r0, #4
 80013b8:	f000 ba50 	b.w	800185c <_Z11camWriteReghh>

080013bc <_Z20OV2640_set_JPEG_sizeh>:
  HAL_Delay(100);
  return camrror;
}

void OV2640_set_JPEG_size(uint8_t size) {
  switch (size) {
 80013bc:	2808      	cmp	r0, #8
 80013be:	d80b      	bhi.n	80013d8 <_Z20OV2640_set_JPEG_sizeh+0x1c>
 80013c0:	e8df f000 	tbb	[pc, r0]
 80013c4:	0c0a0805 	.word	0x0c0a0805
 80013c8:	1412100e 	.word	0x1412100e
 80013cc:	16          	.byte	0x16
 80013cd:	00          	.byte	0x00
  case OV2640_160x120:
    wrSensorRegs8_8(OV2640_160x120_JPEG);
 80013ce:	4809      	ldr	r0, [pc, #36]	; (80013f4 <_Z20OV2640_set_JPEG_sizeh+0x38>)
    break;
  case OV2640_1280x1024:
    wrSensorRegs8_8(OV2640_1280x1024_JPEG);
    break;
  case OV2640_1600x1200:
    wrSensorRegs8_8(OV2640_1600x1200_JPEG);
 80013d0:	f000 b9ce 	b.w	8001770 <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_176x144_JPEG);
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <_Z20OV2640_set_JPEG_sizeh+0x3c>)
 80013d6:	e7fb      	b.n	80013d0 <_Z20OV2640_set_JPEG_sizeh+0x14>
    wrSensorRegs8_8(OV2640_320x240_JPEG);
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <_Z20OV2640_set_JPEG_sizeh+0x40>)
 80013da:	e7f9      	b.n	80013d0 <_Z20OV2640_set_JPEG_sizeh+0x14>
    wrSensorRegs8_8(OV2640_352x288_JPEG);
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <_Z20OV2640_set_JPEG_sizeh+0x44>)
 80013de:	e7f7      	b.n	80013d0 <_Z20OV2640_set_JPEG_sizeh+0x14>
    wrSensorRegs8_8(OV2640_640x480_JPEG);
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <_Z20OV2640_set_JPEG_sizeh+0x48>)
 80013e2:	e7f5      	b.n	80013d0 <_Z20OV2640_set_JPEG_sizeh+0x14>
    wrSensorRegs8_8(OV2640_800x600_JPEG);
 80013e4:	4808      	ldr	r0, [pc, #32]	; (8001408 <_Z20OV2640_set_JPEG_sizeh+0x4c>)
 80013e6:	e7f3      	b.n	80013d0 <_Z20OV2640_set_JPEG_sizeh+0x14>
    wrSensorRegs8_8(OV2640_1024x768_JPEG);
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <_Z20OV2640_set_JPEG_sizeh+0x50>)
 80013ea:	e7f1      	b.n	80013d0 <_Z20OV2640_set_JPEG_sizeh+0x14>
    wrSensorRegs8_8(OV2640_1280x1024_JPEG);
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <_Z20OV2640_set_JPEG_sizeh+0x54>)
 80013ee:	e7ef      	b.n	80013d0 <_Z20OV2640_set_JPEG_sizeh+0x14>
    wrSensorRegs8_8(OV2640_1600x1200_JPEG);
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <_Z20OV2640_set_JPEG_sizeh+0x58>)
 80013f2:	e7ed      	b.n	80013d0 <_Z20OV2640_set_JPEG_sizeh+0x14>
 80013f4:	080180e8 	.word	0x080180e8
 80013f8:	08018138 	.word	0x08018138
 80013fc:	08018188 	.word	0x08018188
 8001400:	080181d8 	.word	0x080181d8
 8001404:	08018228 	.word	0x08018228
 8001408:	0801827a 	.word	0x0801827a
 800140c:	080182cc 	.word	0x080182cc
 8001410:	0801831a 	.word	0x0801831a
 8001414:	0801836c 	.word	0x0801836c

08001418 <_Z10initCamerav>:
int initCamera() {
 8001418:	b538      	push	{r3, r4, r5, lr}
  int camrror = camSPISetup();
 800141a:	f000 fabd 	bl	8001998 <_Z11camSPISetupv>
 800141e:	4604      	mov	r4, r0
  camrror += camI2CSetup();
 8001420:	f000 f9f8 	bl	8001814 <_Z11camI2CSetupv>
  wrSensorReg8_8(0xff, 0x01);
 8001424:	2101      	movs	r1, #1
  camrror += camI2CSetup();
 8001426:	4404      	add	r4, r0
  wrSensorReg8_8(0xff, 0x01);
 8001428:	20ff      	movs	r0, #255	; 0xff
 800142a:	f000 f98b 	bl	8001744 <_Z14wrSensorReg8_8hh>
  wrSensorReg8_8(0x12, 0x80);
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	2012      	movs	r0, #18
 8001432:	f000 f987 	bl	8001744 <_Z14wrSensorReg8_8hh>
  HAL_Delay(100);
 8001436:	2064      	movs	r0, #100	; 0x64
 8001438:	f003 fd8c 	bl	8004f54 <HAL_Delay>
  if (m_fmt == JPEG) {
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_Z10initCamerav+0x74>)
 800143e:	781d      	ldrb	r5, [r3, #0]
 8001440:	2d01      	cmp	r5, #1
 8001442:	d11e      	bne.n	8001482 <_Z10initCamerav+0x6a>
    wrSensorRegs8_8(OV2640_JPEG_INIT);
 8001444:	4812      	ldr	r0, [pc, #72]	; (8001490 <_Z10initCamerav+0x78>)
 8001446:	f000 f993 	bl	8001770 <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_YUV422);
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <_Z10initCamerav+0x7c>)
 800144c:	f000 f990 	bl	8001770 <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_JPEG);
 8001450:	4811      	ldr	r0, [pc, #68]	; (8001498 <_Z10initCamerav+0x80>)
 8001452:	f000 f98d 	bl	8001770 <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorReg8_8(0xff, 0x01);
 8001456:	4629      	mov	r1, r5
 8001458:	20ff      	movs	r0, #255	; 0xff
 800145a:	f000 f973 	bl	8001744 <_Z14wrSensorReg8_8hh>
    wrSensorReg8_8(0x15, 0x00);
 800145e:	2100      	movs	r1, #0
 8001460:	2015      	movs	r0, #21
 8001462:	f000 f96f 	bl	8001744 <_Z14wrSensorReg8_8hh>
    wrSensorRegs8_8(OV2640_320x240_JPEG);
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <_Z10initCamerav+0x84>)
 8001468:	f000 f982 	bl	8001770 <_Z15wrSensorRegs8_8PK10sensor_reg>
    HAL_Delay(100);
 800146c:	2064      	movs	r0, #100	; 0x64
 800146e:	f003 fd71 	bl	8004f54 <HAL_Delay>
  OV2640_set_JPEG_size(OV2640_160x120);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ffa2 	bl	80013bc <_Z20OV2640_set_JPEG_sizeh>
  HAL_Delay(100);
 8001478:	2064      	movs	r0, #100	; 0x64
 800147a:	f003 fd6b 	bl	8004f54 <HAL_Delay>
}
 800147e:	4620      	mov	r0, r4
 8001480:	bd38      	pop	{r3, r4, r5, pc}
    wrSensorRegs8_8(OV2640_QVGA);
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <_Z10initCamerav+0x88>)
 8001484:	f000 f974 	bl	8001770 <_Z15wrSensorRegs8_8PK10sensor_reg>
 8001488:	e7f3      	b.n	8001472 <_Z10initCamerav+0x5a>
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000
 8001490:	08017f6a 	.word	0x08017f6a
 8001494:	08017f56 	.word	0x08017f56
 8001498:	08017dc0 	.word	0x08017dc0
 800149c:	08018188 	.word	0x08018188
 80014a0:	08017dd2 	.word	0x08017dd2

080014a4 <_Z16read_fifo_lengthv>:
    wrSensorRegs8_8(OV2640_320x240_JPEG);
    break;
  }
}

uint32_t read_fifo_length(void) {
 80014a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t len1, len2, len3, length = 0;
  len1 = camReadReg(FIFO_SIZE1);
 80014a6:	2042      	movs	r0, #66	; 0x42
 80014a8:	f000 fa3e 	bl	8001928 <_Z10camReadRegh>
 80014ac:	4604      	mov	r4, r0
  len2 = camReadReg(FIFO_SIZE2);
 80014ae:	2043      	movs	r0, #67	; 0x43
 80014b0:	f000 fa3a 	bl	8001928 <_Z10camReadRegh>
 80014b4:	4605      	mov	r5, r0
  len3 = camReadReg(FIFO_SIZE3) & 0x7f;
 80014b6:	2044      	movs	r0, #68	; 0x44
 80014b8:	f000 fa36 	bl	8001928 <_Z10camReadRegh>
 80014bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 80014c0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  return length;
}
 80014c4:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 80014c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080014cc <_Z22DecodeandProcessAndRGBiiPaPti>:
  }
}

int DecodeandProcessAndRGB(int image_width, int image_height,
                           int8_t *image_data, uint16_t *lcd_data,
                           int scale_factor) {
 80014cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d0:	b08f      	sub	sp, #60	; 0x3c


  JpegDec.decodeArray(imgBuf, imgLength);
 80014d2:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001694 <_Z22DecodeandProcessAndRGBiiPaPti+0x1c8>
                           int scale_factor) {
 80014d6:	4605      	mov	r5, r0
 80014d8:	460e      	mov	r6, r1
 80014da:	930c      	str	r3, [sp, #48]	; 0x30
 80014dc:	4617      	mov	r7, r2
  JpegDec.decodeArray(imgBuf, imgLength);
 80014de:	4b6b      	ldr	r3, [pc, #428]	; (800168c <_Z22DecodeandProcessAndRGBiiPaPti+0x1c0>)
 80014e0:	4640      	mov	r0, r8
 80014e2:	496b      	ldr	r1, [pc, #428]	; (8001690 <_Z22DecodeandProcessAndRGBiiPaPti+0x1c4>)
 80014e4:	681a      	ldr	r2, [r3, #0]
                           int scale_factor) {
 80014e6:	9c18      	ldr	r4, [sp, #96]	; 0x60
  JpegDec.decodeArray(imgBuf, imgLength);
 80014e8:	f7ff fe7e 	bl	80011e8 <_ZN11JPEGDecoder11decodeArrayEPKhm>

  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
 80014ec:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;

  const int skip_x_mcus = JpegDec.MCUSPerRow - keep_x_mcus;

  const int skip_start_x_mcus = skip_x_mcus / 2;
 80014f0:	2002      	movs	r0, #2
  const int skip_x_mcus = JpegDec.MCUSPerRow - keep_x_mcus;
 80014f2:	f8d8 1074 	ldr.w	r1, [r8, #116]	; 0x74
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 80014f6:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
 80014fa:	fb95 f2f2 	sdiv	r2, r5, r2
  const int skip_x_mcus = JpegDec.MCUSPerRow - keep_x_mcus;
 80014fe:	1a89      	subs	r1, r1, r2
  const int skip_start_x_mcus = skip_x_mcus / 2;
 8001500:	fb91 f1f0 	sdiv	r1, r1, r0
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 8001504:	fb96 f3f3 	sdiv	r3, r6, r3

  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 8001508:	440a      	add	r2, r1
  const int skip_start_x_mcus = skip_x_mcus / 2;
 800150a:	9104      	str	r1, [sp, #16]
  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 800150c:	9209      	str	r2, [sp, #36]	; 0x24

  const int skip_y_mcus = JpegDec.MCUSPerCol - keep_y_mcus;
 800150e:	f8d8 2078 	ldr.w	r2, [r8, #120]	; 0x78
 8001512:	1ad2      	subs	r2, r2, r3
  const int skip_start_y_mcus = skip_y_mcus / 2;
 8001514:	fb92 f2f0 	sdiv	r2, r2, r0
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;
 8001518:	4413      	add	r3, r2
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800151a:	9205      	str	r2, [sp, #20]
  uint16_t color;

  for (int i = 0;
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
       i++) {
	  image_data[i] = -128;
 800151c:	2280      	movs	r2, #128	; 0x80
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;
 800151e:	930a      	str	r3, [sp, #40]	; 0x28
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 8001520:	fb96 f6f4 	sdiv	r6, r6, r4
 8001524:	fb95 f3f4 	sdiv	r3, r5, r4
 8001528:	435e      	muls	r6, r3
 800152a:	9307      	str	r3, [sp, #28]
 800152c:	463b      	mov	r3, r7
 800152e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8001532:	1bd9      	subs	r1, r3, r7
 8001534:	428e      	cmp	r6, r1
 8001536:	f300 808b 	bgt.w	8001650 <_Z22DecodeandProcessAndRGBiiPaPti+0x184>
 800153a:	006b      	lsls	r3, r5, #1
  }

  while (JpegDec.read()) {
 800153c:	4e55      	ldr	r6, [pc, #340]	; (8001694 <_Z22DecodeandProcessAndRGBiiPaPti+0x1c8>)
 800153e:	930d      	str	r3, [sp, #52]	; 0x34
 8001540:	442b      	add	r3, r5
 8001542:	930b      	str	r3, [sp, #44]	; 0x2c
 8001544:	4853      	ldr	r0, [pc, #332]	; (8001694 <_Z22DecodeandProcessAndRGBiiPaPti+0x1c8>)
 8001546:	f7ff fe67 	bl	8001218 <_ZN11JPEGDecoder4readEv>
 800154a:	2800      	cmp	r0, #0
 800154c:	f000 809a 	beq.w	8001684 <_Z22DecodeandProcessAndRGBiiPaPti+0x1b8>


    if (JpegDec.MCUy < skip_start_y_mcus) {
 8001550:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8001554:	9b05      	ldr	r3, [sp, #20]
 8001556:	4299      	cmp	r1, r3
 8001558:	dbf4      	blt.n	8001544 <_Z22DecodeandProcessAndRGBiiPaPti+0x78>
      continue;
    }

    if (JpegDec.MCUx < skip_start_x_mcus ||
 800155a:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800155e:	9b04      	ldr	r3, [sp, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbef      	blt.n	8001544 <_Z22DecodeandProcessAndRGBiiPaPti+0x78>
 8001564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001566:	429a      	cmp	r2, r3
 8001568:	daec      	bge.n	8001544 <_Z22DecodeandProcessAndRGBiiPaPti+0x78>
        JpegDec.MCUx >= skip_end_x_mcu_index) {
      continue;
    }

    if (JpegDec.MCUy >= skip_end_y_mcu_index) {
 800156a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800156c:	4299      	cmp	r1, r3
 800156e:	dae9      	bge.n	8001544 <_Z22DecodeandProcessAndRGBiiPaPti+0x78>
      continue;
    }

    pImg = JpegDec.pImage;
 8001570:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8001572:	9303      	str	r3, [sp, #12]

    int relative_mcu_x = JpegDec.MCUx - skip_start_x_mcus;
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;
 8001574:	9b05      	ldr	r3, [sp, #20]
 8001576:	1ac9      	subs	r1, r1, r3

    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 8001578:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800157c:	434b      	muls	r3, r1
 800157e:	9306      	str	r3, [sp, #24]
    int relative_mcu_x = JpegDec.MCUx - skip_start_x_mcus;
 8001580:	9b04      	ldr	r3, [sp, #16]
 8001582:	1ad2      	subs	r2, r2, r3
    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 8001584:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8001588:	4353      	muls	r3, r2
 800158a:	9308      	str	r3, [sp, #32]
 800158c:	9a08      	ldr	r2, [sp, #32]
 800158e:	9b06      	ldr	r3, [sp, #24]
 8001590:	fb05 2303 	mla	r3, r5, r3, r2
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 8001594:	9a06      	ldr	r2, [sp, #24]
 8001596:	0059      	lsls	r1, r3, #1
 8001598:	440b      	add	r3, r1
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80015a0:	18cb      	adds	r3, r1, r3
 80015a2:	9302      	str	r3, [sp, #8]

    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 80015a4:	9b06      	ldr	r3, [sp, #24]
 80015a6:	1ad0      	subs	r0, r2, r3
 80015a8:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80015ac:	4283      	cmp	r3, r0
 80015ae:	ddc9      	ble.n	8001544 <_Z22DecodeandProcessAndRGBiiPaPti+0x78>

      int current_y = y_origin + mcu_row;
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 80015b6:	4298      	cmp	r0, r3
 80015b8:	dd4d      	ble.n	8001656 <_Z22DecodeandProcessAndRGBiiPaPti+0x18a>

        color = *pImg++;
 80015ba:	9803      	ldr	r0, [sp, #12]
        int current_x = x_origin + mcu_col;

        int index = (current_y * image_width) + current_x;
        int a_index = index * 3;

        if (current_y >= 120)
 80015bc:	2a77      	cmp	r2, #119	; 0x77
        color = *pImg++;
 80015be:	f100 0002 	add.w	r0, r0, #2
 80015c2:	9003      	str	r0, [sp, #12]
        if (current_y >= 120)
 80015c4:	dc5c      	bgt.n	8001680 <_Z22DecodeandProcessAndRGBiiPaPti+0x1b4>
        color = *pImg++;
 80015c6:	f830 ac02 	ldrh.w	sl, [r0, #-2]
          continue;

        lcd_data[index] = color;
        if (scale_factor == 1) {
 80015ca:	2c01      	cmp	r4, #1
 80015cc:	9808      	ldr	r0, [sp, #32]
        r = ((color & 0xF800) >> 11) * 8;
 80015ce:	ea4f 2cda 	mov.w	ip, sl, lsr #11
        g = ((color & 0x07E0) >> 5) * 4;
 80015d2:	f3ca 1e45 	ubfx	lr, sl, #5, #6
        b = ((color & 0x001F) >> 0) * 8;
 80015d6:	f00a 081f 	and.w	r8, sl, #31
        lcd_data[index] = color;
 80015da:	9902      	ldr	r1, [sp, #8]
        r = ((color & 0xF800) >> 11) * 8;
 80015dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80015e0:	eb03 0900 	add.w	r9, r3, r0
        g = ((color & 0x07E0) >> 5) * 4;
 80015e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        lcd_data[index] = color;
 80015e8:	f821 a013 	strh.w	sl, [r1, r3, lsl #1]
        b = ((color & 0x001F) >> 0) * 8;
 80015ec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
        if (scale_factor == 1) {
 80015f0:	d13b      	bne.n	800166a <_Z22DecodeandProcessAndRGBiiPaPti+0x19e>
          image_data[index * 3] = r - 128;
 80015f2:	9901      	ldr	r1, [sp, #4]
 80015f4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80015f8:	f1ac 0b80 	sub.w	fp, ip, #128	; 0x80
 80015fc:	f801 b000 	strb.w	fp, [r1, r0]
 8001600:	4408      	add	r0, r1
          image_data[index * 3 + 1] = g - 128;
 8001602:	f1ae 0b80 	sub.w	fp, lr, #128	; 0x80
          image_data[index * 3 + 2] = b - 128;
          lcd_data[index] = color;
 8001606:	9902      	ldr	r1, [sp, #8]
          image_data[index * 3 + 1] = g - 128;
 8001608:	f880 b001 	strb.w	fp, [r0, #1]
          image_data[index * 3 + 2] = b - 128;
 800160c:	f1a8 0b80 	sub.w	fp, r8, #128	; 0x80
 8001610:	f880 b002 	strb.w	fp, [r0, #2]
          lcd_data[index] = color;
 8001614:	f821 a013 	strh.w	sl, [r1, r3, lsl #1]
        }
        if (scale_factor != 1 &&
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
          continue;

        if (image_width % scale_factor != 0)
 8001618:	fb95 f0f4 	sdiv	r0, r5, r4
 800161c:	fb04 5010 	mls	r0, r4, r0, r5
 8001620:	bb70      	cbnz	r0, 8001680 <_Z22DecodeandProcessAndRGBiiPaPti+0x1b4>
          continue;
        int width = image_width;
        if (width > 120)
          width = 120;
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 8001622:	9907      	ldr	r1, [sp, #28]
                     current_x / scale_factor;

        image_data[Iindex * 3] = r - 128;
 8001624:	f1ac 0c80 	sub.w	ip, ip, #128	; 0x80
        image_data[Iindex * 3 + 1] = g - 128;
 8001628:	f1ae 0e80 	sub.w	lr, lr, #128	; 0x80
        image_data[Iindex * 3 + 2] = b - 128;
 800162c:	f1a8 0880 	sub.w	r8, r8, #128	; 0x80
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 8001630:	fb92 f0f4 	sdiv	r0, r2, r4
                     current_x / scale_factor;
 8001634:	fb99 f9f4 	sdiv	r9, r9, r4
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 8001638:	fb01 9900 	mla	r9, r1, r0, r9
        image_data[Iindex * 3] = r - 128;
 800163c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8001640:	f807 c009 	strb.w	ip, [r7, r9]
        image_data[Iindex * 3 + 1] = g - 128;
 8001644:	44b9      	add	r9, r7
 8001646:	f889 e001 	strb.w	lr, [r9, #1]
        image_data[Iindex * 3 + 2] = b - 128;
 800164a:	f889 8002 	strb.w	r8, [r9, #2]
 800164e:	e017      	b.n	8001680 <_Z22DecodeandProcessAndRGBiiPaPti+0x1b4>
	  image_data[i] = -128;
 8001650:	f803 2b01 	strb.w	r2, [r3], #1
  for (int i = 0;
 8001654:	e76d      	b.n	8001532 <_Z22DecodeandProcessAndRGBiiPaPti+0x66>
 8001656:	9b01      	ldr	r3, [sp, #4]
 8001658:	3201      	adds	r2, #1
 800165a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800165c:	440b      	add	r3, r1
 800165e:	9902      	ldr	r1, [sp, #8]
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001664:	4419      	add	r1, r3
 8001666:	9102      	str	r1, [sp, #8]
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 8001668:	e79c      	b.n	80015a4 <_Z22DecodeandProcessAndRGBiiPaPti+0xd8>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800166a:	fb92 f0f4 	sdiv	r0, r2, r4
 800166e:	fb04 2010 	mls	r0, r4, r0, r2
        if (scale_factor != 1 &&
 8001672:	b928      	cbnz	r0, 8001680 <_Z22DecodeandProcessAndRGBiiPaPti+0x1b4>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 8001674:	fb99 f0f4 	sdiv	r0, r9, r4
 8001678:	fb04 9010 	mls	r0, r4, r0, r9
 800167c:	2800      	cmp	r0, #0
 800167e:	d0cb      	beq.n	8001618 <_Z22DecodeandProcessAndRGBiiPaPti+0x14c>
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 8001680:	3301      	adds	r3, #1
 8001682:	e796      	b.n	80015b2 <_Z22DecodeandProcessAndRGBiiPaPti+0xe6>
      }
    }
  }
}
 8001684:	2000      	movs	r0, #0
 8001686:	b00f      	add	sp, #60	; 0x3c
 8001688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800168c:	2000153c 	.word	0x2000153c
 8001690:	2000013c 	.word	0x2000013c
 8001694:	200000ac 	.word	0x200000ac

08001698 <_Z12StartCapturev>:
  read_fifo_burst();

  return 0;
}

int StartCapture() {
 8001698:	b508      	push	{r3, lr}

  flush_fifo();
 800169a:	f7ff fe87 	bl	80013ac <_Z10flush_fifov>
  HAL_Delay(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f003 fc58 	bl	8004f54 <HAL_Delay>
  clear_fifo_flag();
 80016a4:	f7ff fe82 	bl	80013ac <_Z10flush_fifov>
  HAL_Delay(1);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f003 fc53 	bl	8004f54 <HAL_Delay>

  start_capture();
 80016ae:	f7ff fe81 	bl	80013b4 <_Z13start_capturev>

  return 0;
}
 80016b2:	2000      	movs	r0, #0
 80016b4:	bd08      	pop	{r3, pc}
	...

080016b8 <_Z15read_fifo_burstv>:
  read_fifo_burst();

  return 0;
}

uint8_t read_fifo_burst() {
 80016b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t length = read_fifo_length();
 80016ba:	f7ff fef3 	bl	80014a4 <_Z16read_fifo_lengthv>
  if (length >= MAX_FIFO_SIZE) {

    return 0;
  }
  if (length == 0) {
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_Z15read_fifo_burstv+0x5c>)
 80016c0:	1e44      	subs	r4, r0, #1
  uint32_t length = read_fifo_length();
 80016c2:	4605      	mov	r5, r0
  if (length == 0) {
 80016c4:	429c      	cmp	r4, r3
 80016c6:	d822      	bhi.n	800170e <_Z15read_fifo_burstv+0x56>

    return 0;
  }
  ARDUCAM_CS_LOW;
 80016c8:	2200      	movs	r2, #0
 80016ca:	2101      	movs	r1, #1
 80016cc:	4812      	ldr	r0, [pc, #72]	; (8001718 <_Z15read_fifo_burstv+0x60>)
 80016ce:	f003 ffb5 	bl	800563c <HAL_GPIO_WritePin>
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 80016d2:	203c      	movs	r0, #60	; 0x3c
 80016d4:	f000 f8f6 	bl	80018c4 <_Z11camTransferh>
  int index;

  camTransfers(imgBuf, length);
 80016d8:	4629      	mov	r1, r5
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 80016da:	f88d 0007 	strb.w	r0, [sp, #7]
  camTransfers(imgBuf, length);
 80016de:	480f      	ldr	r0, [pc, #60]	; (800171c <_Z15read_fifo_burstv+0x64>)
 80016e0:	f000 f904 	bl	80018ec <_Z12camTransfersPhm>

  for (index = length - 1; index >= 0; index--) {
 80016e4:	4623      	mov	r3, r4
    if (imgBuf[index] != 0) {
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <_Z15read_fifo_burstv+0x64>)
 80016e8:	5c99      	ldrb	r1, [r3, r2]
 80016ea:	b911      	cbnz	r1, 80016f2 <_Z15read_fifo_burstv+0x3a>
  for (index = length - 1; index >= 0; index--) {
 80016ec:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80016f0:	d2fa      	bcs.n	80016e8 <_Z15read_fifo_burstv+0x30>
      break;
    }
  }

  imgLength = index + 1;
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <_Z15read_fifo_burstv+0x68>)

  ARDUCAM_CS_HIGH;
 80016f6:	4808      	ldr	r0, [pc, #32]	; (8001718 <_Z15read_fifo_burstv+0x60>)
  imgLength = index + 1;
 80016f8:	6013      	str	r3, [r2, #0]
  ARDUCAM_CS_HIGH;
 80016fa:	2201      	movs	r2, #1
 80016fc:	4611      	mov	r1, r2
 80016fe:	f003 ff9d 	bl	800563c <HAL_GPIO_WritePin>

  is_header = false;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_Z15read_fifo_burstv+0x6c>)
 8001704:	2200      	movs	r2, #0
  return 1;
 8001706:	2001      	movs	r0, #1
  is_header = false;
 8001708:	701a      	strb	r2, [r3, #0]
}
 800170a:	b003      	add	sp, #12
 800170c:	bd30      	pop	{r4, r5, pc}
    return 0;
 800170e:	2000      	movs	r0, #0
 8001710:	e7fb      	b.n	800170a <_Z15read_fifo_burstv+0x52>
 8001712:	bf00      	nop
 8001714:	0005fffd 	.word	0x0005fffd
 8001718:	40022000 	.word	0x40022000
 800171c:	2000013c 	.word	0x2000013c
 8001720:	2000153c 	.word	0x2000153c
 8001724:	20001540 	.word	0x20001540

08001728 <_Z11ReadCapturev>:
int ReadCapture() {
 8001728:	b508      	push	{r3, lr}
  while (!camReadRegBit(ARDUCHIP_TRIG, CAP_DONE_MASK)) {
 800172a:	2108      	movs	r1, #8
 800172c:	2041      	movs	r0, #65	; 0x41
 800172e:	f000 f969 	bl	8001a04 <_Z13camReadRegBithh>
 8001732:	2800      	cmp	r0, #0
 8001734:	d0f9      	beq.n	800172a <_Z11ReadCapturev+0x2>
  clear_fifo_flag();
 8001736:	f7ff fe39 	bl	80013ac <_Z10flush_fifov>
  read_fifo_burst();
 800173a:	f7ff ffbd 	bl	80016b8 <_Z15read_fifo_burstv>
}
 800173e:	2000      	movs	r0, #0
 8001740:	bd08      	pop	{r3, pc}
	...

08001744 <_Z14wrSensorReg8_8hh>:

  return true;
}

#define TEST
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 8001744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx_buffer[2];
  tx_buffer[0] = regID & 0xFF;
  tx_buffer[1] = regDat & 0xFF;
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 8001746:	230a      	movs	r3, #10
  tx_buffer[0] = regID & 0xFF;
 8001748:	f88d 000c 	strb.w	r0, [sp, #12]
  tx_buffer[1] = regDat & 0xFF;
 800174c:	f88d 100d 	strb.w	r1, [sp, #13]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 8001750:	aa03      	add	r2, sp, #12
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2160      	movs	r1, #96	; 0x60
 8001756:	2302      	movs	r3, #2
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <_Z14wrSensorReg8_8hh+0x28>)
 800175a:	f004 f8db 	bl	8005914 <HAL_I2C_Master_Transmit>
                          sizeof(tx_buffer), SSCB_TIMEOUT);

  HAL_Delay(1);
 800175e:	2001      	movs	r0, #1
 8001760:	f003 fbf8 	bl	8004f54 <HAL_Delay>

  return 1;
}
 8001764:	2001      	movs	r0, #1
 8001766:	b005      	add	sp, #20
 8001768:	f85d fb04 	ldr.w	pc, [sp], #4
 800176c:	20001544 	.word	0x20001544

08001770 <_Z15wrSensorRegs8_8PK10sensor_reg>:

int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 8001770:	b570      	push	{r4, r5, r6, lr}
  const struct sensor_reg *next = reglist;
  uint8_t reg_addr = 0;
  uint8_t reg_val = 0;
 8001772:	2400      	movs	r4, #0
int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 8001774:	4605      	mov	r5, r0
  uint8_t reg_addr = 0;
 8001776:	4626      	mov	r6, r4
  while ((reg_addr != 0xff) | (reg_val != 0xff)) {
 8001778:	2eff      	cmp	r6, #255	; 0xff
 800177a:	f105 0502 	add.w	r5, r5, #2
 800177e:	d101      	bne.n	8001784 <_Z15wrSensorRegs8_8PK10sensor_reg+0x14>
 8001780:	2cff      	cmp	r4, #255	; 0xff
 8001782:	d008      	beq.n	8001796 <_Z15wrSensorRegs8_8PK10sensor_reg+0x26>
    reg_addr = next->reg;
 8001784:	f815 6c02 	ldrb.w	r6, [r5, #-2]
    reg_val = next->val;
 8001788:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    wrSensorReg8_8(reg_addr, reg_val);
 800178c:	4630      	mov	r0, r6
 800178e:	4621      	mov	r1, r4
 8001790:	f7ff ffd8 	bl	8001744 <_Z14wrSensorReg8_8hh>
  while ((reg_addr != 0xff) | (reg_val != 0xff)) {
 8001794:	e7f0      	b.n	8001778 <_Z15wrSensorRegs8_8PK10sensor_reg+0x8>
    next++;
  }

  return 1;
}
 8001796:	2001      	movs	r0, #1
 8001798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800179c <_Z14rdSensorReg8_8hPh>:

int rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
 800179c:	b530      	push	{r4, r5, lr}
 800179e:	b085      	sub	sp, #20
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 80017a0:	240a      	movs	r4, #10
int rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
 80017a2:	460d      	mov	r5, r1
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 80017a4:	2301      	movs	r3, #1
int rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
 80017a6:	aa04      	add	r2, sp, #16
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 80017a8:	2160      	movs	r1, #96	; 0x60
int rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
 80017aa:	f802 0d01 	strb.w	r0, [r2, #-1]!
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 80017ae:	9400      	str	r4, [sp, #0]
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <_Z14rdSensorReg8_8hPh+0x44>)
 80017b2:	f004 f8af 	bl	8005914 <HAL_I2C_Master_Transmit>
 80017b6:	b110      	cbz	r0, 80017be <_Z14rdSensorReg8_8hPh+0x22>
                              SSCB_TIMEOUT) != HAL_OK)
    return false;
 80017b8:	2000      	movs	r0, #0
                             SSCB_TIMEOUT) != HAL_OK)
    return false;

  HAL_Delay(1);
  return 1;
}
 80017ba:	b005      	add	sp, #20
 80017bc:	bd30      	pop	{r4, r5, pc}
  HAL_Delay(1);
 80017be:	2001      	movs	r0, #1
 80017c0:	f003 fbc8 	bl	8004f54 <HAL_Delay>
  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 80017c4:	9400      	str	r4, [sp, #0]
 80017c6:	2301      	movs	r3, #1
 80017c8:	462a      	mov	r2, r5
 80017ca:	2161      	movs	r1, #97	; 0x61
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <_Z14rdSensorReg8_8hPh+0x44>)
 80017ce:	f004 f933 	bl	8005a38 <HAL_I2C_Master_Receive>
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d1f0      	bne.n	80017b8 <_Z14rdSensorReg8_8hPh+0x1c>
  HAL_Delay(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f003 fbbc 	bl	8004f54 <HAL_Delay>
  return 1;
 80017dc:	2001      	movs	r0, #1
 80017de:	e7ec      	b.n	80017ba <_Z14rdSensorReg8_8hPh+0x1e>
 80017e0:	20001544 	.word	0x20001544

080017e4 <_Z15camI2CErrorTestv>:
int camI2CErrorTest() {
 80017e4:	b507      	push	{r0, r1, r2, lr}
  wrSensorReg8_8(0xff, 0x01);
 80017e6:	2101      	movs	r1, #1
 80017e8:	20ff      	movs	r0, #255	; 0xff
 80017ea:	f7ff ffab 	bl	8001744 <_Z14wrSensorReg8_8hh>
  rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 80017ee:	f10d 0106 	add.w	r1, sp, #6
 80017f2:	200a      	movs	r0, #10
 80017f4:	f7ff ffd2 	bl	800179c <_Z14rdSensorReg8_8hPh>
  rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 80017f8:	f10d 0107 	add.w	r1, sp, #7
 80017fc:	200b      	movs	r0, #11
 80017fe:	f7ff ffcd 	bl	800179c <_Z14rdSensorReg8_8hPh>
  if ((vid != 0x26) && ((pid != 0x41) || (pid != 0x42))) {
 8001802:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8001806:	3826      	subs	r0, #38	; 0x26
 8001808:	bf18      	it	ne
 800180a:	2001      	movne	r0, #1
 800180c:	b003      	add	sp, #12
 800180e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001814 <_Z11camI2CSetupv>:
int camI2CSetup() {
 8001814:	b570      	push	{r4, r5, r6, lr}
  I2cHandle.Init.Timing = I2C_TIMING;
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <_Z11camI2CSetupv+0x3c>)
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001818:	210f      	movs	r1, #15
  I2cHandle.Instance = I2Cx;
 800181a:	4c0e      	ldr	r4, [pc, #56]	; (8001854 <_Z11camI2CSetupv+0x40>)
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800181c:	2500      	movs	r5, #0
  I2cHandle.Init.Timing = I2C_TIMING;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <_Z11camI2CSetupv+0x44>)
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 8001820:	4620      	mov	r0, r4
  I2cHandle.Init.Timing = I2C_TIMING;
 8001822:	e9c4 2300 	strd	r2, r3, [r4]
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001826:	2301      	movs	r3, #1
 8001828:	e9c4 1302 	strd	r1, r3, [r4, #8]
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800182c:	23ff      	movs	r3, #255	; 0xff
  I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182e:	e9c4 5507 	strd	r5, r5, [r4, #28]
  I2cHandle.Init.OwnAddress2 = 0xFF;
 8001832:	e9c4 5304 	strd	r5, r3, [r4, #16]
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 8001836:	f004 f81b 	bl	8005870 <HAL_I2C_Init>
 800183a:	4606      	mov	r6, r0
  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800183c:	4629      	mov	r1, r5
 800183e:	4620      	mov	r0, r4
 8001840:	f004 f98c 	bl	8005b5c <HAL_I2CEx_ConfigAnalogFilter>
  error += camI2CErrorTest();
 8001844:	f7ff ffce 	bl	80017e4 <_Z15camI2CErrorTestv>
}
 8001848:	42ae      	cmp	r6, r5
 800184a:	bf18      	it	ne
 800184c:	3001      	addne	r0, #1
 800184e:	bd70      	pop	{r4, r5, r6, pc}
 8001850:	40005400 	.word	0x40005400
 8001854:	20001544 	.word	0x20001544
 8001858:	40912732 	.word	0x40912732

0800185c <_Z11camWriteReghh>:
  HAL_Delay(100);
  camWriteReg(cmd2[0], cmd2[1]);
  HAL_Delay(100);
}

void camWriteReg(const uint8_t reg, const uint8_t val) {
 800185c:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[2] = {reg | 0x80, val};
  ARDUCAM_CS_LOW;
 800185e:	4c0e      	ldr	r4, [pc, #56]	; (8001898 <_Z11camWriteReghh+0x3c>)
  uint8_t buff[2] = {reg | 0x80, val};
 8001860:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8001864:	f88d 1005 	strb.w	r1, [sp, #5]
  ARDUCAM_CS_LOW;
 8001868:	2200      	movs	r2, #0
  uint8_t buff[2] = {reg | 0x80, val};
 800186a:	f88d 0004 	strb.w	r0, [sp, #4]
  ARDUCAM_CS_LOW;
 800186e:	2101      	movs	r1, #1
 8001870:	4620      	mov	r0, r4
 8001872:	f003 fee3 	bl	800563c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	a901      	add	r1, sp, #4
 800187a:	2202      	movs	r2, #2
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <_Z11camWriteReghh+0x40>)
 800187e:	f005 f954 	bl	8006b2a <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 8001882:	2201      	movs	r2, #1
 8001884:	4620      	mov	r0, r4
 8001886:	4611      	mov	r1, r2
 8001888:	f003 fed8 	bl	800563c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800188c:	2001      	movs	r0, #1
 800188e:	f003 fb61 	bl	8004f54 <HAL_Delay>
}
 8001892:	b002      	add	sp, #8
 8001894:	bd10      	pop	{r4, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	20001590 	.word	0x20001590

080018a0 <_Z11camSPIResetv>:
void camSPIReset() {
 80018a0:	b508      	push	{r3, lr}
  camWriteReg(cmd1[0], cmd1[1]);
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	2007      	movs	r0, #7
 80018a6:	f7ff ffd9 	bl	800185c <_Z11camWriteReghh>
  HAL_Delay(100);
 80018aa:	2064      	movs	r0, #100	; 0x64
 80018ac:	f003 fb52 	bl	8004f54 <HAL_Delay>
  camWriteReg(cmd2[0], cmd2[1]);
 80018b0:	2007      	movs	r0, #7
 80018b2:	2100      	movs	r1, #0
 80018b4:	f7ff ffd2 	bl	800185c <_Z11camWriteReghh>
  HAL_Delay(100);
 80018b8:	2064      	movs	r0, #100	; 0x64
}
 80018ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(100);
 80018be:	f003 bb49 	b.w	8004f54 <HAL_Delay>
	...

080018c4 <_Z11camTransferh>:

uint8_t camTransfer(const uint8_t val) {
 80018c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t ret;
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 80018c6:	2364      	movs	r3, #100	; 0x64
uint8_t camTransfer(const uint8_t val) {
 80018c8:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 80018cc:	f10d 0217 	add.w	r2, sp, #23
 80018d0:	f10d 010f 	add.w	r1, sp, #15
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <_Z11camTransferh+0x24>)
 80018da:	f005 f9e1 	bl	8006ca0 <HAL_SPI_TransmitReceive>

  return ret;
}
 80018de:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018e2:	b007      	add	sp, #28
 80018e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80018e8:	20001590 	.word	0x20001590

080018ec <_Z12camTransfersPhm>:
#define DummyLength 8096
#define DummyVal 0x00
uint8_t dummy[DummyLength];
static int dummyinit = 0;

uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 80018ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!dummyinit) {
 80018ee:	4d0b      	ldr	r5, [pc, #44]	; (800191c <_Z12camTransfersPhm+0x30>)
uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 80018f0:	4602      	mov	r2, r0
  if (!dummyinit) {
 80018f2:	682c      	ldr	r4, [r5, #0]
 80018f4:	b944      	cbnz	r4, 8001908 <_Z12camTransfersPhm+0x1c>
    for (int i = 0; i < DummyLength; i++)
      dummy[i] = DummyVal;
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <_Z12camTransfersPhm+0x34>)
 80018f8:	4620      	mov	r0, r4
 80018fa:	54e0      	strb	r0, [r4, r3]
    for (int i = 0; i < DummyLength; i++)
 80018fc:	3401      	adds	r4, #1
 80018fe:	f5b4 5ffd 	cmp.w	r4, #8096	; 0x1fa0
 8001902:	d1fa      	bne.n	80018fa <_Z12camTransfersPhm+0xe>
    dummyinit = 1;
 8001904:	2301      	movs	r3, #1
 8001906:	602b      	str	r3, [r5, #0]
  }
  uint8_t ret;
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)dummy, (uint8_t *)buf, length,
 8001908:	2364      	movs	r3, #100	; 0x64
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <_Z12camTransfersPhm+0x38>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	b28b      	uxth	r3, r1
 8001910:	4903      	ldr	r1, [pc, #12]	; (8001920 <_Z12camTransfersPhm+0x34>)
 8001912:	f005 f9c5 	bl	8006ca0 <HAL_SPI_TransmitReceive>
                          100);

  return ret;
}
 8001916:	2000      	movs	r0, #0
 8001918:	b003      	add	sp, #12
 800191a:	bd30      	pop	{r4, r5, pc}
 800191c:	200015f4 	.word	0x200015f4
 8001920:	200015f8 	.word	0x200015f8
 8001924:	20001590 	.word	0x20001590

08001928 <_Z10camReadRegh>:

uint8_t camReadReg(const uint8_t reg) {
 8001928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buff[2] = {reg, 0x00};
 800192a:	2200      	movs	r2, #0
  uint8_t rbuff[2];
  ARDUCAM_CS_LOW;
 800192c:	4c0c      	ldr	r4, [pc, #48]	; (8001960 <_Z10camReadRegh+0x38>)
 800192e:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg, 0x00};
 8001930:	f8ad 2008 	strh.w	r2, [sp, #8]
 8001934:	f88d 0008 	strb.w	r0, [sp, #8]
  ARDUCAM_CS_LOW;
 8001938:	4620      	mov	r0, r4
 800193a:	f003 fe7f 	bl	800563c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	aa03      	add	r2, sp, #12
 8001942:	a902      	add	r1, sp, #8
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2302      	movs	r3, #2
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <_Z10camReadRegh+0x3c>)
 800194a:	f005 f9a9 	bl	8006ca0 <HAL_SPI_TransmitReceive>
                          100);
  ARDUCAM_CS_HIGH;
 800194e:	2201      	movs	r2, #1
 8001950:	4620      	mov	r0, r4
 8001952:	4611      	mov	r1, r2
 8001954:	f003 fe72 	bl	800563c <HAL_GPIO_WritePin>

  return rbuff[1];
}
 8001958:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800195c:	b004      	add	sp, #16
 800195e:	bd10      	pop	{r4, pc}
 8001960:	40022000 	.word	0x40022000
 8001964:	20001590 	.word	0x20001590

08001968 <_Z15camSPIErrorTestv>:
int camSPIErrorTest() {
 8001968:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int error = 0;
 800196a:	2500      	movs	r5, #0
  uint8_t val = 0x55;
 800196c:	2455      	movs	r4, #85	; 0x55
    val++;
 800196e:	3401      	adds	r4, #1
    camWriteReg(0x00, val);
 8001970:	2000      	movs	r0, #0
    val++;
 8001972:	b2e4      	uxtb	r4, r4
    camWriteReg(0x00, val);
 8001974:	4621      	mov	r1, r4
 8001976:	f7ff ff71 	bl	800185c <_Z11camWriteReghh>
    rval = camReadReg(0x00);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ffd4 	bl	8001928 <_Z10camReadRegh>
 8001980:	f88d 0007 	strb.w	r0, [sp, #7]
    if (rval != val)
 8001984:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001988:	42a3      	cmp	r3, r4
      error++;
 800198a:	bf18      	it	ne
 800198c:	3501      	addne	r5, #1
  for (int i = 0; i < 10; i++) {
 800198e:	2c5f      	cmp	r4, #95	; 0x5f
 8001990:	d1ed      	bne.n	800196e <_Z15camSPIErrorTestv+0x6>
}
 8001992:	4628      	mov	r0, r5
 8001994:	b003      	add	sp, #12
 8001996:	bd30      	pop	{r4, r5, pc}

08001998 <_Z11camSPISetupv>:
  SpiHandle.Instance = SPIx;
 8001998:	4817      	ldr	r0, [pc, #92]	; (80019f8 <_Z11camSPISetupv+0x60>)
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800199a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  SpiHandle.Instance = SPIx;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <_Z11camSPISetupv+0x64>)
int camSPISetup() {
 80019a0:	b510      	push	{r4, lr}
  SpiHandle.Instance = SPIx;
 80019a2:	6003      	str	r3, [r0, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019a4:	2310      	movs	r3, #16
int camSPISetup() {
 80019a6:	b086      	sub	sp, #24
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a8:	60c2      	str	r2, [r0, #12]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019aa:	61c3      	str	r3, [r0, #28]
  SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80019ac:	2300      	movs	r3, #0
 80019ae:	6083      	str	r3, [r0, #8]
  SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b0:	6283      	str	r3, [r0, #40]	; 0x28
  SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SpiHandle.Init.CRCPolynomial = 7;
 80019ba:	2307      	movs	r3, #7
 80019bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80019be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c2:	6183      	str	r3, [r0, #24]
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80019c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019c8:	6043      	str	r3, [r0, #4]
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 80019ca:	f005 f859 	bl	8006a80 <HAL_SPI_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ce:	2301      	movs	r3, #1
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 80019d0:	4604      	mov	r4, r0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019d2:	a901      	add	r1, sp, #4
 80019d4:	480a      	ldr	r0, [pc, #40]	; (8001a00 <_Z11camSPISetupv+0x68>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80019dc:	2302      	movs	r3, #2
 80019de:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019e0:	f003 fd44 	bl	800546c <HAL_GPIO_Init>
  camSPIReset();
 80019e4:	f7ff ff5c 	bl	80018a0 <_Z11camSPIResetv>
  error += camSPIErrorTest();
 80019e8:	f7ff ffbe 	bl	8001968 <_Z15camSPIErrorTestv>
}
 80019ec:	2c00      	cmp	r4, #0
 80019ee:	bf18      	it	ne
 80019f0:	3001      	addne	r0, #1
 80019f2:	b006      	add	sp, #24
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	bf00      	nop
 80019f8:	20001590 	.word	0x20001590
 80019fc:	40003800 	.word	0x40003800
 8001a00:	40022000 	.word	0x40022000

08001a04 <_Z13camReadRegBithh>:

uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 8001a04:	b510      	push	{r4, lr}
 8001a06:	460c      	mov	r4, r1
  uint8_t temp;
  temp = camReadReg(addr);
 8001a08:	f7ff ff8e 	bl	8001928 <_Z10camReadRegh>
  temp = temp & bit;
  return temp;
}
 8001a0c:	4020      	ands	r0, r4
 8001a0e:	bd10      	pop	{r4, pc}

08001a10 <_Z13loadRGB565LCDmmmmPth>:
#include "stm32f7xx_hal.h"

#define TRANS 128

void loadRGB565LCD(uint32_t x, uint32_t y, uint32_t width, uint32_t height,
                   uint16_t *src, uint8_t resize) {
 8001a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a14:	b087      	sub	sp, #28
 8001a16:	b28c      	uxth	r4, r1
  for (int i = 0; i < height; i++) {
 8001a18:	f04f 0900 	mov.w	r9, #0
                   uint16_t *src, uint8_t resize) {
 8001a1c:	9303      	str	r3, [sp, #12]
 8001a1e:	0053      	lsls	r3, r2, #1
 8001a20:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 8001a24:	b282      	uxth	r2, r0
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001a2a:	fa1f f38a 	uxth.w	r3, sl
 8001a2e:	9204      	str	r2, [sp, #16]
  for (int i = 0; i < height; i++) {
 8001a30:	9a03      	ldr	r2, [sp, #12]
 8001a32:	4591      	cmp	r9, r2
 8001a34:	d029      	beq.n	8001a8a <_Z13loadRGB565LCDmmmmPth+0x7a>
 8001a36:	9a01      	ldr	r2, [sp, #4]
 8001a38:	9d04      	ldr	r5, [sp, #16]
 8001a3a:	18b2      	adds	r2, r6, r2
 8001a3c:	9202      	str	r2, [sp, #8]
    for (int j = 0; j < width; j++) {
 8001a3e:	9a02      	ldr	r2, [sp, #8]
 8001a40:	4296      	cmp	r6, r2
 8001a42:	d01d      	beq.n	8001a80 <_Z13loadRGB565LCDmmmmPth+0x70>

      uint16_t color = src[i * width + j];
 8001a44:	f836 2b02 	ldrh.w	r2, [r6], #2

      for (int ti = 0; ti < resize; ti++) {
 8001a48:	2700      	movs	r7, #0
      uint16_t color = src[i * width + j];
 8001a4a:	9200      	str	r2, [sp, #0]
      for (int ti = 0; ti < resize; ti++) {
 8001a4c:	45ba      	cmp	sl, r7
 8001a4e:	dd14      	ble.n	8001a7a <_Z13loadRGB565LCDmmmmPth+0x6a>
 8001a50:	eb04 0b07 	add.w	fp, r4, r7
        for (int tj = 0; tj < resize; tj++) {
 8001a54:	f04f 0800 	mov.w	r8, #0
 8001a58:	fa1f fb8b 	uxth.w	fp, fp
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 8001a5c:	eb05 0008 	add.w	r0, r5, r8
        for (int tj = 0; tj < resize; tj++) {
 8001a60:	f108 0801 	add.w	r8, r8, #1
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 8001a64:	9a00      	ldr	r2, [sp, #0]
 8001a66:	4659      	mov	r1, fp
 8001a68:	b280      	uxth	r0, r0
 8001a6a:	9305      	str	r3, [sp, #20]
 8001a6c:	f002 fee8 	bl	8004840 <BSP_LCD_DrawPixel>
        for (int tj = 0; tj < resize; tj++) {
 8001a70:	45c2      	cmp	sl, r8
 8001a72:	9b05      	ldr	r3, [sp, #20]
 8001a74:	dcf2      	bgt.n	8001a5c <_Z13loadRGB565LCDmmmmPth+0x4c>
      for (int ti = 0; ti < resize; ti++) {
 8001a76:	3701      	adds	r7, #1
 8001a78:	e7e8      	b.n	8001a4c <_Z13loadRGB565LCDmmmmPth+0x3c>
 8001a7a:	441d      	add	r5, r3
 8001a7c:	b2ad      	uxth	r5, r5
    for (int j = 0; j < width; j++) {
 8001a7e:	e7de      	b.n	8001a3e <_Z13loadRGB565LCDmmmmPth+0x2e>
 8001a80:	441c      	add	r4, r3
  for (int i = 0; i < height; i++) {
 8001a82:	f109 0901 	add.w	r9, r9, #1
 8001a86:	b2a4      	uxth	r4, r4
 8001a88:	e7d2      	b.n	8001a30 <_Z13loadRGB565LCDmmmmPth+0x20>
        }
      }
    }
  }
}
 8001a8a:	b007      	add	sp, #28
 8001a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a90 <_Z13displaystringPcii>:
    for (int j = y1 - 1; j < y2; j++) {
      BSP_LCD_DrawPixel(i, j, black);
    }
}

void displaystring(char *buf, int x, int y) {
 8001a90:	b430      	push	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 8001a92:	b295      	uxth	r5, r2
 8001a94:	2303      	movs	r3, #3
 8001a96:	b28c      	uxth	r4, r1
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	4620      	mov	r0, r4
}
 8001a9e:	bc30      	pop	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 8001aa0:	f002 bf4a 	b.w	8004938 <BSP_LCD_DisplayStringAt>

08001aa4 <_Z8lcdsetupv>:
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
}
#endif

void lcdsetup() {
 8001aa4:	b510      	push	{r4, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001aa6:	2308      	movs	r3, #8
void lcdsetup() {
 8001aa8:	b0a2      	sub	sp, #136	; 0x88
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001aaa:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001aac:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001aae:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ab0:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aba:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001abc:	f004 fc92 	bl	80063e4 <HAL_RCCEx_PeriphCLKConfig>

  BSP_LCD_Init();
 8001ac0:	f003 f85a 	bl	8004b78 <BSP_LCD_Init>

  BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 8001ac4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f002 fe4f 	bl	800476c <BSP_LCD_LayerRgb565Init>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 8001ace:	f002 fe35 	bl	800473c <BSP_LCD_GetXSize>
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	f002 fe3e 	bl	8004754 <BSP_LCD_GetYSize>
 8001ad8:	4360      	muls	r0, r4
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 8001ada:	f100 5140 	add.w	r1, r0, #805306368	; 0x30000000
 8001ade:	2001      	movs	r0, #1
 8001ae0:	0089      	lsls	r1, r1, #2
 8001ae2:	f002 fe43 	bl	800476c <BSP_LCD_LayerRgb565Init>

  BSP_LCD_DisplayOn();
 8001ae6:	f002 ff7b 	bl	80049e0 <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f002 fe7a 	bl	80047e4 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001af0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001af4:	f002 fe8e 	bl	8004814 <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f002 fe73 	bl	80047e4 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001afe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b02:	f002 fe87 	bl	8004814 <BSP_LCD_Clear>

  BSP_LCD_SetTransparency(0, 0);
 8001b06:	2100      	movs	r1, #0
 8001b08:	4608      	mov	r0, r1
 8001b0a:	f002 fe71 	bl	80047f0 <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 8001b0e:	2164      	movs	r1, #100	; 0x64
 8001b10:	2001      	movs	r0, #1
 8001b12:	f002 fe6d 	bl	80047f0 <BSP_LCD_SetTransparency>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001b16:	4802      	ldr	r0, [pc, #8]	; (8001b20 <_Z8lcdsetupv+0x7c>)
 8001b18:	f002 fe70 	bl	80047fc <BSP_LCD_SetTextColor>
}
 8001b1c:	b022      	add	sp, #136	; 0x88
 8001b1e:	bd10      	pop	{r4, pc}
 8001b20:	ff0000ff 	.word	0xff0000ff

08001b24 <__tcf_0>:
			"to supported version %d.",
			model->version(), TFLITE_SCHEMA_VERSION);
		return 0;
	}
	MicroPrintf("Point_2");
	static tflite::MicroMutableOpResolver<17> micro_op_resolver;
 8001b24:	4770      	bx	lr

08001b26 <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpENS_15BuiltinOperatorE>:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver() {}

  const TFLMRegistration* FindOp(tflite::BuiltinOperator op) const override {
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001b26:	2920      	cmp	r1, #32
  const TFLMRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001b28:	b570      	push	{r4, r5, r6, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001b2a:	d010      	beq.n	8001b4e <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpENS_15BuiltinOperatorE+0x28>

    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001b2c:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
 8001b30:	2300      	movs	r3, #0
 8001b32:	251c      	movs	r5, #28
 8001b34:	429c      	cmp	r4, r3
 8001b36:	d00a      	beq.n	8001b4e <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpENS_15BuiltinOperatorE+0x28>
 8001b38:	fb05 f203 	mul.w	r2, r5, r3
      const TFLMRegistration& registration = registrations_[i];
      if (registration.builtin_code == op) {
 8001b3c:	1886      	adds	r6, r0, r2
 8001b3e:	69b6      	ldr	r6, [r6, #24]
 8001b40:	428e      	cmp	r6, r1
 8001b42:	d102      	bne.n	8001b4a <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TFLMRegistration& registration = registrations_[i];
 8001b44:	3204      	adds	r2, #4
 8001b46:	4410      	add	r0, r2
        return &registration;
      }
    }
    return nullptr;
  }
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	e7f2      	b.n	8001b34 <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpENS_15BuiltinOperatorE+0xe>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e7fa      	b.n	8001b48 <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpENS_15BuiltinOperatorE+0x22>

08001b52 <_ZN6tflite22MicroMutableOpResolverILj17EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001b52:	4770      	bx	lr

08001b54 <__tcf_1>:
	micro_op_resolver.AddConcatenation();



	static tflite::MicroInterpreter static_interpreter(
			model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 8001b54:	4801      	ldr	r0, [pc, #4]	; (8001b5c <__tcf_1+0x8>)
 8001b56:	f008 bb8f 	b.w	800a278 <_ZN6tflite16MicroInterpreterD1Ev>
 8001b5a:	bf00      	nop
 8001b5c:	2004ccb0 	.word	0x2004ccb0

08001b60 <_ZNK6tflite22MicroMutableOpResolverILj17EE15GetOpDataParserENS_15BuiltinOperatorE>:
    return nullptr;
  }

  TfLiteBridgeBuiltinParseFunction GetOpDataParser(
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001b60:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8001b64:	2a11      	cmp	r2, #17
  TfLiteBridgeBuiltinParseFunction GetOpDataParser(
 8001b66:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001b68:	d80c      	bhi.n	8001b84 <_ZNK6tflite22MicroMutableOpResolverILj17EE15GetOpDataParserENS_15BuiltinOperatorE+0x24>
 8001b6a:	f500 74f2 	add.w	r4, r0, #484	; 0x1e4
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d00b      	beq.n	8001b8c <_ZNK6tflite22MicroMutableOpResolverILj17EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001b74:	f854 5b04 	ldr.w	r5, [r4], #4
 8001b78:	428d      	cmp	r5, r1
 8001b7a:	d105      	bne.n	8001b88 <_ZNK6tflite22MicroMutableOpResolverILj17EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>
 8001b7c:	338a      	adds	r3, #138	; 0x8a
 8001b7e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    }
    return nullptr;
  }
 8001b82:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001b84:	f015 f8de 	bl	8016d44 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001b88:	3301      	adds	r3, #1
 8001b8a:	e7f1      	b.n	8001b70 <_ZNK6tflite22MicroMutableOpResolverILj17EE15GetOpDataParserENS_15BuiltinOperatorE+0x10>
    return nullptr;
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	e7f8      	b.n	8001b82 <_ZNK6tflite22MicroMutableOpResolverILj17EE15GetOpDataParserENS_15BuiltinOperatorE+0x22>

08001b90 <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpEPKc>:
  const TFLMRegistration* FindOp(const char* op) const override {
 8001b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b94:	4606      	mov	r6, r0
 8001b96:	4688      	mov	r8, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001b98:	f8d0 71e0 	ldr.w	r7, [r0, #480]	; 0x1e0
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	42a7      	cmp	r7, r4
 8001ba2:	d010      	beq.n	8001bc6 <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpEPKc+0x36>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001ba4:	69ab      	ldr	r3, [r5, #24]
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	d10a      	bne.n	8001bc0 <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpEPKc+0x30>
          (strcmp(registration.custom_name, op) == 0)) {
 8001baa:	4641      	mov	r1, r8
 8001bac:	69e8      	ldr	r0, [r5, #28]
 8001bae:	f7fe fb7f 	bl	80002b0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001bb2:	b928      	cbnz	r0, 8001bc0 <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpEPKc+0x30>
      const TFLMRegistration& registration = registrations_[i];
 8001bb4:	201c      	movs	r0, #28
 8001bb6:	fb00 6004 	mla	r0, r0, r4, r6
 8001bba:	3004      	adds	r0, #4
  }
 8001bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001bc0:	3401      	adds	r4, #1
 8001bc2:	351c      	adds	r5, #28
 8001bc4:	e7ec      	b.n	8001ba0 <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpEPKc+0x10>
    return nullptr;
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	e7f8      	b.n	8001bbc <_ZNK6tflite22MicroMutableOpResolverILj17EE6FindOpEPKc+0x2c>

08001bca <_ZN6tflite22MicroMutableOpResolverILj17EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001bca:	b510      	push	{r4, lr}
 8001bcc:	4604      	mov	r4, r0
 8001bce:	f44f 711c 	mov.w	r1, #624	; 0x270
 8001bd2:	f014 fe2c 	bl	801682e <_ZdlPvj>
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	bd10      	pop	{r4, pc}
	...

08001bdc <_Z13handle_outputhhhhh>:
    }
}


void handle_output(uint8_t beeScore, uint8_t butterflyScore, uint8_t mothScore, uint8_t stinkScore, uint8_t noneScore)
{
 8001bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be0:	461d      	mov	r5, r3
 8001be2:	b0b5      	sub	sp, #212	; 0xd4
	uint8_t bee_msg[6] = "0";
 8001be4:	2330      	movs	r3, #48	; 0x30
{
 8001be6:	4616      	mov	r6, r2
	uint8_t butterfly_msg[12] = "1";
 8001be8:	2231      	movs	r2, #49	; 0x31
{
 8001bea:	f89d 90f0 	ldrb.w	r9, [sp, #240]	; 0xf0
	uint8_t bee_msg[6] = "0";
 8001bee:	9303      	str	r3, [sp, #12]
 8001bf0:	2300      	movs	r3, #0
	uint8_t moth_msg[7] = "2";
	uint8_t stink_msg[8] = "4";
	uint8_t none_msg[7] = "3";

	int max;
	max = (beeScore > butterflyScore) ? beeScore : butterflyScore;
 8001bf2:	4281      	cmp	r1, r0
	max = (max > mothScore) ? max : mothScore;
	max = (max > stinkScore) ? max : stinkScore;
	max = (max > noneScore) ? max : noneScore;
 8001bf4:	462c      	mov	r4, r5
	uint8_t bee_msg[6] = "0";
 8001bf6:	f8ad 3010 	strh.w	r3, [sp, #16]
{
 8001bfa:	4680      	mov	r8, r0
	uint8_t butterfly_msg[12] = "1";
 8001bfc:	930d      	str	r3, [sp, #52]	; 0x34
{
 8001bfe:	460f      	mov	r7, r1
	uint8_t moth_msg[7] = "2";
 8001c00:	f8ad 3018 	strh.w	r3, [sp, #24]
 8001c04:	f88d 301a 	strb.w	r3, [sp, #26]
	uint8_t none_msg[7] = "3";
 8001c08:	f8ad 3020 	strh.w	r3, [sp, #32]
 8001c0c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	uint8_t butterfly_msg[12] = "1";
 8001c10:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
	uint8_t moth_msg[7] = "2";
 8001c14:	f04f 0232 	mov.w	r2, #50	; 0x32
 8001c18:	9205      	str	r2, [sp, #20]
	uint8_t stink_msg[8] = "4";
 8001c1a:	f04f 0234 	mov.w	r2, #52	; 0x34
 8001c1e:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	max = (beeScore > butterflyScore) ? beeScore : butterflyScore;
 8001c22:	460b      	mov	r3, r1
 8001c24:	bf38      	it	cc
 8001c26:	4603      	movcc	r3, r0
	max = (max > noneScore) ? max : noneScore;
 8001c28:	454d      	cmp	r5, r9
	uint8_t none_msg[7] = "3";
 8001c2a:	f04f 0233 	mov.w	r2, #51	; 0x33
	max = (max > noneScore) ? max : noneScore;
 8001c2e:	bfb8      	it	lt
 8001c30:	464c      	movlt	r4, r9
	uint8_t none_msg[7] = "3";
 8001c32:	9207      	str	r2, [sp, #28]
	char showbuf[150];
	MicroPrintf("Bee: %d, Butterfly: %d, Moth: %d, Stink: %d, None: %d\r\n", beeScore, butterflyScore, mothScore, stinkScore, noneScore);
 8001c34:	460a      	mov	r2, r1
 8001c36:	4601      	mov	r1, r0
	max = (max > noneScore) ? max : noneScore;
 8001c38:	42b4      	cmp	r4, r6
	MicroPrintf("Bee: %d, Butterfly: %d, Moth: %d, Stink: %d, None: %d\r\n", beeScore, butterflyScore, mothScore, stinkScore, noneScore);
 8001c3a:	4824      	ldr	r0, [pc, #144]	; (8001ccc <_Z13handle_outputhhhhh+0xf0>)
	max = (max > noneScore) ? max : noneScore;
 8001c3c:	bfb8      	it	lt
 8001c3e:	4634      	movlt	r4, r6
 8001c40:	429c      	cmp	r4, r3
 8001c42:	bfb8      	it	lt
 8001c44:	461c      	movlt	r4, r3
	MicroPrintf("Bee: %d, Butterfly: %d, Moth: %d, Stink: %d, None: %d\r\n", beeScore, butterflyScore, mothScore, stinkScore, noneScore);
 8001c46:	4633      	mov	r3, r6
 8001c48:	e9cd 5900 	strd	r5, r9, [sp]
 8001c4c:	f009 f834 	bl	800acb8 <_Z11MicroPrintfPKcz>
	if(max > noneScore) {
 8001c50:	45a1      	cmp	r9, r4
 8001c52:	da32      	bge.n	8001cba <_Z13handle_outputhhhhh+0xde>
		if(max == beeScore) {
 8001c54:	45a0      	cmp	r8, r4
 8001c56:	d112      	bne.n	8001c7e <_Z13handle_outputhhhhh+0xa2>
			HAL_UART_Transmit(&huart6, bee_msg, 1, 6);
 8001c58:	a903      	add	r1, sp, #12
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	481c      	ldr	r0, [pc, #112]	; (8001cd0 <_Z13handle_outputhhhhh+0xf4>)
 8001c60:	f005 fb2d 	bl	80072be <HAL_UART_Transmit>
			//HAL_UART_Transmit(&DebugUartHandler, bee_msg, 1, 6);
			sprintf(showbuf, "BEE      ");
 8001c64:	491b      	ldr	r1, [pc, #108]	; (8001cd4 <_Z13handle_outputhhhhh+0xf8>)
			displaystring(showbuf, 273, 10);
		}
	}
	else {
		HAL_UART_Transmit(&DebugUartHandler, none_msg, 1, 7);
		sprintf(showbuf, "           ");
 8001c66:	a80e      	add	r0, sp, #56	; 0x38
 8001c68:	f015 fcd4 	bl	8017614 <strcpy>
		displaystring(showbuf, 273, 10);
 8001c6c:	220a      	movs	r2, #10
 8001c6e:	f240 1111 	movw	r1, #273	; 0x111
 8001c72:	a80e      	add	r0, sp, #56	; 0x38
 8001c74:	f7ff ff0c 	bl	8001a90 <_Z13displaystringPcii>
	}
}
 8001c78:	b035      	add	sp, #212	; 0xd4
 8001c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else if(max == butterflyScore) {
 8001c7e:	42a7      	cmp	r7, r4
 8001c80:	d107      	bne.n	8001c92 <_Z13handle_outputhhhhh+0xb6>
			HAL_UART_Transmit(&huart6, butterfly_msg, 1, 12);
 8001c82:	a90b      	add	r1, sp, #44	; 0x2c
 8001c84:	230c      	movs	r3, #12
 8001c86:	2201      	movs	r2, #1
 8001c88:	4811      	ldr	r0, [pc, #68]	; (8001cd0 <_Z13handle_outputhhhhh+0xf4>)
 8001c8a:	f005 fb18 	bl	80072be <HAL_UART_Transmit>
			sprintf(showbuf, "BUTTERFLY ");
 8001c8e:	4912      	ldr	r1, [pc, #72]	; (8001cd8 <_Z13handle_outputhhhhh+0xfc>)
 8001c90:	e7e9      	b.n	8001c66 <_Z13handle_outputhhhhh+0x8a>
		else if(max == mothScore) {
 8001c92:	42a6      	cmp	r6, r4
 8001c94:	d107      	bne.n	8001ca6 <_Z13handle_outputhhhhh+0xca>
			HAL_UART_Transmit(&huart6, moth_msg, 1, 7);
 8001c96:	a905      	add	r1, sp, #20
 8001c98:	2307      	movs	r3, #7
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <_Z13handle_outputhhhhh+0xf4>)
 8001c9e:	f005 fb0e 	bl	80072be <HAL_UART_Transmit>
			sprintf(showbuf, "MOTH      ");
 8001ca2:	490e      	ldr	r1, [pc, #56]	; (8001cdc <_Z13handle_outputhhhhh+0x100>)
 8001ca4:	e7df      	b.n	8001c66 <_Z13handle_outputhhhhh+0x8a>
		else if(max == stinkScore) {
 8001ca6:	42a5      	cmp	r5, r4
 8001ca8:	d1e6      	bne.n	8001c78 <_Z13handle_outputhhhhh+0x9c>
			HAL_UART_Transmit(&huart6, stink_msg, 1, 8);
 8001caa:	a909      	add	r1, sp, #36	; 0x24
 8001cac:	2308      	movs	r3, #8
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <_Z13handle_outputhhhhh+0xf4>)
 8001cb2:	f005 fb04 	bl	80072be <HAL_UART_Transmit>
			sprintf(showbuf, "STINK    ");
 8001cb6:	490a      	ldr	r1, [pc, #40]	; (8001ce0 <_Z13handle_outputhhhhh+0x104>)
 8001cb8:	e7d5      	b.n	8001c66 <_Z13handle_outputhhhhh+0x8a>
		HAL_UART_Transmit(&DebugUartHandler, none_msg, 1, 7);
 8001cba:	a907      	add	r1, sp, #28
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <_Z13handle_outputhhhhh+0x108>)
 8001cc2:	f005 fafc 	bl	80072be <HAL_UART_Transmit>
		sprintf(showbuf, "           ");
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <_Z13handle_outputhhhhh+0x10c>)
 8001cc8:	e7cd      	b.n	8001c66 <_Z13handle_outputhhhhh+0x8a>
 8001cca:	bf00      	nop
 8001ccc:	080183dc 	.word	0x080183dc
 8001cd0:	2004cd6c 	.word	0x2004cd6c
 8001cd4:	08018414 	.word	0x08018414
 8001cd8:	0801841e 	.word	0x0801841e
 8001cdc:	08018429 	.word	0x08018429
 8001ce0:	08018434 	.word	0x08018434
 8001ce4:	20003598 	.word	0x20003598
 8001ce8:	0801843e 	.word	0x0801843e

08001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TFLMRegistration& registration,
                          TfLiteBridgeBuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001cec:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001cee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cf2:	4607      	mov	r7, r0
 8001cf4:	4688      	mov	r8, r1
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	4699      	mov	r9, r3
    if (op == BuiltinOperator_CUSTOM) {
 8001cfa:	d108      	bne.n	8001d0e <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x22>
      MicroPrintf("Invalid parameter BuiltinOperator_CUSTOM to the ");
 8001cfc:	4820      	ldr	r0, [pc, #128]	; (8001d80 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>)
 8001cfe:	f008 ffdb 	bl	800acb8 <_Z11MicroPrintfPKcz>
      MicroPrintf("AddBuiltin function.");
 8001d02:	4820      	ldr	r0, [pc, #128]	; (8001d84 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>)
 8001d04:	f008 ffd8 	bl	800acb8 <_Z11MicroPrintfPKcz>
    }

    if (registrations_len_ >= tOpCount) {
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
      MicroPrintf("is too small (%d).", tOpCount);
      return kTfLiteError;
 8001d08:	2001      	movs	r0, #1
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
 8001d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (FindOp(op) != nullptr) {
 8001d0e:	6803      	ldr	r3, [r0, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4798      	blx	r3
 8001d14:	4606      	mov	r6, r0
 8001d16:	b138      	cbz	r0, 8001d28 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x3c>
      MicroPrintf("Calling AddBuiltin with the same op more than ");
 8001d18:	481b      	ldr	r0, [pc, #108]	; (8001d88 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x9c>)
 8001d1a:	f008 ffcd 	bl	800acb8 <_Z11MicroPrintfPKcz>
      MicroPrintf("once is not supported (Op: #%d).", op);
 8001d1e:	4641      	mov	r1, r8
 8001d20:	481a      	ldr	r0, [pc, #104]	; (8001d8c <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa0>)
      MicroPrintf("is too small (%d).", tOpCount);
 8001d22:	f008 ffc9 	bl	800acb8 <_Z11MicroPrintfPKcz>
 8001d26:	e7ef      	b.n	8001d08 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1c>
    if (registrations_len_ >= tOpCount) {
 8001d28:	f8d7 c1e0 	ldr.w	ip, [r7, #480]	; 0x1e0
 8001d2c:	f1bc 0f10 	cmp.w	ip, #16
 8001d30:	d906      	bls.n	8001d40 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x54>
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
 8001d32:	4641      	mov	r1, r8
 8001d34:	4816      	ldr	r0, [pc, #88]	; (8001d90 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa4>)
 8001d36:	f008 ffbf 	bl	800acb8 <_Z11MicroPrintfPKcz>
      MicroPrintf("is too small (%d).", tOpCount);
 8001d3a:	2111      	movs	r1, #17
 8001d3c:	4815      	ldr	r0, [pc, #84]	; (8001d94 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa8>)
 8001d3e:	e7f0      	b.n	8001d22 <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x36>
    registrations_[registrations_len_] = registration;
 8001d40:	f04f 0e1c 	mov.w	lr, #28
 8001d44:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8001d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4a:	f10e 0504 	add.w	r5, lr, #4
 8001d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    registrations_len_++;
 8001d50:	f10c 0301 	add.w	r3, ip, #1
    registrations_[registrations_len_] = registration;
 8001d54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    registrations_[registrations_len_].builtin_code = op;
 8001d5c:	f8ce 8018 	str.w	r8, [lr, #24]
    return kTfLiteOk;
 8001d60:	4630      	mov	r0, r6
    registrations_len_++;
 8001d62:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    builtin_codes_[num_buitin_ops_] = op;
 8001d66:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001d6a:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    num_buitin_ops_++;
 8001d6e:	3301      	adds	r3, #1
    builtin_codes_[num_buitin_ops_] = op;
 8001d70:	f8c2 81e4 	str.w	r8, [r2, #484]	; 0x1e4
    builtin_parsers_[num_buitin_ops_] = parser;
 8001d74:	f8c2 9228 	str.w	r9, [r2, #552]	; 0x228
    num_buitin_ops_++;
 8001d78:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001d7c:	e7c5      	b.n	8001d0a <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1e>
 8001d7e:	bf00      	nop
 8001d80:	0801844a 	.word	0x0801844a
 8001d84:	0801847b 	.word	0x0801847b
 8001d88:	08018490 	.word	0x08018490
 8001d8c:	080184bf 	.word	0x080184bf
 8001d90:	080184e0 	.word	0x080184e0
 8001d94:	08018511 	.word	0x08018511

08001d98 <main>:
{
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	b0a3      	sub	sp, #140	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001da2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001da6:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <main+0xdc>)
 8001da8:	2100      	movs	r1, #0
 8001daa:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001dae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001db2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dbc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dc2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001dc6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001dca:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001dce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001dd2:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001dd6:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001dda:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8001dde:	07a5      	lsls	r5, r4, #30
 8001de0:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001de2:	ea02 0c06 	and.w	ip, r2, r6
 8001de6:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001de8:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001dea:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001dee:	3901      	subs	r1, #1
 8001df0:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001df4:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8001df8:	1c4f      	adds	r7, r1, #1
 8001dfa:	d1f6      	bne.n	8001dea <main+0x52>
 8001dfc:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8001dfe:	f112 0f20 	cmn.w	r2, #32
 8001e02:	d1ee      	bne.n	8001de2 <main+0x4a>
 8001e04:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e0e:	615a      	str	r2, [r3, #20]
 8001e10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e14:	f3bf 8f6f 	isb	sy
    HAL_Init();
 8001e18:	f003 f874 	bl	8004f04 <HAL_Init>
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e1c:	2601      	movs	r6, #1
 8001e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e22:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e24:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e26:	9520      	str	r5, [sp, #128]	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e28:	e9cd 6316 	strd	r6, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e30:	e9cd 531c 	strd	r5, r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e34:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e38:	e9cd 031e 	strd	r0, r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e3c:	2309      	movs	r3, #9

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e3e:	a816      	add	r0, sp, #88	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e40:	9321      	str	r3, [sp, #132]	; 0x84
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e42:	f004 f827 	bl	8005e94 <HAL_RCC_OscConfig>
  if (ret != HAL_OK) {
 8001e46:	b100      	cbz	r0, 8001e4a <main+0xb2>
 8001e48:	e7fe      	b.n	8001e48 <main+0xb0>
    while (1) {
      ;
    }
  }

  ret = HAL_PWREx_EnableOverDrive();
 8001e4a:	f003 ffeb 	bl	8005e24 <HAL_PWREx_EnableOverDrive>
  if (ret != HAL_OK) {
 8001e4e:	b100      	cbz	r0, 8001e52 <main+0xba>
 8001e50:	e7fe      	b.n	8001e50 <main+0xb8>
    while (1) {
      ;
    }
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8001e52:	230f      	movs	r3, #15
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e54:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	9013      	str	r0, [sp, #76]	; 0x4c

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8001e5a:	2107      	movs	r1, #7
 8001e5c:	a811      	add	r0, sp, #68	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5e:	e9cd 3511 	strd	r3, r5, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e66:	e9cd 3b14 	strd	r3, fp, [sp, #80]	; 0x50
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8001e6a:	f004 f9fd 	bl	8006268 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK) {
 8001e6e:	4604      	mov	r4, r0
 8001e70:	b110      	cbz	r0, 8001e78 <main+0xe0>
 8001e72:	e7fe      	b.n	8001e72 <main+0xda>
 8001e74:	e000ed00 	.word	0xe000ed00
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	4601      	mov	r1, r0
 8001e7a:	2214      	movs	r2, #20
 8001e7c:	a816      	add	r0, sp, #88	; 0x58
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001e7e:	f04f 0908 	mov.w	r9, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f014 fff1 	bl	8016e68 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e86:	4bbf      	ldr	r3, [pc, #764]	; (8002184 <main+0x3ec>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001e88:	2120      	movs	r1, #32
 8001e8a:	48bf      	ldr	r0, [pc, #764]	; (8002188 <main+0x3f0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e8e:	2703      	movs	r7, #3
 8001e90:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e94:	f04f 080a 	mov.w	r8, #10
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e98:	f042 0210 	orr.w	r2, r2, #16
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea0:	f002 0210 	and.w	r2, r2, #16
 8001ea4:	9207      	str	r2, [sp, #28]
 8001ea6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001eb6:	9208      	str	r2, [sp, #32]
 8001eb8:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ebc:	f042 0202 	orr.w	r2, r2, #2
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec4:	f002 0202 	and.w	r2, r2, #2
 8001ec8:	9209      	str	r2, [sp, #36]	; 0x24
 8001eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed6:	f002 0208 	and.w	r2, r2, #8
 8001eda:	920a      	str	r2, [sp, #40]	; 0x28
 8001edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee0:	f042 0204 	orr.w	r2, r2, #4
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee8:	f002 0204 	and.w	r2, r2, #4
 8001eec:	920b      	str	r2, [sp, #44]	; 0x2c
 8001eee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efa:	f002 0201 	and.w	r2, r2, #1
 8001efe:	920c      	str	r2, [sp, #48]	; 0x30
 8001f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001f10:	920d      	str	r2, [sp, #52]	; 0x34
 8001f12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001f22:	920e      	str	r2, [sp, #56]	; 0x38
 8001f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f30:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001f34:	920f      	str	r2, [sp, #60]	; 0x3c
 8001f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3a:	f042 0220 	orr.w	r2, r2, #32
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f42:	f002 0220 	and.w	r2, r2, #32
 8001f46:	9210      	str	r2, [sp, #64]	; 0x40
 8001f48:	9a10      	ldr	r2, [sp, #64]	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001f52:	4632      	mov	r2, r6
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	9311      	str	r3, [sp, #68]	; 0x44
 8001f5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001f5e:	f003 fb6d 	bl	800563c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001f62:	4622      	mov	r2, r4
 8001f64:	210c      	movs	r1, #12
 8001f66:	4889      	ldr	r0, [pc, #548]	; (800218c <main+0x3f4>)
 8001f68:	f003 fb68 	bl	800563c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001f6c:	4632      	mov	r2, r6
 8001f6e:	2108      	movs	r1, #8
 8001f70:	4887      	ldr	r0, [pc, #540]	; (8002190 <main+0x3f8>)
 8001f72:	f003 fb63 	bl	800563c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001f76:	4659      	mov	r1, fp
 8001f78:	4632      	mov	r2, r6
 8001f7a:	4884      	ldr	r0, [pc, #528]	; (800218c <main+0x3f4>)
 8001f7c:	f003 fb5e 	bl	800563c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001f80:	4622      	mov	r2, r4
 8001f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f86:	4883      	ldr	r0, [pc, #524]	; (8002194 <main+0x3fc>)
 8001f88:	f003 fb58 	bl	800563c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	21c8      	movs	r1, #200	; 0xc8
 8001f90:	4881      	ldr	r0, [pc, #516]	; (8002198 <main+0x400>)
 8001f92:	f003 fb53 	bl	800563c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f96:	a916      	add	r1, sp, #88	; 0x58
 8001f98:	4880      	ldr	r0, [pc, #512]	; (800219c <main+0x404>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9c:	e9cd 9416 	strd	r9, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f003 fa64 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8001fa4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fa8:	a916      	add	r1, sp, #88	; 0x58
 8001faa:	487b      	ldr	r0, [pc, #492]	; (8002198 <main+0x400>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fb2:	e9cd 7a19 	strd	r7, sl, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fb6:	f003 fa59 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 8001fba:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	a916      	add	r1, sp, #88	; 0x58
 8001fc0:	4877      	ldr	r0, [pc, #476]	; (80021a0 <main+0x408>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fc2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f003 fa4d 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001fd2:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	a916      	add	r1, sp, #88	; 0x58
 8001fd6:	486c      	ldr	r0, [pc, #432]	; (8002188 <main+0x3f0>)
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001fd8:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f003 fa42 	bl	800546c <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	a916      	add	r1, sp, #88	; 0x58
 8001fea:	486e      	ldr	r0, [pc, #440]	; (80021a4 <main+0x40c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fee:	e9cd b416 	strd	fp, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f003 fa3b 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ff6:	4a6c      	ldr	r2, [pc, #432]	; (80021a8 <main+0x410>)
 8001ff8:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	a916      	add	r1, sp, #88	; 0x58
 8001ffc:	4862      	ldr	r0, [pc, #392]	; (8002188 <main+0x3f0>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001ffe:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002002:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002006:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800200a:	f003 fa2f 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800200e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	a916      	add	r1, sp, #88	; 0x58
 8002014:	4865      	ldr	r0, [pc, #404]	; (80021ac <main+0x414>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002016:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f003 fa23 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002026:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002028:	a916      	add	r1, sp, #88	; 0x58
 800202a:	4857      	ldr	r0, [pc, #348]	; (8002188 <main+0x3f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002034:	f003 fa1a 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8002038:	f241 030c 	movw	r3, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800203c:	a916      	add	r1, sp, #88	; 0x58
 800203e:	4853      	ldr	r0, [pc, #332]	; (800218c <main+0x3f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002048:	f003 fa10 	bl	800546c <HAL_GPIO_Init>
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800204c:	a916      	add	r1, sp, #88	; 0x58
 800204e:	4858      	ldr	r0, [pc, #352]	; (80021b0 <main+0x418>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002052:	e9cd b416 	strd	fp, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002056:	f003 fa09 	bl	800546c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800205a:	a916      	add	r1, sp, #88	; 0x58
 800205c:	484c      	ldr	r0, [pc, #304]	; (8002190 <main+0x3f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205e:	e9cd 9616 	strd	r9, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002066:	f003 fa01 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800206a:	2310      	movs	r3, #16
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800206c:	a916      	add	r1, sp, #88	; 0x58
 800206e:	4846      	ldr	r0, [pc, #280]	; (8002188 <main+0x3f0>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002070:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002072:	f04f 0905 	mov.w	r9, #5
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002076:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800207c:	f003 f9f6 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8002080:	f248 0104 	movw	r1, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002084:	4843      	ldr	r0, [pc, #268]	; (8002194 <main+0x3fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	e9cd 1416 	strd	r1, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800208c:	a916      	add	r1, sp, #88	; 0x58
 800208e:	f003 f9ed 	bl	800546c <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002092:	a916      	add	r1, sp, #88	; 0x58
 8002094:	483d      	ldr	r0, [pc, #244]	; (800218c <main+0x3f4>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002096:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f003 f9e3 	bl	800546c <HAL_GPIO_Init>
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80020a6:	a916      	add	r1, sp, #88	; 0x58
 80020a8:	483a      	ldr	r0, [pc, #232]	; (8002194 <main+0x3fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	e9cd b616 	strd	fp, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f003 f9db 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020ba:	4834      	ldr	r0, [pc, #208]	; (800218c <main+0x3f4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020be:	e9cd 1716 	strd	r1, r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020c2:	a916      	add	r1, sp, #88	; 0x58
 80020c4:	f003 f9d2 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020c8:	9a05      	ldr	r2, [sp, #20]
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80020ca:	a916      	add	r1, sp, #88	; 0x58
 80020cc:	482f      	ldr	r0, [pc, #188]	; (800218c <main+0x3f4>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80020ce:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	e9cd 2417 	strd	r2, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f003 f9c9 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80020da:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80020dc:	a916      	add	r1, sp, #88	; 0x58
 80020de:	482d      	ldr	r0, [pc, #180]	; (8002194 <main+0x3fc>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80020e0:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f003 f9be 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 80020f0:	23c8      	movs	r3, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020f2:	a916      	add	r1, sp, #88	; 0x58
 80020f4:	4828      	ldr	r0, [pc, #160]	; (8002198 <main+0x400>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020fe:	f003 f9b5 	bl	800546c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002102:	a916      	add	r1, sp, #88	; 0x58
 8002104:	482a      	ldr	r0, [pc, #168]	; (80021b0 <main+0x418>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002106:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	e9cd 9516 	strd	r9, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002112:	f003 f9ab 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8002116:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002118:	a916      	add	r1, sp, #88	; 0x58
 800211a:	4825      	ldr	r0, [pc, #148]	; (80021b0 <main+0x418>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800211c:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002128:	f003 f9a0 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800212c:	2304      	movs	r3, #4
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800212e:	a916      	add	r1, sp, #88	; 0x58
 8002130:	4819      	ldr	r0, [pc, #100]	; (8002198 <main+0x400>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002134:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002138:	f003 f998 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800213c:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	a916      	add	r1, sp, #88	; 0x58
 8002140:	481a      	ldr	r0, [pc, #104]	; (80021ac <main+0x414>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002142:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f003 f98d 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8002152:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	a916      	add	r1, sp, #88	; 0x58
 8002156:	4815      	ldr	r0, [pc, #84]	; (80021ac <main+0x414>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002158:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f003 f982 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8002168:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	a916      	add	r1, sp, #88	; 0x58
 800216e:	480c      	ldr	r0, [pc, #48]	; (80021a0 <main+0x408>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002170:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f003 f976 	bl	800546c <HAL_GPIO_Init>
 8002180:	e018      	b.n	80021b4 <main+0x41c>
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40022000 	.word	0x40022000
 8002190:	40022800 	.word	0x40022800
 8002194:	40021c00 	.word	0x40021c00
 8002198:	40021800 	.word	0x40021800
 800219c:	40021000 	.word	0x40021000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40022400 	.word	0x40022400
 80021a8:	10120000 	.word	0x10120000
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020800 	.word	0x40020800
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80021b4:	a916      	add	r1, sp, #88	; 0x58
 80021b6:	489c      	ldr	r0, [pc, #624]	; (8002428 <main+0x690>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ba:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80021be:	f003 f955 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 80021c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 80021c6:	a916      	add	r1, sp, #88	; 0x58
 80021c8:	4898      	ldr	r0, [pc, #608]	; (800242c <main+0x694>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ca:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021cc:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f003 f94c 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021d4:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	a916      	add	r1, sp, #88	; 0x58
 80021d8:	4895      	ldr	r0, [pc, #596]	; (8002430 <main+0x698>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e0:	f003 f944 	bl	800546c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021e4:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e6:	a916      	add	r1, sp, #88	; 0x58
 80021e8:	4891      	ldr	r0, [pc, #580]	; (8002430 <main+0x698>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f0:	f003 f93c 	bl	800546c <HAL_GPIO_Init>
    BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80021f4:	4628      	mov	r0, r5
 80021f6:	4621      	mov	r1, r4
 80021f8:	f002 fa0e 	bl	8004618 <BSP_PB_Init>
	DebugUartHandler.Instance        = DISCOVERY_COM1;
 80021fc:	488d      	ldr	r0, [pc, #564]	; (8002434 <main+0x69c>)
	DebugUartHandler.Init.BaudRate   = 115200;
 80021fe:	498e      	ldr	r1, [pc, #568]	; (8002438 <main+0x6a0>)
 8002200:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	DebugUartHandler.Init.Parity     = UART_PARITY_NONE;
 8002204:	6104      	str	r4, [r0, #16]
	DebugUartHandler.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002206:	6184      	str	r4, [r0, #24]
	DebugUartHandler.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002208:	6244      	str	r4, [r0, #36]	; 0x24
	DebugUartHandler.Init.BaudRate   = 115200;
 800220a:	e9c0 1300 	strd	r1, r3, [r0]
	DebugUartHandler.Init.Mode       = UART_MODE_TX_RX;
 800220e:	230c      	movs	r3, #12
	DebugUartHandler.Init.StopBits   = UART_STOPBITS_1;
 8002210:	e9c0 4402 	strd	r4, r4, [r0, #8]
	DebugUartHandler.Init.Mode       = UART_MODE_TX_RX;
 8002214:	6143      	str	r3, [r0, #20]
	if(HAL_UART_Init(&DebugUartHandler) != HAL_OK)
 8002216:	f005 f8ca 	bl	80073ae <HAL_UART_Init>
 800221a:	4605      	mov	r5, r0
 800221c:	b118      	cbz	r0, 8002226 <main+0x48e>
    BSP_LED_On(LED_GREEN);
 800221e:	4620      	mov	r0, r4
 8002220:	f002 f9f0 	bl	8004604 <BSP_LED_On>
 8002224:	e7fe      	b.n	8002224 <main+0x48c>
    MicroPrintf("Point_1");
 8002226:	4885      	ldr	r0, [pc, #532]	; (800243c <main+0x6a4>)
 8002228:	f008 fd46 	bl	800acb8 <_Z11MicroPrintfPKcz>
    model = tflite::GetModel(saved_model);
 800222c:	4e84      	ldr	r6, [pc, #528]	; (8002440 <main+0x6a8>)
    lcdsetup();
 800222e:	f7ff fc39 	bl	8001aa4 <_Z8lcdsetupv>
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8002232:	4b84      	ldr	r3, [pc, #528]	; (8002444 <main+0x6ac>)
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	18ca      	adds	r2, r1, r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
 8002238:	58cb      	ldr	r3, [r1, r3]
 800223a:	1ad3      	subs	r3, r2, r3
    model = tflite::GetModel(saved_model);
 800223c:	6032      	str	r2, [r6, #0]
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800223e:	8819      	ldrh	r1, [r3, #0]
 8002240:	2904      	cmp	r1, #4
 8002242:	f240 80e7 	bls.w	8002414 <main+0x67c>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8002246:	8899      	ldrh	r1, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8002248:	2900      	cmp	r1, #0
 800224a:	f000 80e4 	beq.w	8002416 <main+0x67e>
 800224e:	5851      	ldr	r1, [r2, r1]
	if(model->version() != TFLITE_SCHEMA_VERSION) {
 8002250:	2903      	cmp	r1, #3
 8002252:	f040 80e0 	bne.w	8002416 <main+0x67e>
	MicroPrintf("Point_2");
 8002256:	487c      	ldr	r0, [pc, #496]	; (8002448 <main+0x6b0>)
 8002258:	f008 fd2e 	bl	800acb8 <_Z11MicroPrintfPKcz>
	static tflite::MicroMutableOpResolver<17> micro_op_resolver;
 800225c:	4b7b      	ldr	r3, [pc, #492]	; (800244c <main+0x6b4>)
 800225e:	4c7c      	ldr	r4, [pc, #496]	; (8002450 <main+0x6b8>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f3bf 8f5b 	dmb	ish
 8002266:	f013 0f01 	tst.w	r3, #1
 800226a:	d110      	bne.n	800228e <main+0x4f6>
 800226c:	4877      	ldr	r0, [pc, #476]	; (800244c <main+0x6b4>)
 800226e:	f014 faf1 	bl	8016854 <__cxa_guard_acquire>
 8002272:	b160      	cbz	r0, 800228e <main+0x4f6>
  explicit MicroMutableOpResolver() {}
 8002274:	4b77      	ldr	r3, [pc, #476]	; (8002454 <main+0x6bc>)
 8002276:	4875      	ldr	r0, [pc, #468]	; (800244c <main+0x6b4>)
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	2300      	movs	r3, #0
 800227c:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 8002280:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
 8002284:	f014 faf2 	bl	801686c <__cxa_guard_release>
 8002288:	4873      	ldr	r0, [pc, #460]	; (8002458 <main+0x6c0>)
 800228a:	f014 fd81 	bl	8016d90 <atexit>
TFLMRegistration Register_AVERAGE_POOL_2D_INT16();

TFLMRegistration Register_MAX_POOL_2D_INT16();
#else
inline TFLMRegistration Register_AVERAGE_POOL_2D_INT8() {
  return tflite::Register_AVERAGE_POOL_2D();
 800228e:	a816      	add	r0, sp, #88	; 0x58
			model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 8002290:	4d72      	ldr	r5, [pc, #456]	; (800245c <main+0x6c4>)
 8002292:	f010 fa7f 	bl	8012794 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D, registration, ParsePool);
 8002296:	4b72      	ldr	r3, [pc, #456]	; (8002460 <main+0x6c8>)
 8002298:	aa16      	add	r2, sp, #88	; 0x58
 800229a:	2101      	movs	r1, #1
 800229c:	486c      	ldr	r0, [pc, #432]	; (8002450 <main+0x6b8>)
 800229e:	f7ff fd25 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
// int16 activations and int8 weights and uses the latency optimized
// implementations.
TFLMRegistration Register_CONV_2D_INT16();

#else
inline TFLMRegistration Register_CONV_2D_INT8() { return Register_CONV_2D(); }
 80022a2:	a816      	add	r0, sp, #88	; 0x58
 80022a4:	f00b f8f8 	bl	800d498 <_ZN6tflite16Register_CONV_2DEv>
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
 80022a8:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <main+0x6cc>)
 80022aa:	aa16      	add	r2, sp, #88	; 0x58
 80022ac:	2103      	movs	r1, #3
 80022ae:	4868      	ldr	r0, [pc, #416]	; (8002450 <main+0x6b8>)
 80022b0:	f7ff fd1c 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
// implementations.
TFLMRegistration Register_DEPTHWISE_CONV_2D_INT16();

#else
inline TFLMRegistration Register_DEPTHWISE_CONV_2D_INT8() {
  return Register_DEPTHWISE_CONV_2D();
 80022b4:	a816      	add	r0, sp, #88	; 0x58
 80022b6:	f00c fbdf 	bl	800ea78 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
                      ParseDepthwiseConv2D);
 80022ba:	4b6b      	ldr	r3, [pc, #428]	; (8002468 <main+0x6d0>)
 80022bc:	aa16      	add	r2, sp, #88	; 0x58
 80022be:	2104      	movs	r1, #4
 80022c0:	4863      	ldr	r0, [pc, #396]	; (8002450 <main+0x6b8>)
 80022c2:	f7ff fd13 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_RESHAPE, Register_RESHAPE(),
 80022c6:	a816      	add	r0, sp, #88	; 0x58
 80022c8:	f011 ff3e 	bl	8014148 <_ZN6tflite16Register_RESHAPEEv>
                      ParseReshape);
 80022cc:	4b67      	ldr	r3, [pc, #412]	; (800246c <main+0x6d4>)
 80022ce:	aa16      	add	r2, sp, #88	; 0x58
 80022d0:	2116      	movs	r1, #22
 80022d2:	485f      	ldr	r0, [pc, #380]	; (8002450 <main+0x6b8>)
 80022d4:	f7ff fd0a 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SHAPE, Register_SHAPE(), ParseShape);
 80022d8:	a816      	add	r0, sp, #88	; 0x58
 80022da:	f012 f8e9 	bl	80144b0 <_ZN6tflite14Register_SHAPEEv>
 80022de:	4b64      	ldr	r3, [pc, #400]	; (8002470 <main+0x6d8>)
 80022e0:	aa16      	add	r2, sp, #88	; 0x58
 80022e2:	214d      	movs	r1, #77	; 0x4d
 80022e4:	485a      	ldr	r0, [pc, #360]	; (8002450 <main+0x6b8>)
 80022e6:	f7ff fd01 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
// Returns a TFLMRegistration struct for kernel variant that only supports
// int16 input/output and uses the latency optimized implementations.
TFLMRegistration Register_SOFTMAX_INT16();

#else
inline TFLMRegistration Register_SOFTMAX_INT8() { return Register_SOFTMAX(); }
 80022ea:	a816      	add	r0, sp, #88	; 0x58
 80022ec:	f012 fa56 	bl	801479c <_ZN6tflite16Register_SOFTMAXEv>
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 80022f0:	4b60      	ldr	r3, [pc, #384]	; (8002474 <main+0x6dc>)
 80022f2:	aa16      	add	r2, sp, #88	; 0x58
 80022f4:	2119      	movs	r1, #25
 80022f6:	4856      	ldr	r0, [pc, #344]	; (8002450 <main+0x6b8>)
 80022f8:	f7ff fcf8 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
}

inline TFLMRegistration Register_MAX_POOL_2D_INT8() {
  return tflite::Register_MAX_POOL_2D();
 80022fc:	a816      	add	r0, sp, #88	; 0x58
 80022fe:	f010 fa5d 	bl	80127bc <_ZN6tflite20Register_MAX_POOL_2DEv>
    return AddBuiltin(BuiltinOperator_MAX_POOL_2D, registration, ParsePool);
 8002302:	4b57      	ldr	r3, [pc, #348]	; (8002460 <main+0x6c8>)
 8002304:	aa16      	add	r2, sp, #88	; 0x58
 8002306:	2111      	movs	r1, #17
 8002308:	4851      	ldr	r0, [pc, #324]	; (8002450 <main+0x6b8>)
 800230a:	f7ff fcef 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
// that do not have any specialized implementations, the only goal here is to
// define fallback implementation that allow reference kernels to still be used
// from applications that call a more specific kernel variant.

inline TFLMRegistration Register_FULLY_CONNECTED_INT8() {
  return Register_FULLY_CONNECTED();
 800230e:	a816      	add	r0, sp, #88	; 0x58
 8002310:	f00c ffbc 	bl	800f28c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
                      ParseFullyConnected);
 8002314:	4b58      	ldr	r3, [pc, #352]	; (8002478 <main+0x6e0>)
 8002316:	aa16      	add	r2, sp, #88	; 0x58
 8002318:	2109      	movs	r1, #9
 800231a:	484d      	ldr	r0, [pc, #308]	; (8002450 <main+0x6b8>)
 800231c:	f7ff fce6 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_STRIDED_SLICE, Register_STRIDED_SLICE(),
 8002320:	a816      	add	r0, sp, #88	; 0x58
 8002322:	f012 fff1 	bl	8015308 <_ZN6tflite22Register_STRIDED_SLICEEv>
                      ParseStridedSlice);
 8002326:	4b55      	ldr	r3, [pc, #340]	; (800247c <main+0x6e4>)
 8002328:	aa16      	add	r2, sp, #88	; 0x58
 800232a:	212d      	movs	r1, #45	; 0x2d
 800232c:	4848      	ldr	r0, [pc, #288]	; (8002450 <main+0x6b8>)
 800232e:	f7ff fcdd 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_PACK, Register_PACK(), ParsePack);
 8002332:	a816      	add	r0, sp, #88	; 0x58
 8002334:	f00e ff74 	bl	8011220 <_ZN6tflite13Register_PACKEv>
 8002338:	4b51      	ldr	r3, [pc, #324]	; (8002480 <main+0x6e8>)
 800233a:	aa16      	add	r2, sp, #88	; 0x58
 800233c:	2153      	movs	r1, #83	; 0x53
 800233e:	4844      	ldr	r0, [pc, #272]	; (8002450 <main+0x6b8>)
 8002340:	f7ff fcd4 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
	micro_op_resolver.AddPad(tflite::Register_PAD());
 8002344:	a816      	add	r0, sp, #88	; 0x58
 8002346:	f00f f941 	bl	80115cc <_ZN6tflite12Register_PADEv>
    return AddBuiltin(BuiltinOperator_PAD, registration, ParsePad);
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <main+0x6ec>)
 800234c:	aa16      	add	r2, sp, #88	; 0x58
 800234e:	2122      	movs	r1, #34	; 0x22
 8002350:	483f      	ldr	r0, [pc, #252]	; (8002450 <main+0x6b8>)
 8002352:	f7ff fccb 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
TFLMRegistration Register_ADD_INT8();

TFLMRegistration Register_ADD_INT16();
#else
// Fallback registration
inline TFLMRegistration Register_ADD_INT8() { return Register_ADD(); }
 8002356:	a816      	add	r0, sp, #88	; 0x58
 8002358:	f008 ff4c 	bl	800b1f4 <_ZN6tflite12Register_ADDEv>
    return AddBuiltin(BuiltinOperator_ADD, registration, ParseAdd);
 800235c:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <main+0x6f0>)
 800235e:	aa16      	add	r2, sp, #88	; 0x58
 8002360:	2100      	movs	r1, #0
 8002362:	483b      	ldr	r0, [pc, #236]	; (8002450 <main+0x6b8>)
 8002364:	f7ff fcc2 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_MEAN, Register_MEAN(), ParseReducer);
 8002368:	a816      	add	r0, sp, #88	; 0x58
 800236a:	f011 f881 	bl	8013470 <_ZN6tflite13Register_MEANEv>
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <main+0x6f4>)
 8002370:	aa16      	add	r2, sp, #88	; 0x58
 8002372:	2128      	movs	r1, #40	; 0x28
 8002374:	4836      	ldr	r0, [pc, #216]	; (8002450 <main+0x6b8>)
 8002376:	f7ff fcb9 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_QUANTIZE, Register_QUANTIZE(),
 800237a:	a816      	add	r0, sp, #88	; 0x58
 800237c:	f010 fd06 	bl	8012d8c <_ZN6tflite17Register_QUANTIZEEv>
                      ParseQuantize);
 8002380:	4b43      	ldr	r3, [pc, #268]	; (8002490 <main+0x6f8>)
 8002382:	aa16      	add	r2, sp, #88	; 0x58
 8002384:	2172      	movs	r1, #114	; 0x72
 8002386:	4832      	ldr	r0, [pc, #200]	; (8002450 <main+0x6b8>)
 8002388:	f7ff fcb0 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_HARD_SWISH, tflite::Register_HARD_SWISH(),
 800238c:	a816      	add	r0, sp, #88	; 0x58
 800238e:	f00d faa1 	bl	800f8d4 <_ZN6tflite19Register_HARD_SWISHEv>
                      ParseHardSwish);
 8002392:	4b40      	ldr	r3, [pc, #256]	; (8002494 <main+0x6fc>)
 8002394:	aa16      	add	r2, sp, #88	; 0x58
 8002396:	2175      	movs	r1, #117	; 0x75
 8002398:	482d      	ldr	r0, [pc, #180]	; (8002450 <main+0x6b8>)
 800239a:	f7ff fca7 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
	micro_op_resolver.AddMul(tflite::Register_MUL());  //INT8()이 있는데 인식 안됨;
 800239e:	a816      	add	r0, sp, #88	; 0x58
 80023a0:	f00d fe90 	bl	80100c4 <_ZN6tflite12Register_MULEv>
    return AddBuiltin(BuiltinOperator_MUL, registration, ParseMul);
 80023a4:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <main+0x700>)
 80023a6:	aa16      	add	r2, sp, #88	; 0x58
 80023a8:	2112      	movs	r1, #18
 80023aa:	4829      	ldr	r0, [pc, #164]	; (8002450 <main+0x6b8>)
 80023ac:	f7ff fc9e 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_CONCATENATION, Register_CONCATENATION(),
 80023b0:	a816      	add	r0, sp, #88	; 0x58
 80023b2:	f00a f85d 	bl	800c470 <_ZN6tflite22Register_CONCATENATIONEv>
                      ParseConcatenation);
 80023b6:	4b39      	ldr	r3, [pc, #228]	; (800249c <main+0x704>)
 80023b8:	aa16      	add	r2, sp, #88	; 0x58
 80023ba:	2102      	movs	r1, #2
 80023bc:	4824      	ldr	r0, [pc, #144]	; (8002450 <main+0x6b8>)
 80023be:	f7ff fc95 	bl	8001cec <_ZN6tflite22MicroMutableOpResolverILj17EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
			model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 80023c2:	782c      	ldrb	r4, [r5, #0]
 80023c4:	f3bf 8f5b 	dmb	ish
 80023c8:	f014 0401 	ands.w	r4, r4, #1
 80023cc:	d115      	bne.n	80023fa <main+0x662>
 80023ce:	4628      	mov	r0, r5
 80023d0:	f014 fa40 	bl	8016854 <__cxa_guard_acquire>
 80023d4:	b188      	cbz	r0, 80023fa <main+0x662>
 80023d6:	f44f 3366 	mov.w	r3, #235520	; 0x39800
 80023da:	9401      	str	r4, [sp, #4]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <main+0x6b8>)
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	482f      	ldr	r0, [pc, #188]	; (80024a0 <main+0x708>)
 80023e2:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <main+0x70c>)
 80023e4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80023e8:	6831      	ldr	r1, [r6, #0]
 80023ea:	f007 fecb 	bl	800a184 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>
 80023ee:	4628      	mov	r0, r5
 80023f0:	f014 fa3c 	bl	801686c <__cxa_guard_release>
 80023f4:	482c      	ldr	r0, [pc, #176]	; (80024a8 <main+0x710>)
 80023f6:	f014 fccb 	bl	8016d90 <atexit>
	interpreter = &static_interpreter;
 80023fa:	4c2c      	ldr	r4, [pc, #176]	; (80024ac <main+0x714>)
 80023fc:	4828      	ldr	r0, [pc, #160]	; (80024a0 <main+0x708>)
 80023fe:	46a1      	mov	r9, r4
 8002400:	6020      	str	r0, [r4, #0]
	TfLiteStatus allocate_status = interpreter->AllocateTensors();
 8002402:	f008 f873 	bl	800a4ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
	if(allocate_status != kTfLiteOk) {
 8002406:	4605      	mov	r5, r0
 8002408:	2800      	cmp	r0, #0
 800240a:	d055      	beq.n	80024b8 <main+0x720>
		MicroPrintf("AllocateTensors() failed");
 800240c:	4828      	ldr	r0, [pc, #160]	; (80024b0 <main+0x718>)
			MicroPrintf("Invoke failed");
 800240e:	f008 fc53 	bl	800acb8 <_Z11MicroPrintfPKcz>
			return 0;
 8002412:	e004      	b.n	800241e <main+0x686>
 8002414:	4629      	mov	r1, r5
		MicroPrintf(
 8002416:	2203      	movs	r2, #3
 8002418:	4826      	ldr	r0, [pc, #152]	; (80024b4 <main+0x71c>)
 800241a:	f008 fc4d 	bl	800acb8 <_Z11MicroPrintfPKcz>
}
 800241e:	2000      	movs	r0, #0
 8002420:	b023      	add	sp, #140	; 0x8c
 8002422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002426:	bf00      	nop
 8002428:	40020000 	.word	0x40020000
 800242c:	40021400 	.word	0x40021400
 8002430:	40020800 	.word	0x40020800
 8002434:	20003598 	.word	0x20003598
 8002438:	40011000 	.word	0x40011000
 800243c:	08018524 	.word	0x08018524
 8002440:	20013230 	.word	0x20013230
 8002444:	08018688 	.word	0x08018688
 8002448:	08018573 	.word	0x08018573
 800244c:	2000361c 	.word	0x2000361c
 8002450:	2004ca40 	.word	0x2004ca40
 8002454:	080183c8 	.word	0x080183c8
 8002458:	08001b25 	.word	0x08001b25
 800245c:	20003620 	.word	0x20003620
 8002460:	08007c81 	.word	0x08007c81
 8002464:	08007895 	.word	0x08007895
 8002468:	08007989 	.word	0x08007989
 800246c:	08007ddd 	.word	0x08007ddd
 8002470:	08007e89 	.word	0x08007e89
 8002474:	08007f1d 	.word	0x08007f1d
 8002478:	08007a65 	.word	0x08007a65
 800247c:	08007fad 	.word	0x08007fad
 8002480:	08007be9 	.word	0x08007be9
 8002484:	080076d1 	.word	0x080076d1
 8002488:	08007759 	.word	0x08007759
 800248c:	08007d51 	.word	0x08007d51
 8002490:	080076d5 	.word	0x080076d5
 8002494:	080076cd 	.word	0x080076cd
 8002498:	08007b5d 	.word	0x08007b5d
 800249c:	080077f9 	.word	0x080077f9
 80024a0:	2004ccb0 	.word	0x2004ccb0
 80024a4:	20013240 	.word	0x20013240
 80024a8:	08001b55 	.word	0x08001b55
 80024ac:	20013224 	.word	0x20013224
 80024b0:	0801857b 	.word	0x0801857b
 80024b4:	0801852c 	.word	0x0801852c
	MicroPrintf("Point_3");
 80024b8:	484f      	ldr	r0, [pc, #316]	; (80025f8 <main+0x860>)
  	model_input = interpreter->input(0);
 80024ba:	4f50      	ldr	r7, [pc, #320]	; (80025fc <main+0x864>)
	MicroPrintf("Point_3");
 80024bc:	f008 fbfc 	bl	800acb8 <_Z11MicroPrintfPKcz>
  	model_output = interpreter->output(0);
 80024c0:	4e4f      	ldr	r6, [pc, #316]	; (8002600 <main+0x868>)
  	model_input = interpreter->input(0);
 80024c2:	4629      	mov	r1, r5
 80024c4:	6820      	ldr	r0, [r4, #0]
 80024c6:	f007 fec1 	bl	800a24c <_ZN6tflite16MicroInterpreter5inputEj>
  	model_output = interpreter->output(0);
 80024ca:	4629      	mov	r1, r5
  	model_input = interpreter->input(0);
 80024cc:	6038      	str	r0, [r7, #0]
  	model_output = interpreter->output(0);
 80024ce:	6820      	ldr	r0, [r4, #0]
 80024d0:	f007 fe9a 	bl	800a208 <_ZN6tflite16MicroInterpreter6outputEj>
 80024d4:	6030      	str	r0, [r6, #0]
    int camErr = initCamera();
 80024d6:	f7fe ff9f 	bl	8001418 <_Z10initCamerav>
 80024da:	9604      	str	r6, [sp, #16]
    if(camErr != 0) {
 80024dc:	4604      	mov	r4, r0
 80024de:	2800      	cmp	r0, #0
 80024e0:	d19d      	bne.n	800241e <main+0x686>
    StartCapture();
 80024e2:	f7ff f8d9 	bl	8001698 <_Z12StartCapturev>
  huart6.Instance = USART6;
 80024e6:	4847      	ldr	r0, [pc, #284]	; (8002604 <main+0x86c>)
  huart6.Init.BaudRate = 9600;
 80024e8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80024ec:	4a46      	ldr	r2, [pc, #280]	; (8002608 <main+0x870>)
    RGBbuf = (uint16_t *)&input[RES_H * RES_W * 4];
 80024ee:	4d47      	ldr	r5, [pc, #284]	; (800260c <main+0x874>)
 80024f0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8002614 <main+0x87c>
  huart6.Init.Parity = UART_PARITY_NONE;
 80024f4:	6104      	str	r4, [r0, #16]
    RGBbuf = (uint16_t *)&input[RES_H * RES_W * 4];
 80024f6:	f8c5 8000 	str.w	r8, [r5]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fa:	6244      	str	r4, [r0, #36]	; 0x24
  huart6.Init.BaudRate = 9600;
 80024fc:	e9c0 2300 	strd	r2, r3, [r0]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002500:	230c      	movs	r3, #12
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002502:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002506:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250a:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800250e:	f004 ff4e 	bl	80073ae <HAL_UART_Init>
 8002512:	2800      	cmp	r0, #0
 8002514:	d159      	bne.n	80025ca <main+0x832>
        DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 8002516:	f5a8 4410 	sub.w	r4, r8, #36864	; 0x9000
        ReadCapture();
 800251a:	f7ff f905 	bl	8001728 <_Z11ReadCapturev>
        StartCapture();
 800251e:	f7ff f8bb 	bl	8001698 <_Z12StartCapturev>
        DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 8002522:	2301      	movs	r3, #1
 8002524:	2160      	movs	r1, #96	; 0x60
 8002526:	4622      	mov	r2, r4
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	4608      	mov	r0, r1
 800252c:	682b      	ldr	r3, [r5, #0]
 800252e:	f7fe ffcd 	bl	80014cc <_Z22DecodeandProcessAndRGBiiPaPti>
            model_input->data.uint8[index] = red;
 8002532:	f8d7 8000 	ldr.w	r8, [r7]
 8002536:	2000      	movs	r0, #0
 8002538:	eb00 0140 	add.w	r1, r0, r0, lsl #1
          for (int j = 0; j < RES_W; j++) {
 800253c:	2300      	movs	r3, #0
            uint8_t red = (int32_t)input[index] + 128;
 800253e:	f811 e004 	ldrb.w	lr, [r1, r4]
 8002542:	eb01 0a04 	add.w	sl, r1, r4
            model_input->data.uint8[index] = red;
 8002546:	f8d8 6004 	ldr.w	r6, [r8, #4]
            RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800254a:	eb03 0b00 	add.w	fp, r3, r0
            uint8_t red = (int32_t)input[index] + 128;
 800254e:	f08e 0e80 	eor.w	lr, lr, #128	; 0x80
            uint8_t green = (int32_t)input[index + 1] + 128;
 8002552:	f89a c001 	ldrb.w	ip, [sl, #1]
            uint8_t blue = (int32_t)input[index + 2] + 128;
 8002556:	f89a 2002 	ldrb.w	r2, [sl, #2]
          for (int j = 0; j < RES_W; j++) {
 800255a:	3301      	adds	r3, #1
            model_input->data.uint8[index] = red;
 800255c:	f806 e001 	strb.w	lr, [r6, r1]
            uint8_t green = (int32_t)input[index + 1] + 128;
 8002560:	f08c 0c80 	eor.w	ip, ip, #128	; 0x80
            model_input->data.uint8[index + 1] = green;
 8002564:	f8d8 6004 	ldr.w	r6, [r8, #4]
            uint8_t blue = (int32_t)input[index + 2] + 128;
 8002568:	f082 0280 	eor.w	r2, r2, #128	; 0x80
            uint16_t r = ((red >> 3) & 0x1f) << 11;
 800256c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
          for (int j = 0; j < RES_W; j++) {
 8002570:	2b60      	cmp	r3, #96	; 0x60
            model_input->data.uint8[index + 1] = green;
 8002572:	eb06 0a01 	add.w	sl, r6, r1
 8002576:	f88a c001 	strb.w	ip, [sl, #1]
            uint16_t g = ((green >> 2) & 0x3f) << 5;
 800257a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
            model_input->data.uint8[index + 2] = blue;
 800257e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8002582:	eb06 0a01 	add.w	sl, r6, r1
 8002586:	f101 0103 	add.w	r1, r1, #3
 800258a:	f88a 2002 	strb.w	r2, [sl, #2]
            uint16_t b = (blue >> 3) & 0x1f;
 800258e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
            RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 8002592:	f8d5 a000 	ldr.w	sl, [r5]
 8002596:	ea42 2ece 	orr.w	lr, r2, lr, lsl #11
 800259a:	ea4e 1e4c 	orr.w	lr, lr, ip, lsl #5
 800259e:	f82a e01b 	strh.w	lr, [sl, fp, lsl #1]
          for (int j = 0; j < RES_W; j++) {
 80025a2:	d1cc      	bne.n	800253e <main+0x7a6>
 80025a4:	3060      	adds	r0, #96	; 0x60
        for (int i = 0; i < RES_W; i++) {
 80025a6:	f5b0 5f10 	cmp.w	r0, #9216	; 0x2400
 80025aa:	d1c5      	bne.n	8002538 <main+0x7a0>
        loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 2);
 80025ac:	2202      	movs	r2, #2
 80025ae:	210a      	movs	r1, #10
 80025b0:	e9cd a200 	strd	sl, r2, [sp]
 80025b4:	4608      	mov	r0, r1
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7ff fa2a 	bl	8001a10 <_Z13loadRGB565LCDmmmmPth>
		TfLiteStatus invoke_status = interpreter->Invoke();
 80025bc:	f8d9 0000 	ldr.w	r0, [r9]
 80025c0:	f008 f87c 	bl	800a6bc <_ZN6tflite16MicroInterpreter6InvokeEv>
		if (invoke_status != kTfLiteOk)
 80025c4:	b128      	cbz	r0, 80025d2 <main+0x83a>
			MicroPrintf("Invoke failed");
 80025c6:	4812      	ldr	r0, [pc, #72]	; (8002610 <main+0x878>)
 80025c8:	e721      	b.n	800240e <main+0x676>
    BSP_LED_On(LED_GREEN);
 80025ca:	4620      	mov	r0, r4
 80025cc:	f002 f81a 	bl	8004604 <BSP_LED_On>
 80025d0:	e7fe      	b.n	80025d0 <main+0x838>
		handle_output(model_output->data.uint8[beeIndex],
 80025d2:	9b04      	ldr	r3, [sp, #16]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80025da:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80025de:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80025e2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80025e6:	f89c 0000 	ldrb.w	r0, [ip]
 80025ea:	f89c c003 	ldrb.w	ip, [ip, #3]
 80025ee:	f8cd c000 	str.w	ip, [sp]
 80025f2:	f7ff faf3 	bl	8001bdc <_Z13handle_outputhhhhh>
    }
 80025f6:	e790      	b.n	800251a <main+0x782>
 80025f8:	08018594 	.word	0x08018594
 80025fc:	20013228 	.word	0x20013228
 8002600:	2001322c 	.word	0x2001322c
 8002604:	2004cd6c 	.word	0x2004cd6c
 8002608:	40011400 	.word	0x40011400
 800260c:	20003618 	.word	0x20003618
 8002610:	0801859c 	.word	0x0801859c
 8002614:	2000c624 	.word	0x2000c624

08002618 <stuffChar>:
  gInBufLeft--;
  return gInBuf[gInBufOfs++];
}

static PJPG_INLINE void stuffChar(uint8 i) {
  gInBufOfs--;
 8002618:	4a05      	ldr	r2, [pc, #20]	; (8002630 <stuffChar+0x18>)
 800261a:	7813      	ldrb	r3, [r2, #0]
 800261c:	3b01      	subs	r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	7013      	strb	r3, [r2, #0]
  gInBuf[gInBufOfs] = i;
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <stuffChar+0x1c>)
 8002624:	54d0      	strb	r0, [r2, r3]
  gInBufLeft++;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <stuffChar+0x20>)
 8002628:	7813      	ldrb	r3, [r2, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	7013      	strb	r3, [r2, #0]
}
 800262e:	4770      	bx	lr
 8002630:	2004d2ed 	.word	0x2004d2ed
 8002634:	2004d1ec 	.word	0x2004d1ec
 8002638:	2004d2ec 	.word	0x2004d2ec

0800263c <clamp>:
  x += 128L;
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
}

static PJPG_INLINE uint8 clamp(int16 s) {
  if ((uint16)s > 255U) {
 800263c:	b283      	uxth	r3, r0
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d904      	bls.n	800264c <clamp+0x10>
    if (s < 0)
 8002642:	2800      	cmp	r0, #0
 8002644:	bfac      	ite	ge
 8002646:	20ff      	movge	r0, #255	; 0xff
 8002648:	2000      	movlt	r0, #0
 800264a:	4770      	bx	lr
      return 0;
    else if (s > 255)
      return 255;
  }

  return (uint8)s;
 800264c:	b2c0      	uxtb	r0, r0
}
 800264e:	4770      	bx	lr

08002650 <addAndClamp>:
    pSrc++;
  }
}

static PJPG_INLINE uint8 addAndClamp(uint8 a, int16 b) {
  b = a + b;
 8002650:	4408      	add	r0, r1
 8002652:	b280      	uxth	r0, r0

  if ((uint16)b > 255U) {
 8002654:	28ff      	cmp	r0, #255	; 0xff
 8002656:	d904      	bls.n	8002662 <addAndClamp+0x12>
  b = a + b;
 8002658:	b203      	sxth	r3, r0
    if (b < 0)
 800265a:	2b00      	cmp	r3, #0
 800265c:	db03      	blt.n	8002666 <addAndClamp+0x16>
      return 0;
    else if (b > 255)
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	dc03      	bgt.n	800266a <addAndClamp+0x1a>
      return 255;
  }

  return (uint8)b;
 8002662:	b2c0      	uxtb	r0, r0
 8002664:	4770      	bx	lr
      return 0;
 8002666:	2000      	movs	r0, #0
 8002668:	4770      	bx	lr
      return 255;
 800266a:	20ff      	movs	r0, #255	; 0xff
}
 800266c:	4770      	bx	lr

0800266e <subAndClamp>:

static PJPG_INLINE uint8 subAndClamp(uint8 a, int16 b) {
  b = a - b;
 800266e:	1a40      	subs	r0, r0, r1
 8002670:	b280      	uxth	r0, r0

  if ((uint16)b > 255U) {
 8002672:	28ff      	cmp	r0, #255	; 0xff
 8002674:	d904      	bls.n	8002680 <subAndClamp+0x12>
  b = a - b;
 8002676:	b203      	sxth	r3, r0
    if (b < 0)
 8002678:	2b00      	cmp	r3, #0
 800267a:	db03      	blt.n	8002684 <subAndClamp+0x16>
      return 0;
    else if (b > 255)
 800267c:	2bff      	cmp	r3, #255	; 0xff
 800267e:	dc03      	bgt.n	8002688 <subAndClamp+0x1a>
      return 255;
  }

  return (uint8)b;
 8002680:	b2c0      	uxtb	r0, r0
 8002682:	4770      	bx	lr
      return 0;
 8002684:	2000      	movs	r0, #0
 8002686:	4770      	bx	lr
      return 255;
 8002688:	20ff      	movs	r0, #255	; 0xff
}
 800268a:	4770      	bx	lr

0800268c <upsampleCb>:
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
 800268c:	4b31      	ldr	r3, [pc, #196]	; (8002754 <upsampleCb+0xc8>)
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {
 800268e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 8002692:	4e31      	ldr	r6, [pc, #196]	; (8002758 <upsampleCb+0xcc>)
  uint8 *pDstG = gMCUBufG + dstOfs;
 8002694:	eb03 0a01 	add.w	sl, r3, r1
  uint8 *pDstB = gMCUBufB + dstOfs;
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <upsampleCb+0xd0>)
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {
 800269a:	b085      	sub	sp, #20
  int16 *pSrc = gCoeffBuf + srcOfs;
 800269c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
  uint8 *pDstB = gMCUBufB + dstOfs;
 80026a0:	f04f 0802 	mov.w	r8, #2
 80026a4:	eb03 0901 	add.w	r9, r3, r1
      pDstG[0] = subAndClamp(pDstG[0], cbG);
      pDstG[1] = subAndClamp(pDstG[1], cbG);
      pDstG[8] = subAndClamp(pDstG[8], cbG);
      pDstG[9] = subAndClamp(pDstG[9], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80026a8:	f04f 0bc6 	mov.w	fp, #198	; 0xc6
      cbG = ((cb * 88U) >> 8U) - 44U;
 80026ac:	2358      	movs	r3, #88	; 0x58
 80026ae:	f106 0108 	add.w	r1, r6, #8
 80026b2:	eb0a 0408 	add.w	r4, sl, r8
 80026b6:	eb09 0208 	add.w	r2, r9, r8
 80026ba:	9602      	str	r6, [sp, #8]
 80026bc:	9101      	str	r1, [sp, #4]
      uint8 cb = (uint8)*pSrc++;
 80026be:	f936 7b02 	ldrsh.w	r7, [r6], #2
 80026c2:	3402      	adds	r4, #2
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 80026c4:	f814 0c04 	ldrb.w	r0, [r4, #-4]
      uint8 cb = (uint8)*pSrc++;
 80026c8:	b2ff      	uxtb	r7, r7
      cbG = ((cb * 88U) >> 8U) - 44U;
 80026ca:	9303      	str	r3, [sp, #12]
 80026cc:	fb17 f503 	smulbb	r5, r7, r3
 80026d0:	0a2d      	lsrs	r5, r5, #8
 80026d2:	3d2c      	subs	r5, #44	; 0x2c
 80026d4:	b22d      	sxth	r5, r5
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7ff ffc9 	bl	800266e <subAndClamp>
 80026dc:	f804 0c04 	strb.w	r0, [r4, #-4]
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 80026e0:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 80026e4:	f7ff ffc3 	bl	800266e <subAndClamp>
 80026e8:	f804 0c03 	strb.w	r0, [r4, #-3]
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 80026ec:	7920      	ldrb	r0, [r4, #4]
 80026ee:	f7ff ffbe 	bl	800266e <subAndClamp>
 80026f2:	7120      	strb	r0, [r4, #4]
      pDstG[9] = subAndClamp(pDstG[9], cbG);
 80026f4:	7960      	ldrb	r0, [r4, #5]
 80026f6:	f7ff ffba 	bl	800266e <subAndClamp>
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80026fa:	f1a7 01e3 	sub.w	r1, r7, #227	; 0xe3
 80026fe:	fb17 f70b 	smulbb	r7, r7, fp
      pDstG[9] = subAndClamp(pDstG[9], cbG);
 8002702:	7160      	strb	r0, [r4, #5]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 8002704:	f812 0c02 	ldrb.w	r0, [r2, #-2]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 8002708:	eb01 2717 	add.w	r7, r1, r7, lsr #8
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800270c:	4639      	mov	r1, r7
 800270e:	f7ff ff9f 	bl	8002650 <addAndClamp>
 8002712:	f802 0c02 	strb.w	r0, [r2, #-2]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 8002716:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800271a:	f7ff ff99 	bl	8002650 <addAndClamp>
 800271e:	f802 0c01 	strb.w	r0, [r2, #-1]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 8002722:	7990      	ldrb	r0, [r2, #6]
 8002724:	f7ff ff94 	bl	8002650 <addAndClamp>
 8002728:	7190      	strb	r0, [r2, #6]
      pDstB[9] = addAndClamp(pDstB[9], cbB);
 800272a:	79d0      	ldrb	r0, [r2, #7]
 800272c:	f7ff ff90 	bl	8002650 <addAndClamp>
    for (x = 0; x < 4; x++) {
 8002730:	9b01      	ldr	r3, [sp, #4]
      pDstB[9] = addAndClamp(pDstB[9], cbB);
 8002732:	71d0      	strb	r0, [r2, #7]
 8002734:	3202      	adds	r2, #2
    for (x = 0; x < 4; x++) {
 8002736:	429e      	cmp	r6, r3
 8002738:	9b03      	ldr	r3, [sp, #12]
 800273a:	d1c0      	bne.n	80026be <upsampleCb+0x32>
 800273c:	f108 0810 	add.w	r8, r8, #16

      pDstG += 2;
      pDstB += 2;
    }

    pSrc = pSrc - 4 + 8;
 8002740:	9e02      	ldr	r6, [sp, #8]
  for (y = 0; y < 4; y++) {
 8002742:	f1b8 0f42 	cmp.w	r8, #66	; 0x42
    pSrc = pSrc - 4 + 8;
 8002746:	f106 0610 	add.w	r6, r6, #16
  for (y = 0; y < 4; y++) {
 800274a:	d1b0      	bne.n	80026ae <upsampleCb+0x22>
    pDstG = pDstG - 8 + 16;
    pDstB = pDstB - 8 + 16;
  }
}
 800274c:	b005      	add	sp, #20
 800274e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002752:	bf00      	nop
 8002754:	2004d3f4 	.word	0x2004d3f4
 8002758:	2004cdf0 	.word	0x2004cdf0
 800275c:	2004d2f4 	.word	0x2004d2f4

08002760 <upsampleCbH>:

static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <upsampleCbH+0xa8>)
  int16 *pSrc = gCoeffBuf + srcOfs;
 8002762:	4a2a      	ldr	r2, [pc, #168]	; (800280c <upsampleCbH+0xac>)
static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
 8002764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8 *pDstG = gMCUBufG + dstOfs;
 8002768:	eb03 0a01 	add.w	sl, r3, r1
  uint8 *pDstB = gMCUBufB + dstOfs;
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <upsampleCbH+0xb0>)
static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
 800276e:	b085      	sub	sp, #20
  int16 *pSrc = gCoeffBuf + srcOfs;
 8002770:	eb02 0240 	add.w	r2, r2, r0, lsl #1
  uint8 *pDstB = gMCUBufB + dstOfs;
 8002774:	eb03 0901 	add.w	r9, r3, r1
 8002778:	f04f 0802 	mov.w	r8, #2
  for (y = 0; y < 8; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cb = (uint8)*pSrc++;
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 800277c:	2358      	movs	r3, #88	; 0x58
      pDstG[0] = subAndClamp(pDstG[0], cbG);
      pDstG[1] = subAndClamp(pDstG[1], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800277e:	f04f 0bc6 	mov.w	fp, #198	; 0xc6
 8002782:	f102 0108 	add.w	r1, r2, #8
 8002786:	eb0a 0708 	add.w	r7, sl, r8
 800278a:	eb09 0608 	add.w	r6, r9, r8
 800278e:	9202      	str	r2, [sp, #8]
 8002790:	9101      	str	r1, [sp, #4]
      uint8 cb = (uint8)*pSrc++;
 8002792:	f932 5b02 	ldrsh.w	r5, [r2], #2
 8002796:	3702      	adds	r7, #2
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 8002798:	f817 0c04 	ldrb.w	r0, [r7, #-4]
 800279c:	3602      	adds	r6, #2
      uint8 cb = (uint8)*pSrc++;
 800279e:	b2ed      	uxtb	r5, r5
      cbG = ((cb * 88U) >> 8U) - 44U;
 80027a0:	9303      	str	r3, [sp, #12]
 80027a2:	fb15 f403 	smulbb	r4, r5, r3
 80027a6:	0a24      	lsrs	r4, r4, #8
 80027a8:	3c2c      	subs	r4, #44	; 0x2c
 80027aa:	b224      	sxth	r4, r4
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 80027ac:	4621      	mov	r1, r4
 80027ae:	f7ff ff5e 	bl	800266e <subAndClamp>
 80027b2:	f807 0c04 	strb.w	r0, [r7, #-4]
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 80027b6:	f817 0c03 	ldrb.w	r0, [r7, #-3]
 80027ba:	f7ff ff58 	bl	800266e <subAndClamp>
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80027be:	f1a5 01e3 	sub.w	r1, r5, #227	; 0xe3
 80027c2:	fb15 f50b 	smulbb	r5, r5, fp
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 80027c6:	f807 0c03 	strb.w	r0, [r7, #-3]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 80027ca:	f816 0c04 	ldrb.w	r0, [r6, #-4]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80027ce:	eb01 2515 	add.w	r5, r1, r5, lsr #8
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7ff ff3c 	bl	8002650 <addAndClamp>
 80027d8:	f806 0c04 	strb.w	r0, [r6, #-4]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 80027dc:	f816 0c03 	ldrb.w	r0, [r6, #-3]
 80027e0:	f7ff ff36 	bl	8002650 <addAndClamp>
    for (x = 0; x < 4; x++) {
 80027e4:	9b01      	ldr	r3, [sp, #4]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 80027e6:	f806 0c03 	strb.w	r0, [r6, #-3]
    for (x = 0; x < 4; x++) {
 80027ea:	429a      	cmp	r2, r3
 80027ec:	9b03      	ldr	r3, [sp, #12]
 80027ee:	d1d0      	bne.n	8002792 <upsampleCbH+0x32>
 80027f0:	f108 0808 	add.w	r8, r8, #8

      pDstG += 2;
      pDstB += 2;
    }

    pSrc = pSrc - 4 + 8;
 80027f4:	9a02      	ldr	r2, [sp, #8]
  for (y = 0; y < 8; y++) {
 80027f6:	f1b8 0f42 	cmp.w	r8, #66	; 0x42
    pSrc = pSrc - 4 + 8;
 80027fa:	f102 0210 	add.w	r2, r2, #16
  for (y = 0; y < 8; y++) {
 80027fe:	d1c0      	bne.n	8002782 <upsampleCbH+0x22>
  }
}
 8002800:	b005      	add	sp, #20
 8002802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002806:	bf00      	nop
 8002808:	2004d3f4 	.word	0x2004d3f4
 800280c:	2004cdf0 	.word	0x2004cdf0
 8002810:	2004d2f4 	.word	0x2004d2f4

08002814 <upsampleCbV>:

static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <upsampleCbV+0x90>)
static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
 8002816:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 800281a:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <upsampleCbV+0x94>)
  uint8 *pDstG = gMCUBufG + dstOfs;
 800281c:	eb03 0a01 	add.w	sl, r3, r1
  uint8 *pDstB = gMCUBufB + dstOfs;
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <upsampleCbV+0x98>)
 8002822:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  int16 *pSrc = gCoeffBuf + srcOfs;
 8002826:	eb02 0240 	add.w	r2, r2, r0, lsl #1

      cbG = ((cb * 88U) >> 8U) - 44U;
      pDstG[0] = subAndClamp(pDstG[0], cbG);
      pDstG[8] = subAndClamp(pDstG[8], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800282a:	f04f 0bc6 	mov.w	fp, #198	; 0xc6
  uint8 *pDstB = gMCUBufB + dstOfs;
 800282e:	eb03 0901 	add.w	r9, r3, r1
      cbG = ((cb * 88U) >> 8U) - 44U;
 8002832:	2358      	movs	r3, #88	; 0x58
 8002834:	f102 0110 	add.w	r1, r2, #16
 8002838:	eb0a 0807 	add.w	r8, sl, r7
 800283c:	eb09 0607 	add.w	r6, r9, r7
 8002840:	9100      	str	r1, [sp, #0]
      uint8 cb = (uint8)*pSrc++;
 8002842:	f932 5b02 	ldrsh.w	r5, [r2], #2
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 8002846:	f818 0f01 	ldrb.w	r0, [r8, #1]!
      uint8 cb = (uint8)*pSrc++;
 800284a:	b2ed      	uxtb	r5, r5
      cbG = ((cb * 88U) >> 8U) - 44U;
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	fb15 f403 	smulbb	r4, r5, r3
 8002852:	0a24      	lsrs	r4, r4, #8
 8002854:	3c2c      	subs	r4, #44	; 0x2c
 8002856:	b224      	sxth	r4, r4
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 8002858:	4621      	mov	r1, r4
 800285a:	f7ff ff08 	bl	800266e <subAndClamp>
 800285e:	f888 0000 	strb.w	r0, [r8]
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 8002862:	f898 0008 	ldrb.w	r0, [r8, #8]
 8002866:	f7ff ff02 	bl	800266e <subAndClamp>
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800286a:	f1a5 01e3 	sub.w	r1, r5, #227	; 0xe3
 800286e:	fb15 f50b 	smulbb	r5, r5, fp
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 8002872:	f888 0008 	strb.w	r0, [r8, #8]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 8002876:	f816 0f01 	ldrb.w	r0, [r6, #1]!
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800287a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800287e:	4629      	mov	r1, r5
 8002880:	f7ff fee6 	bl	8002650 <addAndClamp>
 8002884:	7030      	strb	r0, [r6, #0]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 8002886:	7a30      	ldrb	r0, [r6, #8]
 8002888:	f7ff fee2 	bl	8002650 <addAndClamp>
    for (x = 0; x < 8; x++) {
 800288c:	9b00      	ldr	r3, [sp, #0]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800288e:	7230      	strb	r0, [r6, #8]
    for (x = 0; x < 8; x++) {
 8002890:	429a      	cmp	r2, r3
 8002892:	9b01      	ldr	r3, [sp, #4]
 8002894:	d1d5      	bne.n	8002842 <upsampleCbV+0x2e>
 8002896:	3710      	adds	r7, #16
  for (y = 0; y < 4; y++) {
 8002898:	2f3f      	cmp	r7, #63	; 0x3f
 800289a:	d1cb      	bne.n	8002834 <upsampleCbV+0x20>
    }

    pDstG = pDstG - 8 + 16;
    pDstB = pDstB - 8 + 16;
  }
}
 800289c:	b003      	add	sp, #12
 800289e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028a2:	bf00      	nop
 80028a4:	2004d3f4 	.word	0x2004d3f4
 80028a8:	2004cdf0 	.word	0x2004cdf0
 80028ac:	2004d2f4 	.word	0x2004d2f4

080028b0 <upsampleCr>:
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
  uint8 *pDstR = gMCUBufR + dstOfs;
 80028b0:	4b31      	ldr	r3, [pc, #196]	; (8002978 <upsampleCr+0xc8>)
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
 80028b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 80028b6:	4e31      	ldr	r6, [pc, #196]	; (800297c <upsampleCr+0xcc>)
  uint8 *pDstR = gMCUBufR + dstOfs;
 80028b8:	eb03 0a01 	add.w	sl, r3, r1
  uint8 *pDstG = gMCUBufG + dstOfs;
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <upsampleCr+0xd0>)
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
 80028be:	b085      	sub	sp, #20
  int16 *pSrc = gCoeffBuf + srcOfs;
 80028c0:	eb06 0640 	add.w	r6, r6, r0, lsl #1
  uint8 *pDstG = gMCUBufG + dstOfs;
 80028c4:	f04f 0802 	mov.w	r8, #2
 80028c8:	eb03 0901 	add.w	r9, r3, r1
      pDstR[0] = addAndClamp(pDstR[0], crR);
      pDstR[1] = addAndClamp(pDstR[1], crR);
      pDstR[8] = addAndClamp(pDstR[8], crR);
      pDstR[9] = addAndClamp(pDstR[9], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 80028cc:	f04f 0bb7 	mov.w	fp, #183	; 0xb7
      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 80028d0:	2367      	movs	r3, #103	; 0x67
 80028d2:	f106 0208 	add.w	r2, r6, #8
 80028d6:	eb0a 0508 	add.w	r5, sl, r8
 80028da:	eb09 0408 	add.w	r4, r9, r8
 80028de:	9602      	str	r6, [sp, #8]
 80028e0:	9201      	str	r2, [sp, #4]
      uint8 cr = (uint8)*pSrc++;
 80028e2:	f936 2b02 	ldrsh.w	r2, [r6], #2
 80028e6:	3502      	adds	r5, #2
      pDstR[0] = addAndClamp(pDstR[0], crR);
 80028e8:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80028ec:	3402      	adds	r4, #2
      uint8 cr = (uint8)*pSrc++;
 80028ee:	b2d2      	uxtb	r2, r2
      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 80028f0:	9303      	str	r3, [sp, #12]
 80028f2:	fb12 f103 	smulbb	r1, r2, r3
 80028f6:	f1a2 07b3 	sub.w	r7, r2, #179	; 0xb3
 80028fa:	eb07 2711 	add.w	r7, r7, r1, lsr #8
      pDstR[0] = addAndClamp(pDstR[0], crR);
 80028fe:	4639      	mov	r1, r7
 8002900:	f7ff fea6 	bl	8002650 <addAndClamp>
 8002904:	f805 0c04 	strb.w	r0, [r5, #-4]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 8002908:	f815 0c03 	ldrb.w	r0, [r5, #-3]
 800290c:	f7ff fea0 	bl	8002650 <addAndClamp>
 8002910:	f805 0c03 	strb.w	r0, [r5, #-3]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 8002914:	7928      	ldrb	r0, [r5, #4]
 8002916:	f7ff fe9b 	bl	8002650 <addAndClamp>
 800291a:	7128      	strb	r0, [r5, #4]
      pDstR[9] = addAndClamp(pDstR[9], crR);
 800291c:	7968      	ldrb	r0, [r5, #5]
 800291e:	f7ff fe97 	bl	8002650 <addAndClamp>
      crG = ((cr * 183U) >> 8U) - 91;
 8002922:	fb12 f20b 	smulbb	r2, r2, fp
      pDstR[9] = addAndClamp(pDstR[9], crR);
 8002926:	7168      	strb	r0, [r5, #5]
      crG = ((cr * 183U) >> 8U) - 91;
 8002928:	0a12      	lsrs	r2, r2, #8
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800292a:	f814 0c04 	ldrb.w	r0, [r4, #-4]
      crG = ((cr * 183U) >> 8U) - 91;
 800292e:	3a5b      	subs	r2, #91	; 0x5b
 8002930:	b212      	sxth	r2, r2
      pDstG[0] = subAndClamp(pDstG[0], crG);
 8002932:	4611      	mov	r1, r2
 8002934:	f7ff fe9b 	bl	800266e <subAndClamp>
 8002938:	f804 0c04 	strb.w	r0, [r4, #-4]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 800293c:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 8002940:	f7ff fe95 	bl	800266e <subAndClamp>
 8002944:	f804 0c03 	strb.w	r0, [r4, #-3]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 8002948:	7920      	ldrb	r0, [r4, #4]
 800294a:	f7ff fe90 	bl	800266e <subAndClamp>
 800294e:	7120      	strb	r0, [r4, #4]
      pDstG[9] = subAndClamp(pDstG[9], crG);
 8002950:	7960      	ldrb	r0, [r4, #5]
 8002952:	f7ff fe8c 	bl	800266e <subAndClamp>
    for (x = 0; x < 4; x++) {
 8002956:	9b01      	ldr	r3, [sp, #4]
      pDstG[9] = subAndClamp(pDstG[9], crG);
 8002958:	7160      	strb	r0, [r4, #5]
    for (x = 0; x < 4; x++) {
 800295a:	429e      	cmp	r6, r3
 800295c:	9b03      	ldr	r3, [sp, #12]
 800295e:	d1c0      	bne.n	80028e2 <upsampleCr+0x32>
 8002960:	f108 0810 	add.w	r8, r8, #16

      pDstR += 2;
      pDstG += 2;
    }

    pSrc = pSrc - 4 + 8;
 8002964:	9e02      	ldr	r6, [sp, #8]
  for (y = 0; y < 4; y++) {
 8002966:	f1b8 0f42 	cmp.w	r8, #66	; 0x42
    pSrc = pSrc - 4 + 8;
 800296a:	f106 0610 	add.w	r6, r6, #16
  for (y = 0; y < 4; y++) {
 800296e:	d1b0      	bne.n	80028d2 <upsampleCr+0x22>
    pDstR = pDstR - 8 + 16;
    pDstG = pDstG - 8 + 16;
  }
}
 8002970:	b005      	add	sp, #20
 8002972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002976:	bf00      	nop
 8002978:	2004d4f4 	.word	0x2004d4f4
 800297c:	2004cdf0 	.word	0x2004cdf0
 8002980:	2004d3f4 	.word	0x2004d3f4

08002984 <upsampleCrH>:

static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
  uint8 *pDstR = gMCUBufR + dstOfs;
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <upsampleCrH+0xa0>)
static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
 8002986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 800298a:	4c27      	ldr	r4, [pc, #156]	; (8002a28 <upsampleCrH+0xa4>)
  uint8 *pDstR = gMCUBufR + dstOfs;
 800298c:	eb03 0a01 	add.w	sl, r3, r1
  uint8 *pDstG = gMCUBufG + dstOfs;
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <upsampleCrH+0xa8>)
static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
 8002992:	b085      	sub	sp, #20
  int16 *pSrc = gCoeffBuf + srcOfs;
 8002994:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  uint8 *pDstG = gMCUBufG + dstOfs;
 8002998:	2702      	movs	r7, #2
 800299a:	eb03 0901 	add.w	r9, r3, r1

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
      pDstR[0] = addAndClamp(pDstR[0], crR);
      pDstR[1] = addAndClamp(pDstR[1], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 800299e:	f04f 0bb7 	mov.w	fp, #183	; 0xb7
      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 80029a2:	2367      	movs	r3, #103	; 0x67
 80029a4:	f104 0208 	add.w	r2, r4, #8
 80029a8:	eb0a 0607 	add.w	r6, sl, r7
 80029ac:	eb09 0507 	add.w	r5, r9, r7
 80029b0:	9402      	str	r4, [sp, #8]
 80029b2:	9201      	str	r2, [sp, #4]
      uint8 cr = (uint8)*pSrc++;
 80029b4:	f934 2b02 	ldrsh.w	r2, [r4], #2
 80029b8:	3602      	adds	r6, #2
      pDstR[0] = addAndClamp(pDstR[0], crR);
 80029ba:	f816 0c04 	ldrb.w	r0, [r6, #-4]
 80029be:	3502      	adds	r5, #2
      uint8 cr = (uint8)*pSrc++;
 80029c0:	b2d2      	uxtb	r2, r2
      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 80029c2:	9303      	str	r3, [sp, #12]
 80029c4:	fb12 f103 	smulbb	r1, r2, r3
 80029c8:	f1a2 08b3 	sub.w	r8, r2, #179	; 0xb3
 80029cc:	eb08 2811 	add.w	r8, r8, r1, lsr #8
      pDstR[0] = addAndClamp(pDstR[0], crR);
 80029d0:	4641      	mov	r1, r8
 80029d2:	f7ff fe3d 	bl	8002650 <addAndClamp>
 80029d6:	f806 0c04 	strb.w	r0, [r6, #-4]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 80029da:	f816 0c03 	ldrb.w	r0, [r6, #-3]
 80029de:	f7ff fe37 	bl	8002650 <addAndClamp>
      crG = ((cr * 183U) >> 8U) - 91;
 80029e2:	fb12 f20b 	smulbb	r2, r2, fp
      pDstR[1] = addAndClamp(pDstR[1], crR);
 80029e6:	f806 0c03 	strb.w	r0, [r6, #-3]
      crG = ((cr * 183U) >> 8U) - 91;
 80029ea:	0a12      	lsrs	r2, r2, #8
      pDstG[0] = subAndClamp(pDstG[0], crG);
 80029ec:	f815 0c04 	ldrb.w	r0, [r5, #-4]
      crG = ((cr * 183U) >> 8U) - 91;
 80029f0:	3a5b      	subs	r2, #91	; 0x5b
 80029f2:	b212      	sxth	r2, r2
      pDstG[0] = subAndClamp(pDstG[0], crG);
 80029f4:	4611      	mov	r1, r2
 80029f6:	f7ff fe3a 	bl	800266e <subAndClamp>
 80029fa:	f805 0c04 	strb.w	r0, [r5, #-4]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 80029fe:	f815 0c03 	ldrb.w	r0, [r5, #-3]
 8002a02:	f7ff fe34 	bl	800266e <subAndClamp>
    for (x = 0; x < 4; x++) {
 8002a06:	9b01      	ldr	r3, [sp, #4]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 8002a08:	f805 0c03 	strb.w	r0, [r5, #-3]
    for (x = 0; x < 4; x++) {
 8002a0c:	429c      	cmp	r4, r3
 8002a0e:	9b03      	ldr	r3, [sp, #12]
 8002a10:	d1d0      	bne.n	80029b4 <upsampleCrH+0x30>
 8002a12:	3708      	adds	r7, #8

      pDstR += 2;
      pDstG += 2;
    }

    pSrc = pSrc - 4 + 8;
 8002a14:	9c02      	ldr	r4, [sp, #8]
  for (y = 0; y < 8; y++) {
 8002a16:	2f42      	cmp	r7, #66	; 0x42
    pSrc = pSrc - 4 + 8;
 8002a18:	f104 0410 	add.w	r4, r4, #16
  for (y = 0; y < 8; y++) {
 8002a1c:	d1c2      	bne.n	80029a4 <upsampleCrH+0x20>
  }
}
 8002a1e:	b005      	add	sp, #20
 8002a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a24:	2004d4f4 	.word	0x2004d4f4
 8002a28:	2004cdf0 	.word	0x2004cdf0
 8002a2c:	2004d3f4 	.word	0x2004d3f4

08002a30 <upsampleCrV>:

static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
  uint8 *pDstR = gMCUBufR + dstOfs;
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <upsampleCrV+0x88>)
static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {
 8002a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 8002a36:	4c21      	ldr	r4, [pc, #132]	; (8002abc <upsampleCrV+0x8c>)
  uint8 *pDstR = gMCUBufR + dstOfs;
 8002a38:	eb03 0a01 	add.w	sl, r3, r1
  uint8 *pDstG = gMCUBufG + dstOfs;
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <upsampleCrV+0x90>)
 8002a3e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  int16 *pSrc = gCoeffBuf + srcOfs;
 8002a42:	eb04 0440 	add.w	r4, r4, r0, lsl #1

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
      pDstR[0] = addAndClamp(pDstR[0], crR);
      pDstR[8] = addAndClamp(pDstR[8], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 8002a46:	f04f 0bb7 	mov.w	fp, #183	; 0xb7
  uint8 *pDstG = gMCUBufG + dstOfs;
 8002a4a:	eb03 0901 	add.w	r9, r3, r1
      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 8002a4e:	2367      	movs	r3, #103	; 0x67
 8002a50:	f104 0210 	add.w	r2, r4, #16
 8002a54:	eb0a 0706 	add.w	r7, sl, r6
 8002a58:	eb09 0506 	add.w	r5, r9, r6
 8002a5c:	9200      	str	r2, [sp, #0]
      uint8 cr = (uint8)*pSrc++;
 8002a5e:	f934 2b02 	ldrsh.w	r2, [r4], #2
      pDstR[0] = addAndClamp(pDstR[0], crR);
 8002a62:	f817 0f01 	ldrb.w	r0, [r7, #1]!
      uint8 cr = (uint8)*pSrc++;
 8002a66:	b2d2      	uxtb	r2, r2
      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	fb12 f103 	smulbb	r1, r2, r3
 8002a6e:	f1a2 08b3 	sub.w	r8, r2, #179	; 0xb3
 8002a72:	eb08 2811 	add.w	r8, r8, r1, lsr #8
      pDstR[0] = addAndClamp(pDstR[0], crR);
 8002a76:	4641      	mov	r1, r8
 8002a78:	f7ff fdea 	bl	8002650 <addAndClamp>
 8002a7c:	7038      	strb	r0, [r7, #0]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 8002a7e:	7a38      	ldrb	r0, [r7, #8]
 8002a80:	f7ff fde6 	bl	8002650 <addAndClamp>
      crG = ((cr * 183U) >> 8U) - 91;
 8002a84:	fb12 f20b 	smulbb	r2, r2, fp
      pDstR[8] = addAndClamp(pDstR[8], crR);
 8002a88:	7238      	strb	r0, [r7, #8]
      crG = ((cr * 183U) >> 8U) - 91;
 8002a8a:	0a12      	lsrs	r2, r2, #8
      pDstG[0] = subAndClamp(pDstG[0], crG);
 8002a8c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
      crG = ((cr * 183U) >> 8U) - 91;
 8002a90:	3a5b      	subs	r2, #91	; 0x5b
 8002a92:	b212      	sxth	r2, r2
      pDstG[0] = subAndClamp(pDstG[0], crG);
 8002a94:	4611      	mov	r1, r2
 8002a96:	f7ff fdea 	bl	800266e <subAndClamp>
 8002a9a:	7028      	strb	r0, [r5, #0]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 8002a9c:	7a28      	ldrb	r0, [r5, #8]
 8002a9e:	f7ff fde6 	bl	800266e <subAndClamp>
    for (x = 0; x < 8; x++) {
 8002aa2:	9b00      	ldr	r3, [sp, #0]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 8002aa4:	7228      	strb	r0, [r5, #8]
    for (x = 0; x < 8; x++) {
 8002aa6:	429c      	cmp	r4, r3
 8002aa8:	9b01      	ldr	r3, [sp, #4]
 8002aaa:	d1d8      	bne.n	8002a5e <upsampleCrV+0x2e>
 8002aac:	3610      	adds	r6, #16
  for (y = 0; y < 4; y++) {
 8002aae:	2e3f      	cmp	r6, #63	; 0x3f
 8002ab0:	d1ce      	bne.n	8002a50 <upsampleCrV+0x20>
    }

    pDstR = pDstR - 8 + 16;
    pDstG = pDstG - 8 + 16;
  }
}
 8002ab2:	b003      	add	sp, #12
 8002ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab8:	2004d4f4 	.word	0x2004d4f4
 8002abc:	2004cdf0 	.word	0x2004cdf0
 8002ac0:	2004d3f4 	.word	0x2004d3f4

08002ac4 <copyY>:

static void copyY(uint8 dstOfs) {
  uint8 i;
  uint8 *pRDst = gMCUBufR + dstOfs;
  uint8 *pGDst = gMCUBufG + dstOfs;
  uint8 *pBDst = gMCUBufB + dstOfs;
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <copyY+0x2c>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8002ac6:	490b      	ldr	r1, [pc, #44]	; (8002af4 <copyY+0x30>)
  uint8 *pGDst = gMCUBufG + dstOfs;
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <copyY+0x34>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8002aca:	4401      	add	r1, r0
  uint8 *pGDst = gMCUBufG + dstOfs;
 8002acc:	4402      	add	r2, r0
  uint8 *pBDst = gMCUBufB + dstOfs;
 8002ace:	4418      	add	r0, r3
 8002ad0:	2300      	movs	r3, #0
static void copyY(uint8 dstOfs) {
 8002ad2:	b530      	push	{r4, r5, lr}
  int16 *pSrc = gCoeffBuf;

  for (i = 64; i > 0; i--) {
    uint8 c = (uint8)*pSrc++;
 8002ad4:	4d09      	ldr	r5, [pc, #36]	; (8002afc <copyY+0x38>)
 8002ad6:	f815 4013 	ldrb.w	r4, [r5, r3, lsl #1]
 8002ada:	3301      	adds	r3, #1
  for (i = 64; i > 0; i--) {
 8002adc:	2b40      	cmp	r3, #64	; 0x40

    *pRDst++ = c;
 8002ade:	f801 4b01 	strb.w	r4, [r1], #1
    *pGDst++ = c;
 8002ae2:	f802 4b01 	strb.w	r4, [r2], #1
    *pBDst++ = c;
 8002ae6:	f800 4b01 	strb.w	r4, [r0], #1
  for (i = 64; i > 0; i--) {
 8002aea:	d1f4      	bne.n	8002ad6 <copyY+0x12>
  }
}
 8002aec:	bd30      	pop	{r4, r5, pc}
 8002aee:	bf00      	nop
 8002af0:	2004d2f4 	.word	0x2004d2f4
 8002af4:	2004d4f4 	.word	0x2004d4f4
 8002af8:	2004d3f4 	.word	0x2004d3f4
 8002afc:	2004cdf0 	.word	0x2004cdf0

08002b00 <getChar>:
static PJPG_INLINE uint8 getChar(void) {
 8002b00:	b570      	push	{r4, r5, r6, lr}
  if (!gInBufLeft) {
 8002b02:	4c13      	ldr	r4, [pc, #76]	; (8002b50 <getChar+0x50>)
 8002b04:	4d13      	ldr	r5, [pc, #76]	; (8002b54 <getChar+0x54>)
 8002b06:	7823      	ldrb	r3, [r4, #0]
 8002b08:	b9cb      	cbnz	r3, 8002b3e <getChar+0x3e>
  gInBufLeft = 0;
 8002b0a:	7023      	strb	r3, [r4, #0]
  gInBufOfs = 4;
 8002b0c:	2204      	movs	r2, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <getChar+0x58>)
 8002b10:	21fc      	movs	r1, #252	; 0xfc
  gInBufOfs = 4;
 8002b12:	702a      	strb	r2, [r5, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8002b14:	4622      	mov	r2, r4
 8002b16:	681e      	ldr	r6, [r3, #0]
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <getChar+0x5c>)
 8002b1a:	4811      	ldr	r0, [pc, #68]	; (8002b60 <getChar+0x60>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	47b0      	blx	r6
  if (status) {
 8002b20:	b108      	cbz	r0, 8002b26 <getChar+0x26>
    gCallbackStatus = status;
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <getChar+0x64>)
 8002b24:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 8002b26:	7823      	ldrb	r3, [r4, #0]
 8002b28:	b94b      	cbnz	r3, 8002b3e <getChar+0x3e>
      gTemFlag = ~gTemFlag;
 8002b2a:	4a0f      	ldr	r2, [pc, #60]	; (8002b68 <getChar+0x68>)
 8002b2c:	7813      	ldrb	r3, [r2, #0]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
      return gTemFlag ? 0xFF : 0xD9;
 8002b32:	2b00      	cmp	r3, #0
      gTemFlag = ~gTemFlag;
 8002b34:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 8002b36:	bf14      	ite	ne
 8002b38:	20ff      	movne	r0, #255	; 0xff
 8002b3a:	20d9      	moveq	r0, #217	; 0xd9
}
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
  gInBufLeft--;
 8002b3e:	7823      	ldrb	r3, [r4, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	7023      	strb	r3, [r4, #0]
  return gInBuf[gInBufOfs++];
 8002b44:	782b      	ldrb	r3, [r5, #0]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	702a      	strb	r2, [r5, #0]
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <getChar+0x6c>)
 8002b4c:	5cd0      	ldrb	r0, [r2, r3]
 8002b4e:	e7f5      	b.n	8002b3c <getChar+0x3c>
 8002b50:	2004d2ec 	.word	0x2004d2ec
 8002b54:	2004d2ed 	.word	0x2004d2ed
 8002b58:	2004d714 	.word	0x2004d714
 8002b5c:	2004d710 	.word	0x2004d710
 8002b60:	2004d1f0 	.word	0x2004d1f0
 8002b64:	2004cdef 	.word	0x2004cdef
 8002b68:	2004d70d 	.word	0x2004d70d
 8002b6c:	2004d1ec 	.word	0x2004d1ec

08002b70 <getOctet.part.1>:
static PJPG_INLINE uint8 getOctet(uint8 FFCheck) {
 8002b70:	b508      	push	{r3, lr}
    uint8 n = getChar();
 8002b72:	f7ff ffc5 	bl	8002b00 <getChar>
    if (n) {
 8002b76:	b130      	cbz	r0, 8002b86 <getOctet.part.1+0x16>
      stuffChar(n);
 8002b78:	f7ff fd4e 	bl	8002618 <stuffChar>
      stuffChar(0xFF);
 8002b7c:	20ff      	movs	r0, #255	; 0xff
}
 8002b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      stuffChar(0xFF);
 8002b82:	f7ff bd49 	b.w	8002618 <stuffChar>
}
 8002b86:	bd08      	pop	{r3, pc}

08002b88 <arithmeticRightShiftN16.constprop.4>:
  int16 r = (uint16)x >> (uint8)n;
 8002b88:	f3c0 13c8 	ubfx	r3, r0, #7, #9
  if (x < 0)
 8002b8c:	2800      	cmp	r0, #0
    r |= replicateSignBit16(n);
 8002b8e:	bfbc      	itt	lt
 8002b90:	ea6f 53c3 	mvnlt.w	r3, r3, lsl #23
 8002b94:	ea6f 53d3 	mvnlt.w	r3, r3, lsr #23
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	4770      	bx	lr

08002b9c <imul_b1_b3>:
  x += 128L;
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8002ba2:	fb00 2303 	mla	r3, r0, r3, r2
  long r = (unsigned long)x >> 8U;
 8002ba6:	0a18      	lsrs	r0, r3, #8
  if (x < 0)
 8002ba8:	2b00      	cmp	r3, #0
    r |= ~(~(unsigned long)0U >> 8U);
 8002baa:	bfb8      	it	lt
 8002bac:	f040 407f 	orrlt.w	r0, r0, #4278190080	; 0xff000000
}
 8002bb0:	b200      	sxth	r0, r0
 8002bb2:	4770      	bx	lr

08002bb4 <getBit>:
static PJPG_INLINE uint8 getBit(void) {
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (gBitBuf & 0x8000)
 8002bb6:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <getBit+0x38>)
  if (!gBitsLeft) {
 8002bb8:	4d0d      	ldr	r5, [pc, #52]	; (8002bf0 <getBit+0x3c>)
  if (gBitBuf & 0x8000)
 8002bba:	8827      	ldrh	r7, [r4, #0]
  if (!gBitsLeft) {
 8002bbc:	782b      	ldrb	r3, [r5, #0]
  uint8 ret = 0;
 8002bbe:	0bff      	lsrs	r7, r7, #15
  if (!gBitsLeft) {
 8002bc0:	b963      	cbnz	r3, 8002bdc <getBit+0x28>
  uint8 c = getChar();
 8002bc2:	f7ff ff9d 	bl	8002b00 <getChar>
  if ((FFCheck) && (c == 0xFF)) {
 8002bc6:	28ff      	cmp	r0, #255	; 0xff
  uint8 c = getChar();
 8002bc8:	4606      	mov	r6, r0
  if ((FFCheck) && (c == 0xFF)) {
 8002bca:	d101      	bne.n	8002bd0 <getBit+0x1c>
 8002bcc:	f7ff ffd0 	bl	8002b70 <getOctet.part.1>
    gBitBuf |= getOctet(1);
 8002bd0:	8820      	ldrh	r0, [r4, #0]
    gBitsLeft += 8;
 8002bd2:	782b      	ldrb	r3, [r5, #0]
    gBitBuf |= getOctet(1);
 8002bd4:	4306      	orrs	r6, r0
    gBitsLeft += 8;
 8002bd6:	3308      	adds	r3, #8
    gBitBuf |= getOctet(1);
 8002bd8:	8026      	strh	r6, [r4, #0]
    gBitsLeft += 8;
 8002bda:	702b      	strb	r3, [r5, #0]
  gBitsLeft--;
 8002bdc:	782b      	ldrb	r3, [r5, #0]
}
 8002bde:	4638      	mov	r0, r7
  gBitsLeft--;
 8002be0:	3b01      	subs	r3, #1
 8002be2:	702b      	strb	r3, [r5, #0]
  gBitBuf <<= 1;
 8002be4:	8823      	ldrh	r3, [r4, #0]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	8023      	strh	r3, [r4, #0]
}
 8002bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bec:	2004cdec 	.word	0x2004cdec
 8002bf0:	2004cdee 	.word	0x2004cdee

08002bf4 <huffDecode>:
                                    const uint8 *pHuffVal) {
 8002bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf8:	4607      	mov	r7, r0
 8002bfa:	460d      	mov	r5, r1
  uint16 code = getBit();
 8002bfc:	2600      	movs	r6, #0
 8002bfe:	f7ff ffd9 	bl	8002bb4 <getBit>
 8002c02:	f107 0820 	add.w	r8, r7, #32
 8002c06:	b280      	uxth	r0, r0
    if ((code <= maxCode) && (maxCode != 0xFFFF))
 8002c08:	f64f 79ff 	movw	r9, #65535	; 0xffff
    maxCode = pHuffTable->mMaxCode[i];
 8002c0c:	f838 3b02 	ldrh.w	r3, [r8], #2
    if ((code <= maxCode) && (maxCode != 0xFFFF))
 8002c10:	4283      	cmp	r3, r0
 8002c12:	d301      	bcc.n	8002c18 <huffDecode+0x24>
 8002c14:	454b      	cmp	r3, r9
 8002c16:	d10b      	bne.n	8002c30 <huffDecode+0x3c>
    code <<= 1;
 8002c18:	0040      	lsls	r0, r0, #1
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	b284      	uxth	r4, r0
    code |= getBit();
 8002c1e:	f7ff ffc9 	bl	8002bb4 <getBit>
    if (i == 16)
 8002c22:	2e10      	cmp	r6, #16
    code |= getBit();
 8002c24:	ea40 0004 	orr.w	r0, r0, r4
 8002c28:	b280      	uxth	r0, r0
    if (i == 16)
 8002c2a:	d1ef      	bne.n	8002c0c <huffDecode+0x18>
      return 0;
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	e009      	b.n	8002c44 <huffDecode+0x50>
  j = pHuffTable->mValPtr[i];
 8002c30:	19bb      	adds	r3, r7, r6
 8002c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c36:	4418      	add	r0, r3
  j = (uint8)(j + (code - pHuffTable->mMinCode[i]));
 8002c38:	f817 3016 	ldrb.w	r3, [r7, r6, lsl #1]
 8002c3c:	1ac0      	subs	r0, r0, r3
  return pHuffVal[j];
 8002c3e:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8002c42:	5c28      	ldrb	r0, [r5, r0]
}
 8002c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002c48 <getBits>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 8002c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (numBits > 8) {
 8002c4c:	2808      	cmp	r0, #8
  uint16 ret = gBitBuf;
 8002c4e:	4c2a      	ldr	r4, [pc, #168]	; (8002cf8 <getBits+0xb0>)
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 8002c50:	4680      	mov	r8, r0
 8002c52:	468a      	mov	sl, r1
  uint16 ret = gBitBuf;
 8002c54:	8826      	ldrh	r6, [r4, #0]
 8002c56:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002cfc <getBits+0xb4>
  if (numBits > 8) {
 8002c5a:	d943      	bls.n	8002ce4 <getBits+0x9c>
    gBitBuf <<= gBitsLeft;
 8002c5c:	f899 3000 	ldrb.w	r3, [r9]
    numBits -= 8;
 8002c60:	f1a0 0708 	sub.w	r7, r0, #8
    gBitBuf <<= gBitsLeft;
 8002c64:	fa06 f303 	lsl.w	r3, r6, r3
    numBits -= 8;
 8002c68:	b2ff      	uxtb	r7, r7
    gBitBuf <<= gBitsLeft;
 8002c6a:	8023      	strh	r3, [r4, #0]
  uint8 c = getChar();
 8002c6c:	f7ff ff48 	bl	8002b00 <getChar>
 8002c70:	4605      	mov	r5, r0
  if ((FFCheck) && (c == 0xFF)) {
 8002c72:	f1ba 0f00 	cmp.w	sl, #0
 8002c76:	d003      	beq.n	8002c80 <getBits+0x38>
 8002c78:	28ff      	cmp	r0, #255	; 0xff
 8002c7a:	d101      	bne.n	8002c80 <getBits+0x38>
 8002c7c:	f7ff ff78 	bl	8002b70 <getOctet.part.1>
    gBitBuf |= getOctet(FFCheck);
 8002c80:	8820      	ldrh	r0, [r4, #0]
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 8002c82:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
    gBitBuf |= getOctet(FFCheck);
 8002c86:	4305      	orrs	r5, r0
    gBitBuf <<= (8 - gBitsLeft);
 8002c88:	f899 0000 	ldrb.w	r0, [r9]
 8002c8c:	b2ad      	uxth	r5, r5
 8002c8e:	f1c0 0008 	rsb	r0, r0, #8
 8002c92:	4085      	lsls	r5, r0
 8002c94:	b2ad      	uxth	r5, r5
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 8002c96:	ea46 2615 	orr.w	r6, r6, r5, lsr #8
    gBitBuf <<= (8 - gBitsLeft);
 8002c9a:	8025      	strh	r5, [r4, #0]
  if (gBitsLeft < numBits) {
 8002c9c:	f899 2000 	ldrb.w	r2, [r9]
 8002ca0:	8823      	ldrh	r3, [r4, #0]
 8002ca2:	42ba      	cmp	r2, r7
 8002ca4:	d220      	bcs.n	8002ce8 <getBits+0xa0>
    gBitBuf <<= gBitsLeft;
 8002ca6:	4093      	lsls	r3, r2
 8002ca8:	8023      	strh	r3, [r4, #0]
  uint8 c = getChar();
 8002caa:	f7ff ff29 	bl	8002b00 <getChar>
 8002cae:	4605      	mov	r5, r0
  if ((FFCheck) && (c == 0xFF)) {
 8002cb0:	f1ba 0f00 	cmp.w	sl, #0
 8002cb4:	d003      	beq.n	8002cbe <getBits+0x76>
 8002cb6:	28ff      	cmp	r0, #255	; 0xff
 8002cb8:	d101      	bne.n	8002cbe <getBits+0x76>
 8002cba:	f7ff ff59 	bl	8002b70 <getOctet.part.1>
    gBitBuf |= getOctet(FFCheck);
 8002cbe:	8820      	ldrh	r0, [r4, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 8002cc0:	f899 3000 	ldrb.w	r3, [r9]
    gBitBuf |= getOctet(FFCheck);
 8002cc4:	4305      	orrs	r5, r0
    gBitBuf <<= (numBits - gBitsLeft);
 8002cc6:	1af8      	subs	r0, r7, r3
    gBitsLeft = 8 - (numBits - gBitsLeft);
 8002cc8:	3308      	adds	r3, #8
    gBitBuf <<= (numBits - gBitsLeft);
 8002cca:	b2ad      	uxth	r5, r5
    gBitsLeft = 8 - (numBits - gBitsLeft);
 8002ccc:	1bdf      	subs	r7, r3, r7
    gBitBuf <<= (numBits - gBitsLeft);
 8002cce:	4085      	lsls	r5, r0
    gBitsLeft = 8 - (numBits - gBitsLeft);
 8002cd0:	f889 7000 	strb.w	r7, [r9]
    gBitBuf <<= (numBits - gBitsLeft);
 8002cd4:	8025      	strh	r5, [r4, #0]
  return ret >> (16 - origBits);
 8002cd6:	f1c8 0010 	rsb	r0, r8, #16
 8002cda:	fa46 f000 	asr.w	r0, r6, r0
}
 8002cde:	b280      	uxth	r0, r0
 8002ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ce4:	4607      	mov	r7, r0
 8002ce6:	e7d9      	b.n	8002c9c <getBits+0x54>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 8002ce8:	1bd2      	subs	r2, r2, r7
    gBitBuf <<= numBits;
 8002cea:	fa03 f707 	lsl.w	r7, r3, r7
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 8002cee:	f889 2000 	strb.w	r2, [r9]
    gBitBuf <<= numBits;
 8002cf2:	8027      	strh	r7, [r4, #0]
 8002cf4:	e7ef      	b.n	8002cd6 <getBits+0x8e>
 8002cf6:	bf00      	nop
 8002cf8:	2004cdec 	.word	0x2004cdec
 8002cfc:	2004cdee 	.word	0x2004cdee

08002d00 <getBits1>:
  return getBits(numBits, 0);
 8002d00:	2100      	movs	r1, #0
 8002d02:	f7ff bfa1 	b.w	8002c48 <getBits>
	...

08002d08 <processMarkers>:
static uint8 processMarkers(uint8 *pMarker) {
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	4680      	mov	r8, r0
 8002d0e:	b087      	sub	sp, #28
        gQuant0[i] = (int16)temp;
 8002d10:	4d99      	ldr	r5, [pc, #612]	; (8002f78 <processMarkers+0x270>)
      c = (uint8)getBits1(8);
 8002d12:	2008      	movs	r0, #8
 8002d14:	f7ff fff4 	bl	8002d00 <getBits1>
    } while (c != 0xFF);
 8002d18:	b2c0      	uxtb	r0, r0
 8002d1a:	28ff      	cmp	r0, #255	; 0xff
 8002d1c:	d1f9      	bne.n	8002d12 <processMarkers+0xa>
      c = (uint8)getBits1(8);
 8002d1e:	2008      	movs	r0, #8
 8002d20:	f7ff ffee 	bl	8002d00 <getBits1>
 8002d24:	b2c0      	uxtb	r0, r0
    } while (c == 0xFF);
 8002d26:	28ff      	cmp	r0, #255	; 0xff
 8002d28:	d0f9      	beq.n	8002d1e <processMarkers+0x16>
  } while (c == 0);
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d0f1      	beq.n	8002d12 <processMarkers+0xa>
    switch (c) {
 8002d2e:	28cb      	cmp	r0, #203	; 0xcb
 8002d30:	d822      	bhi.n	8002d78 <processMarkers+0x70>
 8002d32:	28c9      	cmp	r0, #201	; 0xc9
 8002d34:	d21a      	bcs.n	8002d6c <processMarkers+0x64>
 8002d36:	28c4      	cmp	r0, #196	; 0xc4
 8002d38:	d038      	beq.n	8002dac <processMarkers+0xa4>
 8002d3a:	d814      	bhi.n	8002d66 <processMarkers+0x5e>
 8002d3c:	2801      	cmp	r0, #1
 8002d3e:	f000 8118 	beq.w	8002f72 <processMarkers+0x26a>
 8002d42:	d301      	bcc.n	8002d48 <processMarkers+0x40>
 8002d44:	28c0      	cmp	r0, #192	; 0xc0
 8002d46:	d211      	bcs.n	8002d6c <processMarkers+0x64>
  uint16 left = getBits1(16);
 8002d48:	2010      	movs	r0, #16
 8002d4a:	f7ff ffd9 	bl	8002d00 <getBits1>
  if (left < 2)
 8002d4e:	2801      	cmp	r0, #1
 8002d50:	d9df      	bls.n	8002d12 <processMarkers+0xa>
  left -= 2;
 8002d52:	3802      	subs	r0, #2
 8002d54:	b284      	uxth	r4, r0
  while (left) {
 8002d56:	2c00      	cmp	r4, #0
 8002d58:	d0db      	beq.n	8002d12 <processMarkers+0xa>
    left--;
 8002d5a:	3c01      	subs	r4, #1
    getBits1(8);
 8002d5c:	2008      	movs	r0, #8
 8002d5e:	f7ff ffcf 	bl	8002d00 <getBits1>
    left--;
 8002d62:	b2a4      	uxth	r4, r4
 8002d64:	e7f7      	b.n	8002d56 <processMarkers+0x4e>
    switch (c) {
 8002d66:	28c7      	cmp	r0, #199	; 0xc7
 8002d68:	f200 8103 	bhi.w	8002f72 <processMarkers+0x26a>
      *pMarker = c;
 8002d6c:	f888 0000 	strb.w	r0, [r8]
      return 0;
 8002d70:	2000      	movs	r0, #0
}
 8002d72:	b007      	add	sp, #28
 8002d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (c) {
 8002d78:	28d7      	cmp	r0, #215	; 0xd7
 8002d7a:	d806      	bhi.n	8002d8a <processMarkers+0x82>
 8002d7c:	28d0      	cmp	r0, #208	; 0xd0
 8002d7e:	f080 80f8 	bcs.w	8002f72 <processMarkers+0x26a>
 8002d82:	28cc      	cmp	r0, #204	; 0xcc
 8002d84:	d1f2      	bne.n	8002d6c <processMarkers+0x64>
      return PJPG_NO_ARITHMITIC_SUPPORT;
 8002d86:	2011      	movs	r0, #17
 8002d88:	e7f3      	b.n	8002d72 <processMarkers+0x6a>
    switch (c) {
 8002d8a:	28db      	cmp	r0, #219	; 0xdb
 8002d8c:	f000 8094 	beq.w	8002eb8 <processMarkers+0x1b0>
 8002d90:	d3ec      	bcc.n	8002d6c <processMarkers+0x64>
 8002d92:	28dd      	cmp	r0, #221	; 0xdd
 8002d94:	d1d8      	bne.n	8002d48 <processMarkers+0x40>
  if (getBits1(16) != 4)
 8002d96:	2010      	movs	r0, #16
 8002d98:	f7ff ffb2 	bl	8002d00 <getBits1>
 8002d9c:	2804      	cmp	r0, #4
 8002d9e:	d1b8      	bne.n	8002d12 <processMarkers+0xa>
  gRestartInterval = getBits1(16);
 8002da0:	2010      	movs	r0, #16
 8002da2:	f7ff ffad 	bl	8002d00 <getBits1>
 8002da6:	4b75      	ldr	r3, [pc, #468]	; (8002f7c <processMarkers+0x274>)
 8002da8:	8018      	strh	r0, [r3, #0]
 8002daa:	e7b2      	b.n	8002d12 <processMarkers+0xa>
  uint16 left = getBits1(16);
 8002dac:	2010      	movs	r0, #16
 8002dae:	f7ff ffa7 	bl	8002d00 <getBits1>
  if (left < 2)
 8002db2:	2801      	cmp	r0, #1
 8002db4:	d9ad      	bls.n	8002d12 <processMarkers+0xa>
  left -= 2;
 8002db6:	3802      	subs	r0, #2
    gValidHuffTables |= (1 << tableIndex);
 8002db8:	4e71      	ldr	r6, [pc, #452]	; (8002f80 <processMarkers+0x278>)
  left -= 2;
 8002dba:	b284      	uxth	r4, r0
  while (left) {
 8002dbc:	2c00      	cmp	r4, #0
 8002dbe:	d0a8      	beq.n	8002d12 <processMarkers+0xa>
    index = (uint8)getBits1(8);
 8002dc0:	2008      	movs	r0, #8
 8002dc2:	f7ff ff9d 	bl	8002d00 <getBits1>
 8002dc6:	b2c2      	uxtb	r2, r0
    if (((index & 0xF) > 1) || ((index & 0xF0) > 0x10))
 8002dc8:	f002 030f 	and.w	r3, r2, #15
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d8a0      	bhi.n	8002d12 <processMarkers+0xa>
 8002dd0:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d89c      	bhi.n	8002d12 <processMarkers+0xa>
    tableIndex = ((index >> 3) & 2) + (index & 1);
 8002dd8:	08d3      	lsrs	r3, r2, #3
 8002dda:	f000 0001 	and.w	r0, r0, #1
    gValidHuffTables |= (1 << tableIndex);
 8002dde:	7831      	ldrb	r1, [r6, #0]
 8002de0:	f04f 0a00 	mov.w	sl, #0
    tableIndex = ((index >> 3) & 2) + (index & 1);
 8002de4:	f003 0302 	and.w	r3, r3, #2
    count = 0;
 8002de8:	46d3      	mov	fp, sl
    tableIndex = ((index >> 3) & 2) + (index & 1);
 8002dea:	ea43 0900 	orr.w	r9, r3, r0
 8002dee:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <processMarkers+0x27c>)
 8002df0:	fa5f f289 	uxtb.w	r2, r9
 8002df4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8002df8:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <processMarkers+0x280>)
 8002dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    gValidHuffTables |= (1 << tableIndex);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	fa02 f209 	lsl.w	r2, r2, r9
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	7032      	strb	r2, [r6, #0]
      uint8 n = (uint8)getBits1(8);
 8002e0a:	2008      	movs	r0, #8
 8002e0c:	f7ff ff78 	bl	8002d00 <getBits1>
 8002e10:	ab02      	add	r3, sp, #8
      count = (uint16)(count + n);
 8002e12:	fa5b fb80 	uxtab	fp, fp, r0
      uint8 n = (uint8)getBits1(8);
 8002e16:	f803 000a 	strb.w	r0, [r3, sl]
 8002e1a:	f10a 0a01 	add.w	sl, sl, #1
      count = (uint16)(count + n);
 8002e1e:	fa1f fb8b 	uxth.w	fp, fp
    for (i = 0; i <= 15; i++) {
 8002e22:	f1ba 0f10 	cmp.w	sl, #16
 8002e26:	d1f0      	bne.n	8002e0a <processMarkers+0x102>
static uint16 getMaxHuffCodes(uint8 index) { return (index < 2) ? 12 : 255; }
 8002e28:	f1b9 0f01 	cmp.w	r9, #1
 8002e2c:	bfcc      	ite	gt
 8002e2e:	23ff      	movgt	r3, #255	; 0xff
 8002e30:	230c      	movle	r3, #12
    if (count > getMaxHuffCodes(tableIndex))
 8002e32:	459b      	cmp	fp, r3
 8002e34:	f63f af6d 	bhi.w	8002d12 <processMarkers+0xa>
 8002e38:	2300      	movs	r3, #0
    for (i = 0; i < count; i++)
 8002e3a:	fa5f f983 	uxtb.w	r9, r3
 8002e3e:	f103 0a01 	add.w	sl, r3, #1
 8002e42:	45d9      	cmp	r9, fp
 8002e44:	d322      	bcc.n	8002e8c <processMarkers+0x184>
    totalRead = 1 + 16 + count;
 8002e46:	f10b 0b11 	add.w	fp, fp, #17
 8002e4a:	fa1f fb8b 	uxth.w	fp, fp
    if (left < totalRead)
 8002e4e:	45a3      	cmp	fp, r4
 8002e50:	f63f af5f 	bhi.w	8002d12 <processMarkers+0xa>
    left = (uint16)(left - totalRead);
 8002e54:	2200      	movs	r2, #0
 8002e56:	eba4 040b 	sub.w	r4, r4, fp
 8002e5a:	f107 0020 	add.w	r0, r7, #32
      pHuffTable->mMaxCode[i] = 0xFFFF;
 8002e5e:	f64f 7aff 	movw	sl, #65535	; 0xffff
    left = (uint16)(left - totalRead);
 8002e62:	b2a4      	uxth	r4, r4
  uint16 code = 0;
 8002e64:	4613      	mov	r3, r2
  uint8 j = 0;
 8002e66:	4694      	mov	ip, r2
    uint8 num = pBits[i];
 8002e68:	a902      	add	r1, sp, #8
 8002e6a:	eb07 0e02 	add.w	lr, r7, r2
 8002e6e:	5c89      	ldrb	r1, [r1, r2]
    if (!num) {
 8002e70:	b9a1      	cbnz	r1, 8002e9c <processMarkers+0x194>
      pHuffTable->mMinCode[i] = 0x0000;
 8002e72:	f820 1c20 	strh.w	r1, [r0, #-32]
      pHuffTable->mMaxCode[i] = 0xFFFF;
 8002e76:	f8a0 a000 	strh.w	sl, [r0]
      pHuffTable->mValPtr[i] = 0;
 8002e7a:	f88e 1040 	strb.w	r1, [lr, #64]	; 0x40
 8002e7e:	3201      	adds	r2, #1
    code <<= 1;
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	3002      	adds	r0, #2
    if (i > 15)
 8002e84:	2a10      	cmp	r2, #16
    code <<= 1;
 8002e86:	b29b      	uxth	r3, r3
    if (i > 15)
 8002e88:	d1ee      	bne.n	8002e68 <processMarkers+0x160>
 8002e8a:	e797      	b.n	8002dbc <processMarkers+0xb4>
      pHuffVal[i] = (uint8)getBits1(8);
 8002e8c:	2008      	movs	r0, #8
 8002e8e:	f7ff ff37 	bl	8002d00 <getBits1>
 8002e92:	9b01      	ldr	r3, [sp, #4]
 8002e94:	f803 0009 	strb.w	r0, [r3, r9]
 8002e98:	4653      	mov	r3, sl
 8002e9a:	e7ce      	b.n	8002e3a <processMarkers+0x132>
      pHuffTable->mMinCode[i] = code;
 8002e9c:	f820 3c20 	strh.w	r3, [r0, #-32]
      pHuffTable->mMaxCode[i] = code + num - 1;
 8002ea0:	440b      	add	r3, r1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8002ea8:	f8a0 b000 	strh.w	fp, [r0]
      pHuffTable->mValPtr[i] = j;
 8002eac:	f88e c040 	strb.w	ip, [lr, #64]	; 0x40
      j = (uint8)(j + num);
 8002eb0:	448c      	add	ip, r1
 8002eb2:	fa5f fc8c 	uxtb.w	ip, ip
 8002eb6:	e7e2      	b.n	8002e7e <processMarkers+0x176>
  uint16 left = getBits1(16);
 8002eb8:	2010      	movs	r0, #16
 8002eba:	f7ff ff21 	bl	8002d00 <getBits1>
  if (left < 2)
 8002ebe:	2801      	cmp	r0, #1
 8002ec0:	f67f af27 	bls.w	8002d12 <processMarkers+0xa>
  left -= 2;
 8002ec4:	3802      	subs	r0, #2
    gValidQuantTables |= (n ? 2 : 1);
 8002ec6:	4e31      	ldr	r6, [pc, #196]	; (8002f8c <processMarkers+0x284>)
  left -= 2;
 8002ec8:	b284      	uxth	r4, r0
  while (left) {
 8002eca:	2c00      	cmp	r4, #0
 8002ecc:	f43f af21 	beq.w	8002d12 <processMarkers+0xa>
    uint8 n = (uint8)getBits1(8);
 8002ed0:	2008      	movs	r0, #8
 8002ed2:	f7ff ff15 	bl	8002d00 <getBits1>
 8002ed6:	b2c0      	uxtb	r0, r0
    n &= 0x0F;
 8002ed8:	f000 0b0f 	and.w	fp, r0, #15
    uint8 prec = n >> 4;
 8002edc:	0907      	lsrs	r7, r0, #4
    if (n > 1)
 8002ede:	f1bb 0f01 	cmp.w	fp, #1
 8002ee2:	f63f af16 	bhi.w	8002d12 <processMarkers+0xa>
    gValidQuantTables |= (n ? 2 : 1);
 8002ee6:	f1bb 0f00 	cmp.w	fp, #0
 8002eea:	7832      	ldrb	r2, [r6, #0]
 8002eec:	f04f 0900 	mov.w	r9, #0
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2302      	movne	r3, #2
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	7033      	strb	r3, [r6, #0]
      uint16 temp = getBits1(8);
 8002efa:	2008      	movs	r0, #8
 8002efc:	f7ff ff00 	bl	8002d00 <getBits1>
      if (prec)
 8002f00:	b13f      	cbz	r7, 8002f12 <processMarkers+0x20a>
        temp = (temp << 8) + getBits1(8);
 8002f02:	0200      	lsls	r0, r0, #8
 8002f04:	fa1f fa80 	uxth.w	sl, r0
 8002f08:	2008      	movs	r0, #8
 8002f0a:	f7ff fef9 	bl	8002d00 <getBits1>
 8002f0e:	4450      	add	r0, sl
 8002f10:	b280      	uxth	r0, r0
 8002f12:	b200      	sxth	r0, r0
      if (n)
 8002f14:	f1bb 0f00 	cmp.w	fp, #0
 8002f18:	d028      	beq.n	8002f6c <processMarkers+0x264>
        gQuant1[i] = (int16)temp;
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <processMarkers+0x288>)
 8002f1c:	f829 0003 	strh.w	r0, [r9, r3]
 8002f20:	f109 0902 	add.w	r9, r9, #2
    for (i = 0; i < 64; i++) {
 8002f24:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8002f28:	d1e7      	bne.n	8002efa <processMarkers+0x1f2>
    createWinogradQuant(n ? gQuant1 : gQuant0);
 8002f2a:	4819      	ldr	r0, [pc, #100]	; (8002f90 <processMarkers+0x288>)
 8002f2c:	4919      	ldr	r1, [pc, #100]	; (8002f94 <processMarkers+0x28c>)
 8002f2e:	f1bb 0f00 	cmp.w	fp, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	46ab      	moveq	fp, r5
 8002f36:	4683      	movne	fp, r0
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 8002f38:	2004      	movs	r0, #4
 8002f3a:	f1ab 0202 	sub.w	r2, fp, #2
 8002f3e:	f10b 0b7e 	add.w	fp, fp, #126	; 0x7e
 8002f42:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8002f46:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  for (i = 0; i < 64; i++) {
 8002f4a:	455a      	cmp	r2, fp
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 8002f4c:	fb13 030c 	smlabb	r3, r3, ip, r0
                                    PJPG_DCT_SCALE_BITS - 1))) >>
 8002f50:	ea4f 03e3 	mov.w	r3, r3, asr #3
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 8002f54:	8013      	strh	r3, [r2, #0]
  for (i = 0; i < 64; i++) {
 8002f56:	d1f4      	bne.n	8002f42 <processMarkers+0x23a>
    totalRead = 64 + 1;
 8002f58:	2f00      	cmp	r7, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	2081      	movne	r0, #129	; 0x81
 8002f5e:	2041      	moveq	r0, #65	; 0x41
    if (left < totalRead)
 8002f60:	4284      	cmp	r4, r0
 8002f62:	f4ff aed6 	bcc.w	8002d12 <processMarkers+0xa>
    left = (uint16)(left - totalRead);
 8002f66:	1a24      	subs	r4, r4, r0
 8002f68:	b2a4      	uxth	r4, r4
 8002f6a:	e7ae      	b.n	8002eca <processMarkers+0x1c2>
        gQuant0[i] = (int16)temp;
 8002f6c:	f829 0005 	strh.w	r0, [r9, r5]
 8002f70:	e7d6      	b.n	8002f20 <processMarkers+0x218>
      return PJPG_UNEXPECTED_MARKER;
 8002f72:	2012      	movs	r0, #18
 8002f74:	e6fd      	b.n	8002d72 <processMarkers+0x6a>
 8002f76:	bf00      	nop
 8002f78:	2004d606 	.word	0x2004d606
 8002f7c:	2004d708 	.word	0x2004d708
 8002f80:	2004d70e 	.word	0x2004d70e
 8002f84:	080185e8 	.word	0x080185e8
 8002f88:	080185f8 	.word	0x080185f8
 8002f8c:	2004d70f 	.word	0x2004d70f
 8002f90:	2004d686 	.word	0x2004d686
 8002f94:	08018647 	.word	0x08018647

08002f98 <getBits2>:
  return getBits(numBits, 1);
 8002f98:	2101      	movs	r1, #1
 8002f9a:	f7ff be55 	b.w	8002c48 <getBits>
	...

08002fa0 <pjpeg_decode_mcu>:
}

unsigned char pjpeg_decode_mcu(void) {
  uint8 status;

  if (gCallbackStatus)
 8002fa0:	4ba7      	ldr	r3, [pc, #668]	; (8003240 <pjpeg_decode_mcu+0x2a0>)
unsigned char pjpeg_decode_mcu(void) {
 8002fa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa6:	b085      	sub	sp, #20
  if (gCallbackStatus)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 85cb 	bne.w	8003b48 <pjpeg_decode_mcu+0xba8>
    return gCallbackStatus;

  if (!gNumMCUSRemaining)
 8002fb2:	4ba4      	ldr	r3, [pc, #656]	; (8003244 <pjpeg_decode_mcu+0x2a4>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8592 	beq.w	8003ae0 <pjpeg_decode_mcu+0xb40>
  if (gRestartInterval) {
 8002fbc:	4ea2      	ldr	r6, [pc, #648]	; (8003248 <pjpeg_decode_mcu+0x2a8>)
 8002fbe:	8833      	ldrh	r3, [r6, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 85ae 	beq.w	8003b22 <pjpeg_decode_mcu+0xb82>
    if (gRestartsLeft == 0) {
 8002fc6:	4da1      	ldr	r5, [pc, #644]	; (800324c <pjpeg_decode_mcu+0x2ac>)
 8002fc8:	882b      	ldrh	r3, [r5, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 85a6 	bne.w	8003b1c <pjpeg_decode_mcu+0xb7c>
  for (i = 1536; i > 0; i--)
 8002fd0:	f44f 64c0 	mov.w	r4, #1536	; 0x600
    if (getChar() == 0xFF)
 8002fd4:	f7ff fd94 	bl	8002b00 <getChar>
 8002fd8:	28ff      	cmp	r0, #255	; 0xff
 8002fda:	d005      	beq.n	8002fe8 <pjpeg_decode_mcu+0x48>
  for (i = 1536; i > 0; i--)
 8002fdc:	3c01      	subs	r4, #1
 8002fde:	b2a4      	uxth	r4, r4
 8002fe0:	2c00      	cmp	r4, #0
 8002fe2:	d1f7      	bne.n	8002fd4 <pjpeg_decode_mcu+0x34>
    return PJPG_BAD_RESTART_MARKER;
 8002fe4:	231d      	movs	r3, #29
 8002fe6:	e069      	b.n	80030bc <pjpeg_decode_mcu+0x11c>
    if ((c = getChar()) != 0xFF)
 8002fe8:	f7ff fd8a 	bl	8002b00 <getChar>
 8002fec:	28ff      	cmp	r0, #255	; 0xff
 8002fee:	f040 857a 	bne.w	8003ae6 <pjpeg_decode_mcu+0xb46>
  for (; i > 0; i--)
 8002ff2:	3c01      	subs	r4, #1
 8002ff4:	b2a4      	uxth	r4, r4
 8002ff6:	2c00      	cmp	r4, #0
 8002ff8:	d1f6      	bne.n	8002fe8 <pjpeg_decode_mcu+0x48>
 8002ffa:	e7f3      	b.n	8002fe4 <pjpeg_decode_mcu+0x44>
    uint8 componentID = gMCUOrg[mcuBlock];
 8002ffc:	4b94      	ldr	r3, [pc, #592]	; (8003250 <pjpeg_decode_mcu+0x2b0>)
    uint8 compQuant = gCompQuant[componentID];
 8002ffe:	4a95      	ldr	r2, [pc, #596]	; (8003254 <pjpeg_decode_mcu+0x2b4>)
 8003000:	5d5c      	ldrb	r4, [r3, r5]
    uint8 compDCTab = gCompDCTab[componentID];
 8003002:	4b95      	ldr	r3, [pc, #596]	; (8003258 <pjpeg_decode_mcu+0x2b8>)
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 8003004:	f812 8004 	ldrb.w	r8, [r2, r4]
    uint8 compDCTab = gCompDCTab[componentID];
 8003008:	5d1b      	ldrb	r3, [r3, r4]
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800300a:	4994      	ldr	r1, [pc, #592]	; (800325c <pjpeg_decode_mcu+0x2bc>)
 800300c:	4a94      	ldr	r2, [pc, #592]	; (8003260 <pjpeg_decode_mcu+0x2c0>)
    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 800300e:	4895      	ldr	r0, [pc, #596]	; (8003264 <pjpeg_decode_mcu+0x2c4>)
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 8003010:	f1b8 0f00 	cmp.w	r8, #0
 8003014:	bf0c      	ite	eq
 8003016:	4688      	moveq	r8, r1
 8003018:	4690      	movne	r8, r2
    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 800301a:	2b00      	cmp	r3, #0
 800301c:	4b92      	ldr	r3, [pc, #584]	; (8003268 <pjpeg_decode_mcu+0x2c8>)
 800301e:	4993      	ldr	r1, [pc, #588]	; (800326c <pjpeg_decode_mcu+0x2cc>)
 8003020:	bf18      	it	ne
 8003022:	4619      	movne	r1, r3
 8003024:	4b92      	ldr	r3, [pc, #584]	; (8003270 <pjpeg_decode_mcu+0x2d0>)
 8003026:	bf18      	it	ne
 8003028:	4618      	movne	r0, r3
 800302a:	f7ff fde3 	bl	8002bf4 <huffDecode>
 800302e:	4606      	mov	r6, r0
    if (numExtraBits)
 8003030:	f010 000f 	ands.w	r0, r0, #15
 8003034:	d001      	beq.n	800303a <pjpeg_decode_mcu+0x9a>
      r = getBits2(numExtraBits);
 8003036:	f7ff ffaf 	bl	8002f98 <getBits2>
 800303a:	3e01      	subs	r6, #1
 800303c:	b2f6      	uxtb	r6, r6
 800303e:	2e0e      	cmp	r6, #14
 8003040:	d808      	bhi.n	8003054 <pjpeg_decode_mcu+0xb4>
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 8003042:	4b8c      	ldr	r3, [pc, #560]	; (8003274 <pjpeg_decode_mcu+0x2d4>)
 8003044:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003048:	4283      	cmp	r3, r0
 800304a:	bf82      	ittt	hi
 800304c:	4b8a      	ldrhi	r3, [pc, #552]	; (8003278 <pjpeg_decode_mcu+0x2d8>)
 800304e:	f833 3016 	ldrhhi.w	r3, [r3, r6, lsl #1]
 8003052:	18c0      	addhi	r0, r0, r3
    dc = dc + gLastDC[componentID];
 8003054:	4b89      	ldr	r3, [pc, #548]	; (800327c <pjpeg_decode_mcu+0x2dc>)
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 8003056:	b200      	sxth	r0, r0
 8003058:	4e89      	ldr	r6, [pc, #548]	; (8003280 <pjpeg_decode_mcu+0x2e0>)
    dc = dc + gLastDC[componentID];
 800305a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800305e:	4f89      	ldr	r7, [pc, #548]	; (8003284 <pjpeg_decode_mcu+0x2e4>)
 8003060:	fa12 f080 	uxtah	r0, r2, r0
 8003064:	4a88      	ldr	r2, [pc, #544]	; (8003288 <pjpeg_decode_mcu+0x2e8>)
 8003066:	b280      	uxth	r0, r0
    gLastDC[componentID] = dc;
 8003068:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    gCoeffBuf[0] = dc * pQ[0];
 800306c:	f8b8 3000 	ldrh.w	r3, [r8]
 8003070:	fb13 f000 	smulbb	r0, r3, r0
 8003074:	4b85      	ldr	r3, [pc, #532]	; (800328c <pjpeg_decode_mcu+0x2ec>)
 8003076:	8018      	strh	r0, [r3, #0]
    compACTab = gCompACTab[componentID];
 8003078:	4b85      	ldr	r3, [pc, #532]	; (8003290 <pjpeg_decode_mcu+0x2f0>)
 800307a:	5d19      	ldrb	r1, [r3, r4]
    if (gReduce) {
 800307c:	4b85      	ldr	r3, [pc, #532]	; (8003294 <pjpeg_decode_mcu+0x2f4>)
 800307e:	2900      	cmp	r1, #0
 8003080:	7818      	ldrb	r0, [r3, #0]
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <pjpeg_decode_mcu+0x2f8>)
 8003084:	bf04      	itt	eq
 8003086:	4616      	moveq	r6, r2
 8003088:	461f      	moveq	r7, r3
 800308a:	2800      	cmp	r0, #0
 800308c:	f000 8206 	beq.w	800349c <pjpeg_decode_mcu+0x4fc>
      for (k = 1; k < 64; k++) {
 8003090:	2401      	movs	r4, #1
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 8003092:	4631      	mov	r1, r6
 8003094:	4638      	mov	r0, r7
 8003096:	f7ff fdad 	bl	8002bf4 <huffDecode>
        if (numExtraBits)
 800309a:	f010 090f 	ands.w	r9, r0, #15
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800309e:	4680      	mov	r8, r0
        if (numExtraBits)
 80030a0:	d002      	beq.n	80030a8 <pjpeg_decode_mcu+0x108>
          getBits2(numExtraBits);
 80030a2:	4648      	mov	r0, r9
 80030a4:	f7ff ff78 	bl	8002f98 <getBits2>
        r = s >> 4;
 80030a8:	f3c8 1307 	ubfx	r3, r8, #4, #8
        if (s) {
 80030ac:	f1b9 0f00 	cmp.w	r9, #0
 80030b0:	d00f      	beq.n	80030d2 <pjpeg_decode_mcu+0x132>
          if (r) {
 80030b2:	b1a3      	cbz	r3, 80030de <pjpeg_decode_mcu+0x13e>
            if ((k + r) > 63)
 80030b4:	441c      	add	r4, r3
 80030b6:	2c3f      	cmp	r4, #63	; 0x3f
 80030b8:	dd10      	ble.n	80030dc <pjpeg_decode_mcu+0x13c>
              return PJPG_DECODE_ERROR;
 80030ba:	231c      	movs	r3, #28
    return PJPG_BAD_RESTART_MARKER;
 80030bc:	9300      	str	r3, [sp, #0]
    return PJPG_NO_MORE_BLOCKS;

  status = decodeNextMCU();
  if ((status) || (gCallbackStatus))
    return gCallbackStatus ? gCallbackStatus : status;
 80030be:	4b60      	ldr	r3, [pc, #384]	; (8003240 <pjpeg_decode_mcu+0x2a0>)
 80030c0:	9a00      	ldr	r2, [sp, #0]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf18      	it	ne
 80030c8:	461a      	movne	r2, r3
 80030ca:	4613      	mov	r3, r2
    return PJPG_NO_MORE_BLOCKS;
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f000 bd3b 	b.w	8003b48 <pjpeg_decode_mcu+0xba8>
          if (r == 15) {
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d107      	bne.n	80030e6 <pjpeg_decode_mcu+0x146>
            if ((k + 16) > 64)
 80030d6:	2c30      	cmp	r4, #48	; 0x30
 80030d8:	d8ef      	bhi.n	80030ba <pjpeg_decode_mcu+0x11a>
            k += (16 - 1);
 80030da:	340f      	adds	r4, #15
 80030dc:	b2e4      	uxtb	r4, r4
      for (k = 1; k < 64; k++) {
 80030de:	3401      	adds	r4, #1
 80030e0:	b2e4      	uxtb	r4, r4
 80030e2:	2c3f      	cmp	r4, #63	; 0x3f
 80030e4:	d9d5      	bls.n	8003092 <pjpeg_decode_mcu+0xf2>
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 80030e6:	4b69      	ldr	r3, [pc, #420]	; (800328c <pjpeg_decode_mcu+0x2ec>)
 80030e8:	8818      	ldrh	r0, [r3, #0]
 80030ea:	3040      	adds	r0, #64	; 0x40
 80030ec:	b200      	sxth	r0, r0
 80030ee:	f7ff fd4b 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 80030f2:	3080      	adds	r0, #128	; 0x80
 80030f4:	b200      	sxth	r0, r0
 80030f6:	f7ff faa1 	bl	800263c <clamp>
  switch (gScanType) {
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <pjpeg_decode_mcu+0x2fc>)
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 80030fc:	4602      	mov	r2, r0
  switch (gScanType) {
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d80f      	bhi.n	8003124 <pjpeg_decode_mcu+0x184>
 8003104:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003108:	00080005 	.word	0x00080005
 800310c:	00420095 	.word	0x00420095
 8003110:	011d      	.short	0x011d
    gMCUBufR[0] = c;
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <pjpeg_decode_mcu+0x300>)
      gMCUBufB[0] = c;
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e005      	b.n	8003124 <pjpeg_decode_mcu+0x184>
    switch (mcuBlock) {
 8003118:	2d01      	cmp	r5, #1
 800311a:	d007      	beq.n	800312c <pjpeg_decode_mcu+0x18c>
 800311c:	f0c0 8119 	bcc.w	8003352 <pjpeg_decode_mcu+0x3b2>
 8003120:	2d02      	cmp	r5, #2
 8003122:	d01b      	beq.n	800315c <pjpeg_decode_mcu+0x1bc>
 8003124:	9b01      	ldr	r3, [sp, #4]
 8003126:	3301      	adds	r3, #1
 8003128:	f000 bcfc 	b.w	8003b24 <pjpeg_decode_mcu+0xb84>
      cbG = ((c * 88U) >> 8U) - 44U;
 800312c:	2158      	movs	r1, #88	; 0x58
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800312e:	4c5d      	ldr	r4, [pc, #372]	; (80032a4 <pjpeg_decode_mcu+0x304>)
      cbG = ((c * 88U) >> 8U) - 44U;
 8003130:	fb10 f101 	smulbb	r1, r0, r1
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8003134:	7820      	ldrb	r0, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 8003136:	0a09      	lsrs	r1, r1, #8
 8003138:	392c      	subs	r1, #44	; 0x2c
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800313a:	b209      	sxth	r1, r1
 800313c:	f7ff fa97 	bl	800266e <subAndClamp>
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8003140:	21c6      	movs	r1, #198	; 0xc6
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8003142:	7020      	strb	r0, [r4, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8003144:	fb12 f101 	smulbb	r1, r2, r1
 8003148:	3ae3      	subs	r2, #227	; 0xe3
 800314a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 800314e:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <pjpeg_decode_mcu+0x308>)
 8003150:	b209      	sxth	r1, r1
 8003152:	7810      	ldrb	r0, [r2, #0]
 8003154:	f7ff fa7c 	bl	8002650 <addAndClamp>
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003158:	7010      	strb	r0, [r2, #0]
 800315a:	e7e3      	b.n	8003124 <pjpeg_decode_mcu+0x184>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800315c:	2167      	movs	r1, #103	; 0x67
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800315e:	4c50      	ldr	r4, [pc, #320]	; (80032a0 <pjpeg_decode_mcu+0x300>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8003160:	fb10 f301 	smulbb	r3, r0, r1
 8003164:	f1a0 01b3 	sub.w	r1, r0, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8003168:	7820      	ldrb	r0, [r4, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800316a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800316e:	b209      	sxth	r1, r1
 8003170:	f7ff fa6e 	bl	8002650 <addAndClamp>
      crG = ((c * 183U) >> 8U) - 91;
 8003174:	21b7      	movs	r1, #183	; 0xb7
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8003176:	7020      	strb	r0, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 8003178:	fb12 f101 	smulbb	r1, r2, r1
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800317c:	4a49      	ldr	r2, [pc, #292]	; (80032a4 <pjpeg_decode_mcu+0x304>)
      crG = ((c * 183U) >> 8U) - 91;
 800317e:	0a09      	lsrs	r1, r1, #8
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003180:	7810      	ldrb	r0, [r2, #0]
      crG = ((c * 183U) >> 8U) - 91;
 8003182:	395b      	subs	r1, #91	; 0x5b
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003184:	b209      	sxth	r1, r1
 8003186:	f7ff fa72 	bl	800266e <subAndClamp>
 800318a:	e7e5      	b.n	8003158 <pjpeg_decode_mcu+0x1b8>
    switch (mcuBlock) {
 800318c:	2d03      	cmp	r5, #3
 800318e:	d8c9      	bhi.n	8003124 <pjpeg_decode_mcu+0x184>
 8003190:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003194:	00ef00df 	.word	0x00ef00df
 8003198:	002a0004 	.word	0x002a0004
      cbG = ((c * 88U) >> 8U) - 44U;
 800319c:	2458      	movs	r4, #88	; 0x58
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800319e:	4d41      	ldr	r5, [pc, #260]	; (80032a4 <pjpeg_decode_mcu+0x304>)
      cbG = ((c * 88U) >> 8U) - 44U;
 80031a0:	fb10 f404 	smulbb	r4, r0, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80031a4:	7828      	ldrb	r0, [r5, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 80031a6:	0a24      	lsrs	r4, r4, #8
 80031a8:	3c2c      	subs	r4, #44	; 0x2c
 80031aa:	b224      	sxth	r4, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80031ac:	4621      	mov	r1, r4
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80031ae:	4c3e      	ldr	r4, [pc, #248]	; (80032a8 <pjpeg_decode_mcu+0x308>)
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80031b0:	f7ff fa5d 	bl	800266e <subAndClamp>
 80031b4:	7028      	strb	r0, [r5, #0]
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 80031b6:	f895 0080 	ldrb.w	r0, [r5, #128]	; 0x80
 80031ba:	f7ff fa58 	bl	800266e <subAndClamp>
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80031be:	23c6      	movs	r3, #198	; 0xc6
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 80031c0:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80031c4:	fb12 f303 	smulbb	r3, r2, r3
 80031c8:	3ae3      	subs	r2, #227	; 0xe3
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80031ca:	7820      	ldrb	r0, [r4, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80031cc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80031d0:	b212      	sxth	r2, r2
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80031d2:	4611      	mov	r1, r2
 80031d4:	f7ff fa3c 	bl	8002650 <addAndClamp>
 80031d8:	7020      	strb	r0, [r4, #0]
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 80031da:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 80031de:	f7ff fa37 	bl	8002650 <addAndClamp>
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 80031e2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
 80031e6:	e79d      	b.n	8003124 <pjpeg_decode_mcu+0x184>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80031e8:	2467      	movs	r4, #103	; 0x67
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 80031ea:	4d2d      	ldr	r5, [pc, #180]	; (80032a0 <pjpeg_decode_mcu+0x300>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80031ec:	fb10 f304 	smulbb	r3, r0, r4
 80031f0:	f1a0 04b3 	sub.w	r4, r0, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 80031f4:	7828      	ldrb	r0, [r5, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80031f6:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80031fa:	b224      	sxth	r4, r4
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 80031fc:	4621      	mov	r1, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 80031fe:	4c29      	ldr	r4, [pc, #164]	; (80032a4 <pjpeg_decode_mcu+0x304>)
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8003200:	f7ff fa26 	bl	8002650 <addAndClamp>
 8003204:	7028      	strb	r0, [r5, #0]
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 8003206:	f895 0080 	ldrb.w	r0, [r5, #128]	; 0x80
 800320a:	f7ff fa21 	bl	8002650 <addAndClamp>
      crG = ((c * 183U) >> 8U) - 91;
 800320e:	21b7      	movs	r1, #183	; 0xb7
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 8003210:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
      crG = ((c * 183U) >> 8U) - 91;
 8003214:	fb12 f201 	smulbb	r2, r2, r1
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003218:	7820      	ldrb	r0, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 800321a:	0a12      	lsrs	r2, r2, #8
 800321c:	3a5b      	subs	r2, #91	; 0x5b
 800321e:	b212      	sxth	r2, r2
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003220:	4611      	mov	r1, r2
 8003222:	f7ff fa24 	bl	800266e <subAndClamp>
 8003226:	7020      	strb	r0, [r4, #0]
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 8003228:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 800322c:	f7ff fa1f 	bl	800266e <subAndClamp>
 8003230:	e7d7      	b.n	80031e2 <pjpeg_decode_mcu+0x242>
    switch (mcuBlock) {
 8003232:	2d03      	cmp	r5, #3
 8003234:	f63f af76 	bhi.w	8003124 <pjpeg_decode_mcu+0x184>
 8003238:	e8df f005 	tbb	[pc, r5]
 800323c:	5e38918b 	.word	0x5e38918b
 8003240:	2004cdef 	.word	0x2004cdef
 8003244:	2004d604 	.word	0x2004d604
 8003248:	2004d708 	.word	0x2004d708
 800324c:	2004d70a 	.word	0x2004d70a
 8003250:	2004d5f4 	.word	0x2004d5f4
 8003254:	2004ce7f 	.word	0x2004ce7f
 8003258:	2004ce73 	.word	0x2004ce73
 800325c:	2004d606 	.word	0x2004d606
 8003260:	2004d686 	.word	0x2004d686
 8003264:	2004ce88 	.word	0x2004ce88
 8003268:	2004cfd8 	.word	0x2004cfd8
 800326c:	2004cfc8 	.word	0x2004cfc8
 8003270:	2004ced8 	.word	0x2004ced8
 8003274:	080185aa 	.word	0x080185aa
 8003278:	080185c8 	.word	0x080185c8
 800327c:	2004d2ee 	.word	0x2004d2ee
 8003280:	2004d0e8 	.word	0x2004d0e8
 8003284:	2004cf78 	.word	0x2004cf78
 8003288:	2004cfe8 	.word	0x2004cfe8
 800328c:	2004cdf0 	.word	0x2004cdf0
 8003290:	2004ce70 	.word	0x2004ce70
 8003294:	2004d706 	.word	0x2004d706
 8003298:	2004cf28 	.word	0x2004cf28
 800329c:	2004d70c 	.word	0x2004d70c
 80032a0:	2004d4f4 	.word	0x2004d4f4
 80032a4:	2004d3f4 	.word	0x2004d3f4
 80032a8:	2004d2f4 	.word	0x2004d2f4
      cbG = ((c * 88U) >> 8U) - 44U;
 80032ac:	2458      	movs	r4, #88	; 0x58
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80032ae:	4d78      	ldr	r5, [pc, #480]	; (8003490 <pjpeg_decode_mcu+0x4f0>)
      cbG = ((c * 88U) >> 8U) - 44U;
 80032b0:	fb10 f404 	smulbb	r4, r0, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80032b4:	7828      	ldrb	r0, [r5, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 80032b6:	0a24      	lsrs	r4, r4, #8
 80032b8:	3c2c      	subs	r4, #44	; 0x2c
 80032ba:	b224      	sxth	r4, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80032bc:	4621      	mov	r1, r4
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80032be:	4c75      	ldr	r4, [pc, #468]	; (8003494 <pjpeg_decode_mcu+0x4f4>)
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80032c0:	f7ff f9d5 	bl	800266e <subAndClamp>
 80032c4:	7028      	strb	r0, [r5, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 80032c6:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 80032ca:	f7ff f9d0 	bl	800266e <subAndClamp>
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80032ce:	23c6      	movs	r3, #198	; 0xc6
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 80032d0:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80032d4:	fb12 f303 	smulbb	r3, r2, r3
 80032d8:	3ae3      	subs	r2, #227	; 0xe3
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80032da:	7820      	ldrb	r0, [r4, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80032dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80032e0:	b212      	sxth	r2, r2
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80032e2:	4611      	mov	r1, r2
 80032e4:	f7ff f9b4 	bl	8002650 <addAndClamp>
 80032e8:	7020      	strb	r0, [r4, #0]
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 80032ea:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80032ee:	f7ff f9af 	bl	8002650 <addAndClamp>
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 80032f2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 80032f6:	e715      	b.n	8003124 <pjpeg_decode_mcu+0x184>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80032f8:	2467      	movs	r4, #103	; 0x67
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 80032fa:	4d67      	ldr	r5, [pc, #412]	; (8003498 <pjpeg_decode_mcu+0x4f8>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80032fc:	fb10 f304 	smulbb	r3, r0, r4
 8003300:	f1a0 04b3 	sub.w	r4, r0, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8003304:	7828      	ldrb	r0, [r5, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8003306:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 800330a:	b224      	sxth	r4, r4
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800330c:	4621      	mov	r1, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800330e:	4c60      	ldr	r4, [pc, #384]	; (8003490 <pjpeg_decode_mcu+0x4f0>)
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8003310:	f7ff f99e 	bl	8002650 <addAndClamp>
 8003314:	7028      	strb	r0, [r5, #0]
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 8003316:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800331a:	f7ff f999 	bl	8002650 <addAndClamp>
      crG = ((c * 183U) >> 8U) - 91;
 800331e:	21b7      	movs	r1, #183	; 0xb7
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 8003320:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
      crG = ((c * 183U) >> 8U) - 91;
 8003324:	fb12 f201 	smulbb	r2, r2, r1
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003328:	7820      	ldrb	r0, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 800332a:	0a12      	lsrs	r2, r2, #8
 800332c:	3a5b      	subs	r2, #91	; 0x5b
 800332e:	b212      	sxth	r2, r2
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003330:	4611      	mov	r1, r2
 8003332:	f7ff f99c 	bl	800266e <subAndClamp>
 8003336:	7020      	strb	r0, [r4, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 8003338:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800333c:	f7ff f997 	bl	800266e <subAndClamp>
 8003340:	e7d7      	b.n	80032f2 <pjpeg_decode_mcu+0x352>
    switch (mcuBlock) {
 8003342:	2d05      	cmp	r5, #5
 8003344:	f63f aeee 	bhi.w	8003124 <pjpeg_decode_mcu+0x184>
 8003348:	e8df f005 	tbb	[pc, r5]
 800334c:	1d130903 	.word	0x1d130903
 8003350:	6527      	.short	0x6527
      gMCUBufR[0] = c;
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <pjpeg_decode_mcu+0x4f8>)
 8003354:	701a      	strb	r2, [r3, #0]
      gMCUBufG[0] = c;
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <pjpeg_decode_mcu+0x4f0>)
 8003358:	701a      	strb	r2, [r3, #0]
      gMCUBufB[0] = c;
 800335a:	4b4e      	ldr	r3, [pc, #312]	; (8003494 <pjpeg_decode_mcu+0x4f4>)
 800335c:	e6da      	b.n	8003114 <pjpeg_decode_mcu+0x174>
      gMCUBufR[64] = c;
 800335e:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <pjpeg_decode_mcu+0x4f8>)
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      gMCUBufG[64] = c;
 8003364:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <pjpeg_decode_mcu+0x4f0>)
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      gMCUBufB[64] = c;
 800336a:	4b4a      	ldr	r3, [pc, #296]	; (8003494 <pjpeg_decode_mcu+0x4f4>)
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003370:	e6d8      	b.n	8003124 <pjpeg_decode_mcu+0x184>
      gMCUBufR[128] = c;
 8003372:	4b49      	ldr	r3, [pc, #292]	; (8003498 <pjpeg_decode_mcu+0x4f8>)
 8003374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      gMCUBufG[128] = c;
 8003378:	4b45      	ldr	r3, [pc, #276]	; (8003490 <pjpeg_decode_mcu+0x4f0>)
 800337a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      gMCUBufB[128] = c;
 800337e:	4b45      	ldr	r3, [pc, #276]	; (8003494 <pjpeg_decode_mcu+0x4f4>)
 8003380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003384:	e6ce      	b.n	8003124 <pjpeg_decode_mcu+0x184>
      gMCUBufR[192] = c;
 8003386:	4b44      	ldr	r3, [pc, #272]	; (8003498 <pjpeg_decode_mcu+0x4f8>)
 8003388:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
      gMCUBufG[192] = c;
 800338c:	4b40      	ldr	r3, [pc, #256]	; (8003490 <pjpeg_decode_mcu+0x4f0>)
 800338e:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
      gMCUBufB[192] = c;
 8003392:	4b40      	ldr	r3, [pc, #256]	; (8003494 <pjpeg_decode_mcu+0x4f4>)
 8003394:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
 8003398:	e6c4      	b.n	8003124 <pjpeg_decode_mcu+0x184>
      cbG = ((c * 88U) >> 8U) - 44U;
 800339a:	2458      	movs	r4, #88	; 0x58
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800339c:	4d3c      	ldr	r5, [pc, #240]	; (8003490 <pjpeg_decode_mcu+0x4f0>)
      cbG = ((c * 88U) >> 8U) - 44U;
 800339e:	fb10 f404 	smulbb	r4, r0, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80033a2:	7828      	ldrb	r0, [r5, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 80033a4:	0a24      	lsrs	r4, r4, #8
 80033a6:	3c2c      	subs	r4, #44	; 0x2c
 80033a8:	b224      	sxth	r4, r4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80033aa:	4621      	mov	r1, r4
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80033ac:	4c39      	ldr	r4, [pc, #228]	; (8003494 <pjpeg_decode_mcu+0x4f4>)
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80033ae:	f7ff f95e 	bl	800266e <subAndClamp>
 80033b2:	7028      	strb	r0, [r5, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 80033b4:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 80033b8:	f7ff f959 	bl	800266e <subAndClamp>
 80033bc:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 80033c0:	f895 0080 	ldrb.w	r0, [r5, #128]	; 0x80
 80033c4:	f7ff f953 	bl	800266e <subAndClamp>
 80033c8:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
 80033cc:	f895 00c0 	ldrb.w	r0, [r5, #192]	; 0xc0
 80033d0:	f7ff f94d 	bl	800266e <subAndClamp>
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80033d4:	23c6      	movs	r3, #198	; 0xc6
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
 80033d6:	f885 00c0 	strb.w	r0, [r5, #192]	; 0xc0
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80033da:	fb12 f303 	smulbb	r3, r2, r3
 80033de:	3ae3      	subs	r2, #227	; 0xe3
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80033e0:	7820      	ldrb	r0, [r4, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80033e2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80033e6:	b212      	sxth	r2, r2
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80033e8:	4611      	mov	r1, r2
 80033ea:	f7ff f931 	bl	8002650 <addAndClamp>
 80033ee:	7020      	strb	r0, [r4, #0]
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 80033f0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80033f4:	f7ff f92c 	bl	8002650 <addAndClamp>
 80033f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 80033fc:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 8003400:	f7ff f926 	bl	8002650 <addAndClamp>
 8003404:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
      gMCUBufB[192] = addAndClamp(gMCUBufB[192], cbB);
 8003408:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
 800340c:	f7ff f920 	bl	8002650 <addAndClamp>
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
 8003410:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
 8003414:	e686      	b.n	8003124 <pjpeg_decode_mcu+0x184>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8003416:	2567      	movs	r5, #103	; 0x67
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8003418:	4c1f      	ldr	r4, [pc, #124]	; (8003498 <pjpeg_decode_mcu+0x4f8>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800341a:	fb10 f305 	smulbb	r3, r0, r5
 800341e:	f1a0 05b3 	sub.w	r5, r0, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8003422:	7820      	ldrb	r0, [r4, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8003424:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8003428:	b22d      	sxth	r5, r5
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800342a:	4629      	mov	r1, r5
 800342c:	f7ff f910 	bl	8002650 <addAndClamp>
 8003430:	7020      	strb	r0, [r4, #0]
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 8003432:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8003436:	f7ff f90b 	bl	8002650 <addAndClamp>
 800343a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 800343e:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 8003442:	f7ff f905 	bl	8002650 <addAndClamp>
 8003446:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
      gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
 800344a:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
 800344e:	f7ff f8ff 	bl	8002650 <addAndClamp>
      crG = ((c * 183U) >> 8U) - 91;
 8003452:	21b7      	movs	r1, #183	; 0xb7
      gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
 8003454:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
      crG = ((c * 183U) >> 8U) - 91;
 8003458:	fb12 f201 	smulbb	r2, r2, r1
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800345c:	4c0c      	ldr	r4, [pc, #48]	; (8003490 <pjpeg_decode_mcu+0x4f0>)
      crG = ((c * 183U) >> 8U) - 91;
 800345e:	0a12      	lsrs	r2, r2, #8
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003460:	7820      	ldrb	r0, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 8003462:	3a5b      	subs	r2, #91	; 0x5b
 8003464:	b212      	sxth	r2, r2
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8003466:	4611      	mov	r1, r2
 8003468:	f7ff f901 	bl	800266e <subAndClamp>
 800346c:	7020      	strb	r0, [r4, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 800346e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8003472:	f7ff f8fc 	bl	800266e <subAndClamp>
 8003476:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 800347a:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 800347e:	f7ff f8f6 	bl	800266e <subAndClamp>
 8003482:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
 8003486:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
 800348a:	f7ff f8f0 	bl	800266e <subAndClamp>
 800348e:	e7bf      	b.n	8003410 <pjpeg_decode_mcu+0x470>
 8003490:	2004d3f4 	.word	0x2004d3f4
 8003494:	2004d2f4 	.word	0x2004d2f4
 8003498:	2004d4f4 	.word	0x2004d4f4
      for (k = 1; k < 64; k++) {
 800349c:	f04f 0b01 	mov.w	fp, #1
              gCoeffBuf[ZAG[k++]] = 0;
 80034a0:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 80037a0 <pjpeg_decode_mcu+0x800>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 80034a4:	4631      	mov	r1, r6
 80034a6:	4638      	mov	r0, r7
 80034a8:	f7ff fba4 	bl	8002bf4 <huffDecode>
        if (numExtraBits)
 80034ac:	f010 040f 	ands.w	r4, r0, #15
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 80034b0:	4682      	mov	sl, r0
          extraBits = getBits2(numExtraBits);
 80034b2:	4620      	mov	r0, r4
        if (numExtraBits)
 80034b4:	d001      	beq.n	80034ba <pjpeg_decode_mcu+0x51a>
          extraBits = getBits2(numExtraBits);
 80034b6:	f7ff fd6f 	bl	8002f98 <getBits2>
        r = s >> 4;
 80034ba:	f3ca 1207 	ubfx	r2, sl, #4, #8
        if (s) {
 80034be:	2c00      	cmp	r4, #0
 80034c0:	f000 80a5 	beq.w	800360e <pjpeg_decode_mcu+0x66e>
          if (r) {
 80034c4:	b1aa      	cbz	r2, 80034f2 <pjpeg_decode_mcu+0x552>
            if ((k + r) > 63)
 80034c6:	4493      	add	fp, r2
 80034c8:	f1bb 0f3f 	cmp.w	fp, #63	; 0x3f
 80034cc:	f73f adf5 	bgt.w	80030ba <pjpeg_decode_mcu+0x11a>
        r = s >> 4;
 80034d0:	b292      	uxth	r2, r2
              gCoeffBuf[ZAG[k++]] = 0;
 80034d2:	f04f 0c00 	mov.w	ip, #0
 80034d6:	fa5f fb8b 	uxtb.w	fp, fp
 80034da:	ebab 0102 	sub.w	r1, fp, r2
              r--;
 80034de:	3a01      	subs	r2, #1
              gCoeffBuf[ZAG[k++]] = 0;
 80034e0:	4ba8      	ldr	r3, [pc, #672]	; (8003784 <pjpeg_decode_mcu+0x7e4>)
 80034e2:	b2c9      	uxtb	r1, r1
              r--;
 80034e4:	b292      	uxth	r2, r2
              gCoeffBuf[ZAG[k++]] = 0;
 80034e6:	f919 1001 	ldrsb.w	r1, [r9, r1]
 80034ea:	f823 c011 	strh.w	ip, [r3, r1, lsl #1]
            while (r) {
 80034ee:	2a00      	cmp	r2, #0
 80034f0:	d1f3      	bne.n	80034da <pjpeg_decode_mcu+0x53a>
 80034f2:	3c01      	subs	r4, #1
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 80034f4:	4ba4      	ldr	r3, [pc, #656]	; (8003788 <pjpeg_decode_mcu+0x7e8>)
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 80034f6:	f838 101b 	ldrh.w	r1, [r8, fp, lsl #1]
 80034fa:	b2e4      	uxtb	r4, r4
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 80034fc:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8003500:	4282      	cmp	r2, r0
 8003502:	bf84      	itt	hi
 8003504:	4ba1      	ldrhi	r3, [pc, #644]	; (800378c <pjpeg_decode_mcu+0x7ec>)
 8003506:	f833 2014 	ldrhhi.w	r2, [r3, r4, lsl #1]
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 800350a:	4b9e      	ldr	r3, [pc, #632]	; (8003784 <pjpeg_decode_mcu+0x7e4>)
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800350c:	bf88      	it	hi
 800350e:	1880      	addhi	r0, r0, r2
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 8003510:	f919 200b 	ldrsb.w	r2, [r9, fp]
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 8003514:	b200      	sxth	r0, r0
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 8003516:	fb11 f000 	smulbb	r0, r1, r0
 800351a:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
      for (k = 1; k < 64; k++) {
 800351e:	f10b 0b01 	add.w	fp, fp, #1
 8003522:	fa5f fb8b 	uxtb.w	fp, fp
 8003526:	f1bb 0f3f 	cmp.w	fp, #63	; 0x3f
 800352a:	d9bb      	bls.n	80034a4 <pjpeg_decode_mcu+0x504>
 800352c:	4998      	ldr	r1, [pc, #608]	; (8003790 <pjpeg_decode_mcu+0x7f0>)
    if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) ==
 800352e:	f931 2c0e 	ldrsh.w	r2, [r1, #-14]
 8003532:	f931 8c0c 	ldrsh.w	r8, [r1, #-12]
 8003536:	f931 cc0a 	ldrsh.w	ip, [r1, #-10]
 800353a:	ea42 0708 	orr.w	r7, r2, r8
 800353e:	f931 3c08 	ldrsh.w	r3, [r1, #-8]
 8003542:	f931 0c06 	ldrsh.w	r0, [r1, #-6]
 8003546:	ea4c 0707 	orr.w	r7, ip, r7
 800354a:	f931 bc04 	ldrsh.w	fp, [r1, #-4]
 800354e:	f931 6c02 	ldrsh.w	r6, [r1, #-2]
 8003552:	431f      	orrs	r7, r3
 8003554:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 8003558:	4307      	orrs	r7, r0
 800355a:	ea4b 0707 	orr.w	r7, fp, r7
 800355e:	4337      	orrs	r7, r6
 8003560:	d17b      	bne.n	800365a <pjpeg_decode_mcu+0x6ba>
      *(pSrc + 1) = src0;
 8003562:	f821 4c0e 	strh.w	r4, [r1, #-14]
      *(pSrc + 2) = src0;
 8003566:	f821 4c0c 	strh.w	r4, [r1, #-12]
      *(pSrc + 3) = src0;
 800356a:	f821 4c0a 	strh.w	r4, [r1, #-10]
      *(pSrc + 4) = src0;
 800356e:	f821 4c08 	strh.w	r4, [r1, #-8]
      *(pSrc + 5) = src0;
 8003572:	f821 4c06 	strh.w	r4, [r1, #-6]
      *(pSrc + 6) = src0;
 8003576:	f821 4c04 	strh.w	r4, [r1, #-4]
      *(pSrc + 7) = src0;
 800357a:	f821 4c02 	strh.w	r4, [r1, #-2]
 800357e:	3110      	adds	r1, #16
  for (i = 0; i < 8; i++) {
 8003580:	4b84      	ldr	r3, [pc, #528]	; (8003794 <pjpeg_decode_mcu+0x7f4>)
 8003582:	428b      	cmp	r3, r1
 8003584:	d1d3      	bne.n	800352e <pjpeg_decode_mcu+0x58e>
 8003586:	f1a3 0192 	sub.w	r1, r3, #146	; 0x92
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 800358a:	f9b1 2012 	ldrsh.w	r2, [r1, #18]
 800358e:	f9b1 a022 	ldrsh.w	sl, [r1, #34]	; 0x22
 8003592:	f9b1 7032 	ldrsh.w	r7, [r1, #50]	; 0x32
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 8003596:	ea42 0c0a 	orr.w	ip, r2, sl
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 800359a:	f9b1 4042 	ldrsh.w	r4, [r1, #66]	; 0x42
 800359e:	f9b1 0052 	ldrsh.w	r0, [r1, #82]	; 0x52
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 80035a2:	ea47 0c0c 	orr.w	ip, r7, ip
 80035a6:	f9b1 9062 	ldrsh.w	r9, [r1, #98]	; 0x62
 80035aa:	f9b1 3072 	ldrsh.w	r3, [r1, #114]	; 0x72
 80035ae:	ea44 0c0c 	orr.w	ip, r4, ip
 80035b2:	f831 6f02 	ldrh.w	r6, [r1, #2]!
 80035b6:	ea40 0c0c 	orr.w	ip, r0, ip
 80035ba:	ea49 0c0c 	orr.w	ip, r9, ip
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 80035be:	ea53 0c0c 	orrs.w	ip, r3, ip
 80035c2:	f040 80ef 	bne.w	80037a4 <pjpeg_decode_mcu+0x804>
      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 80035c6:	3640      	adds	r6, #64	; 0x40
 80035c8:	b230      	sxth	r0, r6
 80035ca:	f7ff fadd 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 80035ce:	3080      	adds	r0, #128	; 0x80
 80035d0:	b200      	sxth	r0, r0
 80035d2:	f7ff f833 	bl	800263c <clamp>
      *(pSrc + 0 * 8) = c;
 80035d6:	b200      	sxth	r0, r0
 80035d8:	8008      	strh	r0, [r1, #0]
      *(pSrc + 1 * 8) = c;
 80035da:	8208      	strh	r0, [r1, #16]
      *(pSrc + 2 * 8) = c;
 80035dc:	8408      	strh	r0, [r1, #32]
      *(pSrc + 3 * 8) = c;
 80035de:	8608      	strh	r0, [r1, #48]	; 0x30
      *(pSrc + 4 * 8) = c;
 80035e0:	f8a1 0040 	strh.w	r0, [r1, #64]	; 0x40
      *(pSrc + 5 * 8) = c;
 80035e4:	f8a1 0050 	strh.w	r0, [r1, #80]	; 0x50
      *(pSrc + 6 * 8) = c;
 80035e8:	f8a1 0060 	strh.w	r0, [r1, #96]	; 0x60
  for (i = 0; i < 8; i++) {
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <pjpeg_decode_mcu+0x7f8>)
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 80035ee:	f8a1 0070 	strh.w	r0, [r1, #112]	; 0x70
  for (i = 0; i < 8; i++) {
 80035f2:	428b      	cmp	r3, r1
 80035f4:	d1c9      	bne.n	800358a <pjpeg_decode_mcu+0x5ea>
  switch (gScanType) {
 80035f6:	4b69      	ldr	r3, [pc, #420]	; (800379c <pjpeg_decode_mcu+0x7fc>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	f63f ad92 	bhi.w	8003124 <pjpeg_decode_mcu+0x184>
 8003600:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003604:	01a4019f 	.word	0x01a4019f
 8003608:	01ed0212 	.word	0x01ed0212
 800360c:	0236      	.short	0x0236
          if (r == 15) {
 800360e:	2a0f      	cmp	r2, #15
 8003610:	d11f      	bne.n	8003652 <pjpeg_decode_mcu+0x6b2>
            if ((k + 16) > 64)
 8003612:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8003616:	f63f ad50 	bhi.w	80030ba <pjpeg_decode_mcu+0x11a>
              gCoeffBuf[ZAG[k++]] = 0;
 800361a:	4621      	mov	r1, r4
 800361c:	eb0b 0204 	add.w	r2, fp, r4
 8003620:	3401      	adds	r4, #1
 8003622:	4b58      	ldr	r3, [pc, #352]	; (8003784 <pjpeg_decode_mcu+0x7e4>)
 8003624:	b2d2      	uxtb	r2, r2
            for (r = 16; r > 0; r--)
 8003626:	2c10      	cmp	r4, #16
              gCoeffBuf[ZAG[k++]] = 0;
 8003628:	f919 2002 	ldrsb.w	r2, [r9, r2]
 800362c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for (r = 16; r > 0; r--)
 8003630:	d1f4      	bne.n	800361c <pjpeg_decode_mcu+0x67c>
 8003632:	f10b 0b0f 	add.w	fp, fp, #15
 8003636:	fa5f fb8b 	uxtb.w	fp, fp
 800363a:	e770      	b.n	800351e <pjpeg_decode_mcu+0x57e>
        gCoeffBuf[ZAG[k++]] = 0;
 800363c:	5713      	ldrsb	r3, [r2, r4]
 800363e:	3401      	adds	r4, #1
 8003640:	4850      	ldr	r0, [pc, #320]	; (8003784 <pjpeg_decode_mcu+0x7e4>)
 8003642:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
      while (k < 64)
 8003646:	eb0b 0304 	add.w	r3, fp, r4
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b3f      	cmp	r3, #63	; 0x3f
 800364e:	d9f5      	bls.n	800363c <pjpeg_decode_mcu+0x69c>
 8003650:	e76c      	b.n	800352c <pjpeg_decode_mcu+0x58c>
        gCoeffBuf[ZAG[k++]] = 0;
 8003652:	4a53      	ldr	r2, [pc, #332]	; (80037a0 <pjpeg_decode_mcu+0x800>)
 8003654:	4621      	mov	r1, r4
 8003656:	445a      	add	r2, fp
 8003658:	e7f5      	b.n	8003646 <pjpeg_decode_mcu+0x6a6>
      int16 x4 = src4 - src7;
 800365a:	fa1f fc8c 	uxth.w	ip, ip
  x += 128L;
 800365e:	f04f 0980 	mov.w	r9, #128	; 0x80
      int16 x5 = src5 + src6;
 8003662:	b2b6      	uxth	r6, r6
      int16 x4 = src4 - src7;
 8003664:	b280      	uxth	r0, r0
      int16 x5 = src5 + src6;
 8003666:	b292      	uxth	r2, r2
      int16 x4 = src4 - src7;
 8003668:	eba0 070c 	sub.w	r7, r0, ip
      int16 x7 = src4 + src7;
 800366c:	4460      	add	r0, ip
      int16 x5 = src5 + src6;
 800366e:	eb02 0c06 	add.w	ip, r2, r6
      int16 x6 = src5 - src6;
 8003672:	1b92      	subs	r2, r2, r6
      int16 x4 = src4 - src7;
 8003674:	b2bf      	uxth	r7, r7
      int16 x6 = src5 - src6;
 8003676:	b292      	uxth	r2, r2
      int16 x4 = src4 - src7;
 8003678:	fa0f fe87 	sxth.w	lr, r7
      int16 x6 = src5 - src6;
 800367c:	b216      	sxth	r6, r2
      int16 tmp1 = imul_b5(x4 - x6);
 800367e:	1aba      	subs	r2, r7, r2
  x += 128L;
 8003680:	27c4      	movs	r7, #196	; 0xc4
      int16 x5 = src5 + src6;
 8003682:	fa1f fc8c 	uxth.w	ip, ip
      int16 x7 = src4 + src7;
 8003686:	b280      	uxth	r0, r0
  x += 128L;
 8003688:	fb12 9207 	smlabb	r2, r2, r7, r9
  x += 128L;
 800368c:	f04f 0980 	mov.w	r9, #128	; 0x80
      int16 x30 = src0 + src1;
 8003690:	b2a4      	uxth	r4, r4
  long r = (unsigned long)x >> 8U;
 8003692:	0a17      	lsrs	r7, r2, #8
  if (x < 0)
 8003694:	2a00      	cmp	r2, #0
  x += 128L;
 8003696:	f240 1215 	movw	r2, #277	; 0x115
      int16 x12 = src2 - src3;
 800369a:	fa1f f888 	uxth.w	r8, r8
    r |= ~(~(unsigned long)0U >> 8U);
 800369e:	bfb8      	it	lt
 80036a0:	f047 477f 	orrlt.w	r7, r7, #4278190080	; 0xff000000
  x += 128L;
 80036a4:	fb16 9602 	smlabb	r6, r6, r2, r9
  x += 128L;
 80036a8:	f04f 0980 	mov.w	r9, #128	; 0x80
      int16 stg26 = imul_b4(x6) - tmp1;
 80036ac:	b2bf      	uxth	r7, r7
  long r = (unsigned long)x >> 8U;
 80036ae:	0a32      	lsrs	r2, r6, #8
  if (x < 0)
 80036b0:	2e00      	cmp	r6, #0
    r |= ~(~(unsigned long)0U >> 8U);
 80036b2:	bfb8      	it	lt
 80036b4:	f042 427f 	orrlt.w	r2, r2, #4278190080	; 0xff000000
      int16 stg26 = imul_b4(x6) - tmp1;
 80036b8:	1bd6      	subs	r6, r2, r7
  x += 128L;
 80036ba:	f240 229d 	movw	r2, #669	; 0x29d
 80036be:	fb1e 9e02 	smlabb	lr, lr, r2, r9
      int16 x17 = x5 + x7;
 80036c2:	eb00 090c 	add.w	r9, r0, ip
      int16 stg26 = imul_b4(x6) - tmp1;
 80036c6:	b2b6      	uxth	r6, r6
      int16 x15 = x5 - x7;
 80036c8:	ebac 0000 	sub.w	r0, ip, r0
      int16 x17 = x5 + x7;
 80036cc:	fa1f f989 	uxth.w	r9, r9
  if (x < 0)
 80036d0:	f1be 0f00 	cmp.w	lr, #0
  long r = (unsigned long)x >> 8U;
 80036d4:	ea4f 221e 	mov.w	r2, lr, lsr #8
      int16 tmp2 = stg26 - x17;
 80036d8:	eba6 0609 	sub.w	r6, r6, r9
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 80036dc:	b200      	sxth	r0, r0
    r |= ~(~(unsigned long)0U >> 8U);
 80036de:	bfb8      	it	lt
 80036e0:	f042 427f 	orrlt.w	r2, r2, #4278190080	; 0xff000000
      int16 tmp2 = stg26 - x17;
 80036e4:	b2b6      	uxth	r6, r6
 80036e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 80036ea:	f7ff fa57 	bl	8002b9c <imul_b1_b3>
 80036ee:	1b80      	subs	r0, r0, r6
      int16 x30 = src0 + src1;
 80036f0:	9b02      	ldr	r3, [sp, #8]
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 80036f2:	fa1f fa80 	uxth.w	sl, r0
      int16 x44 = tmp3 + x24;
 80036f6:	9a03      	ldr	r2, [sp, #12]
      int16 x30 = src0 + src1;
 80036f8:	b29b      	uxth	r3, r3
      int16 x44 = tmp3 + x24;
 80036fa:	ebaa 0202 	sub.w	r2, sl, r2
      int16 x12 = src2 - src3;
 80036fe:	fa1f f08b 	uxth.w	r0, fp
      int16 x44 = tmp3 + x24;
 8003702:	4417      	add	r7, r2
      int16 x13 = src2 + src3;
 8003704:	eb08 0b00 	add.w	fp, r8, r0
      int16 x30 = src0 + src1;
 8003708:	18e2      	adds	r2, r4, r3
      int16 x12 = src2 - src3;
 800370a:	eba8 0000 	sub.w	r0, r8, r0
      int16 x13 = src2 + src3;
 800370e:	fa1f fb8b 	uxth.w	fp, fp
      int16 x31 = src0 - src1;
 8003712:	1ae4      	subs	r4, r4, r3
      int16 x30 = src0 + src1;
 8003714:	b292      	uxth	r2, r2
      int16 x32 = imul_b1_b3(x12) - x13;
 8003716:	b200      	sxth	r0, r0
      int16 x30 = src0 + src1;
 8003718:	9202      	str	r2, [sp, #8]
      int16 x32 = imul_b1_b3(x12) - x13;
 800371a:	f7ff fa3f 	bl	8002b9c <imul_b1_b3>
      int16 x40 = x30 + x13;
 800371e:	9a02      	ldr	r2, [sp, #8]
      int16 x32 = imul_b1_b3(x12) - x13;
 8003720:	eba0 000b 	sub.w	r0, r0, fp
      int16 x31 = src0 - src1;
 8003724:	b2a4      	uxth	r4, r4
      int16 x32 = imul_b1_b3(x12) - x13;
 8003726:	b280      	uxth	r0, r0
      int16 x40 = x30 + x13;
 8003728:	eb02 0c0b 	add.w	ip, r2, fp
      int16 x43 = x30 - x13;
 800372c:	eba2 020b 	sub.w	r2, r2, fp
      int16 x44 = tmp3 + x24;
 8003730:	b2bf      	uxth	r7, r7
      int16 x40 = x30 + x13;
 8003732:	fa1f fc8c 	uxth.w	ip, ip
      int16 x41 = x31 + x32;
 8003736:	eb04 0e00 	add.w	lr, r4, r0
      int16 x42 = x31 - x32;
 800373a:	1a20      	subs	r0, r4, r0
      int16 x43 = x30 - x13;
 800373c:	b292      	uxth	r2, r2
      *(pSrc + 0) = x40 + x17;
 800373e:	eb09 030c 	add.w	r3, r9, ip
      int16 x41 = x31 + x32;
 8003742:	fa1f fe8e 	uxth.w	lr, lr
      int16 x42 = x31 - x32;
 8003746:	b280      	uxth	r0, r0
      *(pSrc + 7) = x40 - x17;
 8003748:	ebac 0909 	sub.w	r9, ip, r9
      *(pSrc + 0) = x40 + x17;
 800374c:	f821 3c10 	strh.w	r3, [r1, #-16]
      *(pSrc + 1) = x41 + tmp2;
 8003750:	eb06 030e 	add.w	r3, r6, lr
      *(pSrc + 6) = x41 - tmp2;
 8003754:	ebae 0606 	sub.w	r6, lr, r6
      *(pSrc + 7) = x40 - x17;
 8003758:	f821 9c02 	strh.w	r9, [r1, #-2]
      *(pSrc + 1) = x41 + tmp2;
 800375c:	f821 3c0e 	strh.w	r3, [r1, #-14]
      *(pSrc + 2) = x42 + tmp3;
 8003760:	eb0a 0300 	add.w	r3, sl, r0
      *(pSrc + 5) = x42 - tmp3;
 8003764:	eba0 000a 	sub.w	r0, r0, sl
      *(pSrc + 6) = x41 - tmp2;
 8003768:	f821 6c04 	strh.w	r6, [r1, #-4]
      *(pSrc + 2) = x42 + tmp3;
 800376c:	f821 3c0c 	strh.w	r3, [r1, #-12]
      *(pSrc + 3) = x43 - x44;
 8003770:	1bd3      	subs	r3, r2, r7
      *(pSrc + 4) = x43 + x44;
 8003772:	4417      	add	r7, r2
      *(pSrc + 5) = x42 - tmp3;
 8003774:	f821 0c06 	strh.w	r0, [r1, #-6]
      *(pSrc + 3) = x43 - x44;
 8003778:	f821 3c0a 	strh.w	r3, [r1, #-10]
      *(pSrc + 4) = x43 + x44;
 800377c:	f821 7c08 	strh.w	r7, [r1, #-8]
 8003780:	e6fd      	b.n	800357e <pjpeg_decode_mcu+0x5de>
 8003782:	bf00      	nop
 8003784:	2004cdf0 	.word	0x2004cdf0
 8003788:	080185aa 	.word	0x080185aa
 800378c:	080185c8 	.word	0x080185c8
 8003790:	2004ce00 	.word	0x2004ce00
 8003794:	2004ce80 	.word	0x2004ce80
 8003798:	2004cdfe 	.word	0x2004cdfe
 800379c:	2004d70c 	.word	0x2004d70c
 80037a0:	08018608 	.word	0x08018608
      int16 x4 = src4 - src7;
 80037a4:	b2bf      	uxth	r7, r7
  x += 128L;
 80037a6:	f04f 0880 	mov.w	r8, #128	; 0x80
      int16 x4 = src4 - src7;
 80037aa:	b280      	uxth	r0, r0
      int16 x5 = src5 + src6;
 80037ac:	b292      	uxth	r2, r2
      int16 x4 = src4 - src7;
 80037ae:	eba0 0e07 	sub.w	lr, r0, r7
      int16 x7 = src4 + src7;
 80037b2:	4438      	add	r0, r7
      int16 x5 = src5 + src6;
 80037b4:	b29f      	uxth	r7, r3
      int16 x4 = src4 - src7;
 80037b6:	fa1f fe8e 	uxth.w	lr, lr
      int16 x5 = src5 + src6;
 80037ba:	19d3      	adds	r3, r2, r7
      int16 x6 = src5 - src6;
 80037bc:	1bd2      	subs	r2, r2, r7
      int16 x4 = src4 - src7;
 80037be:	fa0f fc8e 	sxth.w	ip, lr
      int16 x6 = src5 - src6;
 80037c2:	b292      	uxth	r2, r2
      int16 x5 = src5 + src6;
 80037c4:	b29b      	uxth	r3, r3
      int16 x6 = src5 - src6;
 80037c6:	b217      	sxth	r7, r2
      int16 tmp1 = imul_b5(x4 - x6);
 80037c8:	ebae 0202 	sub.w	r2, lr, r2
  x += 128L;
 80037cc:	f04f 0ec4 	mov.w	lr, #196	; 0xc4
      int16 x7 = src4 + src7;
 80037d0:	b280      	uxth	r0, r0
      int16 x12 = src2 - src3;
 80037d2:	fa1f f989 	uxth.w	r9, r9
  x += 128L;
 80037d6:	fb12 820e 	smlabb	r2, r2, lr, r8
  x += 128L;
 80037da:	f04f 0e80 	mov.w	lr, #128	; 0x80
      int16 x17 = x5 + x7;
 80037de:	eb00 0b03 	add.w	fp, r0, r3
      int16 x15 = x5 - x7;
 80037e2:	1a18      	subs	r0, r3, r0
  long r = (unsigned long)x >> 8U;
 80037e4:	ea4f 2812 	mov.w	r8, r2, lsr #8
  if (x < 0)
 80037e8:	2a00      	cmp	r2, #0
  x += 128L;
 80037ea:	f240 1215 	movw	r2, #277	; 0x115
      int16 x17 = x5 + x7;
 80037ee:	fa1f fb8b 	uxth.w	fp, fp
    r |= ~(~(unsigned long)0U >> 8U);
 80037f2:	bfb8      	it	lt
 80037f4:	f048 487f 	orrlt.w	r8, r8, #4278190080	; 0xff000000
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 80037f8:	b200      	sxth	r0, r0
  x += 128L;
 80037fa:	fb17 e702 	smlabb	r7, r7, r2, lr
  x += 128L;
 80037fe:	f04f 0e80 	mov.w	lr, #128	; 0x80
      int16 stg26 = imul_b4(x6) - tmp1;
 8003802:	fa1f f888 	uxth.w	r8, r8
  long r = (unsigned long)x >> 8U;
 8003806:	0a3a      	lsrs	r2, r7, #8
  if (x < 0)
 8003808:	2f00      	cmp	r7, #0
    r |= ~(~(unsigned long)0U >> 8U);
 800380a:	bfb8      	it	lt
 800380c:	f042 427f 	orrlt.w	r2, r2, #4278190080	; 0xff000000
      int16 stg26 = imul_b4(x6) - tmp1;
 8003810:	eba2 0708 	sub.w	r7, r2, r8
  x += 128L;
 8003814:	f240 229d 	movw	r2, #669	; 0x29d
 8003818:	fb1c ec02 	smlabb	ip, ip, r2, lr
      int16 stg26 = imul_b4(x6) - tmp1;
 800381c:	b2bf      	uxth	r7, r7
  long r = (unsigned long)x >> 8U;
 800381e:	ea4f 221c 	mov.w	r2, ip, lsr #8
  if (x < 0)
 8003822:	f1bc 0f00 	cmp.w	ip, #0
      int16 tmp2 = stg26 - x17;
 8003826:	eba7 070b 	sub.w	r7, r7, fp
    r |= ~(~(unsigned long)0U >> 8U);
 800382a:	bfb8      	it	lt
 800382c:	f042 427f 	orrlt.w	r2, r2, #4278190080	; 0xff000000
      int16 tmp2 = stg26 - x17;
 8003830:	b2bf      	uxth	r7, r7
 8003832:	9202      	str	r2, [sp, #8]
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 8003834:	f7ff f9b2 	bl	8002b9c <imul_b1_b3>
 8003838:	1bc0      	subs	r0, r0, r7
      int16 x44 = tmp3 + x24;
 800383a:	9a02      	ldr	r2, [sp, #8]
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 800383c:	b283      	uxth	r3, r0
      int16 x12 = src2 - src3;
 800383e:	fa1f f08a 	uxth.w	r0, sl
      int16 x44 = tmp3 + x24;
 8003842:	1a9a      	subs	r2, r3, r2
 8003844:	9302      	str	r3, [sp, #8]
      int16 x13 = src2 + src3;
 8003846:	eb00 0a09 	add.w	sl, r0, r9
      int16 x12 = src2 - src3;
 800384a:	eba0 0009 	sub.w	r0, r0, r9
      int16 x44 = tmp3 + x24;
 800384e:	4490      	add	r8, r2
      int16 x30 = src0 + src1;
 8003850:	b2a2      	uxth	r2, r4
      int16 x13 = src2 + src3;
 8003852:	fa1f fa8a 	uxth.w	sl, sl
      int16 x30 = src0 + src1;
 8003856:	1994      	adds	r4, r2, r6
      int16 x32 = imul_b1_b3(x12) - x13;
 8003858:	b200      	sxth	r0, r0
      int16 x31 = src0 - src1;
 800385a:	1ab6      	subs	r6, r6, r2
      int16 x32 = imul_b1_b3(x12) - x13;
 800385c:	f7ff f99e 	bl	8002b9c <imul_b1_b3>
      int16 x30 = src0 + src1;
 8003860:	b2a4      	uxth	r4, r4
      int16 x32 = imul_b1_b3(x12) - x13;
 8003862:	eba0 020a 	sub.w	r2, r0, sl
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 8003866:	f10b 0040 	add.w	r0, fp, #64	; 0x40
      int16 x31 = src0 - src1;
 800386a:	b2b6      	uxth	r6, r6
      int16 x40 = x30 + x13;
 800386c:	eb04 090a 	add.w	r9, r4, sl
      int16 x32 = imul_b1_b3(x12) - x13;
 8003870:	b292      	uxth	r2, r2
      int16 x43 = x30 - x13;
 8003872:	eba4 040a 	sub.w	r4, r4, sl
      int16 x44 = tmp3 + x24;
 8003876:	fa1f f888 	uxth.w	r8, r8
      int16 x40 = x30 + x13;
 800387a:	fa1f f989 	uxth.w	r9, r9
      int16 x41 = x31 + x32;
 800387e:	eb06 0a02 	add.w	sl, r6, r2
      int16 x42 = x31 - x32;
 8003882:	1ab2      	subs	r2, r6, r2
      int16 x43 = x30 - x13;
 8003884:	b2a4      	uxth	r4, r4
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 8003886:	4448      	add	r0, r9
      int16 x41 = x31 + x32;
 8003888:	fa1f fa8a 	uxth.w	sl, sl
      int16 x42 = x31 - x32;
 800388c:	b292      	uxth	r2, r2
 800388e:	3440      	adds	r4, #64	; 0x40
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 8003890:	b200      	sxth	r0, r0
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 8003892:	eba9 090b 	sub.w	r9, r9, fp
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 8003896:	f7ff f977 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 800389a:	3080      	adds	r0, #128	; 0x80
 800389c:	b2a4      	uxth	r4, r4
 800389e:	b200      	sxth	r0, r0
 80038a0:	f7fe fecc 	bl	800263c <clamp>
 80038a4:	8008      	strh	r0, [r1, #0]
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80038a6:	f107 0040 	add.w	r0, r7, #64	; 0x40
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 80038aa:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80038ae:	4450      	add	r0, sl
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 80038b0:	4457      	add	r7, sl
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80038b2:	b200      	sxth	r0, r0
 80038b4:	f7ff f968 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 80038b8:	3080      	adds	r0, #128	; 0x80
 80038ba:	b200      	sxth	r0, r0
 80038bc:	f7fe febe 	bl	800263c <clamp>
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 80038c0:	9b02      	ldr	r3, [sp, #8]
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80038c2:	8208      	strh	r0, [r1, #16]
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 80038c4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80038c8:	4410      	add	r0, r2
 80038ca:	b200      	sxth	r0, r0
 80038cc:	f7ff f95c 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 80038d0:	3080      	adds	r0, #128	; 0x80
 80038d2:	b200      	sxth	r0, r0
 80038d4:	f7fe feb2 	bl	800263c <clamp>
 80038d8:	8408      	strh	r0, [r1, #32]
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 80038da:	eba4 0008 	sub.w	r0, r4, r8
 80038de:	b200      	sxth	r0, r0
 80038e0:	f7ff f952 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 80038e4:	3080      	adds	r0, #128	; 0x80
 80038e6:	b200      	sxth	r0, r0
 80038e8:	f7fe fea8 	bl	800263c <clamp>
 80038ec:	8608      	strh	r0, [r1, #48]	; 0x30
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 80038ee:	eb08 0004 	add.w	r0, r8, r4
 80038f2:	b200      	sxth	r0, r0
 80038f4:	f7ff f948 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 80038f8:	3080      	adds	r0, #128	; 0x80
 80038fa:	b200      	sxth	r0, r0
 80038fc:	f7fe fe9e 	bl	800263c <clamp>
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 8003900:	9b02      	ldr	r3, [sp, #8]
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 8003902:	f8a1 0040 	strh.w	r0, [r1, #64]	; 0x40
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 8003906:	1ad0      	subs	r0, r2, r3
 8003908:	3040      	adds	r0, #64	; 0x40
 800390a:	b200      	sxth	r0, r0
 800390c:	f7ff f93c 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 8003910:	3080      	adds	r0, #128	; 0x80
 8003912:	b200      	sxth	r0, r0
 8003914:	f7fe fe92 	bl	800263c <clamp>
 8003918:	f8a1 0050 	strh.w	r0, [r1, #80]	; 0x50
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 800391c:	b238      	sxth	r0, r7
 800391e:	f7ff f933 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 8003922:	3080      	adds	r0, #128	; 0x80
 8003924:	b200      	sxth	r0, r0
 8003926:	f7fe fe89 	bl	800263c <clamp>
 800392a:	f8a1 0060 	strh.w	r0, [r1, #96]	; 0x60
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 800392e:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8003932:	b200      	sxth	r0, r0
 8003934:	f7ff f928 	bl	8002b88 <arithmeticRightShiftN16.constprop.4>
 8003938:	3080      	adds	r0, #128	; 0x80
 800393a:	b200      	sxth	r0, r0
 800393c:	f7fe fe7e 	bl	800263c <clamp>
 8003940:	e654      	b.n	80035ec <pjpeg_decode_mcu+0x64c>
    copyY(0);
 8003942:	2000      	movs	r0, #0
      copyY(128);
 8003944:	f7ff f8be 	bl	8002ac4 <copyY>
 8003948:	f7ff bbec 	b.w	8003124 <pjpeg_decode_mcu+0x184>
    switch (mcuBlock) {
 800394c:	2d01      	cmp	r5, #1
 800394e:	d024      	beq.n	800399a <pjpeg_decode_mcu+0x9fa>
 8003950:	d3f7      	bcc.n	8003942 <pjpeg_decode_mcu+0x9a2>
 8003952:	2d02      	cmp	r5, #2
 8003954:	f47f abe6 	bne.w	8003124 <pjpeg_decode_mcu+0x184>
 8003958:	4d7d      	ldr	r5, [pc, #500]	; (8003b50 <pjpeg_decode_mcu+0xbb0>)
 800395a:	2200      	movs	r2, #0
  uint8 *pDstG = gMCUBufG + dstOfs;
 800395c:	4c7d      	ldr	r4, [pc, #500]	; (8003b54 <pjpeg_decode_mcu+0xbb4>)
    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800395e:	2767      	movs	r7, #103	; 0x67
    crG = ((cr * 183U) >> 8U) - 91;
 8003960:	26b7      	movs	r6, #183	; 0xb7
    uint8 cr = (uint8)*pSrc++;
 8003962:	4b7d      	ldr	r3, [pc, #500]	; (8003b58 <pjpeg_decode_mcu+0xbb8>)
    pDstR[0] = addAndClamp(pDstR[0], crR);
 8003964:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    uint8 cr = (uint8)*pSrc++;
 8003968:	f813 8012 	ldrb.w	r8, [r3, r2, lsl #1]
    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800396c:	fb18 f107 	smulbb	r1, r8, r7
 8003970:	f1a8 03b3 	sub.w	r3, r8, #179	; 0xb3
    pDstR[0] = addAndClamp(pDstR[0], crR);
 8003974:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8003978:	f7fe fe6a 	bl	8002650 <addAndClamp>
    crG = ((cr * 183U) >> 8U) - 91;
 800397c:	fb18 f106 	smulbb	r1, r8, r6
    pDstR[0] = addAndClamp(pDstR[0], crR);
 8003980:	7028      	strb	r0, [r5, #0]
    crG = ((cr * 183U) >> 8U) - 91;
 8003982:	0a09      	lsrs	r1, r1, #8
    pDstG[0] = subAndClamp(pDstG[0], crG);
 8003984:	7820      	ldrb	r0, [r4, #0]
 8003986:	395b      	subs	r1, #91	; 0x5b
 8003988:	f7fe fe71 	bl	800266e <subAndClamp>
 800398c:	3201      	adds	r2, #1
 800398e:	f804 0b01 	strb.w	r0, [r4], #1
  for (i = 64; i > 0; i--) {
 8003992:	2a40      	cmp	r2, #64	; 0x40
 8003994:	d1e5      	bne.n	8003962 <pjpeg_decode_mcu+0x9c2>
 8003996:	f7ff bbc5 	b.w	8003124 <pjpeg_decode_mcu+0x184>
 800399a:	4e70      	ldr	r6, [pc, #448]	; (8003b5c <pjpeg_decode_mcu+0xbbc>)
    switch (mcuBlock) {
 800399c:	2400      	movs	r4, #0
  uint8 *pDstB = gMCUBufB + dstOfs;
 800399e:	4d70      	ldr	r5, [pc, #448]	; (8003b60 <pjpeg_decode_mcu+0xbc0>)
    cbG = ((cb * 88U) >> 8U) - 44U;
 80039a0:	f04f 0858 	mov.w	r8, #88	; 0x58
    cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80039a4:	27c6      	movs	r7, #198	; 0xc6
    uint8 cb = (uint8)*pSrc++;
 80039a6:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <pjpeg_decode_mcu+0xbb8>)
    pDstG[0] = subAndClamp(pDstG[0], cbG);
 80039a8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    uint8 cb = (uint8)*pSrc++;
 80039ac:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
 80039b0:	3401      	adds	r4, #1
    cbG = ((cb * 88U) >> 8U) - 44U;
 80039b2:	fb12 f108 	smulbb	r1, r2, r8
 80039b6:	0a09      	lsrs	r1, r1, #8
    pDstG[0] = subAndClamp(pDstG[0], cbG);
 80039b8:	392c      	subs	r1, #44	; 0x2c
 80039ba:	f7fe fe58 	bl	800266e <subAndClamp>
    cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80039be:	f1a2 01e3 	sub.w	r1, r2, #227	; 0xe3
 80039c2:	fb12 f207 	smulbb	r2, r2, r7
    pDstG[0] = subAndClamp(pDstG[0], cbG);
 80039c6:	7030      	strb	r0, [r6, #0]
    pDstB[0] = addAndClamp(pDstB[0], cbB);
 80039c8:	7828      	ldrb	r0, [r5, #0]
 80039ca:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80039ce:	f7fe fe3f 	bl	8002650 <addAndClamp>
  for (i = 64; i > 0; i--) {
 80039d2:	2c40      	cmp	r4, #64	; 0x40
    pDstB[0] = addAndClamp(pDstB[0], cbB);
 80039d4:	f805 0b01 	strb.w	r0, [r5], #1
  for (i = 64; i > 0; i--) {
 80039d8:	d1e5      	bne.n	80039a6 <pjpeg_decode_mcu+0xa06>
 80039da:	f7ff bba3 	b.w	8003124 <pjpeg_decode_mcu+0x184>
    switch (mcuBlock) {
 80039de:	2d03      	cmp	r5, #3
 80039e0:	f63f aba0 	bhi.w	8003124 <pjpeg_decode_mcu+0x184>
 80039e4:	a301      	add	r3, pc, #4	; (adr r3, 80039ec <pjpeg_decode_mcu+0xa4c>)
 80039e6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003943 	.word	0x08003943
 80039f0:	080039fd 	.word	0x080039fd
 80039f4:	08003a01 	.word	0x08003a01
 80039f8:	08003a15 	.word	0x08003a15
      copyY(128);
 80039fc:	2080      	movs	r0, #128	; 0x80
 80039fe:	e7a1      	b.n	8003944 <pjpeg_decode_mcu+0x9a4>
      upsampleCbV(0, 0);
 8003a00:	2100      	movs	r1, #0
 8003a02:	4608      	mov	r0, r1
 8003a04:	f7fe ff06 	bl	8002814 <upsampleCbV>
      upsampleCbV(4 * 8, 128);
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	2020      	movs	r0, #32
 8003a0c:	f7fe ff02 	bl	8002814 <upsampleCbV>
 8003a10:	f7ff bb88 	b.w	8003124 <pjpeg_decode_mcu+0x184>
      upsampleCrV(0, 0);
 8003a14:	2100      	movs	r1, #0
 8003a16:	4608      	mov	r0, r1
 8003a18:	f7ff f80a 	bl	8002a30 <upsampleCrV>
      upsampleCrV(4 * 8, 128);
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	2020      	movs	r0, #32
 8003a20:	f7ff f806 	bl	8002a30 <upsampleCrV>
 8003a24:	f7ff bb7e 	b.w	8003124 <pjpeg_decode_mcu+0x184>
    switch (mcuBlock) {
 8003a28:	2d03      	cmp	r5, #3
 8003a2a:	f63f ab7b 	bhi.w	8003124 <pjpeg_decode_mcu+0x184>
 8003a2e:	a301      	add	r3, pc, #4	; (adr r3, 8003a34 <pjpeg_decode_mcu+0xa94>)
 8003a30:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8003a34:	08003943 	.word	0x08003943
 8003a38:	08003a45 	.word	0x08003a45
 8003a3c:	08003a49 	.word	0x08003a49
 8003a40:	08003a5d 	.word	0x08003a5d
      copyY(64);
 8003a44:	2040      	movs	r0, #64	; 0x40
 8003a46:	e77d      	b.n	8003944 <pjpeg_decode_mcu+0x9a4>
      upsampleCbH(0, 0);
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	f7fe fe88 	bl	8002760 <upsampleCbH>
      upsampleCbH(4, 64);
 8003a50:	2140      	movs	r1, #64	; 0x40
 8003a52:	2004      	movs	r0, #4
 8003a54:	f7fe fe84 	bl	8002760 <upsampleCbH>
 8003a58:	f7ff bb64 	b.w	8003124 <pjpeg_decode_mcu+0x184>
      upsampleCrH(0, 0);
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4608      	mov	r0, r1
 8003a60:	f7fe ff90 	bl	8002984 <upsampleCrH>
      upsampleCrH(4, 64);
 8003a64:	2140      	movs	r1, #64	; 0x40
 8003a66:	2004      	movs	r0, #4
 8003a68:	f7fe ff8c 	bl	8002984 <upsampleCrH>
 8003a6c:	f7ff bb5a 	b.w	8003124 <pjpeg_decode_mcu+0x184>
    switch (mcuBlock) {
 8003a70:	2d05      	cmp	r5, #5
 8003a72:	f63f ab57 	bhi.w	8003124 <pjpeg_decode_mcu+0x184>
 8003a76:	a301      	add	r3, pc, #4	; (adr r3, 8003a7c <pjpeg_decode_mcu+0xadc>)
 8003a78:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8003a7c:	08003943 	.word	0x08003943
 8003a80:	08003a45 	.word	0x08003a45
 8003a84:	080039fd 	.word	0x080039fd
 8003a88:	08003a95 	.word	0x08003a95
 8003a8c:	08003a99 	.word	0x08003a99
 8003a90:	08003abd 	.word	0x08003abd
      copyY(192);
 8003a94:	20c0      	movs	r0, #192	; 0xc0
 8003a96:	e755      	b.n	8003944 <pjpeg_decode_mcu+0x9a4>
      upsampleCb(0, 0);
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	f7fe fdf6 	bl	800268c <upsampleCb>
      upsampleCb(4, 64);
 8003aa0:	2140      	movs	r1, #64	; 0x40
 8003aa2:	2004      	movs	r0, #4
 8003aa4:	f7fe fdf2 	bl	800268c <upsampleCb>
      upsampleCb(4 * 8, 128);
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	2020      	movs	r0, #32
 8003aac:	f7fe fdee 	bl	800268c <upsampleCb>
      upsampleCb(4 + 4 * 8, 192);
 8003ab0:	21c0      	movs	r1, #192	; 0xc0
 8003ab2:	2024      	movs	r0, #36	; 0x24
 8003ab4:	f7fe fdea 	bl	800268c <upsampleCb>
 8003ab8:	f7ff bb34 	b.w	8003124 <pjpeg_decode_mcu+0x184>
      upsampleCr(0, 0);
 8003abc:	2100      	movs	r1, #0
 8003abe:	4608      	mov	r0, r1
 8003ac0:	f7fe fef6 	bl	80028b0 <upsampleCr>
      upsampleCr(4, 64);
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	2004      	movs	r0, #4
 8003ac8:	f7fe fef2 	bl	80028b0 <upsampleCr>
      upsampleCr(4 * 8, 128);
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	2020      	movs	r0, #32
 8003ad0:	f7fe feee 	bl	80028b0 <upsampleCr>
      upsampleCr(4 + 4 * 8, 192);
 8003ad4:	21c0      	movs	r1, #192	; 0xc0
 8003ad6:	2024      	movs	r0, #36	; 0x24
 8003ad8:	f7fe feea 	bl	80028b0 <upsampleCr>
 8003adc:	f7ff bb22 	b.w	8003124 <pjpeg_decode_mcu+0x184>
    return PJPG_NO_MORE_BLOCKS;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f7ff baf3 	b.w	80030cc <pjpeg_decode_mcu+0x12c>
  if (c != (gNextRestartNum + M_RST0))
 8003ae6:	4c1f      	ldr	r4, [pc, #124]	; (8003b64 <pjpeg_decode_mcu+0xbc4>)
 8003ae8:	8823      	ldrh	r3, [r4, #0]
 8003aea:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8003aee:	4290      	cmp	r0, r2
 8003af0:	f47f aa78 	bne.w	8002fe4 <pjpeg_decode_mcu+0x44>
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 8003af4:	3301      	adds	r3, #1
  gLastDC[0] = 0;
 8003af6:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <pjpeg_decode_mcu+0xbc8>)
 8003af8:	2100      	movs	r1, #0
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 8003afa:	f003 0307 	and.w	r3, r3, #7
  gLastDC[0] = 0;
 8003afe:	8011      	strh	r1, [r2, #0]
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 8003b00:	8023      	strh	r3, [r4, #0]
  gBitsLeft = 8;
 8003b02:	2408      	movs	r4, #8
  gLastDC[1] = 0;
 8003b04:	8051      	strh	r1, [r2, #2]
  gLastDC[2] = 0;
 8003b06:	8091      	strh	r1, [r2, #4]
  getBits2(8);
 8003b08:	4620      	mov	r0, r4
  gRestartsLeft = gRestartInterval;
 8003b0a:	8832      	ldrh	r2, [r6, #0]
  gBitsLeft = 8;
 8003b0c:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <pjpeg_decode_mcu+0xbcc>)
  gRestartsLeft = gRestartInterval;
 8003b0e:	802a      	strh	r2, [r5, #0]
  gBitsLeft = 8;
 8003b10:	701c      	strb	r4, [r3, #0]
  getBits2(8);
 8003b12:	f7ff fa41 	bl	8002f98 <getBits2>
  getBits2(8);
 8003b16:	4620      	mov	r0, r4
 8003b18:	f7ff fa3e 	bl	8002f98 <getBits2>
    gRestartsLeft--;
 8003b1c:	882b      	ldrh	r3, [r5, #0]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	802b      	strh	r3, [r5, #0]
  uint8 *pDstG = gMCUBufG + dstOfs;
 8003b22:	2300      	movs	r3, #0
 8003b24:	9301      	str	r3, [sp, #4]
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <pjpeg_decode_mcu+0xbd0>)
 8003b28:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	42ab      	cmp	r3, r5
 8003b30:	f63f aa64 	bhi.w	8002ffc <pjpeg_decode_mcu+0x5c>
  if ((status) || (gCallbackStatus))
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <pjpeg_decode_mcu+0xbd4>)
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	f47f aac0 	bne.w	80030be <pjpeg_decode_mcu+0x11e>

  gNumMCUSRemaining--;
 8003b3e:	490e      	ldr	r1, [pc, #56]	; (8003b78 <pjpeg_decode_mcu+0xbd8>)

  return 0;
 8003b40:	9200      	str	r2, [sp, #0]
  gNumMCUSRemaining--;
 8003b42:	880b      	ldrh	r3, [r1, #0]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	800b      	strh	r3, [r1, #0]
}
 8003b48:	9800      	ldr	r0, [sp, #0]
 8003b4a:	b005      	add	sp, #20
 8003b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b50:	2004d4f3 	.word	0x2004d4f3
 8003b54:	2004d3f4 	.word	0x2004d3f4
 8003b58:	2004cdf0 	.word	0x2004cdf0
 8003b5c:	2004d3f3 	.word	0x2004d3f3
 8003b60:	2004d2f4 	.word	0x2004d2f4
 8003b64:	2004d602 	.word	0x2004d602
 8003b68:	2004d2ee 	.word	0x2004d2ee
 8003b6c:	2004cdee 	.word	0x2004cdee
 8003b70:	2004d5fa 	.word	0x2004d5fa
 8003b74:	2004cdef 	.word	0x2004cdef
 8003b78:	2004d604 	.word	0x2004d604

08003b7c <pjpeg_decode_init>:

unsigned char
pjpeg_decode_init(pjpeg_image_info_t *pInfo,
                  pjpeg_need_bytes_callback_t pNeed_bytes_callback,
                  void *pCallback_data, unsigned char reduce) {
 8003b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pInfo->m_MCUHeight = 0;
  pInfo->m_pMCUBufR = (unsigned char *)0;
  pInfo->m_pMCUBufG = (unsigned char *)0;
  pInfo->m_pMCUBufB = (unsigned char *)0;

  g_pNeedBytesCallback = pNeed_bytes_callback;
 8003b80:	4db6      	ldr	r5, [pc, #728]	; (8003e5c <pjpeg_decode_init+0x2e0>)
                  void *pCallback_data, unsigned char reduce) {
 8003b82:	4604      	mov	r4, r0
  pInfo->m_width = 0;
 8003b84:	2000      	movs	r0, #0
  gBitsLeft = 8;
 8003b86:	f04f 0908 	mov.w	r9, #8
  g_pNeedBytesCallback = pNeed_bytes_callback;
 8003b8a:	6029      	str	r1, [r5, #0]
                  void *pCallback_data, unsigned char reduce) {
 8003b8c:	b089      	sub	sp, #36	; 0x24
  g_pCallback_data = pCallback_data;
 8003b8e:	49b4      	ldr	r1, [pc, #720]	; (8003e60 <pjpeg_decode_init+0x2e4>)
  gCallbackStatus = 0;
 8003b90:	4db4      	ldr	r5, [pc, #720]	; (8003e64 <pjpeg_decode_init+0x2e8>)
  g_pCallback_data = pCallback_data;
 8003b92:	600a      	str	r2, [r1, #0]
  gValidQuantTables = 0;
 8003b94:	49b4      	ldr	r1, [pc, #720]	; (8003e68 <pjpeg_decode_init+0x2ec>)
  gReduce = reduce;
 8003b96:	4ab5      	ldr	r2, [pc, #724]	; (8003e6c <pjpeg_decode_init+0x2f0>)
  gValidQuantTables = 0;
 8003b98:	7008      	strb	r0, [r1, #0]
  gTemFlag = 0;
 8003b9a:	49b5      	ldr	r1, [pc, #724]	; (8003e70 <pjpeg_decode_init+0x2f4>)
  gReduce = reduce;
 8003b9c:	7013      	strb	r3, [r2, #0]
  gTemFlag = 0;
 8003b9e:	7008      	strb	r0, [r1, #0]
  gInBufOfs = 0;
 8003ba0:	49b4      	ldr	r1, [pc, #720]	; (8003e74 <pjpeg_decode_init+0x2f8>)
  gRestartInterval = 0;
 8003ba2:	4bb5      	ldr	r3, [pc, #724]	; (8003e78 <pjpeg_decode_init+0x2fc>)
  gInBufOfs = 0;
 8003ba4:	7008      	strb	r0, [r1, #0]
  gInBufLeft = 0;
 8003ba6:	49b5      	ldr	r1, [pc, #724]	; (8003e7c <pjpeg_decode_init+0x300>)
  gCompsInFrame = 0;
 8003ba8:	4ab5      	ldr	r2, [pc, #724]	; (8003e80 <pjpeg_decode_init+0x304>)
  gCompsInScan = 0;
 8003baa:	f8df b314 	ldr.w	fp, [pc, #788]	; 8003ec0 <pjpeg_decode_init+0x344>
  gValidHuffTables = 0;
 8003bae:	f8df a314 	ldr.w	sl, [pc, #788]	; 8003ec4 <pjpeg_decode_init+0x348>
  gImageXSize = 0;
 8003bb2:	4eb4      	ldr	r6, [pc, #720]	; (8003e84 <pjpeg_decode_init+0x308>)
  gImageYSize = 0;
 8003bb4:	4fb4      	ldr	r7, [pc, #720]	; (8003e88 <pjpeg_decode_init+0x30c>)
  gBitBuf = 0;
 8003bb6:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8003ec8 <pjpeg_decode_init+0x34c>
  gRestartInterval = 0;
 8003bba:	8018      	strh	r0, [r3, #0]
  gCompsInFrame = 0;
 8003bbc:	7010      	strb	r0, [r2, #0]
  pInfo->m_MCUSPerCol = 0;
 8003bbe:	6120      	str	r0, [r4, #16]
  pInfo->m_scanType = PJPG_GRAYSCALE;
 8003bc0:	7520      	strb	r0, [r4, #20]
  pInfo->m_pMCUBufB = (unsigned char *)0;
 8003bc2:	62a0      	str	r0, [r4, #40]	; 0x28
  gCallbackStatus = 0;
 8003bc4:	7028      	strb	r0, [r5, #0]
  gImageXSize = 0;
 8003bc6:	8030      	strh	r0, [r6, #0]
  gImageYSize = 0;
 8003bc8:	8038      	strh	r0, [r7, #0]
  gCompsInScan = 0;
 8003bca:	f88b 0000 	strb.w	r0, [fp]
  gValidHuffTables = 0;
 8003bce:	f88a 0000 	strb.w	r0, [sl]
  gBitBuf = 0;
 8003bd2:	f8a8 0000 	strh.w	r0, [r8]
  gRestartInterval = 0;
 8003bd6:	9302      	str	r3, [sp, #8]
  gCompsInFrame = 0;
 8003bd8:	9201      	str	r2, [sp, #4]
  pInfo->m_height = 0;
 8003bda:	e9c4 0000 	strd	r0, r0, [r4]
  gInBufLeft = 0;
 8003bde:	7008      	strb	r0, [r1, #0]
  gBitsLeft = 8;
 8003be0:	49aa      	ldr	r1, [pc, #680]	; (8003e8c <pjpeg_decode_init+0x310>)
  pInfo->m_MCUSPerRow = 0;
 8003be2:	e9c4 0002 	strd	r0, r0, [r4, #8]
  pInfo->m_MCUHeight = 0;
 8003be6:	e9c4 0006 	strd	r0, r0, [r4, #24]
  pInfo->m_pMCUBufG = (unsigned char *)0;
 8003bea:	e9c4 0008 	strd	r0, r0, [r4, #32]
  getBits1(8);
 8003bee:	4648      	mov	r0, r9
  gBitsLeft = 8;
 8003bf0:	f881 9000 	strb.w	r9, [r1]
  getBits1(8);
 8003bf4:	f7ff f884 	bl	8002d00 <getBits1>
  getBits1(8);
 8003bf8:	4648      	mov	r0, r9
 8003bfa:	f7ff f881 	bl	8002d00 <getBits1>
 8003bfe:	9b02      	ldr	r3, [sp, #8]

  status = init();
  if ((status) || (gCallbackStatus))
 8003c00:	7828      	ldrb	r0, [r5, #0]
 8003c02:	9304      	str	r3, [sp, #16]
 8003c04:	f8cd b008 	str.w	fp, [sp, #8]
 8003c08:	f8cd a014 	str.w	sl, [sp, #20]
 8003c0c:	b9d0      	cbnz	r0, 8003c44 <pjpeg_decode_init+0xc8>
  uint8 lastchar = (uint8)getBits1(8);
 8003c0e:	4648      	mov	r0, r9
 8003c10:	f7ff f876 	bl	8002d00 <getBits1>
 8003c14:	4683      	mov	fp, r0
  uint8 thischar = (uint8)getBits1(8);
 8003c16:	4648      	mov	r0, r9
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 8003c18:	fa5f fb8b 	uxtb.w	fp, fp
  uint8 thischar = (uint8)getBits1(8);
 8003c1c:	f7ff f870 	bl	8002d00 <getBits1>
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 8003c20:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  uint8 thischar = (uint8)getBits1(8);
 8003c24:	fa5f fa80 	uxtb.w	sl, r0
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 8003c28:	d125      	bne.n	8003c76 <pjpeg_decode_init+0xfa>
 8003c2a:	f1ba 0fd8 	cmp.w	sl, #216	; 0xd8
 8003c2e:	d122      	bne.n	8003c76 <pjpeg_decode_init+0xfa>
  status = processMarkers(&c);
 8003c30:	f10d 001f 	add.w	r0, sp, #31
 8003c34:	f7ff f868 	bl	8002d08 <processMarkers>
  if (status)
 8003c38:	4682      	mov	sl, r0
 8003c3a:	b328      	cbz	r0, 8003c88 <pjpeg_decode_init+0x10c>
    return gCallbackStatus ? gCallbackStatus : status;

  status = locateSOFMarker();
  if ((status) || (gCallbackStatus))
    return gCallbackStatus ? gCallbackStatus : status;
 8003c3c:	7828      	ldrb	r0, [r5, #0]
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	bf08      	it	eq
 8003c42:	4650      	moveq	r0, sl
  pInfo->m_pMCUBufR = gMCUBufR;
  pInfo->m_pMCUBufG = gMCUBufG;
  pInfo->m_pMCUBufB = gMCUBufB;

  return 0;
}
 8003c44:	b009      	add	sp, #36	; 0x24
 8003c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 8003c4a:	4682      	mov	sl, r0
 8003c4c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003c50:	fa1f f989 	uxth.w	r9, r9
    if (--bytesleft == 0)
 8003c54:	f1b9 0f00 	cmp.w	r9, #0
 8003c58:	d00a      	beq.n	8003c70 <pjpeg_decode_init+0xf4>
    thischar = (uint8)getBits1(8);
 8003c5a:	2008      	movs	r0, #8
 8003c5c:	f7ff f850 	bl	8002d00 <getBits1>
    if (lastchar == 0xFF) {
 8003c60:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    thischar = (uint8)getBits1(8);
 8003c64:	b2c0      	uxtb	r0, r0
    if (lastchar == 0xFF) {
 8003c66:	d1f0      	bne.n	8003c4a <pjpeg_decode_init+0xce>
      if (thischar == M_SOI)
 8003c68:	28d8      	cmp	r0, #216	; 0xd8
 8003c6a:	d007      	beq.n	8003c7c <pjpeg_decode_init+0x100>
      else if (thischar == M_EOI)
 8003c6c:	28d9      	cmp	r0, #217	; 0xd9
 8003c6e:	d1ec      	bne.n	8003c4a <pjpeg_decode_init+0xce>
  return 0;
 8003c70:	f04f 0a13 	mov.w	sl, #19
 8003c74:	e7e2      	b.n	8003c3c <pjpeg_decode_init+0xc0>
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 8003c76:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8003c7a:	e7e7      	b.n	8003c4c <pjpeg_decode_init+0xd0>
  thischar = (uint8)((gBitBuf >> 8) & 0xFF);
 8003c7c:	f8b8 3000 	ldrh.w	r3, [r8]
  if (thischar != 0xFF)
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	2bff      	cmp	r3, #255	; 0xff
 8003c84:	d0d4      	beq.n	8003c30 <pjpeg_decode_init+0xb4>
 8003c86:	e7f3      	b.n	8003c70 <pjpeg_decode_init+0xf4>
  switch (c) {
 8003c88:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8003c8c:	2ac2      	cmp	r2, #194	; 0xc2
 8003c8e:	d078      	beq.n	8003d82 <pjpeg_decode_init+0x206>
 8003c90:	2ac9      	cmp	r2, #201	; 0xc9
 8003c92:	d073      	beq.n	8003d7c <pjpeg_decode_init+0x200>
 8003c94:	2ac0      	cmp	r2, #192	; 0xc0
 8003c96:	d16e      	bne.n	8003d76 <pjpeg_decode_init+0x1fa>
  uint16 left = getBits1(16);
 8003c98:	2010      	movs	r0, #16
 8003c9a:	f7ff f831 	bl	8002d00 <getBits1>
 8003c9e:	4681      	mov	r9, r0
  if (getBits1(8) != 8)
 8003ca0:	2008      	movs	r0, #8
 8003ca2:	f7ff f82d 	bl	8002d00 <getBits1>
 8003ca6:	2808      	cmp	r0, #8
 8003ca8:	4680      	mov	r8, r0
 8003caa:	f040 8220 	bne.w	80040ee <pjpeg_decode_init+0x572>
  gImageYSize = getBits1(16);
 8003cae:	2010      	movs	r0, #16
 8003cb0:	f7ff f826 	bl	8002d00 <getBits1>
 8003cb4:	8038      	strh	r0, [r7, #0]
  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 8003cb6:	3801      	subs	r0, #1
 8003cb8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003cbc:	f080 821a 	bcs.w	80040f4 <pjpeg_decode_init+0x578>
  gImageXSize = getBits1(16);
 8003cc0:	2010      	movs	r0, #16
 8003cc2:	f7ff f81d 	bl	8002d00 <getBits1>
 8003cc6:	8030      	strh	r0, [r6, #0]
  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 8003cc8:	3801      	subs	r0, #1
 8003cca:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003cce:	f080 8213 	bcs.w	80040f8 <pjpeg_decode_init+0x57c>
  gCompsInFrame = (uint8)getBits1(8);
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	f7ff f814 	bl	8002d00 <getBits1>
 8003cd8:	9b01      	ldr	r3, [sp, #4]
 8003cda:	b2c0      	uxtb	r0, r0
  if (gCompsInFrame > 3)
 8003cdc:	2803      	cmp	r0, #3
  gCompsInFrame = (uint8)getBits1(8);
 8003cde:	7018      	strb	r0, [r3, #0]
  if (gCompsInFrame > 3)
 8003ce0:	f200 820d 	bhi.w	80040fe <pjpeg_decode_init+0x582>
  if (left != (gCompsInFrame + gCompsInFrame + gCompsInFrame + 8))
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fb12 8800 	smlabb	r8, r2, r0, r8
 8003cea:	45c1      	cmp	r9, r8
 8003cec:	f040 820a 	bne.w	8004104 <pjpeg_decode_init+0x588>
 8003cf0:	46d1      	mov	r9, sl
    gCompVSamp[i] = (uint8)getBits1(4);
 8003cf2:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8003e94 <pjpeg_decode_init+0x318>
  for (i = 0; i < gCompsInFrame; i++) {
 8003cf6:	9b01      	ldr	r3, [sp, #4]
 8003cf8:	fa5f f889 	uxtb.w	r8, r9
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	4590      	cmp	r8, r2
 8003d00:	d31a      	bcc.n	8003d38 <pjpeg_decode_init+0x1bc>
  if ((status) || (gCallbackStatus))
 8003d02:	7829      	ldrb	r1, [r5, #0]
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d199      	bne.n	8003c3c <pjpeg_decode_init+0xc0>
  if (gCompsInFrame == 1) {
 8003d08:	2a01      	cmp	r2, #1
 8003d0a:	d13d      	bne.n	8003d88 <pjpeg_decode_init+0x20c>
    if ((gCompHSamp[0] != 1) || (gCompVSamp[0] != 1))
 8003d0c:	4b60      	ldr	r3, [pc, #384]	; (8003e90 <pjpeg_decode_init+0x314>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	f040 810b 	bne.w	8003f2c <pjpeg_decode_init+0x3b0>
 8003d16:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <pjpeg_decode_init+0x318>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	f040 8106 	bne.w	8003f2c <pjpeg_decode_init+0x3b0>
    gScanType = PJPG_GRAYSCALE;
 8003d20:	4a5d      	ldr	r2, [pc, #372]	; (8003e98 <pjpeg_decode_init+0x31c>)
 8003d22:	7011      	strb	r1, [r2, #0]
    gMaxBlocksPerMCU = 1;
 8003d24:	4a5d      	ldr	r2, [pc, #372]	; (8003e9c <pjpeg_decode_init+0x320>)
 8003d26:	7013      	strb	r3, [r2, #0]
    gMCUOrg[0] = 0;
 8003d28:	4b5d      	ldr	r3, [pc, #372]	; (8003ea0 <pjpeg_decode_init+0x324>)
 8003d2a:	7019      	strb	r1, [r3, #0]
      gMaxMCUXSize = 8;
 8003d2c:	2308      	movs	r3, #8
      gMaxMCUXSize = 16;
 8003d2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ea4 <pjpeg_decode_init+0x328>)
 8003d30:	7013      	strb	r3, [r2, #0]
      gMaxMCUYSize = 16;
 8003d32:	4a5d      	ldr	r2, [pc, #372]	; (8003ea8 <pjpeg_decode_init+0x32c>)
 8003d34:	7013      	strb	r3, [r2, #0]
 8003d36:	e065      	b.n	8003e04 <pjpeg_decode_init+0x288>
    gCompIdent[i] = (uint8)getBits1(8);
 8003d38:	2008      	movs	r0, #8
 8003d3a:	f109 0901 	add.w	r9, r9, #1
 8003d3e:	f7fe ffdf 	bl	8002d00 <getBits1>
 8003d42:	4b5a      	ldr	r3, [pc, #360]	; (8003eac <pjpeg_decode_init+0x330>)
 8003d44:	f803 0008 	strb.w	r0, [r3, r8]
    gCompHSamp[i] = (uint8)getBits1(4);
 8003d48:	2004      	movs	r0, #4
 8003d4a:	f7fe ffd9 	bl	8002d00 <getBits1>
 8003d4e:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <pjpeg_decode_init+0x314>)
 8003d50:	f803 0008 	strb.w	r0, [r3, r8]
    gCompVSamp[i] = (uint8)getBits1(4);
 8003d54:	2004      	movs	r0, #4
 8003d56:	f7fe ffd3 	bl	8002d00 <getBits1>
 8003d5a:	f80b 0008 	strb.w	r0, [fp, r8]
    gCompQuant[i] = (uint8)getBits1(8);
 8003d5e:	2008      	movs	r0, #8
 8003d60:	f7fe ffce 	bl	8002d00 <getBits1>
 8003d64:	4a52      	ldr	r2, [pc, #328]	; (8003eb0 <pjpeg_decode_init+0x334>)
 8003d66:	b2c0      	uxtb	r0, r0
    if (gCompQuant[i] > 1)
 8003d68:	2801      	cmp	r0, #1
    gCompQuant[i] = (uint8)getBits1(8);
 8003d6a:	f802 0008 	strb.w	r0, [r2, r8]
    if (gCompQuant[i] > 1)
 8003d6e:	d9c2      	bls.n	8003cf6 <pjpeg_decode_init+0x17a>
      return PJPG_UNSUPPORTED_QUANT_TABLE;
 8003d70:	f04f 0a24 	mov.w	sl, #36	; 0x24
 8003d74:	e762      	b.n	8003c3c <pjpeg_decode_init+0xc0>
    return PJPG_UNSUPPORTED_MARKER;
 8003d76:	f04f 0a14 	mov.w	sl, #20
 8003d7a:	e75f      	b.n	8003c3c <pjpeg_decode_init+0xc0>
    return PJPG_NO_ARITHMITIC_SUPPORT;
 8003d7c:	f04f 0a11 	mov.w	sl, #17
 8003d80:	e75c      	b.n	8003c3c <pjpeg_decode_init+0xc0>
    return PJPG_UNSUPPORTED_MODE;
 8003d82:	f04f 0a25 	mov.w	sl, #37	; 0x25
 8003d86:	e759      	b.n	8003c3c <pjpeg_decode_init+0xc0>
  } else if (gCompsInFrame == 3) {
 8003d88:	2a03      	cmp	r2, #3
 8003d8a:	f040 80c9 	bne.w	8003f20 <pjpeg_decode_init+0x3a4>
    if (((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
 8003d8e:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <pjpeg_decode_init+0x314>)
 8003d90:	7853      	ldrb	r3, [r2, #1]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	f040 80ca 	bne.w	8003f2c <pjpeg_decode_init+0x3b0>
 8003d98:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <pjpeg_decode_init+0x318>)
 8003d9a:	7859      	ldrb	r1, [r3, #1]
 8003d9c:	2901      	cmp	r1, #1
 8003d9e:	f040 80c5 	bne.w	8003f2c <pjpeg_decode_init+0x3b0>
 8003da2:	7890      	ldrb	r0, [r2, #2]
 8003da4:	2801      	cmp	r0, #1
 8003da6:	f040 80c1 	bne.w	8003f2c <pjpeg_decode_init+0x3b0>
        ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)))
 8003daa:	7898      	ldrb	r0, [r3, #2]
 8003dac:	2801      	cmp	r0, #1
 8003dae:	f040 80bd 	bne.w	8003f2c <pjpeg_decode_init+0x3b0>
    if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
 8003db2:	7812      	ldrb	r2, [r2, #0]
 8003db4:	2a01      	cmp	r2, #1
 8003db6:	f040 8089 	bne.w	8003ecc <pjpeg_decode_init+0x350>
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	2a01      	cmp	r2, #1
 8003dbe:	d10b      	bne.n	8003dd8 <pjpeg_decode_init+0x25c>
      gScanType = PJPG_YH1V1;
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <pjpeg_decode_init+0x31c>)
      gMaxBlocksPerMCU = 3;
 8003dc2:	2103      	movs	r1, #3
      gScanType = PJPG_YH1V1;
 8003dc4:	701a      	strb	r2, [r3, #0]
      gMaxBlocksPerMCU = 3;
 8003dc6:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <pjpeg_decode_init+0x320>)
 8003dc8:	7019      	strb	r1, [r3, #0]
      gMCUOrg[0] = 0;
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <pjpeg_decode_init+0x324>)
      gMCUOrg[1] = 1;
 8003dce:	705a      	strb	r2, [r3, #1]
      gMCUOrg[2] = 2;
 8003dd0:	2202      	movs	r2, #2
      gMCUOrg[0] = 0;
 8003dd2:	7019      	strb	r1, [r3, #0]
      gMCUOrg[2] = 2;
 8003dd4:	709a      	strb	r2, [r3, #2]
 8003dd6:	e7a9      	b.n	8003d2c <pjpeg_decode_init+0x1b0>
    } else if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 2)) {
 8003dd8:	2a02      	cmp	r2, #2
 8003dda:	f040 80a7 	bne.w	8003f2c <pjpeg_decode_init+0x3b0>
      gScanType = PJPG_YH1V2;
 8003dde:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <pjpeg_decode_init+0x31c>)
 8003de0:	2103      	movs	r1, #3
 8003de2:	7019      	strb	r1, [r3, #0]
      gMaxBlocksPerMCU = 4;
 8003de4:	2104      	movs	r1, #4
 8003de6:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <pjpeg_decode_init+0x320>)
 8003de8:	7019      	strb	r1, [r3, #0]
      gMCUOrg[0] = 0;
 8003dea:	2100      	movs	r1, #0
 8003dec:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <pjpeg_decode_init+0x324>)
 8003dee:	7019      	strb	r1, [r3, #0]
      gMCUOrg[1] = 0;
 8003df0:	7059      	strb	r1, [r3, #1]
      gMCUOrg[2] = 1;
 8003df2:	2101      	movs	r1, #1
      gMCUOrg[3] = 2;
 8003df4:	70da      	strb	r2, [r3, #3]
      gMaxMCUXSize = 8;
 8003df6:	2208      	movs	r2, #8
      gMCUOrg[2] = 1;
 8003df8:	7099      	strb	r1, [r3, #2]
      gMaxMCUXSize = 8;
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <pjpeg_decode_init+0x328>)
 8003dfc:	701a      	strb	r2, [r3, #0]
      gMaxMCUYSize = 16;
 8003dfe:	2210      	movs	r2, #16
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <pjpeg_decode_init+0x32c>)
      gMaxMCUYSize = 8;
 8003e02:	701a      	strb	r2, [r3, #0]
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 8003e04:	4927      	ldr	r1, [pc, #156]	; (8003ea4 <pjpeg_decode_init+0x328>)
 8003e06:	8833      	ldrh	r3, [r6, #0]
 8003e08:	780a      	ldrb	r2, [r1, #0]
 8003e0a:	468a      	mov	sl, r1
 8003e0c:	1e50      	subs	r0, r2, #1
 8003e0e:	2a08      	cmp	r2, #8
 8003e10:	4403      	add	r3, r0
 8003e12:	bf14      	ite	ne
 8003e14:	2204      	movne	r2, #4
 8003e16:	2203      	moveq	r2, #3
 8003e18:	4113      	asrs	r3, r2
  gMaxMCUSPerRow =
 8003e1a:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <pjpeg_decode_init+0x338>)
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	8013      	strh	r3, [r2, #0]
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8003e20:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <pjpeg_decode_init+0x32c>)
 8003e22:	7811      	ldrb	r1, [r2, #0]
 8003e24:	883a      	ldrh	r2, [r7, #0]
 8003e26:	1e48      	subs	r0, r1, #1
 8003e28:	2908      	cmp	r1, #8
 8003e2a:	4402      	add	r2, r0
 8003e2c:	bf14      	ite	ne
 8003e2e:	2104      	movne	r1, #4
 8003e30:	2103      	moveq	r1, #3
  status = processMarkers(&c);
 8003e32:	f10d 001f 	add.w	r0, sp, #31
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8003e36:	410a      	asrs	r2, r1
  gMaxMCUSPerCol =
 8003e38:	491f      	ldr	r1, [pc, #124]	; (8003eb8 <pjpeg_decode_init+0x33c>)
 8003e3a:	b292      	uxth	r2, r2
  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 8003e3c:	fb13 f302 	smulbb	r3, r3, r2
  gMaxMCUSPerCol =
 8003e40:	800a      	strh	r2, [r1, #0]
  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 8003e42:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <pjpeg_decode_init+0x340>)
 8003e44:	8013      	strh	r3, [r2, #0]
  status = processMarkers(&c);
 8003e46:	f7fe ff5f 	bl	8002d08 <processMarkers>
  if (status)
 8003e4a:	4607      	mov	r7, r0
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d06f      	beq.n	8003f30 <pjpeg_decode_init+0x3b4>
    return gCallbackStatus ? gCallbackStatus : status;
 8003e50:	7828      	ldrb	r0, [r5, #0]
 8003e52:	2800      	cmp	r0, #0
 8003e54:	bf08      	it	eq
 8003e56:	4638      	moveq	r0, r7
 8003e58:	e6f4      	b.n	8003c44 <pjpeg_decode_init+0xc8>
 8003e5a:	bf00      	nop
 8003e5c:	2004d714 	.word	0x2004d714
 8003e60:	2004d710 	.word	0x2004d710
 8003e64:	2004cdef 	.word	0x2004cdef
 8003e68:	2004d70f 	.word	0x2004d70f
 8003e6c:	2004d706 	.word	0x2004d706
 8003e70:	2004d70d 	.word	0x2004d70d
 8003e74:	2004d2ed 	.word	0x2004d2ed
 8003e78:	2004d708 	.word	0x2004d708
 8003e7c:	2004d2ec 	.word	0x2004d2ec
 8003e80:	2004ce85 	.word	0x2004ce85
 8003e84:	2004d1e8 	.word	0x2004d1e8
 8003e88:	2004d1ea 	.word	0x2004d1ea
 8003e8c:	2004cdee 	.word	0x2004cdee
 8003e90:	2004ce76 	.word	0x2004ce76
 8003e94:	2004ce82 	.word	0x2004ce82
 8003e98:	2004d70c 	.word	0x2004d70c
 8003e9c:	2004d5fa 	.word	0x2004d5fa
 8003ea0:	2004d5f4 	.word	0x2004d5f4
 8003ea4:	2004d600 	.word	0x2004d600
 8003ea8:	2004d601 	.word	0x2004d601
 8003eac:	2004ce79 	.word	0x2004ce79
 8003eb0:	2004ce7f 	.word	0x2004ce7f
 8003eb4:	2004d5fe 	.word	0x2004d5fe
 8003eb8:	2004d5fc 	.word	0x2004d5fc
 8003ebc:	2004d604 	.word	0x2004d604
 8003ec0:	2004ce86 	.word	0x2004ce86
 8003ec4:	2004d70e 	.word	0x2004d70e
 8003ec8:	2004cdec 	.word	0x2004cdec
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
 8003ecc:	2a02      	cmp	r2, #2
 8003ece:	d12d      	bne.n	8003f2c <pjpeg_decode_init+0x3b0>
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	2a01      	cmp	r2, #1
 8003ed4:	d111      	bne.n	8003efa <pjpeg_decode_init+0x37e>
      gScanType = PJPG_YH2V1;
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4b8c      	ldr	r3, [pc, #560]	; (800410c <pjpeg_decode_init+0x590>)
      gMaxBlocksPerMCU = 4;
 8003eda:	2004      	movs	r0, #4
      gScanType = PJPG_YH2V1;
 8003edc:	7019      	strb	r1, [r3, #0]
      gMaxBlocksPerMCU = 4;
 8003ede:	4b8c      	ldr	r3, [pc, #560]	; (8004110 <pjpeg_decode_init+0x594>)
 8003ee0:	7018      	strb	r0, [r3, #0]
      gMCUOrg[0] = 0;
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	4b8b      	ldr	r3, [pc, #556]	; (8004114 <pjpeg_decode_init+0x598>)
 8003ee6:	7018      	strb	r0, [r3, #0]
      gMCUOrg[2] = 1;
 8003ee8:	709a      	strb	r2, [r3, #2]
      gMaxMCUXSize = 16;
 8003eea:	2210      	movs	r2, #16
      gMCUOrg[1] = 0;
 8003eec:	7058      	strb	r0, [r3, #1]
      gMCUOrg[3] = 2;
 8003eee:	70d9      	strb	r1, [r3, #3]
      gMaxMCUXSize = 16;
 8003ef0:	4b89      	ldr	r3, [pc, #548]	; (8004118 <pjpeg_decode_init+0x59c>)
 8003ef2:	701a      	strb	r2, [r3, #0]
      gMaxMCUYSize = 8;
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4b89      	ldr	r3, [pc, #548]	; (800411c <pjpeg_decode_init+0x5a0>)
 8003ef8:	e783      	b.n	8003e02 <pjpeg_decode_init+0x286>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 2)) {
 8003efa:	2a02      	cmp	r2, #2
 8003efc:	d116      	bne.n	8003f2c <pjpeg_decode_init+0x3b0>
      gScanType = PJPG_YH2V2;
 8003efe:	4b83      	ldr	r3, [pc, #524]	; (800410c <pjpeg_decode_init+0x590>)
 8003f00:	2104      	movs	r1, #4
 8003f02:	7019      	strb	r1, [r3, #0]
      gMaxBlocksPerMCU = 6;
 8003f04:	2106      	movs	r1, #6
 8003f06:	4b82      	ldr	r3, [pc, #520]	; (8004110 <pjpeg_decode_init+0x594>)
 8003f08:	7019      	strb	r1, [r3, #0]
      gMCUOrg[0] = 0;
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4b81      	ldr	r3, [pc, #516]	; (8004114 <pjpeg_decode_init+0x598>)
 8003f0e:	7019      	strb	r1, [r3, #0]
      gMCUOrg[1] = 0;
 8003f10:	7059      	strb	r1, [r3, #1]
      gMCUOrg[2] = 0;
 8003f12:	7099      	strb	r1, [r3, #2]
      gMCUOrg[3] = 0;
 8003f14:	70d9      	strb	r1, [r3, #3]
      gMCUOrg[4] = 1;
 8003f16:	2101      	movs	r1, #1
      gMCUOrg[5] = 2;
 8003f18:	715a      	strb	r2, [r3, #5]
      gMCUOrg[4] = 1;
 8003f1a:	7119      	strb	r1, [r3, #4]
      gMaxMCUXSize = 16;
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	e706      	b.n	8003d2e <pjpeg_decode_init+0x1b2>
    return PJPG_UNSUPPORTED_COLORSPACE;
 8003f20:	231a      	movs	r3, #26
    return gCallbackStatus ? gCallbackStatus : status;
 8003f22:	7828      	ldrb	r0, [r5, #0]
 8003f24:	2800      	cmp	r0, #0
 8003f26:	bf08      	it	eq
 8003f28:	4618      	moveq	r0, r3
 8003f2a:	e68b      	b.n	8003c44 <pjpeg_decode_init+0xc8>
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 8003f2c:	231b      	movs	r3, #27
 8003f2e:	e7f8      	b.n	8003f22 <pjpeg_decode_init+0x3a6>
  if (c == M_EOI) {
 8003f30:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003f34:	2bda      	cmp	r3, #218	; 0xda
 8003f36:	d001      	beq.n	8003f3c <pjpeg_decode_init+0x3c0>
    return PJPG_UNEXPECTED_MARKER;
 8003f38:	2712      	movs	r7, #18
 8003f3a:	e789      	b.n	8003e50 <pjpeg_decode_init+0x2d4>
  uint16 left = getBits1(16);
 8003f3c:	2010      	movs	r0, #16
 8003f3e:	f7fe fedf 	bl	8002d00 <getBits1>
 8003f42:	4606      	mov	r6, r0
  gCompsInScan = (uint8)getBits1(8);
 8003f44:	2008      	movs	r0, #8
 8003f46:	f7fe fedb 	bl	8002d00 <getBits1>
 8003f4a:	9b02      	ldr	r3, [sp, #8]
 8003f4c:	b2c0      	uxtb	r0, r0
  left -= 3;
 8003f4e:	3e03      	subs	r6, #3
  gCompsInScan = (uint8)getBits1(8);
 8003f50:	7018      	strb	r0, [r3, #0]
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 8003f52:	2303      	movs	r3, #3
  left -= 3;
 8003f54:	b2b6      	uxth	r6, r6
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 8003f56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003f5a:	429e      	cmp	r6, r3
 8003f5c:	d001      	beq.n	8003f62 <pjpeg_decode_init+0x3e6>
    return PJPG_BAD_SOS_LENGTH;
 8003f5e:	270e      	movs	r7, #14
 8003f60:	e776      	b.n	8003e50 <pjpeg_decode_init+0x2d4>
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 8003f62:	3801      	subs	r0, #1
 8003f64:	2802      	cmp	r0, #2
 8003f66:	d8fa      	bhi.n	8003f5e <pjpeg_decode_init+0x3e2>
 8003f68:	46b8      	mov	r8, r7
      if (cc == gCompIdent[ci])
 8003f6a:	f8df b200 	ldr.w	fp, [pc, #512]	; 800416c <pjpeg_decode_init+0x5f0>
  for (i = 0; i < gCompsInScan; i++) {
 8003f6e:	9b02      	ldr	r3, [sp, #8]
    uint8 cc = (uint8)getBits1(8);
 8003f70:	2008      	movs	r0, #8
  for (i = 0; i < gCompsInScan; i++) {
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	fa5f f388 	uxtb.w	r3, r8
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d81b      	bhi.n	8003fb4 <pjpeg_decode_init+0x438>
  spectral_start = (uint8)getBits1(8);
 8003f7c:	f7fe fec0 	bl	8002d00 <getBits1>
  spectral_end = (uint8)getBits1(8);
 8003f80:	2008      	movs	r0, #8
 8003f82:	f7fe febd 	bl	8002d00 <getBits1>
  left -= 3;
 8003f86:	3e03      	subs	r6, #3
  successive_high = (uint8)getBits1(4);
 8003f88:	2004      	movs	r0, #4
 8003f8a:	f7fe feb9 	bl	8002d00 <getBits1>
  successive_low = (uint8)getBits1(4);
 8003f8e:	2004      	movs	r0, #4
 8003f90:	f7fe feb6 	bl	8002d00 <getBits1>
    left--;
 8003f94:	b2b6      	uxth	r6, r6
  while (left) {
 8003f96:	2e00      	cmp	r6, #0
 8003f98:	d136      	bne.n	8004008 <pjpeg_decode_init+0x48c>
  for (i = 0; i < gCompsInScan; i++) {
 8003f9a:	9b02      	ldr	r3, [sp, #8]
 8003f9c:	2201      	movs	r2, #1
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8003f9e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004120 <pjpeg_decode_init+0x5a4>
  for (i = 0; i < gCompsInScan; i++) {
 8003fa2:	7819      	ldrb	r1, [r3, #0]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8003fa4:	9b05      	ldr	r3, [sp, #20]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8003fa6:	f8df e180 	ldr.w	lr, [pc, #384]	; 8004128 <pjpeg_decode_init+0x5ac>
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8003faa:	f893 8000 	ldrb.w	r8, [r3]
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8003fae:	f8df c174 	ldr.w	ip, [pc, #372]	; 8004124 <pjpeg_decode_init+0x5a8>
 8003fb2:	e03f      	b.n	8004034 <pjpeg_decode_init+0x4b8>
    uint8 cc = (uint8)getBits1(8);
 8003fb4:	f7fe fea4 	bl	8002d00 <getBits1>
    left -= 2;
 8003fb8:	3e02      	subs	r6, #2
    uint8 cc = (uint8)getBits1(8);
 8003fba:	fa5f f980 	uxtb.w	r9, r0
    uint8 c = (uint8)getBits1(8);
 8003fbe:	2008      	movs	r0, #8
 8003fc0:	f7fe fe9e 	bl	8002d00 <getBits1>
    for (ci = 0; ci < gCompsInFrame; ci++)
 8003fc4:	9b01      	ldr	r3, [sp, #4]
    uint8 c = (uint8)getBits1(8);
 8003fc6:	b2c0      	uxtb	r0, r0
    for (ci = 0; ci < gCompsInFrame; ci++)
 8003fc8:	f893 c000 	ldrb.w	ip, [r3]
    left -= 2;
 8003fcc:	b2b6      	uxth	r6, r6
    for (ci = 0; ci < gCompsInFrame; ci++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	b2d9      	uxtb	r1, r3
 8003fd2:	4561      	cmp	r1, ip
 8003fd4:	d301      	bcc.n	8003fda <pjpeg_decode_init+0x45e>
      return PJPG_BAD_SOS_COMP_ID;
 8003fd6:	270f      	movs	r7, #15
 8003fd8:	e73a      	b.n	8003e50 <pjpeg_decode_init+0x2d4>
      if (cc == gCompIdent[ci])
 8003fda:	9303      	str	r3, [sp, #12]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	eb0b 0e03 	add.w	lr, fp, r3
 8003fe2:	f81e ec01 	ldrb.w	lr, [lr, #-1]
 8003fe6:	45ce      	cmp	lr, r9
 8003fe8:	d1f2      	bne.n	8003fd0 <pjpeg_decode_init+0x454>
    gCompList[i] = ci;
 8003fea:	fa5f f388 	uxtb.w	r3, r8
 8003fee:	4a4c      	ldr	r2, [pc, #304]	; (8004120 <pjpeg_decode_init+0x5a4>)
 8003ff0:	f108 0801 	add.w	r8, r8, #1
 8003ff4:	54d1      	strb	r1, [r2, r3]
    gCompDCTab[ci] = (c >> 4) & 15;
 8003ff6:	0901      	lsrs	r1, r0, #4
 8003ff8:	4b4a      	ldr	r3, [pc, #296]	; (8004124 <pjpeg_decode_init+0x5a8>)
    gCompACTab[ci] = (c & 15);
 8003ffa:	f000 000f 	and.w	r0, r0, #15
    gCompDCTab[ci] = (c >> 4) & 15;
 8003ffe:	9a03      	ldr	r2, [sp, #12]
 8004000:	5499      	strb	r1, [r3, r2]
    gCompACTab[ci] = (c & 15);
 8004002:	4b49      	ldr	r3, [pc, #292]	; (8004128 <pjpeg_decode_init+0x5ac>)
 8004004:	5498      	strb	r0, [r3, r2]
 8004006:	e7b2      	b.n	8003f6e <pjpeg_decode_init+0x3f2>
    getBits1(8);
 8004008:	2008      	movs	r0, #8
    left--;
 800400a:	3e01      	subs	r6, #1
    getBits1(8);
 800400c:	f7fe fe78 	bl	8002d00 <getBits1>
 8004010:	e7c0      	b.n	8003f94 <pjpeg_decode_init+0x418>
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8004012:	f816 0009 	ldrb.w	r0, [r6, r9]
 8004016:	3601      	adds	r6, #1
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8004018:	f81e 3000 	ldrb.w	r3, [lr, r0]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 800401c:	f81c 0000 	ldrb.w	r0, [ip, r0]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8004020:	3302      	adds	r3, #2
 8004022:	fa02 f000 	lsl.w	r0, r2, r0
        ((gValidHuffTables & (1 << compACTab)) == 0))
 8004026:	b2db      	uxtb	r3, r3
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	4303      	orrs	r3, r0
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 800402e:	ea33 0308 	bics.w	r3, r3, r8
 8004032:	d15a      	bne.n	80040ea <pjpeg_decode_init+0x56e>
  for (i = 0; i < gCompsInScan; i++) {
 8004034:	b2f3      	uxtb	r3, r6
 8004036:	4299      	cmp	r1, r3
 8004038:	d8eb      	bhi.n	8004012 <pjpeg_decode_init+0x496>
    if ((gValidQuantTables & compQuantMask) == 0)
 800403a:	4b3c      	ldr	r3, [pc, #240]	; (800412c <pjpeg_decode_init+0x5b0>)
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 800403c:	4e3c      	ldr	r6, [pc, #240]	; (8004130 <pjpeg_decode_init+0x5b4>)
    if ((gValidQuantTables & compQuantMask) == 0)
 800403e:	7818      	ldrb	r0, [r3, #0]
 8004040:	2300      	movs	r3, #0
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 8004042:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8004120 <pjpeg_decode_init+0x5a4>
  for (i = 0; i < gCompsInScan; i++) {
 8004046:	b2da      	uxtb	r2, r3
 8004048:	4291      	cmp	r1, r2
 800404a:	d842      	bhi.n	80040d2 <pjpeg_decode_init+0x556>
  gLastDC[0] = 0;
 800404c:	4a39      	ldr	r2, [pc, #228]	; (8004134 <pjpeg_decode_init+0x5b8>)
 800404e:	2300      	movs	r3, #0
 8004050:	8013      	strh	r3, [r2, #0]
  gLastDC[1] = 0;
 8004052:	8053      	strh	r3, [r2, #2]
  gLastDC[2] = 0;
 8004054:	8093      	strh	r3, [r2, #4]
  if (gRestartInterval) {
 8004056:	9a04      	ldr	r2, [sp, #16]
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	b11a      	cbz	r2, 8004064 <pjpeg_decode_init+0x4e8>
    gRestartsLeft = gRestartInterval;
 800405c:	4936      	ldr	r1, [pc, #216]	; (8004138 <pjpeg_decode_init+0x5bc>)
 800405e:	800a      	strh	r2, [r1, #0]
    gNextRestartNum = 0;
 8004060:	4a36      	ldr	r2, [pc, #216]	; (800413c <pjpeg_decode_init+0x5c0>)
 8004062:	8013      	strh	r3, [r2, #0]
  if (gBitsLeft > 0)
 8004064:	4936      	ldr	r1, [pc, #216]	; (8004140 <pjpeg_decode_init+0x5c4>)
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <pjpeg_decode_init+0x5c8>)
 8004068:	780a      	ldrb	r2, [r1, #0]
 800406a:	881e      	ldrh	r6, [r3, #0]
 800406c:	b112      	cbz	r2, 8004074 <pjpeg_decode_init+0x4f8>
    stuffChar((uint8)gBitBuf);
 800406e:	b2f0      	uxtb	r0, r6
 8004070:	f7fe fad2 	bl	8002618 <stuffChar>
  stuffChar((uint8)(gBitBuf >> 8));
 8004074:	0a30      	lsrs	r0, r6, #8
  gBitsLeft = 8;
 8004076:	2608      	movs	r6, #8
  stuffChar((uint8)(gBitBuf >> 8));
 8004078:	f7fe face 	bl	8002618 <stuffChar>
  getBits2(8);
 800407c:	4630      	mov	r0, r6
  gBitsLeft = 8;
 800407e:	700e      	strb	r6, [r1, #0]
  getBits2(8);
 8004080:	f7fe ff8a 	bl	8002f98 <getBits2>
  getBits2(8);
 8004084:	4630      	mov	r0, r6
 8004086:	f7fe ff87 	bl	8002f98 <getBits2>
  if ((status) || (gCallbackStatus))
 800408a:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <pjpeg_decode_init+0x5cc>)
 800408c:	7818      	ldrb	r0, [r3, #0]
 800408e:	2800      	cmp	r0, #0
 8004090:	f47f aede 	bne.w	8003e50 <pjpeg_decode_init+0x2d4>
  pInfo->m_width = gImageXSize;
 8004094:	4b2d      	ldr	r3, [pc, #180]	; (800414c <pjpeg_decode_init+0x5d0>)
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	6023      	str	r3, [r4, #0]
  pInfo->m_height = gImageYSize;
 800409a:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <pjpeg_decode_init+0x5d4>)
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	6063      	str	r3, [r4, #4]
  pInfo->m_comps = gCompsInFrame;
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <pjpeg_decode_init+0x5d8>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	60a3      	str	r3, [r4, #8]
  pInfo->m_scanType = gScanType;
 80040a6:	4b19      	ldr	r3, [pc, #100]	; (800410c <pjpeg_decode_init+0x590>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	7523      	strb	r3, [r4, #20]
  pInfo->m_MCUSPerRow = gMaxMCUSPerRow;
 80040ac:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <pjpeg_decode_init+0x5dc>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	60e3      	str	r3, [r4, #12]
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <pjpeg_decode_init+0x5e0>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	6123      	str	r3, [r4, #16]
  pInfo->m_MCUWidth = gMaxMCUXSize;
 80040b8:	f89a 3000 	ldrb.w	r3, [sl]
 80040bc:	61a3      	str	r3, [r4, #24]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <pjpeg_decode_init+0x5a0>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	61e3      	str	r3, [r4, #28]
  pInfo->m_pMCUBufR = gMCUBufR;
 80040c4:	4b26      	ldr	r3, [pc, #152]	; (8004160 <pjpeg_decode_init+0x5e4>)
 80040c6:	6223      	str	r3, [r4, #32]
  pInfo->m_pMCUBufG = gMCUBufG;
 80040c8:	4b26      	ldr	r3, [pc, #152]	; (8004164 <pjpeg_decode_init+0x5e8>)
 80040ca:	6263      	str	r3, [r4, #36]	; 0x24
  pInfo->m_pMCUBufB = gMCUBufB;
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <pjpeg_decode_init+0x5ec>)
 80040ce:	62a3      	str	r3, [r4, #40]	; 0x28
  return 0;
 80040d0:	e5b8      	b.n	8003c44 <pjpeg_decode_init+0xc8>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 80040d2:	f813 200c 	ldrb.w	r2, [r3, ip]
 80040d6:	3301      	adds	r3, #1
 80040d8:	5cb2      	ldrb	r2, [r6, r2]
 80040da:	2a00      	cmp	r2, #0
 80040dc:	bf0c      	ite	eq
 80040de:	2201      	moveq	r2, #1
 80040e0:	2202      	movne	r2, #2
    if ((gValidQuantTables & compQuantMask) == 0)
 80040e2:	4210      	tst	r0, r2
 80040e4:	d1af      	bne.n	8004046 <pjpeg_decode_init+0x4ca>
      return PJPG_UNDEFINED_QUANT_TABLE;
 80040e6:	2717      	movs	r7, #23
 80040e8:	e6b2      	b.n	8003e50 <pjpeg_decode_init+0x2d4>
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 80040ea:	2718      	movs	r7, #24
 80040ec:	e6b0      	b.n	8003e50 <pjpeg_decode_init+0x2d4>
    return PJPG_BAD_PRECISION;
 80040ee:	f04f 0a07 	mov.w	sl, #7
 80040f2:	e5a3      	b.n	8003c3c <pjpeg_decode_init+0xc0>
    return PJPG_BAD_HEIGHT;
 80040f4:	46c2      	mov	sl, r8
 80040f6:	e5a1      	b.n	8003c3c <pjpeg_decode_init+0xc0>
    return PJPG_BAD_WIDTH;
 80040f8:	f04f 0a09 	mov.w	sl, #9
 80040fc:	e59e      	b.n	8003c3c <pjpeg_decode_init+0xc0>
    return PJPG_TOO_MANY_COMPONENTS;
 80040fe:	f04f 0a0a 	mov.w	sl, #10
 8004102:	e59b      	b.n	8003c3c <pjpeg_decode_init+0xc0>
    return PJPG_BAD_SOF_LENGTH;
 8004104:	f04f 0a0b 	mov.w	sl, #11
 8004108:	e598      	b.n	8003c3c <pjpeg_decode_init+0xc0>
 800410a:	bf00      	nop
 800410c:	2004d70c 	.word	0x2004d70c
 8004110:	2004d5fa 	.word	0x2004d5fa
 8004114:	2004d5f4 	.word	0x2004d5f4
 8004118:	2004d600 	.word	0x2004d600
 800411c:	2004d601 	.word	0x2004d601
 8004120:	2004ce7c 	.word	0x2004ce7c
 8004124:	2004ce73 	.word	0x2004ce73
 8004128:	2004ce70 	.word	0x2004ce70
 800412c:	2004d70f 	.word	0x2004d70f
 8004130:	2004ce7f 	.word	0x2004ce7f
 8004134:	2004d2ee 	.word	0x2004d2ee
 8004138:	2004d70a 	.word	0x2004d70a
 800413c:	2004d602 	.word	0x2004d602
 8004140:	2004cdee 	.word	0x2004cdee
 8004144:	2004cdec 	.word	0x2004cdec
 8004148:	2004cdef 	.word	0x2004cdef
 800414c:	2004d1e8 	.word	0x2004d1e8
 8004150:	2004d1ea 	.word	0x2004d1ea
 8004154:	2004ce85 	.word	0x2004ce85
 8004158:	2004d5fe 	.word	0x2004d5fe
 800415c:	2004d5fc 	.word	0x2004d5fc
 8004160:	2004d4f4 	.word	0x2004d4f4
 8004164:	2004d3f4 	.word	0x2004d3f4
 8004168:	2004d2f4 	.word	0x2004d2f4
 800416c:	2004ce79 	.word	0x2004ce79

08004170 <HAL_I2C_MspInit>:
#include "camera_spi.h"
#include "main.h"
#include "stm32746g_discovery.h"
#include "stm32746g_discovery_lcd.h"
#include "stm32f7xx_hal.h"
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8004170:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 8004172:	f44f 4380 	mov.w	r3, #16384	; 0x4000
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8004176:	b0ab      	sub	sp, #172	; 0xac
  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004178:	4c1d      	ldr	r4, [pc, #116]	; (80041f0 <HAL_I2C_MspInit+0x80>)
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 800417a:	2504      	movs	r5, #4
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 800417c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 800417e:	2300      	movs	r3, #0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8004180:	a809      	add	r0, sp, #36	; 0x24
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 8004182:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8004184:	f002 f92e 	bl	80063e4 <HAL_RCCEx_PeriphCLKConfig>
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8004188:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_I2C_MspInit+0x84>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800418a:	f44f 7180 	mov.w	r1, #256	; 0x100
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800418e:	2001      	movs	r0, #1
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8004190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004192:	f042 0202 	orr.w	r2, r2, #2
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
 8004198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419a:	f002 0202 	and.w	r2, r2, #2
 800419e:	9201      	str	r2, [sp, #4]
 80041a0:	9a01      	ldr	r2, [sp, #4]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 80041a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a4:	f042 0202 	orr.w	r2, r2, #2
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
 80041aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ac:	f002 0202 	and.w	r2, r2, #2
 80041b0:	9202      	str	r2, [sp, #8]
 80041b2:	9a02      	ldr	r2, [sp, #8]
  I2Cx_CLK_ENABLE();
 80041b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041b6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 80041be:	9508      	str	r5, [sp, #32]
  I2Cx_CLK_ENABLE();
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c4:	9303      	str	r3, [sp, #12]
 80041c6:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041c8:	2312      	movs	r3, #18
 80041ca:	e9cd 1304 	strd	r1, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80041ce:	2302      	movs	r3, #2
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80041d0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80041d2:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80041d6:	4620      	mov	r0, r4
 80041d8:	f001 f948 	bl	800546c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 80041dc:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80041e0:	a904      	add	r1, sp, #16
 80041e2:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 80041e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 80041e6:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80041e8:	f001 f940 	bl	800546c <HAL_GPIO_Init>
}
 80041ec:	b02b      	add	sp, #172	; 0xac
 80041ee:	bd30      	pop	{r4, r5, pc}
 80041f0:	40020400 	.word	0x40020400
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_SPI_MspInit>:
  HAL_GPIO_DeInit(I2Cx_SDA_GPIO_PORT, I2Cx_SDA_PIN);
}
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
  GPIO_InitTypeDef GPIO_InitStruct;

  if (hspi->Instance == SPIx) {
 80041f8:	6802      	ldr	r2, [r0, #0]
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_SPI_MspInit+0x94>)
 80041fc:	429a      	cmp	r2, r3
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 80041fe:	b510      	push	{r4, lr}
 8004200:	b08a      	sub	sp, #40	; 0x28
  if (hspi->Instance == SPIx) {
 8004202:	d141      	bne.n	8004288 <HAL_SPI_MspInit+0x90>

    SPIx_SCK_GPIO_CLK_ENABLE();
 8004204:	f503 3300 	add.w	r3, r3, #131072	; 0x20000

    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8004208:	2405      	movs	r4, #5
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 800420a:	a905      	add	r1, sp, #20
 800420c:	4820      	ldr	r0, [pc, #128]	; (8004290 <HAL_SPI_MspInit+0x98>)
    SPIx_SCK_GPIO_CLK_ENABLE();
 800420e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
 8004216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004218:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800421c:	9201      	str	r2, [sp, #4]
 800421e:	9a01      	ldr	r2, [sp, #4]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	f042 0202 	orr.w	r2, r2, #2
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
 8004228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422a:	f002 0202 	and.w	r2, r2, #2
 800422e:	9202      	str	r2, [sp, #8]
 8004230:	9a02      	ldr	r2, [sp, #8]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8004232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004234:	f042 0202 	orr.w	r2, r2, #2
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
 800423a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423c:	f002 0202 	and.w	r2, r2, #2
 8004240:	9203      	str	r2, [sp, #12]
 8004242:	9a03      	ldr	r2, [sp, #12]
    SPIx_CLK_ENABLE();
 8004244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424a:	641a      	str	r2, [r3, #64]	; 0x40
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8004256:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004258:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800425c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 800425e:	2300      	movs	r3, #0
 8004260:	e9cd 3408 	strd	r3, r4, [sp, #32]
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004264:	f001 f902 	bl	800546c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8004268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800426c:	a905      	add	r1, sp, #20
 800426e:	4809      	ldr	r0, [pc, #36]	; (8004294 <HAL_SPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8004270:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8004272:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004274:	f001 f8fa 	bl	800546c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8004278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800427c:	a905      	add	r1, sp, #20
 800427e:	4805      	ldr	r0, [pc, #20]	; (8004294 <HAL_SPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8004280:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8004282:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004284:	f001 f8f2 	bl	800546c <HAL_GPIO_Init>
  }
}
 8004288:	b00a      	add	sp, #40	; 0x28
 800428a:	bd10      	pop	{r4, pc}
 800428c:	40003800 	.word	0x40003800
 8004290:	40022000 	.word	0x40022000
 8004294:	40020400 	.word	0x40020400

08004298 <HAL_UART_MspInit>:

    HAL_GPIO_DeInit(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_PIN);
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8004298:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429a:	2214      	movs	r2, #20
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800429c:	b08b      	sub	sp, #44	; 0x2c
 800429e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	2100      	movs	r1, #0
 80042a2:	eb0d 0002 	add.w	r0, sp, r2
 80042a6:	f012 fddf 	bl	8016e68 <memset>
  if (huart->Instance == USART1) {
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	4a2b      	ldr	r2, [pc, #172]	; (800435c <HAL_UART_MspInit+0xc4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d133      	bne.n	800431a <HAL_UART_MspInit+0x82>

    __HAL_RCC_USART1_CLK_ENABLE();
 80042b2:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_UART_MspInit+0xc8>)

    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();

    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042b6:	2407      	movs	r4, #7
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80042b8:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 80042ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80042bc:	4829      	ldr	r0, [pc, #164]	; (8004364 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80042be:	f042 0210 	orr.w	r2, r2, #16
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
 80042c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c6:	f002 0210 	and.w	r2, r2, #16
 80042ca:	9200      	str	r2, [sp, #0]
 80042cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d0:	f042 0202 	orr.w	r2, r2, #2
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
 80042d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d8:	f002 0202 	and.w	r2, r2, #2
 80042dc:	9201      	str	r2, [sp, #4]
 80042de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042ea:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	9302      	str	r3, [sp, #8]
 80042f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80042fa:	f001 f8b7 	bl	800546c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80042fe:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004302:	a905      	add	r1, sp, #20
 8004304:	4818      	ldr	r0, [pc, #96]	; (8004368 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004306:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430e:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004312:	f001 f8ab 	bl	800546c <HAL_GPIO_Init>
  }
}
 8004316:	b00b      	add	sp, #44	; 0x2c
 8004318:	bd30      	pop	{r4, r5, pc}
  } else if (huart->Instance == USART6) {
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_UART_MspInit+0xd4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d1fa      	bne.n	8004316 <HAL_UART_MspInit+0x7e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004322:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004324:	4812      	ldr	r0, [pc, #72]	; (8004370 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8004326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004328:	f042 0220 	orr.w	r2, r2, #32
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
 800432e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004330:	f002 0220 	and.w	r2, r2, #32
 8004334:	9203      	str	r2, [sp, #12]
 8004336:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433a:	f042 0204 	orr.w	r2, r2, #4
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004340:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	9304      	str	r3, [sp, #16]
 800434a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434c:	2302      	movs	r3, #2
 800434e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004352:	2308      	movs	r3, #8
 8004354:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004358:	a905      	add	r1, sp, #20
 800435a:	e7da      	b.n	8004312 <HAL_UART_MspInit+0x7a>
 800435c:	40011000 	.word	0x40011000
 8004360:	40023800 	.word	0x40023800
 8004364:	40020400 	.word	0x40020400
 8004368:	40020000 	.word	0x40020000
 800436c:	40011400 	.word	0x40011400
 8004370:	40020800 	.word	0x40020800

08004374 <HAL_LTDC_MspInit>:
  }
}
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
  GPIO_InitTypeDef GPIO_Init_Structure;

  __HAL_RCC_LTDC_CLK_ENABLE();
 8004374:	4b44      	ldr	r3, [pc, #272]	; (8004488 <HAL_LTDC_MspInit+0x114>)
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8004376:	4845      	ldr	r0, [pc, #276]	; (800448c <HAL_LTDC_MspInit+0x118>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 800437e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8004384:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8004388:	2402      	movs	r4, #2
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800438a:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800438c:	a907      	add	r1, sp, #28
  __HAL_RCC_LTDC_CLK_ENABLE();
 800438e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8004392:	f44f 5780 	mov.w	r7, #4096	; 0x1000

  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
                            GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8004396:	4e3e      	ldr	r6, [pc, #248]	; (8004490 <HAL_LTDC_MspInit+0x11c>)

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);

  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8004398:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_LTDC_CLK_ENABLE();
 800439c:	9201      	str	r2, [sp, #4]
 800439e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a2:	f042 0210 	orr.w	r2, r2, #16
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
 80043a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043aa:	f002 0210 	and.w	r2, r2, #16
 80043ae:	9202      	str	r2, [sp, #8]
 80043b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043bc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80043c0:	9203      	str	r2, [sp, #12]
 80043c2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80043c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
 80043cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ce:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80043d2:	9204      	str	r2, [sp, #16]
 80043d4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80043d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
 80043de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80043e4:	9205      	str	r2, [sp, #20]
 80043e6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80043e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f6:	9306      	str	r3, [sp, #24]
 80043f8:	9b06      	ldr	r3, [sp, #24]
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 80043fa:	2310      	movs	r3, #16
 80043fc:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8004402:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8004404:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8004408:	f001 f830 	bl	800546c <HAL_GPIO_Init>
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 800440c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 800440e:	a907      	add	r1, sp, #28
 8004410:	4820      	ldr	r0, [pc, #128]	; (8004494 <HAL_LTDC_MspInit+0x120>)
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8004412:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8004414:	e9cd 7407 	strd	r7, r4, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8004418:	f001 f828 	bl	800546c <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 800441c:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8004420:	a907      	add	r1, sp, #28
 8004422:	4630      	mov	r0, r6
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8004424:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8004426:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 800442a:	f001 f81f 	bl	800546c <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin =
 800442e:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8004432:	a907      	add	r1, sp, #28
 8004434:	4818      	ldr	r0, [pc, #96]	; (8004498 <HAL_LTDC_MspInit+0x124>)
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8004436:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8004438:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 800443c:	f001 f816 	bl	800546c <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8004440:	23f7      	movs	r3, #247	; 0xf7
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8004442:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8004444:	a907      	add	r1, sp, #28
 8004446:	4d15      	ldr	r5, [pc, #84]	; (800449c <HAL_LTDC_MspInit+0x128>)
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8004448:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 800444c:	4628      	mov	r0, r5
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 800444e:	2401      	movs	r4, #1
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8004450:	f001 f80c 	bl	800546c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8004454:	a907      	add	r1, sp, #28
 8004456:	4630      	mov	r0, r6
  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8004458:	9707      	str	r7, [sp, #28]
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 800445a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 800445c:	f001 f806 	bl	800546c <HAL_GPIO_Init>
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8004460:	a907      	add	r1, sp, #28
 8004462:	4628      	mov	r0, r5
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8004464:	e9cd 8407 	strd	r8, r4, [sp, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8004468:	f001 f800 	bl	800546c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800446c:	4622      	mov	r2, r4
 800446e:	4639      	mov	r1, r7
 8004470:	4630      	mov	r0, r6
 8004472:	f001 f8e3 	bl	800563c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004476:	4622      	mov	r2, r4
 8004478:	4641      	mov	r1, r8
 800447a:	4628      	mov	r0, r5
 800447c:	f001 f8de 	bl	800563c <HAL_GPIO_WritePin>
}
 8004480:	b00c      	add	sp, #48	; 0x30
 8004482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	40021000 	.word	0x40021000
 8004490:	40022000 	.word	0x40022000
 8004494:	40021800 	.word	0x40021800
 8004498:	40022400 	.word	0x40022400
 800449c:	40022800 	.word	0x40022800

080044a0 <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */

#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 80044a0:	4770      	bx	lr

080044a2 <HardFault_Handler>:

void HardFault_Handler(void) {
 80044a2:	e7fe      	b.n	80044a2 <HardFault_Handler>

080044a4 <MemManage_Handler>:

  while (1) {
  }
}

void MemManage_Handler(void) {
 80044a4:	e7fe      	b.n	80044a4 <MemManage_Handler>

080044a6 <BusFault_Handler>:

  while (1) {
  }
}

void BusFault_Handler(void) {
 80044a6:	e7fe      	b.n	80044a6 <BusFault_Handler>

080044a8 <UsageFault_Handler>:

  while (1) {
  }
}

void UsageFault_Handler(void) {
 80044a8:	e7fe      	b.n	80044a8 <UsageFault_Handler>

080044aa <SVC_Handler>:
 80044aa:	4770      	bx	lr

080044ac <DebugMon_Handler>:
 80044ac:	4770      	bx	lr

080044ae <PendSV_Handler>:
 80044ae:	4770      	bx	lr

080044b0 <SysTick_Handler>:

void DebugMon_Handler(void) {}

void PendSV_Handler(void) {}

void SysTick_Handler(void) { HAL_IncTick(); }
 80044b0:	f000 bd3e 	b.w	8004f30 <HAL_IncTick>

080044b4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80044b4:	2001      	movs	r0, #1
 80044b6:	4770      	bx	lr

080044b8 <_kill>:

int _kill(int pid, int sig)
{
 80044b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80044ba:	f012 fc6f 	bl	8016d9c <__errno>
 80044be:	2316      	movs	r3, #22
 80044c0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80044c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044c6:	bd08      	pop	{r3, pc}

080044c8 <_exit>:

void _exit (int status)
{
 80044c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80044ca:	f012 fc67 	bl	8016d9c <__errno>
 80044ce:	2316      	movs	r3, #22
 80044d0:	6003      	str	r3, [r0, #0]
 80044d2:	e7fe      	b.n	80044d2 <_exit+0xa>

080044d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	460e      	mov	r6, r1
 80044d8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044da:	460c      	mov	r4, r1
 80044dc:	1ba3      	subs	r3, r4, r6
 80044de:	429d      	cmp	r5, r3
 80044e0:	dc01      	bgt.n	80044e6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80044e2:	4628      	mov	r0, r5
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80044e6:	f3af 8000 	nop.w
 80044ea:	f804 0b01 	strb.w	r0, [r4], #1
 80044ee:	e7f5      	b.n	80044dc <_read+0x8>

080044f0 <_close>:
}

int _close(int file)
{
	return -1;
}
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044f4:	4770      	bx	lr

080044f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80044f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80044fa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80044fc:	604b      	str	r3, [r1, #4]
}
 80044fe:	4770      	bx	lr

08004500 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004500:	2001      	movs	r0, #1
 8004502:	4770      	bx	lr

08004504 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004504:	2000      	movs	r0, #0
 8004506:	4770      	bx	lr

08004508 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004508:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <_sbrk+0x2c>)
{
 800450c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	b909      	cbnz	r1, 8004516 <_sbrk+0xe>
		heap_end = &end;
 8004512:	4909      	ldr	r1, [pc, #36]	; (8004538 <_sbrk+0x30>)
 8004514:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004516:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004518:	4669      	mov	r1, sp
 800451a:	4402      	add	r2, r0
 800451c:	428a      	cmp	r2, r1
 800451e:	d906      	bls.n	800452e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8004520:	f012 fc3c 	bl	8016d9c <__errno>
 8004524:	230c      	movs	r3, #12
 8004526:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800452c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800452e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8004530:	e7fc      	b.n	800452c <_sbrk+0x24>
 8004532:	bf00      	nop
 8004534:	2004d718 	.word	0x2004d718
 8004538:	2004da10 	.word	0x2004da10

0800453c <SystemInit>:
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 800453c:	490f      	ldr	r1, [pc, #60]	; (800457c <SystemInit+0x40>)
#endif

  RCC->CR |= (uint32_t)0x00000001;

  RCC->CFGR = 0x00000000;
 800453e:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8004540:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <SystemInit+0x44>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004556:	6098      	str	r0, [r3, #8]

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800455e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004562:	601a      	str	r2, [r3, #0]

  RCC->PLLCFGR = 0x24003010;
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <SystemInit+0x48>)
 8004566:	605a      	str	r2, [r3, #4]

  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800456e:	601a      	str	r2, [r3, #0]

  RCC->CIR = 0x00000000;
 8004570:	60d8      	str	r0, [r3, #12]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8004572:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004576:	608b      	str	r3, [r1, #8]
#endif
}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000ed00 	.word	0xe000ed00
 8004580:	40023800 	.word	0x40023800
 8004584:	24003010 	.word	0x24003010

08004588 <_write>:
#include "stm32f7xx_hal.h"

extern UART_HandleTypeDef DebugUartHandler;

extern "C" int _write(int file, char *ptr, int len) {
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	460f      	mov	r7, r1
 800458c:	4615      	mov	r5, r2
    for (int i = 0; i < len; i++) {
 800458e:	2400      	movs	r4, #0
        HAL_UART_Transmit(&DebugUartHandler, (uint8_t *)&ptr[i], 1, HAL_MAX_DELAY);
 8004590:	4e06      	ldr	r6, [pc, #24]	; (80045ac <_write+0x24>)
    for (int i = 0; i < len; i++) {
 8004592:	42ac      	cmp	r4, r5
 8004594:	da08      	bge.n	80045a8 <_write+0x20>
        HAL_UART_Transmit(&DebugUartHandler, (uint8_t *)&ptr[i], 1, HAL_MAX_DELAY);
 8004596:	1939      	adds	r1, r7, r4
 8004598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800459c:	2201      	movs	r2, #1
 800459e:	4630      	mov	r0, r6
 80045a0:	f002 fe8d 	bl	80072be <HAL_UART_Transmit>
    for (int i = 0; i < len; i++) {
 80045a4:	3401      	adds	r4, #1
 80045a6:	e7f4      	b.n	8004592 <_write+0xa>
    }
    return len;
}
 80045a8:	4628      	mov	r0, r5
 80045aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ac:	20003598 	.word	0x20003598

080045b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045b6:	e003      	b.n	80045c0 <LoopCopyDataInit>

080045b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045be:	3104      	adds	r1, #4

080045c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045c0:	480b      	ldr	r0, [pc, #44]	; (80045f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045c8:	d3f6      	bcc.n	80045b8 <CopyDataInit>
  ldr  r2, =_sbss
 80045ca:	4a0b      	ldr	r2, [pc, #44]	; (80045f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045cc:	e002      	b.n	80045d4 <LoopFillZerobss>

080045ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045d0:	f842 3b04 	str.w	r3, [r2], #4

080045d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045d8:	d3f9      	bcc.n	80045ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045da:	f7ff ffaf 	bl	800453c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045de:	f012 fbf5 	bl	8016dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045e2:	f7fd fbd9 	bl	8001d98 <main>
  bx  lr    
 80045e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80045ec:	080fd380 	.word	0x080fd380
  ldr  r0, =_sdata
 80045f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045f4:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80045f8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80045fc:	2004da10 	.word	0x2004da10

08004600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004600:	e7fe      	b.n	8004600 <ADC_IRQHandler>
	...

08004604 <BSP_LED_On>:
  */
void BSP_LED_On(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8004604:	b920      	cbnz	r0, 8004610 <BSP_LED_On+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8004606:	2201      	movs	r2, #1
 8004608:	2102      	movs	r1, #2
 800460a:	4802      	ldr	r0, [pc, #8]	; (8004614 <BSP_LED_On+0x10>)
 800460c:	f001 b816 	b.w	800563c <HAL_GPIO_WritePin>
  }
}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40022000 	.word	0x40022000

08004618 <BSP_PB_Init>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004618:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <BSP_PB_Init+0x90>)
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800461a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 8004620:	b510      	push	{r4, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
{
 8004624:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	4604      	mov	r4, r0
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	b990      	cbnz	r0, 8004656 <BSP_PB_Init+0x3e>
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004634:	b9b9      	cbnz	r1, 8004666 <BSP_PB_Init+0x4e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <BSP_PB_Init+0x94>)
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004638:	9105      	str	r1, [sp, #20]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800463a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800463e:	e9cd 3103 	strd	r3, r1, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004642:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004644:	a903      	add	r1, sp, #12
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004646:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004648:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <BSP_PB_Init+0x98>)
 800464a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800464e:	f000 ff0d 	bl	800546c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8004652:	b008      	add	sp, #32
 8004654:	bd10      	pop	{r4, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004656:	2801      	cmp	r0, #1
 8004658:	d102      	bne.n	8004660 <BSP_PB_Init+0x48>
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	9b01      	ldr	r3, [sp, #4]
 800465e:	e7e9      	b.n	8004634 <BSP_PB_Init+0x1c>
 8004660:	9302      	str	r3, [sp, #8]
 8004662:	9b02      	ldr	r3, [sp, #8]
 8004664:	e7e6      	b.n	8004634 <BSP_PB_Init+0x1c>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004666:	2901      	cmp	r1, #1
 8004668:	d1f3      	bne.n	8004652 <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <BSP_PB_Init+0x94>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800466c:	2200      	movs	r2, #0
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800466e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004672:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004674:	2302      	movs	r3, #2
 8004676:	e9cd 2305 	strd	r2, r3, [sp, #20]
    if(Button != BUTTON_WAKEUP)
 800467a:	b19c      	cbz	r4, 80046a4 <BSP_PB_Init+0x8c>
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <BSP_PB_Init+0x9c>)
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800467e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004680:	a903      	add	r1, sp, #12
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <BSP_PB_Init+0x98>)
 8004684:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004688:	f000 fef0 	bl	800546c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <BSP_PB_Init+0xa0>)
 800468e:	2200      	movs	r2, #0
 8004690:	210f      	movs	r1, #15
 8004692:	f913 4014 	ldrsb.w	r4, [r3, r4, lsl #1]
 8004696:	4620      	mov	r0, r4
 8004698:	f000 fc80 	bl	8004f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800469c:	4620      	mov	r0, r4
 800469e:	f000 fcaf 	bl	8005000 <HAL_NVIC_EnableIRQ>
}
 80046a2:	e7d6      	b.n	8004652 <BSP_PB_Init+0x3a>
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <BSP_PB_Init+0xa4>)
 80046a6:	e7ea      	b.n	800467e <BSP_PB_Init+0x66>
 80046a8:	40023800 	.word	0x40023800
 80046ac:	080f7756 	.word	0x080f7756
 80046b0:	20000008 	.word	0x20000008
 80046b4:	10210000 	.word	0x10210000
 80046b8:	080f7750 	.word	0x080f7750
 80046bc:	10110000 	.word	0x10110000

080046c0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80046c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80046c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <LL_FillBuffer+0x6c>)
{
 80046ce:	4680      	mov	r8, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80046d0:	f04f 0c34 	mov.w	ip, #52	; 0x34
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80046d4:	605a      	str	r2, [r3, #4]
{
 80046d6:	460d      	mov	r5, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <LL_FillBuffer+0x70>)
 80046da:	4816      	ldr	r0, [pc, #88]	; (8004734 <LL_FillBuffer+0x74>)
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	fb0c 0202 	mla	r2, ip, r2, r0
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80046e2:	4812      	ldr	r0, [pc, #72]	; (800472c <LL_FillBuffer+0x6c>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80046e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046e6:	2a02      	cmp	r2, #2
{
 80046e8:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80046ec:	bf18      	it	ne
 80046ee:	2200      	movne	r2, #0
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80046f0:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hDma2dHandler.Instance = DMA2D;
 80046f4:	4a10      	ldr	r2, [pc, #64]	; (8004738 <LL_FillBuffer+0x78>)
 80046f6:	601a      	str	r2, [r3, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80046f8:	f000 fda7 	bl	800524a <HAL_DMA2D_Init>
 80046fc:	b998      	cbnz	r0, 8004726 <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80046fe:	4641      	mov	r1, r8
 8004700:	480a      	ldr	r0, [pc, #40]	; (800472c <LL_FillBuffer+0x6c>)
 8004702:	f000 fe69 	bl	80053d8 <HAL_DMA2D_ConfigLayer>
 8004706:	b970      	cbnz	r0, 8004726 <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004708:	9700      	str	r7, [sp, #0]
 800470a:	4633      	mov	r3, r6
 800470c:	462a      	mov	r2, r5
 800470e:	4621      	mov	r1, r4
 8004710:	4806      	ldr	r0, [pc, #24]	; (800472c <LL_FillBuffer+0x6c>)
 8004712:	f000 fdc6 	bl	80052a2 <HAL_DMA2D_Start>
 8004716:	b930      	cbnz	r0, 8004726 <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004718:	210a      	movs	r1, #10
 800471a:	4804      	ldr	r0, [pc, #16]	; (800472c <LL_FillBuffer+0x6c>)
      }
    }
  } 
}
 800471c:	b002      	add	sp, #8
 800471e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004722:	f000 bdd8 	b.w	80052d6 <HAL_DMA2D_PollForTransfer>
}
 8004726:	b002      	add	sp, #8
 8004728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800472c:	2004d738 	.word	0x2004d738
 8004730:	2004d71c 	.word	0x2004d71c
 8004734:	2004d778 	.word	0x2004d778
 8004738:	4002b000 	.word	0x4002b000

0800473c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <BSP_LCD_GetXSize+0x10>)
 800473e:	2134      	movs	r1, #52	; 0x34
 8004740:	4a03      	ldr	r2, [pc, #12]	; (8004750 <BSP_LCD_GetXSize+0x14>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	fb01 2303 	mla	r3, r1, r3, r2
}
 8004748:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800474a:	4770      	bx	lr
 800474c:	2004d71c 	.word	0x2004d71c
 8004750:	2004d778 	.word	0x2004d778

08004754 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <BSP_LCD_GetYSize+0x10>)
 8004756:	2134      	movs	r1, #52	; 0x34
 8004758:	4a03      	ldr	r2, [pc, #12]	; (8004768 <BSP_LCD_GetYSize+0x14>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	fb01 2303 	mla	r3, r1, r3, r2
}
 8004760:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004762:	4770      	bx	lr
 8004764:	2004d71c 	.word	0x2004d71c
 8004768:	2004d778 	.word	0x2004d778

0800476c <BSP_LCD_LayerRgb565Init>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800476c:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <BSP_LCD_LayerRgb565Init+0x68>)
  layer_cfg.WindowX0 = 0;
 800476e:	2300      	movs	r3, #0
{     
 8004770:	b570      	push	{r4, r5, r6, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004772:	6812      	ldr	r2, [r2, #0]
{     
 8004774:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004776:	2534      	movs	r5, #52	; 0x34
 8004778:	4817      	ldr	r0, [pc, #92]	; (80047d8 <BSP_LCD_LayerRgb565Init+0x6c>)
{     
 800477a:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800477c:	2602      	movs	r6, #2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800477e:	fb05 0202 	mla	r2, r5, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
 8004782:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8004784:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004786:	6e15      	ldr	r5, [r2, #96]	; 0x60
  layer_cfg.WindowX0 = 0;
 8004788:	9301      	str	r3, [sp, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800478a:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.Backcolor.Blue = 0;
 800478c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8004790:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004794:	9204      	str	r2, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8004796:	9605      	str	r6, [sp, #20]
  layer_cfg.Alpha0 = 0;
 8004798:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
 800479c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80047a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047a4:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80047a6:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80047aa:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80047ae:	4622      	mov	r2, r4
 80047b0:	a901      	add	r1, sp, #4
 80047b2:	f001 faeb 	bl	8005d8c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80047b6:	200c      	movs	r0, #12
 80047b8:	4b08      	ldr	r3, [pc, #32]	; (80047dc <BSP_LCD_LayerRgb565Init+0x70>)
 80047ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047be:	4360      	muls	r0, r4
 80047c0:	181a      	adds	r2, r3, r0
 80047c2:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 80047c4:	4906      	ldr	r1, [pc, #24]	; (80047e0 <BSP_LCD_LayerRgb565Init+0x74>)
 80047c6:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80047c8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80047cc:	501a      	str	r2, [r3, r0]
}
 80047ce:	b00e      	add	sp, #56	; 0x38
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
 80047d2:	bf00      	nop
 80047d4:	2004d71c 	.word	0x2004d71c
 80047d8:	2004d778 	.word	0x2004d778
 80047dc:	2004d720 	.word	0x2004d720
 80047e0:	2000001c 	.word	0x2000001c

080047e4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80047e4:	4b01      	ldr	r3, [pc, #4]	; (80047ec <BSP_LCD_SelectLayer+0x8>)
 80047e6:	6018      	str	r0, [r3, #0]
} 
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	2004d71c 	.word	0x2004d71c

080047f0 <BSP_LCD_SetTransparency>:
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 80047f0:	4602      	mov	r2, r0
 80047f2:	4801      	ldr	r0, [pc, #4]	; (80047f8 <BSP_LCD_SetTransparency+0x8>)
 80047f4:	f001 baf3 	b.w	8005dde <HAL_LTDC_SetAlpha>
 80047f8:	2004d778 	.word	0x2004d778

080047fc <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <BSP_LCD_SetTextColor+0x10>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	230c      	movs	r3, #12
 8004802:	4353      	muls	r3, r2
 8004804:	4a02      	ldr	r2, [pc, #8]	; (8004810 <BSP_LCD_SetTextColor+0x14>)
 8004806:	50d0      	str	r0, [r2, r3]
}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2004d71c 	.word	0x2004d71c
 8004810:	2004d720 	.word	0x2004d720

08004814 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <BSP_LCD_Clear+0x24>)
{ 
 8004816:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004818:	681c      	ldr	r4, [r3, #0]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800481a:	2134      	movs	r1, #52	; 0x34
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800481e:	9001      	str	r0, [sp, #4]
 8004820:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004822:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004826:	2300      	movs	r3, #0
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
 800482e:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8004830:	f7ff ff46 	bl	80046c0 <LL_FillBuffer>
}
 8004834:	b002      	add	sp, #8
 8004836:	bd10      	pop	{r4, pc}
 8004838:	2004d71c 	.word	0x2004d71c
 800483c:	2004d778 	.word	0x2004d778

08004840 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <BSP_LCD_DrawPixel+0x2c>)
{
 8004842:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2534      	movs	r5, #52	; 0x34
 8004848:	4c09      	ldr	r4, [pc, #36]	; (8004870 <BSP_LCD_DrawPixel+0x30>)
 800484a:	fb05 4303 	mla	r3, r5, r3, r4
 800484e:	e9d3 5417 	ldrd	r5, r4, [r3, #92]	; 0x5c
 8004852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004854:	fb04 0101 	mla	r1, r4, r1, r0
 8004858:	2b02      	cmp	r3, #2
 800485a:	d103      	bne.n	8004864 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800485c:	b292      	uxth	r2, r2
 800485e:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
}
 8004862:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004864:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
}
 8004868:	e7fb      	b.n	8004862 <BSP_LCD_DrawPixel+0x22>
 800486a:	bf00      	nop
 800486c:	2004d71c 	.word	0x2004d71c
 8004870:	2004d778 	.word	0x2004d778

08004874 <BSP_LCD_DisplayChar>:
{
 8004874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004878:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <BSP_LCD_DisplayChar+0xbc>)
{
 800487a:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800487c:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 8004880:	f04f 0800 	mov.w	r8, #0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004884:	f8d3 b000 	ldr.w	fp, [r3]
{
 8004888:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800488c:	4829      	ldr	r0, [pc, #164]	; (8004934 <BSP_LCD_DisplayChar+0xc0>)
 800488e:	210c      	movs	r1, #12
 8004890:	fb01 010b 	mla	r1, r1, fp, r0
 8004894:	6889      	ldr	r1, [r1, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004896:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 800489a:	88cb      	ldrh	r3, [r1, #6]
 800489c:	f10a 0607 	add.w	r6, sl, #7
 80048a0:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80048a2:	435d      	muls	r5, r3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80048a4:	10f6      	asrs	r6, r6, #3
 80048a6:	9300      	str	r3, [sp, #0]
  offset =  8 *((width + 7)/8) -  width ;
 80048a8:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 80048ac:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
 80048b0:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80048b4:	fa52 f380 	uxtab	r3, r2, r0
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	9b02      	ldr	r3, [sp, #8]
 80048bc:	eb03 0908 	add.w	r9, r3, r8
  for(i = 0; i < height; i++)
 80048c0:	9b00      	ldr	r3, [sp, #0]
 80048c2:	4598      	cmp	r8, r3
 80048c4:	fa1f f989 	uxth.w	r9, r9
 80048c8:	d302      	bcc.n	80048d0 <BSP_LCD_DisplayChar+0x5c>
}
 80048ca:	b005      	add	sp, #20
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 80048d0:	2e01      	cmp	r6, #1
 80048d2:	782c      	ldrb	r4, [r5, #0]
 80048d4:	d004      	beq.n	80048e0 <BSP_LCD_DisplayChar+0x6c>
 80048d6:	2e02      	cmp	r6, #2
 80048d8:	d109      	bne.n	80048ee <BSP_LCD_DisplayChar+0x7a>
      line =  (pchar[0]<< 8) | pchar[1];      
 80048da:	882c      	ldrh	r4, [r5, #0]
 80048dc:	ba64      	rev16	r4, r4
 80048de:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 80048e0:	2700      	movs	r7, #0
 80048e2:	45ba      	cmp	sl, r7
 80048e4:	d80a      	bhi.n	80048fc <BSP_LCD_DisplayChar+0x88>
  for(i = 0; i < height; i++)
 80048e6:	f108 0801 	add.w	r8, r8, #1
 80048ea:	4435      	add	r5, r6
 80048ec:	e7e5      	b.n	80048ba <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80048ee:	786a      	ldrb	r2, [r5, #1]
 80048f0:	0424      	lsls	r4, r4, #16
 80048f2:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80048f6:	78aa      	ldrb	r2, [r5, #2]
 80048f8:	4314      	orrs	r4, r2
 80048fa:	e7f1      	b.n	80048e0 <BSP_LCD_DisplayChar+0x6c>
 80048fc:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 80048fe:	2201      	movs	r2, #1
 8004900:	19d8      	adds	r0, r3, r7
 8004902:	9b03      	ldr	r3, [sp, #12]
 8004904:	1bd9      	subs	r1, r3, r7
 8004906:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8004908:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 800490a:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800490c:	4649      	mov	r1, r9
      if(line & (1 << (width- j + offset- 1))) 
 800490e:	4222      	tst	r2, r4
 8004910:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004914:	bf0d      	iteet	eq
 8004916:	4b07      	ldreq	r3, [pc, #28]	; (8004934 <BSP_LCD_DisplayChar+0xc0>)
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004918:	fb02 f20b 	mulne.w	r2, r2, fp
 800491c:	4b05      	ldrne	r3, [pc, #20]	; (8004934 <BSP_LCD_DisplayChar+0xc0>)
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800491e:	fb02 320b 	mlaeq	r2, r2, fp, r3
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004922:	bf14      	ite	ne
 8004924:	589a      	ldrne	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004926:	6852      	ldreq	r2, [r2, #4]
 8004928:	f7ff ff8a 	bl	8004840 <BSP_LCD_DrawPixel>
 800492c:	e7d9      	b.n	80048e2 <BSP_LCD_DisplayChar+0x6e>
 800492e:	bf00      	nop
 8004930:	2004d71c 	.word	0x2004d71c
 8004934:	2004d720 	.word	0x2004d720

08004938 <BSP_LCD_DisplayStringAt>:
{
 8004938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800493c:	4607      	mov	r7, r0
 800493e:	460d      	mov	r5, r1
 8004940:	4614      	mov	r4, r2
 8004942:	1b10      	subs	r0, r2, r4
  while (*ptr++) size ++ ;
 8004944:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004948:	2900      	cmp	r1, #0
 800494a:	d1fa      	bne.n	8004942 <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800494c:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <BSP_LCD_DisplayStringAt+0x9c>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800494e:	260c      	movs	r6, #12
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004950:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80049dc <BSP_LCD_DisplayStringAt+0xa4>
 8004954:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8004958:	6811      	ldr	r1, [r2, #0]
  switch (Mode)
 800495a:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <BSP_LCD_DisplayStringAt+0xa0>)
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800495e:	fb0e 8e01 	mla	lr, lr, r1, r8
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004962:	fb06 2601 	mla	r6, r6, r1, r2
 8004966:	f8de 2060 	ldr.w	r2, [lr, #96]	; 0x60
 800496a:	68b6      	ldr	r6, [r6, #8]
 800496c:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8004970:	fbb2 f2fc 	udiv	r2, r2, ip
  switch (Mode)
 8004974:	d01a      	beq.n	80049ac <BSP_LCD_DisplayStringAt+0x74>
 8004976:	2b02      	cmp	r3, #2
 8004978:	d01f      	beq.n	80049ba <BSP_LCD_DisplayStringAt+0x82>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800497a:	b23b      	sxth	r3, r7
    ref_column = 1;
 800497c:	46a1      	mov	r9, r4
 800497e:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004980:	f04f 0334 	mov.w	r3, #52	; 0x34
    ref_column = 1;
 8004984:	bfd8      	it	le
 8004986:	2701      	movle	r7, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004988:	fb03 8801 	mla	r8, r3, r1, r8
 800498c:	eba9 0304 	sub.w	r3, r9, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004990:	88b0      	ldrh	r0, [r6, #4]
 8004992:	f8d8 1060 	ldr.w	r1, [r8, #96]	; 0x60
 8004996:	b29b      	uxth	r3, r3
 8004998:	f819 2b01 	ldrb.w	r2, [r9], #1
 800499c:	fb00 1313 	mls	r3, r0, r3, r1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4283      	cmp	r3, r0
 80049a4:	d300      	bcc.n	80049a8 <BSP_LCD_DisplayStringAt+0x70>
 80049a6:	b96a      	cbnz	r2, 80049c4 <BSP_LCD_DisplayStringAt+0x8c>
}
 80049a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80049ac:	1a10      	subs	r0, r2, r0
 80049ae:	fb0c f000 	mul.w	r0, ip, r0
 80049b2:	eb07 0050 	add.w	r0, r7, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80049b6:	b287      	uxth	r7, r0
      break;
 80049b8:	e7df      	b.n	800497a <BSP_LCD_DisplayStringAt+0x42>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80049ba:	1a10      	subs	r0, r2, r0
 80049bc:	fb10 f00c 	smulbb	r0, r0, ip
 80049c0:	1bc0      	subs	r0, r0, r7
 80049c2:	e7f8      	b.n	80049b6 <BSP_LCD_DisplayStringAt+0x7e>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80049c4:	4638      	mov	r0, r7
 80049c6:	4629      	mov	r1, r5
 80049c8:	f7ff ff54 	bl	8004874 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80049cc:	88b0      	ldrh	r0, [r6, #4]
 80049ce:	4438      	add	r0, r7
 80049d0:	b287      	uxth	r7, r0
 80049d2:	e7db      	b.n	800498c <BSP_LCD_DisplayStringAt+0x54>
 80049d4:	2004d71c 	.word	0x2004d71c
 80049d8:	2004d720 	.word	0x2004d720
 80049dc:	2004d778 	.word	0x2004d778

080049e0 <BSP_LCD_DisplayOn>:
{
 80049e0:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80049e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	6993      	ldr	r3, [r2, #24]
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80049f4:	2201      	movs	r2, #1
 80049f6:	f000 fe21 	bl	800563c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80049fa:	2201      	movs	r2, #1
 80049fc:	2108      	movs	r1, #8
 80049fe:	4804      	ldr	r0, [pc, #16]	; (8004a10 <BSP_LCD_DisplayOn+0x30>)
}
 8004a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004a04:	f000 be1a 	b.w	800563c <HAL_GPIO_WritePin>
 8004a08:	2004d778 	.word	0x2004d778
 8004a0c:	40022000 	.word	0x40022000
 8004a10:	40022800 	.word	0x40022800

08004a14 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004a14:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004a16:	484c      	ldr	r0, [pc, #304]	; (8004b48 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 8004a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
{
 8004a22:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004a26:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004a28:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004a2a:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004a2c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004a30:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004a34:	4e45      	ldr	r6, [pc, #276]	; (8004b4c <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004a36:	9200      	str	r2, [sp, #0]
 8004a38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
 8004a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a44:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8004a48:	9201      	str	r2, [sp, #4]
 8004a4a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4e:	f042 0210 	orr.w	r2, r2, #16
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
 8004a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a56:	f002 0210 	and.w	r2, r2, #16
 8004a5a:	9202      	str	r2, [sp, #8]
 8004a5c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
 8004a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a68:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004a6c:	9203      	str	r2, [sp, #12]
 8004a6e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
 8004a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004a7e:	9204      	str	r2, [sp, #16]
 8004a80:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
 8004a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004a90:	9205      	str	r2, [sp, #20]
 8004a92:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004aa2:	9206      	str	r2, [sp, #24]
 8004aa4:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
 8004aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004ab4:	9207      	str	r2, [sp, #28]
 8004ab6:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004ac2:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	9308      	str	r3, [sp, #32]
 8004aca:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004acc:	2310      	movs	r3, #16
 8004ace:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004ad4:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004ad8:	f000 fcc8 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004adc:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004ade:	a909      	add	r1, sp, #36	; 0x24
 8004ae0:	481b      	ldr	r0, [pc, #108]	; (8004b50 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004ae2:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004ae4:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004ae8:	f000 fcc0 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8004aec:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004af0:	a909      	add	r1, sp, #36	; 0x24
 8004af2:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004af4:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004af6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004afa:	f000 fcb7 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004afe:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004b02:	a909      	add	r1, sp, #36	; 0x24
 8004b04:	4813      	ldr	r0, [pc, #76]	; (8004b54 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004b06:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004b08:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004b0c:	f000 fcae 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004b10:	23f7      	movs	r3, #247	; 0xf7
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004b12:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004b14:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004b16:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004b18:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004b1c:	4c0e      	ldr	r4, [pc, #56]	; (8004b58 <BSP_LCD_MspInit+0x144>)
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f000 fca4 	bl	800546c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004b24:	a909      	add	r1, sp, #36	; 0x24
 8004b26:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004b28:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004b2a:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004b2c:	f000 fc9e 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004b30:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004b32:	a909      	add	r1, sp, #36	; 0x24
 8004b34:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004b36:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004b3a:	f000 fc97 	bl	800546c <HAL_GPIO_Init>
}
 8004b3e:	b00f      	add	sp, #60	; 0x3c
 8004b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40022000 	.word	0x40022000
 8004b50:	40021800 	.word	0x40021800
 8004b54:	40022400 	.word	0x40022400
 8004b58:	40022800 	.word	0x40022800

08004b5c <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004b5c:	4805      	ldr	r0, [pc, #20]	; (8004b74 <BSP_LCD_ClockConfig+0x18>)
 8004b5e:	2308      	movs	r3, #8
 8004b60:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004b62:	23c0      	movs	r3, #192	; 0xc0
 8004b64:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004b66:	2305      	movs	r3, #5
 8004b68:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004b70:	f001 bc38 	b.w	80063e4 <HAL_RCCEx_PeriphCLKConfig>
 8004b74:	2004d820 	.word	0x2004d820

08004b78 <BSP_LCD_Init>:
{    
 8004b78:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004b7a:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004b7c:	4c24      	ldr	r4, [pc, #144]	; (8004c10 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004b7e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004b80:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004b82:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004b86:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004b8a:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004b8e:	230b      	movs	r3, #11
 8004b90:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004b94:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004b98:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004b9a:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004b9e:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004ba2:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004ba4:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004ba8:	f7ff ffd8 	bl	8004b5c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004bac:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8004bb0:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004bb4:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004bb6:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004bbe:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004bc2:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004bc6:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <BSP_LCD_Init+0x9c>)
 8004bcc:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004bce:	f001 f926 	bl	8005e1e <HAL_LTDC_GetState>
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	b910      	cbnz	r0, 8004bdc <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f7ff ff1c 	bl	8004a14 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8004bdc:	480c      	ldr	r0, [pc, #48]	; (8004c10 <BSP_LCD_Init+0x98>)
 8004bde:	f001 f869 	bl	8005cb4 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004be2:	2201      	movs	r2, #1
 8004be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004be8:	480b      	ldr	r0, [pc, #44]	; (8004c18 <BSP_LCD_Init+0xa0>)
 8004bea:	f000 fd27 	bl	800563c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004bee:	2201      	movs	r2, #1
 8004bf0:	2108      	movs	r1, #8
 8004bf2:	480a      	ldr	r0, [pc, #40]	; (8004c1c <BSP_LCD_Init+0xa4>)
 8004bf4:	f000 fd22 	bl	800563c <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8004bf8:	f000 f920 	bl	8004e3c <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <BSP_LCD_Init+0xa8>)
 8004bfe:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <BSP_LCD_Init+0xac>)
 8004c00:	210c      	movs	r1, #12
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8004c06:	fb01 2303 	mla	r3, r1, r3, r2
 8004c0a:	4a07      	ldr	r2, [pc, #28]	; (8004c28 <BSP_LCD_Init+0xb0>)
 8004c0c:	609a      	str	r2, [r3, #8]
}
 8004c0e:	bd10      	pop	{r4, pc}
 8004c10:	2004d778 	.word	0x2004d778
 8004c14:	40016800 	.word	0x40016800
 8004c18:	40022000 	.word	0x40022000
 8004c1c:	40022800 	.word	0x40022800
 8004c20:	2004d71c 	.word	0x2004d71c
 8004c24:	2004d720 	.word	0x2004d720
 8004c28:	2000001c 	.word	0x2000001c

08004c2c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004c30:	4c21      	ldr	r4, [pc, #132]	; (8004cb8 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c32:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c34:	4d21      	ldr	r5, [pc, #132]	; (8004cbc <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8004c36:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c3a:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c3c:	4621      	mov	r1, r4
{
 8004c3e:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c44:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8004c46:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c4a:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8004c4e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c52:	f001 fe72 	bl	800693a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004c56:	4630      	mov	r0, r6
 8004c58:	f000 f97c 	bl	8004f54 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004c5c:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004c5e:	4621      	mov	r1, r4
 8004c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c64:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c66:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8004c6a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004c6e:	f001 fe64 	bl	800693a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004c72:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c74:	4621      	mov	r1, r4
 8004c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c7a:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c7c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8004c80:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8004c82:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c86:	f001 fe58 	bl	800693a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004c8a:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c8e:	4621      	mov	r1, r4
 8004c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004c94:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004c96:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c98:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8004c9a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c9c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8004ca0:	9b01      	ldr	r3, [sp, #4]
 8004ca2:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004ca4:	f001 fe49 	bl	800693a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004ca8:	4649      	mov	r1, r9
 8004caa:	4628      	mov	r0, r5
}
 8004cac:	b003      	add	sp, #12
 8004cae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004cb2:	f001 be59 	b.w	8006968 <HAL_SDRAM_ProgramRefreshRate>
 8004cb6:	bf00      	nop
 8004cb8:	2004d8a4 	.word	0x2004d8a4
 8004cbc:	2004d9d4 	.word	0x2004d9d4

08004cc0 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004cc0:	4b55      	ldr	r3, [pc, #340]	; (8004e18 <BSP_SDRAM_MspInit+0x158>)
 8004cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
{  
 8004cc8:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8004ccc:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8004cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8004cd0:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004cd2:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004cd4:	4851      	ldr	r0, [pc, #324]	; (8004e1c <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8004cd6:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004cda:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8004cdc:	9201      	str	r2, [sp, #4]
 8004cde:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8004ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004cee:	9202      	str	r2, [sp, #8]
 8004cf0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf4:	f042 0204 	orr.w	r2, r2, #4
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cfc:	f002 0204 	and.w	r2, r2, #4
 8004d00:	9203      	str	r2, [sp, #12]
 8004d02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0e:	f002 0208 	and.w	r2, r2, #8
 8004d12:	9204      	str	r2, [sp, #16]
 8004d14:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d18:	f042 0210 	orr.w	r2, r2, #16
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d20:	f002 0210 	and.w	r2, r2, #16
 8004d24:	9205      	str	r2, [sp, #20]
 8004d26:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2a:	f042 0220 	orr.w	r2, r2, #32
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d32:	f002 0220 	and.w	r2, r2, #32
 8004d36:	9206      	str	r2, [sp, #24]
 8004d38:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
 8004d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d44:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004d48:	9207      	str	r2, [sp, #28]
 8004d4a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004d54:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	9308      	str	r3, [sp, #32]
 8004d5e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004d60:	2302      	movs	r3, #2
 8004d62:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004d66:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004d68:	230c      	movs	r3, #12
 8004d6a:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004d72:	4621      	mov	r1, r4
 8004d74:	f000 fb7a 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004d78:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4828      	ldr	r0, [pc, #160]	; (8004e20 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004d80:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004d82:	f000 fb73 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004d86:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	4825      	ldr	r0, [pc, #148]	; (8004e24 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004d8e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004d90:	f000 fb6c 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004d94:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4823      	ldr	r0, [pc, #140]	; (8004e28 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004d9c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004d9e:	f000 fb65 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004da2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004da6:	4621      	mov	r1, r4
 8004da8:	4820      	ldr	r0, [pc, #128]	; (8004e2c <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004daa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004dac:	f000 fb5e 	bl	800546c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004db0:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004db2:	4621      	mov	r1, r4
 8004db4:	481e      	ldr	r0, [pc, #120]	; (8004e30 <BSP_SDRAM_MspInit+0x170>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004db6:	4c1f      	ldr	r4, [pc, #124]	; (8004e34 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004db8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004dba:	f000 fb57 	bl	800546c <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004dbe:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004dc8:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004dca:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004dcc:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004dce:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004dd0:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004dd2:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dda:	e9c4 2303 	strd	r2, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004de2:	e9c4 1305 	strd	r1, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004dea:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004dee:	2303      	movs	r3, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004df0:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004df4:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <BSP_SDRAM_MspInit+0x178>)
 8004df6:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 8004df8:	f000 f9ba 	bl	8005170 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f000 f939 	bl	8005074 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004e02:	462a      	mov	r2, r5
 8004e04:	210f      	movs	r1, #15
 8004e06:	2038      	movs	r0, #56	; 0x38
 8004e08:	f000 f8c8 	bl	8004f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004e0c:	2038      	movs	r0, #56	; 0x38
 8004e0e:	f000 f8f7 	bl	8005000 <HAL_NVIC_EnableIRQ>
}
 8004e12:	b00e      	add	sp, #56	; 0x38
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40020800 	.word	0x40020800
 8004e20:	40020c00 	.word	0x40020c00
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40021400 	.word	0x40021400
 8004e2c:	40021800 	.word	0x40021800
 8004e30:	40021c00 	.word	0x40021c00
 8004e34:	2004d8d0 	.word	0x2004d8d0
 8004e38:	40026410 	.word	0x40026410

08004e3c <BSP_SDRAM_Init>:
{ 
 8004e3c:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004e3e:	4c1a      	ldr	r4, [pc, #104]	; (8004ea8 <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
 8004e40:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004e42:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
 8004e44:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8004e46:	4d1a      	ldr	r5, [pc, #104]	; (8004eb0 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004e48:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004e4c:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004e4e:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004e50:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8004e52:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 8004e54:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 8004e58:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 8004e5c:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004e60:	2210      	movs	r2, #16
 8004e62:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004e64:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004e66:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004e6e:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004e70:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e78:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004e7c:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004e7e:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004e82:	f7ff ff1d 	bl	8004cc0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4c0a      	ldr	r4, [pc, #40]	; (8004eb4 <BSP_SDRAM_Init+0x78>)
 8004e8c:	f001 fd35 	bl	80068fa <HAL_SDRAM_Init>
 8004e90:	b138      	cbz	r0, 8004ea2 <BSP_SDRAM_Init+0x66>
    sdramstatus = SDRAM_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004e96:	f240 6003 	movw	r0, #1539	; 0x603
 8004e9a:	f7ff fec7 	bl	8004c2c <BSP_SDRAM_Initialization_sequence>
}
 8004e9e:	7820      	ldrb	r0, [r4, #0]
 8004ea0:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8004ea2:	7020      	strb	r0, [r4, #0]
 8004ea4:	e7f7      	b.n	8004e96 <BSP_SDRAM_Init+0x5a>
 8004ea6:	bf00      	nop
 8004ea8:	2004d9d4 	.word	0x2004d9d4
 8004eac:	a0000140 	.word	0xa0000140
 8004eb0:	2004d8b4 	.word	0x2004d8b4
 8004eb4:	20000014 	.word	0x20000014

08004eb8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ebc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <HAL_InitTick+0x3c>)
{
 8004ec0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ec2:	4a0e      	ldr	r2, [pc, #56]	; (8004efc <HAL_InitTick+0x40>)
 8004ec4:	7818      	ldrb	r0, [r3, #0]
 8004ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eca:	fbb3 f3f0 	udiv	r3, r3, r0
 8004ece:	6810      	ldr	r0, [r2, #0]
 8004ed0:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ed4:	f000 f8a2 	bl	800501c <HAL_SYSTICK_Config>
 8004ed8:	4604      	mov	r4, r0
 8004eda:	b958      	cbnz	r0, 8004ef4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004edc:	2d0f      	cmp	r5, #15
 8004ede:	d809      	bhi.n	8004ef4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee8:	f000 f858 	bl	8004f9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <HAL_InitTick+0x44>)
 8004eee:	4620      	mov	r0, r4
 8004ef0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	e7fc      	b.n	8004ef2 <HAL_InitTick+0x36>
 8004ef8:	20000015 	.word	0x20000015
 8004efc:	20000004 	.word	0x20000004
 8004f00:	20000018 	.word	0x20000018

08004f04 <HAL_Init>:
{
 8004f04:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f08:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f10:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f18:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f1a:	f000 f82d 	bl	8004f78 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7ff ffcc 	bl	8004ebc <HAL_InitTick>
  HAL_MspInit();
 8004f24:	f7ff ffc8 	bl	8004eb8 <HAL_MspInit>
}
 8004f28:	2000      	movs	r0, #0
 8004f2a:	bd08      	pop	{r3, pc}
 8004f2c:	40023c00 	.word	0x40023c00

08004f30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004f30:	4a03      	ldr	r2, [pc, #12]	; (8004f40 <HAL_IncTick+0x10>)
 8004f32:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <HAL_IncTick+0x14>)
 8004f34:	6811      	ldr	r1, [r2, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	440b      	add	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]
}
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	2004da08 	.word	0x2004da08
 8004f44:	20000015 	.word	0x20000015

08004f48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004f48:	4b01      	ldr	r3, [pc, #4]	; (8004f50 <HAL_GetTick+0x8>)
 8004f4a:	6818      	ldr	r0, [r3, #0]
}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	2004da08 	.word	0x2004da08

08004f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004f58:	f7ff fff6 	bl	8004f48 <HAL_GetTick>
 8004f5c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f5e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004f60:	bf1e      	ittt	ne
 8004f62:	4b04      	ldrne	r3, [pc, #16]	; (8004f74 <HAL_Delay+0x20>)
 8004f64:	781b      	ldrbne	r3, [r3, #0]
 8004f66:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f68:	f7ff ffee 	bl	8004f48 <HAL_GetTick>
 8004f6c:	1b40      	subs	r0, r0, r5
 8004f6e:	42a0      	cmp	r0, r4
 8004f70:	d3fa      	bcc.n	8004f68 <HAL_Delay+0x14>
  {
  }
}
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000015 	.word	0x20000015

08004f78 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f78:	4a07      	ldr	r2, [pc, #28]	; (8004f98 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f7a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f7c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f7e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004f92:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004f94:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004f96:	4770      	bx	lr
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f9e:	b570      	push	{r4, r5, r6, lr}
 8004fa0:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fa6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004faa:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fae:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fb0:	2d04      	cmp	r5, #4
 8004fb2:	bf28      	it	cs
 8004fb4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fb6:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb8:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fbc:	bf8c      	ite	hi
 8004fbe:	3c03      	subhi	r4, #3
 8004fc0:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8004fc2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc4:	ea21 0303 	bic.w	r3, r1, r3
 8004fc8:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fcc:	fa06 f404 	lsl.w	r4, r6, r4
 8004fd0:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd4:	ea43 0304 	orr.w	r3, r3, r4
 8004fd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004fdc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004fde:	db06      	blt.n	8004fee <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004fe4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004fe8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fee:	f000 000f 	and.w	r0, r0, #15
 8004ff2:	4a02      	ldr	r2, [pc, #8]	; (8004ffc <HAL_NVIC_SetPriority+0x60>)
 8004ff4:	5413      	strb	r3, [r2, r0]
 8004ff6:	e7f9      	b.n	8004fec <HAL_NVIC_SetPriority+0x50>
 8004ff8:	e000ed00 	.word	0xe000ed00
 8004ffc:	e000ed14 	.word	0xe000ed14

08005000 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005000:	2800      	cmp	r0, #0
 8005002:	db08      	blt.n	8005016 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005004:	0942      	lsrs	r2, r0, #5
 8005006:	2301      	movs	r3, #1
 8005008:	f000 001f 	and.w	r0, r0, #31
 800500c:	fa03 f000 	lsl.w	r0, r3, r0
 8005010:	4b01      	ldr	r3, [pc, #4]	; (8005018 <HAL_NVIC_EnableIRQ+0x18>)
 8005012:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005016:	4770      	bx	lr
 8005018:	e000e100 	.word	0xe000e100

0800501c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800501c:	3801      	subs	r0, #1
 800501e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005022:	d20a      	bcs.n	800503a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005026:	21f0      	movs	r1, #240	; 0xf0
 8005028:	4a06      	ldr	r2, [pc, #24]	; (8005044 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800502a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800502c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005032:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005034:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800503a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	e000e010 	.word	0xe000e010
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005048:	6803      	ldr	r3, [r0, #0]
 800504a:	2118      	movs	r1, #24
 800504c:	b2da      	uxtb	r2, r3
 800504e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005052:	3a10      	subs	r2, #16
 8005054:	f023 0303 	bic.w	r3, r3, #3
 8005058:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800505c:	4904      	ldr	r1, [pc, #16]	; (8005070 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800505e:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005060:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005062:	bf88      	it	hi
 8005064:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005066:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005068:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800506a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	080f775c 	.word	0x080f775c

08005074 <HAL_DMA_Init>:
{
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005078:	f7ff ff66 	bl	8004f48 <HAL_GetTick>
 800507c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800507e:	2c00      	cmp	r4, #0
 8005080:	d071      	beq.n	8005166 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8005082:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8005084:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8005086:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800508a:	2302      	movs	r3, #2
 800508c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8005090:	6813      	ldr	r3, [r2, #0]
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005098:	6821      	ldr	r1, [r4, #0]
 800509a:	680b      	ldr	r3, [r1, #0]
 800509c:	07d8      	lsls	r0, r3, #31
 800509e:	d43c      	bmi.n	800511a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80050a0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050a2:	4d32      	ldr	r5, [pc, #200]	; (800516c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050a4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050a6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050a8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	68e2      	ldr	r2, [r4, #12]
 80050b0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b2:	6922      	ldr	r2, [r4, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	6962      	ldr	r2, [r4, #20]
 80050b8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ba:	69e2      	ldr	r2, [r4, #28]
 80050bc:	4303      	orrs	r3, r0
 80050be:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80050c0:	6a22      	ldr	r2, [r4, #32]
 80050c2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80050c6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050c8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050cc:	bf02      	ittt	eq
 80050ce:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80050d2:	4335      	orreq	r5, r6
 80050d4:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050d6:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80050d8:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80050da:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050dc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80050e0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050e4:	d10b      	bne.n	80050fe <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80050e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050e8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80050ea:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050ec:	b13d      	cbz	r5, 80050fe <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050ee:	b9f8      	cbnz	r0, 8005130 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80050f0:	2a01      	cmp	r2, #1
 80050f2:	d02d      	beq.n	8005150 <HAL_DMA_Init+0xdc>
 80050f4:	d301      	bcc.n	80050fa <HAL_DMA_Init+0x86>
 80050f6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050f8:	d101      	bne.n	80050fe <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050fa:	01ea      	lsls	r2, r5, #7
 80050fc:	d42b      	bmi.n	8005156 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80050fe:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff ffa1 	bl	8005048 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005106:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005108:	233f      	movs	r3, #63	; 0x3f
 800510a:	4093      	lsls	r3, r2
 800510c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800510e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005110:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005112:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005114:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005118:	e009      	b.n	800512e <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800511a:	f7ff ff15 	bl	8004f48 <HAL_GetTick>
 800511e:	1b40      	subs	r0, r0, r5
 8005120:	2805      	cmp	r0, #5
 8005122:	d9b9      	bls.n	8005098 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005124:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005126:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005128:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800512a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800512e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005130:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005134:	d113      	bne.n	800515e <HAL_DMA_Init+0xea>
    switch (tmp)
 8005136:	2a03      	cmp	r2, #3
 8005138:	d8e1      	bhi.n	80050fe <HAL_DMA_Init+0x8a>
 800513a:	a001      	add	r0, pc, #4	; (adr r0, 8005140 <HAL_DMA_Init+0xcc>)
 800513c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8005140:	08005157 	.word	0x08005157
 8005144:	080050fb 	.word	0x080050fb
 8005148:	08005157 	.word	0x08005157
 800514c:	08005151 	.word	0x08005151
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005150:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8005154:	d1d3      	bne.n	80050fe <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005156:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8005158:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800515a:	6563      	str	r3, [r4, #84]	; 0x54
 800515c:	e7e5      	b.n	800512a <HAL_DMA_Init+0xb6>
    switch (tmp)
 800515e:	2a02      	cmp	r2, #2
 8005160:	d9f9      	bls.n	8005156 <HAL_DMA_Init+0xe2>
 8005162:	2a03      	cmp	r2, #3
 8005164:	e7c8      	b.n	80050f8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8005166:	2001      	movs	r0, #1
 8005168:	e7e1      	b.n	800512e <HAL_DMA_Init+0xba>
 800516a:	bf00      	nop
 800516c:	f010803f 	.word	0xf010803f

08005170 <HAL_DMA_DeInit>:
{
 8005170:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8005172:	4605      	mov	r5, r0
 8005174:	b320      	cbz	r0, 80051c0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005176:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800517a:	b2e4      	uxtb	r4, r4
 800517c:	2c02      	cmp	r4, #2
 800517e:	d01d      	beq.n	80051bc <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8005180:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8005182:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800518c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800518e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8005190:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8005192:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8005194:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8005196:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005198:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800519a:	f7ff ff55 	bl	8005048 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800519e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80051a0:	233f      	movs	r3, #63	; 0x3f
 80051a2:	4093      	lsls	r3, r2
 80051a4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051a6:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80051a8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80051ac:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80051b0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80051b4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80051b8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
    return HAL_BUSY;
 80051bc:	4620      	mov	r0, r4
 80051be:	e000      	b.n	80051c2 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 80051c0:	2001      	movs	r0, #1
}
 80051c2:	bd38      	pop	{r3, r4, r5, pc}

080051c4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80051c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80051c6:	6804      	ldr	r4, [r0, #0]
 80051c8:	9d04      	ldr	r5, [sp, #16]
 80051ca:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80051cc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80051d0:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80051d4:	4333      	orrs	r3, r6
 80051d6:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80051d8:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80051da:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80051dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051e0:	d130      	bne.n	8005244 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80051e2:	6886      	ldr	r6, [r0, #8]
 80051e4:	b11e      	cbz	r6, 80051ee <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80051e6:	2e01      	cmp	r6, #1
 80051e8:	d103      	bne.n	80051f2 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80051ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80051ee:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80051f0:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80051f2:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80051f4:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80051f8:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80051fc:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80051fe:	d107      	bne.n	8005210 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8005200:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8005202:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005204:	02c9      	lsls	r1, r1, #11
 8005206:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800520a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800520e:	e7ee      	b.n	80051ee <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005210:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005212:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005216:	d10a      	bne.n	800522e <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8005218:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800521a:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800521c:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800521e:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005220:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8005224:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8005228:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800522c:	e7df      	b.n	80051ee <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 800522e:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8005230:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005232:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8005234:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005236:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 800523a:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 800523e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8005242:	e7d4      	b.n	80051ee <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005244:	60e1      	str	r1, [r4, #12]
}
 8005246:	e7d3      	b.n	80051f0 <DMA2D_SetConfig+0x2c>

08005248 <HAL_DMA2D_MspInit>:
}
 8005248:	4770      	bx	lr

0800524a <HAL_DMA2D_Init>:
{
 800524a:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 800524c:	4604      	mov	r4, r0
 800524e:	b330      	cbz	r0, 800529e <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005250:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005254:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005258:	b91b      	cbnz	r3, 8005262 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800525a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800525e:	f7ff fff3 	bl	8005248 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005262:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005264:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005266:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005268:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800526a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800526e:	6813      	ldr	r3, [r2, #0]
 8005270:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005274:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005276:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005278:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800527a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800527c:	f023 0307 	bic.w	r3, r3, #7
 8005280:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005282:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005284:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005286:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005288:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800528c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005290:	430b      	orrs	r3, r1
 8005292:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005294:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005296:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005298:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800529c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800529e:	2001      	movs	r0, #1
 80052a0:	e7fc      	b.n	800529c <HAL_DMA2D_Init+0x52>

080052a2 <HAL_DMA2D_Start>:
{
 80052a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80052a4:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
{
 80052a8:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 80052aa:	2c01      	cmp	r4, #1
 80052ac:	f04f 0402 	mov.w	r4, #2
 80052b0:	d00f      	beq.n	80052d2 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052b2:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80052b6:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80052b8:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 80052ba:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80052be:	9400      	str	r4, [sp, #0]
 80052c0:	f7ff ff80 	bl	80051c4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80052c4:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 80052c6:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80052c8:	6813      	ldr	r3, [r2, #0]
 80052ca:	4333      	orrs	r3, r6
 80052cc:	6013      	str	r3, [r2, #0]
}
 80052ce:	b002      	add	sp, #8
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80052d2:	4620      	mov	r0, r4
 80052d4:	e7fb      	b.n	80052ce <HAL_DMA2D_Start+0x2c>

080052d6 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 80052d6:	2300      	movs	r3, #0
{
 80052d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80052da:	9301      	str	r3, [sp, #4]
{
 80052dc:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80052de:	6803      	ldr	r3, [r0, #0]
{
 80052e0:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	07db      	lsls	r3, r3, #31
 80052e6:	d417      	bmi.n	8005318 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80052ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052ee:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80052f0:	069e      	lsls	r6, r3, #26
 80052f2:	d506      	bpl.n	8005302 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80052f4:	f7ff fe28 	bl	8004f48 <HAL_GetTick>
 80052f8:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	06d2      	lsls	r2, r2, #27
 8005300:	d543      	bpl.n	800538a <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8005306:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005308:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800530a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 800530c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005310:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8005314:	b002      	add	sp, #8
 8005316:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8005318:	f7ff fe16 	bl	8004f48 <HAL_GetTick>
 800531c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	0792      	lsls	r2, r2, #30
 8005324:	d4e0      	bmi.n	80052e8 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800532a:	9a01      	ldr	r2, [sp, #4]
 800532c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8005330:	d017      	beq.n	8005362 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005332:	9a01      	ldr	r2, [sp, #4]
 8005334:	0695      	lsls	r5, r2, #26
 8005336:	d503      	bpl.n	8005340 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005338:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800533a:	f042 0202 	orr.w	r2, r2, #2
 800533e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005340:	9a01      	ldr	r2, [sp, #4]
 8005342:	07d0      	lsls	r0, r2, #31
 8005344:	d503      	bpl.n	800534e <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005346:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800534e:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005350:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005352:	2304      	movs	r3, #4
        return HAL_ERROR;
 8005354:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005356:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800535a:	2300      	movs	r3, #0
 800535c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8005360:	e7d8      	b.n	8005314 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 8005362:	1c69      	adds	r1, r5, #1
 8005364:	d0dc      	beq.n	8005320 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005366:	f7ff fdef 	bl	8004f48 <HAL_GetTick>
 800536a:	1b80      	subs	r0, r0, r6
 800536c:	42a8      	cmp	r0, r5
 800536e:	d801      	bhi.n	8005374 <HAL_DMA2D_PollForTransfer+0x9e>
 8005370:	2d00      	cmp	r5, #0
 8005372:	d1d4      	bne.n	800531e <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005374:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005376:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005378:	f043 0320 	orr.w	r3, r3, #32
 800537c:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 800537e:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005380:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8005384:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8005388:	e7c4      	b.n	8005314 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800538e:	9a01      	ldr	r2, [sp, #4]
 8005390:	f012 0f29 	tst.w	r2, #41	; 0x29
 8005394:	d016      	beq.n	80053c4 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005396:	9a01      	ldr	r2, [sp, #4]
 8005398:	0716      	lsls	r6, r2, #28
 800539a:	d503      	bpl.n	80053a4 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800539c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800539e:	f042 0204 	orr.w	r2, r2, #4
 80053a2:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80053a4:	9a01      	ldr	r2, [sp, #4]
 80053a6:	0695      	lsls	r5, r2, #26
 80053a8:	d503      	bpl.n	80053b2 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80053ac:	f042 0202 	orr.w	r2, r2, #2
 80053b0:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053b2:	9a01      	ldr	r2, [sp, #4]
 80053b4:	07d0      	lsls	r0, r2, #31
 80053b6:	d503      	bpl.n	80053c0 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80053c0:	2229      	movs	r2, #41	; 0x29
 80053c2:	e7c5      	b.n	8005350 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 80053c4:	1c69      	adds	r1, r5, #1
 80053c6:	d099      	beq.n	80052fc <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80053c8:	f7ff fdbe 	bl	8004f48 <HAL_GetTick>
 80053cc:	1b80      	subs	r0, r0, r6
 80053ce:	42a8      	cmp	r0, r5
 80053d0:	d8d0      	bhi.n	8005374 <HAL_DMA2D_PollForTransfer+0x9e>
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	d191      	bne.n	80052fa <HAL_DMA2D_PollForTransfer+0x24>
 80053d6:	e7cd      	b.n	8005374 <HAL_DMA2D_PollForTransfer+0x9e>

080053d8 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80053d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80053dc:	2b01      	cmp	r3, #1
 80053de:	f04f 0302 	mov.w	r3, #2
{
 80053e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80053e4:	d037      	beq.n	8005456 <HAL_DMA2D_ConfigLayer+0x7e>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053e6:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 80053e8:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053ea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053ee:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 80053f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 80053f4:	4f1c      	ldr	r7, [pc, #112]	; (8005468 <HAL_DMA2D_ConfigLayer+0x90>)
 80053f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053f8:	e9d3 5207 	ldrd	r5, r2, [r3, #28]
 80053fc:	6803      	ldr	r3, [r0, #0]
 80053fe:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005402:	3d09      	subs	r5, #9
 8005404:	2d01      	cmp	r5, #1
 8005406:	d80f      	bhi.n	8005428 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005408:	f004 4c7f 	and.w	ip, r4, #4278190080	; 0xff000000
 800540c:	ea4c 0202 	orr.w	r2, ip, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005410:	b969      	cbnz	r1, 800542e <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005412:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005414:	4039      	ands	r1, r7
 8005416:	430a      	orrs	r2, r1
 8005418:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800541a:	6982      	ldr	r2, [r0, #24]
 800541c:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800541e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005420:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005424:	629a      	str	r2, [r3, #40]	; 0x28
 8005426:	e010      	b.n	800544a <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005428:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800542c:	b1a9      	cbz	r1, 800545a <HAL_DMA2D_ConfigLayer+0x82>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800542e:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005430:	4406      	add	r6, r0
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005432:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005434:	ea01 0107 	and.w	r1, r1, r7
 8005438:	ea42 0201 	orr.w	r2, r2, r1
 800543c:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800543e:	69b2      	ldr	r2, [r6, #24]
 8005440:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005442:	d802      	bhi.n	800544a <HAL_DMA2D_ConfigLayer+0x72>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005444:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8005448:	621c      	str	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800544a:	2301      	movs	r3, #1
 800544c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8005450:	2300      	movs	r3, #0
 8005452:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8005456:	4618      	mov	r0, r3
}
 8005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800545a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800545c:	4039      	ands	r1, r7
 800545e:	430a      	orrs	r2, r1
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005462:	6982      	ldr	r2, [r0, #24]
 8005464:	619a      	str	r2, [r3, #24]
 8005466:	e7f0      	b.n	800544a <HAL_DMA2D_ConfigLayer+0x72>
 8005468:	00fcfff0 	.word	0x00fcfff0

0800546c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005470:	680b      	ldr	r3, [r1, #0]
{
 8005472:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005474:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005634 <HAL_GPIO_Init+0x1c8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005478:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800547a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800547c:	4a6b      	ldr	r2, [pc, #428]	; (800562c <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800547e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8005638 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8005482:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005484:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8005486:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005488:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800548a:	42ac      	cmp	r4, r5
 800548c:	f040 80b4 	bne.w	80055f8 <HAL_GPIO_Init+0x18c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005490:	684c      	ldr	r4, [r1, #4]
 8005492:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005496:	2603      	movs	r6, #3
 8005498:	f024 0c10 	bic.w	ip, r4, #16
 800549c:	fa06 f60e 	lsl.w	r6, r6, lr
 80054a0:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 80054a4:	43f6      	mvns	r6, r6
 80054a6:	2f01      	cmp	r7, #1
 80054a8:	d811      	bhi.n	80054ce <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 80054aa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054ac:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80054b0:	68cf      	ldr	r7, [r1, #12]
 80054b2:	fa07 f70e 	lsl.w	r7, r7, lr
 80054b6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80054ba:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80054bc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054be:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80054c2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80054c6:	409f      	lsls	r7, r3
 80054c8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80054cc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80054ce:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054d0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80054d4:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80054d8:	688f      	ldr	r7, [r1, #8]
 80054da:	fa07 f70e 	lsl.w	r7, r7, lr
 80054de:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 80054e2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054e4:	d116      	bne.n	8005514 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 80054e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054ea:	f003 0b07 	and.w	fp, r3, #7
 80054ee:	f04f 0c0f 	mov.w	ip, #15
 80054f2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80054f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80054fa:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054fe:	fa0c fc0b 	lsl.w	ip, ip, fp
 8005502:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005506:	690f      	ldr	r7, [r1, #16]
 8005508:	fa07 f70b 	lsl.w	r7, r7, fp
 800550c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8005510:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8005514:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005516:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005518:	f004 0703 	and.w	r7, r4, #3
 800551c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8005520:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8005524:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005526:	00e6      	lsls	r6, r4, #3
 8005528:	d566      	bpl.n	80055f8 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800552a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800552e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005532:	f003 0c03 	and.w	ip, r3, #3
 8005536:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553a:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800553e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005542:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005546:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 800554a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800554e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8005552:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8005556:	9603      	str	r6, [sp, #12]
 8005558:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800555a:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 800555e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005562:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005566:	4e32      	ldr	r6, [pc, #200]	; (8005630 <HAL_GPIO_Init+0x1c4>)
 8005568:	42b0      	cmp	r0, r6
 800556a:	d04c      	beq.n	8005606 <HAL_GPIO_Init+0x19a>
 800556c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005570:	42b0      	cmp	r0, r6
 8005572:	d04a      	beq.n	800560a <HAL_GPIO_Init+0x19e>
 8005574:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005578:	42b0      	cmp	r0, r6
 800557a:	d048      	beq.n	800560e <HAL_GPIO_Init+0x1a2>
 800557c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005580:	42b0      	cmp	r0, r6
 8005582:	d046      	beq.n	8005612 <HAL_GPIO_Init+0x1a6>
 8005584:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005588:	42b0      	cmp	r0, r6
 800558a:	d044      	beq.n	8005616 <HAL_GPIO_Init+0x1aa>
 800558c:	4548      	cmp	r0, r9
 800558e:	d044      	beq.n	800561a <HAL_GPIO_Init+0x1ae>
 8005590:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005594:	42b0      	cmp	r0, r6
 8005596:	d042      	beq.n	800561e <HAL_GPIO_Init+0x1b2>
 8005598:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800559c:	42b0      	cmp	r0, r6
 800559e:	d040      	beq.n	8005622 <HAL_GPIO_Init+0x1b6>
 80055a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055a4:	42b0      	cmp	r0, r6
 80055a6:	d03e      	beq.n	8005626 <HAL_GPIO_Init+0x1ba>
 80055a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80055ac:	42b0      	cmp	r0, r6
 80055ae:	bf14      	ite	ne
 80055b0:	260a      	movne	r6, #10
 80055b2:	2609      	moveq	r6, #9
 80055b4:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055b8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80055bc:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80055c0:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80055c2:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 80055c6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80055c8:	bf0c      	ite	eq
 80055ca:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80055cc:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055ce:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80055d2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80055d4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80055d6:	bf0c      	ite	eq
 80055d8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80055da:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055dc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80055e0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80055e2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80055e4:	bf0c      	ite	eq
 80055e6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80055e8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055ea:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80055ec:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80055ee:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80055f0:	bf54      	ite	pl
 80055f2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80055f4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80055f6:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055f8:	3301      	adds	r3, #1
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	f47f af41 	bne.w	8005482 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8005600:	b005      	add	sp, #20
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005606:	2600      	movs	r6, #0
 8005608:	e7d4      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 800560a:	2601      	movs	r6, #1
 800560c:	e7d2      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 800560e:	2602      	movs	r6, #2
 8005610:	e7d0      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 8005612:	2603      	movs	r6, #3
 8005614:	e7ce      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 8005616:	2604      	movs	r6, #4
 8005618:	e7cc      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 800561a:	2605      	movs	r6, #5
 800561c:	e7ca      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 800561e:	2606      	movs	r6, #6
 8005620:	e7c8      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 8005622:	2607      	movs	r6, #7
 8005624:	e7c6      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 8005626:	2608      	movs	r6, #8
 8005628:	e7c4      	b.n	80055b4 <HAL_GPIO_Init+0x148>
 800562a:	bf00      	nop
 800562c:	40013c00 	.word	0x40013c00
 8005630:	40020000 	.word	0x40020000
 8005634:	40023800 	.word	0x40023800
 8005638:	40021400 	.word	0x40021400

0800563c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800563c:	b10a      	cbz	r2, 8005642 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800563e:	6181      	str	r1, [r0, #24]
  }
}
 8005640:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005642:	0409      	lsls	r1, r1, #16
 8005644:	e7fb      	b.n	800563e <HAL_GPIO_WritePin+0x2>

08005646 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005646:	6803      	ldr	r3, [r0, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	0791      	lsls	r1, r2, #30
 800564c:	d501      	bpl.n	8005652 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	07d2      	lsls	r2, r2, #31
 8005656:	d403      	bmi.n	8005660 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	619a      	str	r2, [r3, #24]
  }
}
 8005660:	4770      	bx	lr
	...

08005664 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005664:	b530      	push	{r4, r5, lr}
 8005666:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005668:	6804      	ldr	r4, [r0, #0]
 800566a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800566e:	6860      	ldr	r0, [r4, #4]
 8005670:	4313      	orrs	r3, r2
 8005672:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8005676:	431a      	orrs	r2, r3
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <I2C_TransferConfig+0x24>)
 800567a:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 800567e:	ea20 0003 	bic.w	r0, r0, r3
 8005682:	4302      	orrs	r2, r0
 8005684:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005686:	bd30      	pop	{r4, r5, pc}
 8005688:	03ff63ff 	.word	0x03ff63ff

0800568c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800568c:	6803      	ldr	r3, [r0, #0]
{
 800568e:	b570      	push	{r4, r5, r6, lr}
 8005690:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005692:	6998      	ldr	r0, [r3, #24]
{
 8005694:	460d      	mov	r5, r1
 8005696:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005698:	f010 0010 	ands.w	r0, r0, #16
 800569c:	d116      	bne.n	80056cc <I2C_IsAcknowledgeFailed+0x40>
}
 800569e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80056a0:	1c69      	adds	r1, r5, #1
 80056a2:	d014      	beq.n	80056ce <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a4:	f7ff fc50 	bl	8004f48 <HAL_GetTick>
 80056a8:	1b80      	subs	r0, r0, r6
 80056aa:	42a8      	cmp	r0, r5
 80056ac:	d800      	bhi.n	80056b0 <I2C_IsAcknowledgeFailed+0x24>
 80056ae:	b96d      	cbnz	r5, 80056cc <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056b2:	f043 0320 	orr.w	r3, r3, #32
 80056b6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	2320      	movs	r3, #32
 80056ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056be:	2300      	movs	r3, #0
    return HAL_ERROR;
 80056c0:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80056c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80056ca:	e7e8      	b.n	800569e <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	6999      	ldr	r1, [r3, #24]
 80056d0:	068a      	lsls	r2, r1, #26
 80056d2:	d5e5      	bpl.n	80056a0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d4:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d6:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80056d8:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056da:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056dc:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80056de:	f7ff ffb2 	bl	8005646 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	6853      	ldr	r3, [r2, #4]
 80056e6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80056ea:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80056ee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056fa:	f043 0304 	orr.w	r3, r3, #4
 80056fe:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005700:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8005704:	e7db      	b.n	80056be <I2C_IsAcknowledgeFailed+0x32>

08005706 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005706:	b570      	push	{r4, r5, r6, lr}
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	075b      	lsls	r3, r3, #29
 8005714:	d40e      	bmi.n	8005734 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005716:	4632      	mov	r2, r6
 8005718:	4629      	mov	r1, r5
 800571a:	4620      	mov	r0, r4
 800571c:	f7ff ffb6 	bl	800568c <I2C_IsAcknowledgeFailed>
 8005720:	b9f0      	cbnz	r0, 8005760 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	0691      	lsls	r1, r2, #26
 8005728:	d51c      	bpl.n	8005764 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	0752      	lsls	r2, r2, #29
 800572e:	d503      	bpl.n	8005738 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8005730:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005732:	b10a      	cbz	r2, 8005738 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8005734:	2000      	movs	r0, #0
}
 8005736:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005738:	2120      	movs	r1, #32
 800573a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005742:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005746:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005750:	2300      	movs	r3, #0
 8005752:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005754:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800575c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005760:	2001      	movs	r0, #1
 8005762:	e7e8      	b.n	8005736 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005764:	f7ff fbf0 	bl	8004f48 <HAL_GetTick>
 8005768:	1b80      	subs	r0, r0, r6
 800576a:	42a8      	cmp	r0, r5
 800576c:	d801      	bhi.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800576e:	2d00      	cmp	r5, #0
 8005770:	d1cd      	bne.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005772:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005774:	f043 0320 	orr.w	r3, r3, #32
 8005778:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800577a:	2320      	movs	r3, #32
 800577c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8005780:	2300      	movs	r3, #0
 8005782:	e7eb      	b.n	800575c <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08005784 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4604      	mov	r4, r0
 8005788:	460d      	mov	r5, r1
 800578a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	069b      	lsls	r3, r3, #26
 8005792:	d501      	bpl.n	8005798 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005794:	2000      	movs	r0, #0
}
 8005796:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005798:	4632      	mov	r2, r6
 800579a:	4629      	mov	r1, r5
 800579c:	4620      	mov	r0, r4
 800579e:	f7ff ff75 	bl	800568c <I2C_IsAcknowledgeFailed>
 80057a2:	b990      	cbnz	r0, 80057ca <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a4:	f7ff fbd0 	bl	8004f48 <HAL_GetTick>
 80057a8:	1b80      	subs	r0, r0, r6
 80057aa:	42a8      	cmp	r0, r5
 80057ac:	d801      	bhi.n	80057b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	d1ec      	bne.n	800578c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057b4:	f043 0320 	orr.w	r3, r3, #32
 80057b8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057ba:	2320      	movs	r3, #32
 80057bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80057c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80057ca:	2001      	movs	r0, #1
 80057cc:	e7e3      	b.n	8005796 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080057ce <I2C_WaitOnFlagUntilTimeout>:
{
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	9f06      	ldr	r7, [sp, #24]
 80057d4:	4604      	mov	r4, r0
 80057d6:	4688      	mov	r8, r1
 80057d8:	4616      	mov	r6, r2
 80057da:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	6993      	ldr	r3, [r2, #24]
 80057e0:	ea38 0303 	bics.w	r3, r8, r3
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	42b3      	cmp	r3, r6
 80057ec:	d001      	beq.n	80057f2 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80057ee:	2000      	movs	r0, #0
 80057f0:	e015      	b.n	800581e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80057f2:	1c6b      	adds	r3, r5, #1
 80057f4:	d0f3      	beq.n	80057de <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7ff fba7 	bl	8004f48 <HAL_GetTick>
 80057fa:	1bc0      	subs	r0, r0, r7
 80057fc:	42a8      	cmp	r0, r5
 80057fe:	d801      	bhi.n	8005804 <I2C_WaitOnFlagUntilTimeout+0x36>
 8005800:	2d00      	cmp	r5, #0
 8005802:	d1eb      	bne.n	80057dc <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005804:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8005806:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005808:	f043 0320 	orr.w	r3, r3, #32
 800580c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800580e:	2320      	movs	r3, #32
 8005810:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005814:	2300      	movs	r3, #0
 8005816:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800581a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005822 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005822:	b570      	push	{r4, r5, r6, lr}
 8005824:	4604      	mov	r4, r0
 8005826:	460d      	mov	r5, r1
 8005828:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	079b      	lsls	r3, r3, #30
 8005830:	d501      	bpl.n	8005836 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005832:	2000      	movs	r0, #0
}
 8005834:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005836:	4632      	mov	r2, r6
 8005838:	4629      	mov	r1, r5
 800583a:	4620      	mov	r0, r4
 800583c:	f7ff ff26 	bl	800568c <I2C_IsAcknowledgeFailed>
 8005840:	b9a0      	cbnz	r0, 800586c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005842:	1c6a      	adds	r2, r5, #1
 8005844:	d0f1      	beq.n	800582a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005846:	f7ff fb7f 	bl	8004f48 <HAL_GetTick>
 800584a:	1b80      	subs	r0, r0, r6
 800584c:	42a8      	cmp	r0, r5
 800584e:	d801      	bhi.n	8005854 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005850:	2d00      	cmp	r5, #0
 8005852:	d1ea      	bne.n	800582a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005854:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005856:	f043 0320 	orr.w	r3, r3, #32
 800585a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800585c:	2320      	movs	r3, #32
 800585e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	2300      	movs	r3, #0
 8005864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005868:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800586c:	2001      	movs	r0, #1
 800586e:	e7e1      	b.n	8005834 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08005870 <HAL_I2C_Init>:
{
 8005870:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005872:	4604      	mov	r4, r0
 8005874:	2800      	cmp	r0, #0
 8005876:	d04a      	beq.n	800590e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005878:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800587c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005880:	b91b      	cbnz	r3, 800588a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005882:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005886:	f7fe fc73 	bl	8004170 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800588a:	2324      	movs	r3, #36	; 0x24
 800588c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800589a:	6862      	ldr	r2, [r4, #4]
 800589c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058a0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058a8:	609a      	str	r2, [r3, #8]
 80058aa:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058ae:	2901      	cmp	r1, #1
 80058b0:	d124      	bne.n	80058fc <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058b6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058b8:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ba:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058bc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80058c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058cc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80058ce:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	69a1      	ldr	r1, [r4, #24]
 80058d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80058da:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058dc:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80058ec:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ee:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058f4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80058fa:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005900:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005902:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005904:	d1d8      	bne.n	80058b8 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800590a:	605a      	str	r2, [r3, #4]
 800590c:	e7d4      	b.n	80058b8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800590e:	2001      	movs	r0, #1
 8005910:	e7f3      	b.n	80058fa <HAL_I2C_Init+0x8a>
	...

08005914 <HAL_I2C_Master_Transmit>:
{
 8005914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005918:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800591a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800591e:	4604      	mov	r4, r0
 8005920:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005922:	2b20      	cmp	r3, #32
{
 8005924:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005926:	f040 8082 	bne.w	8005a2e <HAL_I2C_Master_Transmit+0x11a>
    __HAL_LOCK(hi2c);
 800592a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800592e:	2b01      	cmp	r3, #1
 8005930:	d07d      	beq.n	8005a2e <HAL_I2C_Master_Transmit+0x11a>
 8005932:	2701      	movs	r7, #1
 8005934:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005938:	f7ff fb06 	bl	8004f48 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800593c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800593e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005940:	9000      	str	r0, [sp, #0]
 8005942:	463a      	mov	r2, r7
 8005944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005948:	4620      	mov	r0, r4
 800594a:	f7ff ff40 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 800594e:	b118      	cbz	r0, 8005958 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8005950:	2001      	movs	r0, #1
}
 8005952:	b003      	add	sp, #12
 8005954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005958:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800595a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800595e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005960:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005964:	2310      	movs	r3, #16
 8005966:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800596a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800596c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005970:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005972:	2bff      	cmp	r3, #255	; 0xff
 8005974:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <HAL_I2C_Master_Transmit+0x120>)
 8005976:	d926      	bls.n	80059c6 <HAL_I2C_Master_Transmit+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005978:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800597a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800597c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800597e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005982:	4631      	mov	r1, r6
 8005984:	4620      	mov	r0, r4
 8005986:	f7ff fe6d 	bl	8005664 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800598a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598c:	462a      	mov	r2, r5
 800598e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005990:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8005992:	b29b      	uxth	r3, r3
 8005994:	b9fb      	cbnz	r3, 80059d6 <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005996:	f7ff fef5 	bl	8005784 <I2C_WaitOnSTOPFlagUntilTimeout>
 800599a:	2800      	cmp	r0, #0
 800599c:	d1d8      	bne.n	8005950 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	2120      	movs	r1, #32
 80059a2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80059aa:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80059ae:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80059bc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80059c4:	e7c5      	b.n	8005952 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80059c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80059c8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80059ca:	b292      	uxth	r2, r2
 80059cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	e7d5      	b.n	8005982 <HAL_I2C_Master_Transmit+0x6e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d6:	f7ff ff24 	bl	8005822 <I2C_WaitOnTXISFlagUntilTimeout>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d1b8      	bne.n	8005950 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80059e6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80059e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80059ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80059ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80059ee:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80059f0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80059f2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80059f4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80059f6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80059fa:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0c3      	beq.n	800598a <HAL_I2C_Master_Transmit+0x76>
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	d1c1      	bne.n	800598a <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a06:	9500      	str	r5, [sp, #0]
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f7ff fede 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d19c      	bne.n	8005950 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a18:	2bff      	cmp	r3, #255	; 0xff
 8005a1a:	d903      	bls.n	8005a24 <HAL_I2C_Master_Transmit+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a1c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a1e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a20:	8522      	strh	r2, [r4, #40]	; 0x28
 8005a22:	e7ac      	b.n	800597e <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8005a24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a26:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005a28:	b292      	uxth	r2, r2
 8005a2a:	8522      	strh	r2, [r4, #40]	; 0x28
 8005a2c:	e7cf      	b.n	80059ce <HAL_I2C_Master_Transmit+0xba>
    return HAL_BUSY;
 8005a2e:	2002      	movs	r0, #2
 8005a30:	e78f      	b.n	8005952 <HAL_I2C_Master_Transmit+0x3e>
 8005a32:	bf00      	nop
 8005a34:	80002000 	.word	0x80002000

08005a38 <HAL_I2C_Master_Receive>:
{
 8005a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a3c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8005a42:	4604      	mov	r4, r0
 8005a44:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a46:	2b20      	cmp	r3, #32
{
 8005a48:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a4a:	f040 8083 	bne.w	8005b54 <HAL_I2C_Master_Receive+0x11c>
    __HAL_LOCK(hi2c);
 8005a4e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d07e      	beq.n	8005b54 <HAL_I2C_Master_Receive+0x11c>
 8005a56:	2701      	movs	r7, #1
 8005a58:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005a5c:	f7ff fa74 	bl	8004f48 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a60:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8005a62:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a64:	9000      	str	r0, [sp, #0]
 8005a66:	463a      	mov	r2, r7
 8005a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f7ff feae 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 8005a72:	b118      	cbz	r0, 8005a7c <HAL_I2C_Master_Receive+0x44>
      return HAL_ERROR;
 8005a74:	2001      	movs	r0, #1
}
 8005a76:	b003      	add	sp, #12
 8005a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a7c:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8005a7e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8005a82:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8005a90:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a96:	2bff      	cmp	r3, #255	; 0xff
 8005a98:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <HAL_I2C_Master_Receive+0x120>)
 8005a9a:	d926      	bls.n	8005aea <HAL_I2C_Master_Receive+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a9c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005a9e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aa0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f7ff fddb 	bl	8005664 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005aae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ab4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	b9fb      	cbnz	r3, 8005afa <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aba:	f7ff fe63 	bl	8005784 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d1d8      	bne.n	8005a74 <HAL_I2C_Master_Receive+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	2120      	movs	r1, #32
 8005ac6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005ace:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005ad2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005adc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005ae0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ae4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005ae8:	e7c5      	b.n	8005a76 <HAL_I2C_Master_Receive+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8005aea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005aec:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005aee:	b292      	uxth	r2, r2
 8005af0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	e7d5      	b.n	8005aa6 <HAL_I2C_Master_Receive+0x6e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005afa:	f7ff fe04 	bl	8005706 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d1b8      	bne.n	8005a74 <HAL_I2C_Master_Receive+0x3c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b08:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005b0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005b0e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005b10:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005b12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b16:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005b18:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005b1a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0c2      	beq.n	8005aae <HAL_I2C_Master_Receive+0x76>
 8005b28:	2a00      	cmp	r2, #0
 8005b2a:	d1c0      	bne.n	8005aae <HAL_I2C_Master_Receive+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b2c:	9500      	str	r5, [sp, #0]
 8005b2e:	2180      	movs	r1, #128	; 0x80
 8005b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7ff fe4b 	bl	80057ce <I2C_WaitOnFlagUntilTimeout>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d19b      	bne.n	8005a74 <HAL_I2C_Master_Receive+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b3e:	2bff      	cmp	r3, #255	; 0xff
 8005b40:	d903      	bls.n	8005b4a <HAL_I2C_Master_Receive+0x112>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b42:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b44:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b46:	8522      	strh	r2, [r4, #40]	; 0x28
 8005b48:	e7ab      	b.n	8005aa2 <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8005b4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b4c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005b4e:	b292      	uxth	r2, r2
 8005b50:	8522      	strh	r2, [r4, #40]	; 0x28
 8005b52:	e7ce      	b.n	8005af2 <HAL_I2C_Master_Receive+0xba>
    return HAL_BUSY;
 8005b54:	2002      	movs	r0, #2
 8005b56:	e78e      	b.n	8005a76 <HAL_I2C_Master_Receive+0x3e>
 8005b58:	80002400 	.word	0x80002400

08005b5c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b5c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	2a20      	cmp	r2, #32
{
 8005b64:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b66:	d11d      	bne.n	8005ba4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d019      	beq.n	8005ba4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b70:	2324      	movs	r3, #36	; 0x24
 8005b72:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b76:	6803      	ldr	r3, [r0, #0]
 8005b78:	681c      	ldr	r4, [r3, #0]
 8005b7a:	f024 0401 	bic.w	r4, r4, #1
 8005b7e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b80:	681c      	ldr	r4, [r3, #0]
 8005b82:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8005b86:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b88:	681c      	ldr	r4, [r3, #0]
 8005b8a:	4321      	orrs	r1, r4
 8005b8c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b8e:	6819      	ldr	r1, [r3, #0]
 8005b90:	f041 0101 	orr.w	r1, r1, #1
 8005b94:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b96:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005b98:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005b9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005ba0:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005ba2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005ba4:	2002      	movs	r0, #2
 8005ba6:	e7fc      	b.n	8005ba2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005ba8 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ba8:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005baa:	f8d1 c000 	ldr.w	ip, [r1]
{
 8005bae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bb2:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bb4:	6804      	ldr	r4, [r0, #0]
 8005bb6:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005bb8:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bbc:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bbe:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005bc0:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005bc4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bc8:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bca:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bce:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bd2:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bd4:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005bd6:	68e0      	ldr	r0, [r4, #12]
 8005bd8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8005bdc:	4430      	add	r0, r6
 8005bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005be2:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005be4:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005be6:	68e0      	ldr	r0, [r4, #12]
 8005be8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005bec:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005bee:	6898      	ldr	r0, [r3, #8]
 8005bf0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8005bf4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005bf6:	6888      	ldr	r0, [r1, #8]
 8005bf8:	68e6      	ldr	r6, [r4, #12]
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005c00:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c02:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c04:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005c08:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c0a:	6918      	ldr	r0, [r3, #16]
 8005c0c:	f020 0007 	bic.w	r0, r0, #7
 8005c10:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c12:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005c14:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c16:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c1a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005c1e:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c22:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005c26:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005c2a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005c2e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8005c32:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c34:	6958      	ldr	r0, [r3, #20]
 8005c36:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8005c3a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005c3c:	6948      	ldr	r0, [r1, #20]
 8005c3e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005c40:	69d8      	ldr	r0, [r3, #28]
 8005c42:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8005c46:	f020 0007 	bic.w	r0, r0, #7
 8005c4a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005c4c:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8005c50:	4305      	orrs	r5, r0
 8005c52:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005c54:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c56:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005c58:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c5c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c5e:	b31e      	cbz	r6, 8005ca8 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c60:	2e01      	cmp	r6, #1
 8005c62:	d023      	beq.n	8005cac <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c64:	1eb0      	subs	r0, r6, #2
 8005c66:	2802      	cmp	r0, #2
 8005c68:	d922      	bls.n	8005cb0 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c6a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2002      	moveq	r0, #2
 8005c70:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c72:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c74:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c78:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8005c7c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c7e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c80:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c82:	4345      	muls	r5, r0
 8005c84:	4378      	muls	r0, r7
 8005c86:	3003      	adds	r0, #3
 8005c88:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005c8c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c90:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8005c94:	f020 0007 	bic.w	r0, r0, #7
 8005c98:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c9a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c9c:	58a3      	ldr	r3, [r4, r2]
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	50a3      	str	r3, [r4, r2]
}
 8005ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005ca8:	2004      	movs	r0, #4
 8005caa:	e7e2      	b.n	8005c72 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005cac:	2003      	movs	r0, #3
 8005cae:	e7e0      	b.n	8005c72 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005cb0:	2002      	movs	r0, #2
 8005cb2:	e7de      	b.n	8005c72 <LTDC_SetConfig+0xca>

08005cb4 <HAL_LTDC_Init>:
{
 8005cb4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d063      	beq.n	8005d84 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005cbc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005cc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cc4:	b91b      	cbnz	r3, 8005cce <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005cc6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005cca:	f7fe fb53 	bl	8004374 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005cdc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cde:	6999      	ldr	r1, [r3, #24]
 8005ce0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005ce4:	4302      	orrs	r2, r0
 8005ce6:	68e0      	ldr	r0, [r4, #12]
 8005ce8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cea:	6920      	ldr	r0, [r4, #16]
 8005cec:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005cee:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cf0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005cf2:	4925      	ldr	r1, [pc, #148]	; (8005d88 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cf4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	400a      	ands	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005d02:	69a0      	ldr	r0, [r4, #24]
 8005d04:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d06:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d08:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	400a      	ands	r2, r1
 8005d0e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005d16:	6a20      	ldr	r0, [r4, #32]
 8005d18:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d1c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	400a      	ands	r2, r1
 8005d22:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005d2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d2c:	4302      	orrs	r2, r0
 8005d2e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	4011      	ands	r1, r2
 8005d34:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005d3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d40:	430a      	orrs	r2, r1
 8005d42:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d46:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d4a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d4e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d52:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d56:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005d60:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d64:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6a:	f042 0206 	orr.w	r2, r2, #6
 8005d6e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d78:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d7a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d7e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005d84:	2001      	movs	r0, #1
 8005d86:	e7fc      	b.n	8005d82 <HAL_LTDC_Init+0xce>
 8005d88:	f000f800 	.word	0xf000f800

08005d8c <HAL_LTDC_ConfigLayer>:
{
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8005d8e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005d92:	4606      	mov	r6, r0
 8005d94:	468c      	mov	ip, r1
 8005d96:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f04f 0002 	mov.w	r0, #2
 8005d9e:	d01d      	beq.n	8005ddc <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005da0:	2434      	movs	r4, #52	; 0x34
 8005da2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005da4:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8005da8:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005daa:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005dae:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005db2:	3438      	adds	r4, #56	; 0x38
 8005db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc0:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	4672      	mov	r2, lr
 8005dc6:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005dc8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005dca:	f7ff feed 	bl	8005ba8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005dce:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005dd0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005dd2:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005dd4:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005dd8:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005dde <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 8005dde:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	f04f 0302 	mov.w	r3, #2
{
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8005dec:	d015      	beq.n	8005e1a <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dee:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 8005df2:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005df4:	2501      	movs	r5, #1
  pLayerCfg->Alpha = Alpha;
 8005df6:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8005df8:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 8005dfc:	18c6      	adds	r6, r0, r3
 8005dfe:	64f1      	str	r1, [r6, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005e00:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e04:	4401      	add	r1, r0
 8005e06:	f7ff fecf 	bl	8005ba8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e0a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8005e0c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e0e:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e10:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005e14:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8005e18:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	e7fc      	b.n	8005e18 <HAL_LTDC_SetAlpha+0x3a>

08005e1e <HAL_LTDC_GetState>:
  return hltdc->State;
 8005e1e:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8005e22:	4770      	bx	lr

08005e24 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005e26:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e2a:	4c19      	ldr	r4, [pc, #100]	; (8005e90 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e42:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e44:	f7ff f880 	bl	8004f48 <HAL_GetTick>
 8005e48:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	03da      	lsls	r2, r3, #15
 8005e4e:	d50c      	bpl.n	8005e6a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e56:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e58:	f7ff f876 	bl	8004f48 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e5c:	4c0c      	ldr	r4, [pc, #48]	; (8005e90 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8005e5e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	039b      	lsls	r3, r3, #14
 8005e64:	d50a      	bpl.n	8005e7c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005e66:	2000      	movs	r0, #0
 8005e68:	e006      	b.n	8005e78 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e6a:	f7ff f86d 	bl	8004f48 <HAL_GetTick>
 8005e6e:	1b40      	subs	r0, r0, r5
 8005e70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005e74:	d9e9      	bls.n	8005e4a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005e76:	2003      	movs	r0, #3
}
 8005e78:	b003      	add	sp, #12
 8005e7a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e7c:	f7ff f864 	bl	8004f48 <HAL_GetTick>
 8005e80:	1b40      	subs	r0, r0, r5
 8005e82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005e86:	d9eb      	bls.n	8005e60 <HAL_PWREx_EnableOverDrive+0x3c>
 8005e88:	e7f5      	b.n	8005e76 <HAL_PWREx_EnableOverDrive+0x52>
 8005e8a:	bf00      	nop
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40007000 	.word	0x40007000

08005e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e98:	4604      	mov	r4, r0
 8005e9a:	b908      	cbnz	r0, 8005ea0 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	e03f      	b.n	8005f20 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea0:	6803      	ldr	r3, [r0, #0]
 8005ea2:	07d8      	lsls	r0, r3, #31
 8005ea4:	d410      	bmi.n	8005ec8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	0799      	lsls	r1, r3, #30
 8005eaa:	d460      	bmi.n	8005f6e <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	0719      	lsls	r1, r3, #28
 8005eb0:	f100 80a5 	bmi.w	8005ffe <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	075a      	lsls	r2, r3, #29
 8005eb8:	f100 80c6 	bmi.w	8006048 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ebc:	69a0      	ldr	r0, [r4, #24]
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f040 8130 	bne.w	8006124 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	e02b      	b.n	8005f20 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ec8:	4b94      	ldr	r3, [pc, #592]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	f002 020c 	and.w	r2, r2, #12
 8005ed0:	2a04      	cmp	r2, #4
 8005ed2:	d007      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	f002 020c 	and.w	r2, r2, #12
 8005eda:	2a08      	cmp	r2, #8
 8005edc:	d10a      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x60>
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	025a      	lsls	r2, r3, #9
 8005ee2:	d507      	bpl.n	8005ef4 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee4:	4b8d      	ldr	r3, [pc, #564]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	039b      	lsls	r3, r3, #14
 8005eea:	d5dc      	bpl.n	8005ea6 <HAL_RCC_OscConfig+0x12>
 8005eec:	6863      	ldr	r3, [r4, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1d9      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x12>
 8005ef2:	e7d3      	b.n	8005e9c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef4:	6863      	ldr	r3, [r4, #4]
 8005ef6:	4d89      	ldr	r5, [pc, #548]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	d113      	bne.n	8005f26 <HAL_RCC_OscConfig+0x92>
 8005efe:	682b      	ldr	r3, [r5, #0]
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f06:	f7ff f81f 	bl	8004f48 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f0a:	4d84      	ldr	r5, [pc, #528]	; (800611c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8005f0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	039f      	lsls	r7, r3, #14
 8005f12:	d4c8      	bmi.n	8005ea6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f14:	f7ff f818 	bl	8004f48 <HAL_GetTick>
 8005f18:	1b80      	subs	r0, r0, r6
 8005f1a:	2864      	cmp	r0, #100	; 0x64
 8005f1c:	d9f7      	bls.n	8005f0e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8005f1e:	2003      	movs	r0, #3
}
 8005f20:	b002      	add	sp, #8
 8005f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f26:	b99b      	cbnz	r3, 8005f50 <HAL_RCC_OscConfig+0xbc>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2e:	602b      	str	r3, [r5, #0]
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f36:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f38:	f7ff f806 	bl	8004f48 <HAL_GetTick>
 8005f3c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3e:	682b      	ldr	r3, [r5, #0]
 8005f40:	0398      	lsls	r0, r3, #14
 8005f42:	d5b0      	bpl.n	8005ea6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f44:	f7ff f800 	bl	8004f48 <HAL_GetTick>
 8005f48:	1b80      	subs	r0, r0, r6
 8005f4a:	2864      	cmp	r0, #100	; 0x64
 8005f4c:	d9f7      	bls.n	8005f3e <HAL_RCC_OscConfig+0xaa>
 8005f4e:	e7e6      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	d103      	bne.n	8005f60 <HAL_RCC_OscConfig+0xcc>
 8005f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	e7ce      	b.n	8005efe <HAL_RCC_OscConfig+0x6a>
 8005f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f64:	602b      	str	r3, [r5, #0]
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f6c:	e7ca      	b.n	8005f04 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f6e:	4b6b      	ldr	r3, [pc, #428]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	f012 0f0c 	tst.w	r2, #12
 8005f76:	d007      	beq.n	8005f88 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	f002 020c 	and.w	r2, r2, #12
 8005f7e:	2a08      	cmp	r2, #8
 8005f80:	d111      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x112>
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	0259      	lsls	r1, r3, #9
 8005f86:	d40e      	bmi.n	8005fa6 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f88:	4b64      	ldr	r3, [pc, #400]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	0792      	lsls	r2, r2, #30
 8005f8e:	d502      	bpl.n	8005f96 <HAL_RCC_OscConfig+0x102>
 8005f90:	68e2      	ldr	r2, [r4, #12]
 8005f92:	2a01      	cmp	r2, #1
 8005f94:	d182      	bne.n	8005e9c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	6921      	ldr	r1, [r4, #16]
 8005f9a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005f9e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005fa2:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fa4:	e782      	b.n	8005eac <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fa6:	68e3      	ldr	r3, [r4, #12]
 8005fa8:	4d5c      	ldr	r5, [pc, #368]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8005faa:	b1bb      	cbz	r3, 8005fdc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005fb4:	f7fe ffc8 	bl	8004f48 <HAL_GetTick>
 8005fb8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fba:	682b      	ldr	r3, [r5, #0]
 8005fbc:	079f      	lsls	r7, r3, #30
 8005fbe:	d507      	bpl.n	8005fd0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	6922      	ldr	r2, [r4, #16]
 8005fc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005fc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	e76d      	b.n	8005eac <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd0:	f7fe ffba 	bl	8004f48 <HAL_GetTick>
 8005fd4:	1b80      	subs	r0, r0, r6
 8005fd6:	2802      	cmp	r0, #2
 8005fd8:	d9ef      	bls.n	8005fba <HAL_RCC_OscConfig+0x126>
 8005fda:	e7a0      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005fe4:	f7fe ffb0 	bl	8004f48 <HAL_GetTick>
 8005fe8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	0798      	lsls	r0, r3, #30
 8005fee:	f57f af5d 	bpl.w	8005eac <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff2:	f7fe ffa9 	bl	8004f48 <HAL_GetTick>
 8005ff6:	1b80      	subs	r0, r0, r6
 8005ff8:	2802      	cmp	r0, #2
 8005ffa:	d9f6      	bls.n	8005fea <HAL_RCC_OscConfig+0x156>
 8005ffc:	e78f      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ffe:	6963      	ldr	r3, [r4, #20]
 8006000:	4d46      	ldr	r5, [pc, #280]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8006002:	b183      	cbz	r3, 8006026 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8006004:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800600c:	f7fe ff9c 	bl	8004f48 <HAL_GetTick>
 8006010:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006012:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006014:	079b      	lsls	r3, r3, #30
 8006016:	f53f af4d 	bmi.w	8005eb4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800601a:	f7fe ff95 	bl	8004f48 <HAL_GetTick>
 800601e:	1b80      	subs	r0, r0, r6
 8006020:	2802      	cmp	r0, #2
 8006022:	d9f6      	bls.n	8006012 <HAL_RCC_OscConfig+0x17e>
 8006024:	e77b      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8006026:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800602e:	f7fe ff8b 	bl	8004f48 <HAL_GetTick>
 8006032:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006034:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006036:	079f      	lsls	r7, r3, #30
 8006038:	f57f af3c 	bpl.w	8005eb4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800603c:	f7fe ff84 	bl	8004f48 <HAL_GetTick>
 8006040:	1b80      	subs	r0, r0, r6
 8006042:	2802      	cmp	r0, #2
 8006044:	d9f6      	bls.n	8006034 <HAL_RCC_OscConfig+0x1a0>
 8006046:	e76a      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006048:	4b34      	ldr	r3, [pc, #208]	; (800611c <HAL_RCC_OscConfig+0x288>)
 800604a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800604c:	00d0      	lsls	r0, r2, #3
 800604e:	d427      	bmi.n	80060a0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8006052:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006054:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006064:	4d2e      	ldr	r5, [pc, #184]	; (8006120 <HAL_RCC_OscConfig+0x28c>)
 8006066:	682b      	ldr	r3, [r5, #0]
 8006068:	05d9      	lsls	r1, r3, #23
 800606a:	d51b      	bpl.n	80060a4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800606c:	68a3      	ldr	r3, [r4, #8]
 800606e:	4d2b      	ldr	r5, [pc, #172]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8006070:	2b01      	cmp	r3, #1
 8006072:	d127      	bne.n	80060c4 <HAL_RCC_OscConfig+0x230>
 8006074:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006080:	f7fe ff62 	bl	8004f48 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006084:	4f25      	ldr	r7, [pc, #148]	; (800611c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8006086:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800608a:	079b      	lsls	r3, r3, #30
 800608c:	d53f      	bpl.n	800610e <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800608e:	2e00      	cmp	r6, #0
 8006090:	f43f af14 	beq.w	8005ebc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006094:	4a21      	ldr	r2, [pc, #132]	; (800611c <HAL_RCC_OscConfig+0x288>)
 8006096:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609c:	6413      	str	r3, [r2, #64]	; 0x40
 800609e:	e70d      	b.n	8005ebc <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 80060a0:	2600      	movs	r6, #0
 80060a2:	e7df      	b.n	8006064 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80060ac:	f7fe ff4c 	bl	8004f48 <HAL_GetTick>
 80060b0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	05da      	lsls	r2, r3, #23
 80060b6:	d4d9      	bmi.n	800606c <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b8:	f7fe ff46 	bl	8004f48 <HAL_GetTick>
 80060bc:	1bc0      	subs	r0, r0, r7
 80060be:	2864      	cmp	r0, #100	; 0x64
 80060c0:	d9f7      	bls.n	80060b2 <HAL_RCC_OscConfig+0x21e>
 80060c2:	e72c      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060c4:	b9ab      	cbnz	r3, 80060f2 <HAL_RCC_OscConfig+0x25e>
 80060c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	672b      	str	r3, [r5, #112]	; 0x70
 80060d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80060d4:	f023 0304 	bic.w	r3, r3, #4
 80060d8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80060da:	f7fe ff35 	bl	8004f48 <HAL_GetTick>
 80060de:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80060e2:	0798      	lsls	r0, r3, #30
 80060e4:	d5d3      	bpl.n	800608e <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e6:	f7fe ff2f 	bl	8004f48 <HAL_GetTick>
 80060ea:	1bc0      	subs	r0, r0, r7
 80060ec:	4540      	cmp	r0, r8
 80060ee:	d9f7      	bls.n	80060e0 <HAL_RCC_OscConfig+0x24c>
 80060f0:	e715      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80060f6:	d103      	bne.n	8006100 <HAL_RCC_OscConfig+0x26c>
 80060f8:	f043 0304 	orr.w	r3, r3, #4
 80060fc:	672b      	str	r3, [r5, #112]	; 0x70
 80060fe:	e7b9      	b.n	8006074 <HAL_RCC_OscConfig+0x1e0>
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	672b      	str	r3, [r5, #112]	; 0x70
 8006106:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006108:	f023 0304 	bic.w	r3, r3, #4
 800610c:	e7b5      	b.n	800607a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610e:	f7fe ff1b 	bl	8004f48 <HAL_GetTick>
 8006112:	eba0 0008 	sub.w	r0, r0, r8
 8006116:	42a8      	cmp	r0, r5
 8006118:	d9b6      	bls.n	8006088 <HAL_RCC_OscConfig+0x1f4>
 800611a:	e700      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
 800611c:	40023800 	.word	0x40023800
 8006120:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006124:	4d38      	ldr	r5, [pc, #224]	; (8006208 <HAL_RCC_OscConfig+0x374>)
 8006126:	68ab      	ldr	r3, [r5, #8]
 8006128:	f003 030c 	and.w	r3, r3, #12
 800612c:	2b08      	cmp	r3, #8
 800612e:	d041      	beq.n	80061b4 <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8006130:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006132:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006138:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800613a:	d12e      	bne.n	800619a <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 800613c:	f7fe ff04 	bl	8004f48 <HAL_GetTick>
 8006140:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006142:	682b      	ldr	r3, [r5, #0]
 8006144:	0199      	lsls	r1, r3, #6
 8006146:	d422      	bmi.n	800618e <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006148:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800614c:	4313      	orrs	r3, r2
 800614e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006154:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006158:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800615a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800615e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006160:	4c29      	ldr	r4, [pc, #164]	; (8006208 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006162:	0852      	lsrs	r2, r2, #1
 8006164:	3a01      	subs	r2, #1
 8006166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800616a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006172:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006174:	f7fe fee8 	bl	8004f48 <HAL_GetTick>
 8006178:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	019a      	lsls	r2, r3, #6
 800617e:	f53f aea1 	bmi.w	8005ec4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006182:	f7fe fee1 	bl	8004f48 <HAL_GetTick>
 8006186:	1b40      	subs	r0, r0, r5
 8006188:	2802      	cmp	r0, #2
 800618a:	d9f6      	bls.n	800617a <HAL_RCC_OscConfig+0x2e6>
 800618c:	e6c7      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618e:	f7fe fedb 	bl	8004f48 <HAL_GetTick>
 8006192:	1b80      	subs	r0, r0, r6
 8006194:	2802      	cmp	r0, #2
 8006196:	d9d4      	bls.n	8006142 <HAL_RCC_OscConfig+0x2ae>
 8006198:	e6c1      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 800619a:	f7fe fed5 	bl	8004f48 <HAL_GetTick>
 800619e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	019b      	lsls	r3, r3, #6
 80061a4:	f57f ae8e 	bpl.w	8005ec4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a8:	f7fe fece 	bl	8004f48 <HAL_GetTick>
 80061ac:	1b00      	subs	r0, r0, r4
 80061ae:	2802      	cmp	r0, #2
 80061b0:	d9f6      	bls.n	80061a0 <HAL_RCC_OscConfig+0x30c>
 80061b2:	e6b4      	b.n	8005f1e <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b4:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80061b6:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b8:	f43f aeb2 	beq.w	8005f20 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c0:	69e1      	ldr	r1, [r4, #28]
 80061c2:	428a      	cmp	r2, r1
 80061c4:	f47f ae6a 	bne.w	8005e9c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061cc:	6a21      	ldr	r1, [r4, #32]
 80061ce:	428a      	cmp	r2, r1
 80061d0:	f47f ae64 	bne.w	8005e9c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061d4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061da:	401a      	ands	r2, r3
 80061dc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80061e0:	f47f ae5c 	bne.w	8005e9c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80061e6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80061ea:	0852      	lsrs	r2, r2, #1
 80061ec:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ee:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80061f2:	f47f ae53 	bne.w	8005e9c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80061f8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061fc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8006200:	bf14      	ite	ne
 8006202:	2001      	movne	r0, #1
 8006204:	2000      	moveq	r0, #0
 8006206:	e68b      	b.n	8005f20 <HAL_RCC_OscConfig+0x8c>
 8006208:	40023800 	.word	0x40023800

0800620c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800620c:	4913      	ldr	r1, [pc, #76]	; (800625c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800620e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006210:	688b      	ldr	r3, [r1, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	2b04      	cmp	r3, #4
 8006218:	d003      	beq.n	8006222 <HAL_RCC_GetSysClockFreq+0x16>
 800621a:	2b08      	cmp	r3, #8
 800621c:	d003      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800621e:	4810      	ldr	r0, [pc, #64]	; (8006260 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8006220:	e000      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8006222:	4810      	ldr	r0, [pc, #64]	; (8006264 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8006224:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006226:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006228:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800622a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800622c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006230:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006234:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006238:	bf1a      	itte	ne
 800623a:	480a      	ldrne	r0, [pc, #40]	; (8006264 <HAL_RCC_GetSysClockFreq+0x58>)
 800623c:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800623e:	4808      	ldreq	r0, [pc, #32]	; (8006260 <HAL_RCC_GetSysClockFreq+0x54>)
 8006240:	fba1 0100 	umull	r0, r1, r1, r0
 8006244:	f7fa fd5c 	bl	8000d00 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <HAL_RCC_GetSysClockFreq+0x50>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006250:	3301      	adds	r3, #1
 8006252:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8006254:	fbb0 f0f3 	udiv	r0, r0, r3
 8006258:	e7e4      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x18>
 800625a:	bf00      	nop
 800625c:	40023800 	.word	0x40023800
 8006260:	00f42400 	.word	0x00f42400
 8006264:	017d7840 	.word	0x017d7840

08006268 <HAL_RCC_ClockConfig>:
{
 8006268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800626e:	4604      	mov	r4, r0
 8006270:	b910      	cbnz	r0, 8006278 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006272:	2001      	movs	r0, #1
}
 8006274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006278:	4a45      	ldr	r2, [pc, #276]	; (8006390 <HAL_RCC_ClockConfig+0x128>)
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	428b      	cmp	r3, r1
 8006282:	d328      	bcc.n	80062d6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006284:	6821      	ldr	r1, [r4, #0]
 8006286:	078f      	lsls	r7, r1, #30
 8006288:	d430      	bmi.n	80062ec <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800628a:	07c8      	lsls	r0, r1, #31
 800628c:	d443      	bmi.n	8006316 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800628e:	4a40      	ldr	r2, [pc, #256]	; (8006390 <HAL_RCC_ClockConfig+0x128>)
 8006290:	6813      	ldr	r3, [r2, #0]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	42ab      	cmp	r3, r5
 8006298:	d866      	bhi.n	8006368 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	0751      	lsls	r1, r2, #29
 800629e:	d46f      	bmi.n	8006380 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a0:	0713      	lsls	r3, r2, #28
 80062a2:	d507      	bpl.n	80062b4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062a4:	4a3b      	ldr	r2, [pc, #236]	; (8006394 <HAL_RCC_ClockConfig+0x12c>)
 80062a6:	6921      	ldr	r1, [r4, #16]
 80062a8:	6893      	ldr	r3, [r2, #8]
 80062aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80062ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80062b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062b4:	f7ff ffaa 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80062b8:	4b36      	ldr	r3, [pc, #216]	; (8006394 <HAL_RCC_ClockConfig+0x12c>)
 80062ba:	4a37      	ldr	r2, [pc, #220]	; (8006398 <HAL_RCC_ClockConfig+0x130>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80062c2:	5cd3      	ldrb	r3, [r2, r3]
 80062c4:	40d8      	lsrs	r0, r3
 80062c6:	4b35      	ldr	r3, [pc, #212]	; (800639c <HAL_RCC_ClockConfig+0x134>)
 80062c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80062ca:	4b35      	ldr	r3, [pc, #212]	; (80063a0 <HAL_RCC_ClockConfig+0x138>)
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	f7fe fdf5 	bl	8004ebc <HAL_InitTick>
  return HAL_OK;
 80062d2:	2000      	movs	r0, #0
 80062d4:	e7ce      	b.n	8006274 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	6813      	ldr	r3, [r2, #0]
 80062d8:	f023 030f 	bic.w	r3, r3, #15
 80062dc:	430b      	orrs	r3, r1
 80062de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e0:	6813      	ldr	r3, [r2, #0]
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	428b      	cmp	r3, r1
 80062e8:	d1c3      	bne.n	8006272 <HAL_RCC_ClockConfig+0xa>
 80062ea:	e7cb      	b.n	8006284 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ec:	f011 0f04 	tst.w	r1, #4
 80062f0:	4b28      	ldr	r3, [pc, #160]	; (8006394 <HAL_RCC_ClockConfig+0x12c>)
 80062f2:	d003      	beq.n	80062fc <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80062fa:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fc:	070e      	lsls	r6, r1, #28
 80062fe:	d503      	bpl.n	8006308 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8006306:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	68a0      	ldr	r0, [r4, #8]
 800630c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006310:	4302      	orrs	r2, r0
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	e7b9      	b.n	800628a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006316:	6861      	ldr	r1, [r4, #4]
 8006318:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <HAL_RCC_ClockConfig+0x12c>)
 800631a:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800631e:	d11b      	bne.n	8006358 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006320:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006324:	d0a5      	beq.n	8006272 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006326:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006328:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632c:	4e19      	ldr	r6, [pc, #100]	; (8006394 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800632e:	f022 0203 	bic.w	r2, r2, #3
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006336:	f7fe fe07 	bl	8004f48 <HAL_GetTick>
 800633a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633c:	68b3      	ldr	r3, [r6, #8]
 800633e:	6862      	ldr	r2, [r4, #4]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006348:	d0a1      	beq.n	800628e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800634a:	f7fe fdfd 	bl	8004f48 <HAL_GetTick>
 800634e:	1bc0      	subs	r0, r0, r7
 8006350:	4540      	cmp	r0, r8
 8006352:	d9f3      	bls.n	800633c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8006354:	2003      	movs	r0, #3
 8006356:	e78d      	b.n	8006274 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006358:	2902      	cmp	r1, #2
 800635a:	d102      	bne.n	8006362 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006360:	e7e0      	b.n	8006324 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006362:	f012 0f02 	tst.w	r2, #2
 8006366:	e7dd      	b.n	8006324 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006368:	6813      	ldr	r3, [r2, #0]
 800636a:	f023 030f 	bic.w	r3, r3, #15
 800636e:	432b      	orrs	r3, r5
 8006370:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	42ab      	cmp	r3, r5
 800637a:	f47f af7a 	bne.w	8006272 <HAL_RCC_ClockConfig+0xa>
 800637e:	e78c      	b.n	800629a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006380:	4904      	ldr	r1, [pc, #16]	; (8006394 <HAL_RCC_ClockConfig+0x12c>)
 8006382:	68e0      	ldr	r0, [r4, #12]
 8006384:	688b      	ldr	r3, [r1, #8]
 8006386:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800638a:	4303      	orrs	r3, r0
 800638c:	608b      	str	r3, [r1, #8]
 800638e:	e787      	b.n	80062a0 <HAL_RCC_ClockConfig+0x38>
 8006390:	40023c00 	.word	0x40023c00
 8006394:	40023800 	.word	0x40023800
 8006398:	080f7738 	.word	0x080f7738
 800639c:	20000004 	.word	0x20000004
 80063a0:	20000018 	.word	0x20000018

080063a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063a4:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80063a6:	4a05      	ldr	r2, [pc, #20]	; (80063bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80063ae:	5cd3      	ldrb	r3, [r2, r3]
 80063b0:	4a03      	ldr	r2, [pc, #12]	; (80063c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80063b2:	6810      	ldr	r0, [r2, #0]
}
 80063b4:	40d8      	lsrs	r0, r3
 80063b6:	4770      	bx	lr
 80063b8:	40023800 	.word	0x40023800
 80063bc:	080f7748 	.word	0x080f7748
 80063c0:	20000004 	.word	0x20000004

080063c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80063c6:	4a05      	ldr	r2, [pc, #20]	; (80063dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80063ce:	5cd3      	ldrb	r3, [r2, r3]
 80063d0:	4a03      	ldr	r2, [pc, #12]	; (80063e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80063d2:	6810      	ldr	r0, [r2, #0]
}
 80063d4:	40d8      	lsrs	r0, r3
 80063d6:	4770      	bx	lr
 80063d8:	40023800 	.word	0x40023800
 80063dc:	080f7748 	.word	0x080f7748
 80063e0:	20000004 	.word	0x20000004

080063e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063e8:	6802      	ldr	r2, [r0, #0]
{
 80063ea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063ec:	f012 0601 	ands.w	r6, r2, #1
 80063f0:	d00b      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063f2:	4bb8      	ldr	r3, [pc, #736]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063f4:	6899      	ldr	r1, [r3, #8]
 80063f6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80063fa:	6099      	str	r1, [r3, #8]
 80063fc:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80063fe:	6899      	ldr	r1, [r3, #8]
 8006400:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006402:	fab6 f686 	clz	r6, r6
 8006406:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006408:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800640a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800640e:	d012      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006410:	49b0      	ldr	r1, [pc, #704]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006412:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006414:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006418:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800641c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8006420:	bf08      	it	eq
 8006422:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006424:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006428:	bf16      	itet	ne
 800642a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800642e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006430:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006436:	02d1      	lsls	r1, r2, #11
 8006438:	d510      	bpl.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800643a:	48a6      	ldr	r0, [pc, #664]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800643c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800643e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006442:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006446:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800644a:	ea43 0301 	orr.w	r3, r3, r1
 800644e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006452:	f000 8185 	beq.w	8006760 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8006456:	2900      	cmp	r1, #0
 8006458:	bf08      	it	eq
 800645a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800645c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8006460:	bf18      	it	ne
 8006462:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006464:	0692      	lsls	r2, r2, #26
 8006466:	d531      	bpl.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006468:	4b9a      	ldr	r3, [pc, #616]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800646a:	4f9b      	ldr	r7, [pc, #620]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800646c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800646e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006472:	641a      	str	r2, [r3, #64]	; 0x40
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006484:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006486:	f7fe fd5f 	bl	8004f48 <HAL_GetTick>
 800648a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	05db      	lsls	r3, r3, #23
 8006490:	f140 8168 	bpl.w	8006764 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006494:	4f8f      	ldr	r7, [pc, #572]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006496:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006498:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800649c:	f040 816d 	bne.w	800677a <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80064a6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80064aa:	4a8a      	ldr	r2, [pc, #552]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80064ac:	f040 818b 	bne.w	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80064b0:	6891      	ldr	r1, [r2, #8]
 80064b2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80064b6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80064ba:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80064be:	4301      	orrs	r1, r0
 80064c0:	6091      	str	r1, [r2, #8]
 80064c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	06da      	lsls	r2, r3, #27
 80064d0:	d50c      	bpl.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064d2:	4a80      	ldr	r2, [pc, #512]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80064d4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80064d8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80064dc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80064e0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80064e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80064e6:	4301      	orrs	r1, r0
 80064e8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064ec:	045f      	lsls	r7, r3, #17
 80064ee:	d508      	bpl.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064f0:	4978      	ldr	r1, [pc, #480]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80064f2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80064f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80064f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80064fc:	4302      	orrs	r2, r0
 80064fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006502:	0418      	lsls	r0, r3, #16
 8006504:	d508      	bpl.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006506:	4973      	ldr	r1, [pc, #460]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006508:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800650a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800650e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006512:	4302      	orrs	r2, r0
 8006514:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006518:	03d9      	lsls	r1, r3, #15
 800651a:	d508      	bpl.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800651c:	496d      	ldr	r1, [pc, #436]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800651e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006520:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006524:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006528:	4302      	orrs	r2, r0
 800652a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800652e:	039a      	lsls	r2, r3, #14
 8006530:	d508      	bpl.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006532:	4968      	ldr	r1, [pc, #416]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006534:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006536:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800653a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800653e:	4302      	orrs	r2, r0
 8006540:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006544:	065f      	lsls	r7, r3, #25
 8006546:	d508      	bpl.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006548:	4962      	ldr	r1, [pc, #392]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800654a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800654c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006550:	f022 0203 	bic.w	r2, r2, #3
 8006554:	4302      	orrs	r2, r0
 8006556:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800655a:	0618      	lsls	r0, r3, #24
 800655c:	d508      	bpl.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800655e:	495d      	ldr	r1, [pc, #372]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006560:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006562:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006566:	f022 020c 	bic.w	r2, r2, #12
 800656a:	4302      	orrs	r2, r0
 800656c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006570:	05d9      	lsls	r1, r3, #23
 8006572:	d508      	bpl.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006574:	4957      	ldr	r1, [pc, #348]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006576:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006578:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800657c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006580:	4302      	orrs	r2, r0
 8006582:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006586:	059a      	lsls	r2, r3, #22
 8006588:	d508      	bpl.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800658a:	4952      	ldr	r1, [pc, #328]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800658c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800658e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006592:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006596:	4302      	orrs	r2, r0
 8006598:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800659c:	055f      	lsls	r7, r3, #21
 800659e:	d508      	bpl.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065a0:	494c      	ldr	r1, [pc, #304]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80065a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80065ac:	4302      	orrs	r2, r0
 80065ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80065b2:	0518      	lsls	r0, r3, #20
 80065b4:	d508      	bpl.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80065b6:	4947      	ldr	r1, [pc, #284]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80065be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065c2:	4302      	orrs	r2, r0
 80065c4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80065c8:	04d9      	lsls	r1, r3, #19
 80065ca:	d508      	bpl.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80065cc:	4941      	ldr	r1, [pc, #260]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065ce:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80065d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80065d4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80065d8:	4302      	orrs	r2, r0
 80065da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80065de:	049a      	lsls	r2, r3, #18
 80065e0:	d508      	bpl.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80065e2:	493c      	ldr	r1, [pc, #240]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065e4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80065e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80065ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80065ee:	4302      	orrs	r2, r0
 80065f0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065f4:	025f      	lsls	r7, r3, #9
 80065f6:	d508      	bpl.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065f8:	4936      	ldr	r1, [pc, #216]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065fa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80065fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006600:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006604:	4302      	orrs	r2, r0
 8006606:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800660a:	0298      	lsls	r0, r3, #10
 800660c:	d50c      	bpl.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800660e:	4831      	ldr	r0, [pc, #196]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006610:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006612:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8006616:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800661a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800661e:	bf08      	it	eq
 8006620:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006622:	430a      	orrs	r2, r1
 8006624:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8006628:	f013 0f08 	tst.w	r3, #8
 800662c:	bf18      	it	ne
 800662e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006630:	0359      	lsls	r1, r3, #13
 8006632:	d508      	bpl.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006634:	4927      	ldr	r1, [pc, #156]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006636:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006638:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800663c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006640:	4302      	orrs	r2, r0
 8006642:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	d509      	bpl.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800664a:	4922      	ldr	r1, [pc, #136]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800664c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006650:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006654:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006658:	4302      	orrs	r2, r0
 800665a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800665e:	2e01      	cmp	r6, #1
 8006660:	f000 80b5 	beq.w	80067ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006668:	f000 80b1 	beq.w	80067ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800666c:	2d01      	cmp	r5, #1
 800666e:	d175      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006670:	4d18      	ldr	r5, [pc, #96]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006672:	682b      	ldr	r3, [r5, #0]
 8006674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006678:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800667a:	f7fe fc65 	bl	8004f48 <HAL_GetTick>
 800667e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	009f      	lsls	r7, r3, #2
 8006684:	f100 8127 	bmi.w	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006688:	6821      	ldr	r1, [r4, #0]
 800668a:	030e      	lsls	r6, r1, #12
 800668c:	d501      	bpl.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800668e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006690:	b11b      	cbz	r3, 800669a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006692:	02cd      	lsls	r5, r1, #11
 8006694:	d522      	bpl.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006698:	bb03      	cbnz	r3, 80066dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800669a:	4a0e      	ldr	r2, [pc, #56]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800669c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066a0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066a8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80066ac:	4303      	orrs	r3, r0
 80066ae:	6960      	ldr	r0, [r4, #20]
 80066b0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80066b4:	69a0      	ldr	r0, [r4, #24]
 80066b6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80066ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066be:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80066c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80066c4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80066c8:	3801      	subs	r0, #1
 80066ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80066ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066d2:	e003      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80066d4:	40023800 	.word	0x40023800
 80066d8:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066dc:	0288      	lsls	r0, r1, #10
 80066de:	d515      	bpl.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x328>
 80066e0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80066e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e6:	d111      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066e8:	4a82      	ldr	r2, [pc, #520]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80066ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066ee:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80066f2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80066f6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80066fa:	4303      	orrs	r3, r0
 80066fc:	6960      	ldr	r0, [r4, #20]
 80066fe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006702:	6a20      	ldr	r0, [r4, #32]
 8006704:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800670c:	070a      	lsls	r2, r1, #28
 800670e:	d519      	bpl.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006710:	4978      	ldr	r1, [pc, #480]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006712:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006716:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800671a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800671e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006722:	4313      	orrs	r3, r2
 8006724:	6962      	ldr	r2, [r4, #20]
 8006726:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800672a:	69e2      	ldr	r2, [r4, #28]
 800672c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006734:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8006738:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800673a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006744:	4c6b      	ldr	r4, [pc, #428]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800674c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674e:	f7fe fbfb 	bl	8004f48 <HAL_GetTick>
 8006752:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	f140 80c4 	bpl.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800675c:	2000      	movs	r0, #0
 800675e:	e009      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8006760:	2601      	movs	r6, #1
 8006762:	e67b      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006764:	f7fe fbf0 	bl	8004f48 <HAL_GetTick>
 8006768:	eba0 0008 	sub.w	r0, r0, r8
 800676c:	2864      	cmp	r0, #100	; 0x64
 800676e:	f67f ae8d 	bls.w	800648c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006772:	2003      	movs	r0, #3
}
 8006774:	b003      	add	sp, #12
 8006776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800677a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800677c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006780:	429a      	cmp	r2, r3
 8006782:	f43f ae8d 	beq.w	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006788:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800678a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800678e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006792:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006794:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800679a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800679c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800679e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067a0:	07d8      	lsls	r0, r3, #31
 80067a2:	f57f ae7d 	bpl.w	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80067a6:	f7fe fbcf 	bl	8004f48 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067aa:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80067ae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067b2:	0799      	lsls	r1, r3, #30
 80067b4:	f53f ae74 	bmi.w	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b8:	f7fe fbc6 	bl	8004f48 <HAL_GetTick>
 80067bc:	eba0 0008 	sub.w	r0, r0, r8
 80067c0:	4548      	cmp	r0, r9
 80067c2:	d9f5      	bls.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80067c4:	e7d5      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067c6:	6891      	ldr	r1, [r2, #8]
 80067c8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80067cc:	e678      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80067ce:	4e49      	ldr	r6, [pc, #292]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067d6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80067d8:	f7fe fbb6 	bl	8004f48 <HAL_GetTick>
 80067dc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067de:	6833      	ldr	r3, [r6, #0]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	d472      	bmi.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	07d7      	lsls	r7, r2, #31
 80067e8:	d512      	bpl.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80067ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067ec:	b983      	cbnz	r3, 8006810 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80067ee:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067f2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80067f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067fa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80067fe:	430b      	orrs	r3, r1
 8006800:	6861      	ldr	r1, [r4, #4]
 8006802:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006806:	68a1      	ldr	r1, [r4, #8]
 8006808:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800680c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006810:	0316      	lsls	r6, r2, #12
 8006812:	d503      	bpl.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8006814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800681a:	d005      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800681c:	02d0      	lsls	r0, r2, #11
 800681e:	d51e      	bpl.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006826:	d11a      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006828:	4932      	ldr	r1, [pc, #200]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800682a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800682e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006836:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800683a:	4303      	orrs	r3, r0
 800683c:	6860      	ldr	r0, [r4, #4]
 800683e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006842:	68e0      	ldr	r0, [r4, #12]
 8006844:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006848:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800684c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006852:	f020 001f 	bic.w	r0, r0, #31
 8006856:	3b01      	subs	r3, #1
 8006858:	4303      	orrs	r3, r0
 800685a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800685e:	01d1      	lsls	r1, r2, #7
 8006860:	d511      	bpl.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006862:	4924      	ldr	r1, [pc, #144]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006864:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006868:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800686c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006870:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006874:	4303      	orrs	r3, r0
 8006876:	6860      	ldr	r0, [r4, #4]
 8006878:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800687c:	6920      	ldr	r0, [r4, #16]
 800687e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006882:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006886:	0192      	lsls	r2, r2, #6
 8006888:	d50d      	bpl.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	6862      	ldr	r2, [r4, #4]
 800688e:	041b      	lsls	r3, r3, #16
 8006890:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006894:	68e2      	ldr	r2, [r4, #12]
 8006896:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800689a:	68a2      	ldr	r2, [r4, #8]
 800689c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80068a0:	4a14      	ldr	r2, [pc, #80]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80068a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80068a6:	4e13      	ldr	r6, [pc, #76]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80068a8:	6833      	ldr	r3, [r6, #0]
 80068aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068ae:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80068b0:	f7fe fb4a 	bl	8004f48 <HAL_GetTick>
 80068b4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068b6:	6833      	ldr	r3, [r6, #0]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	f53f aed7 	bmi.w	800666c <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068be:	f7fe fb43 	bl	8004f48 <HAL_GetTick>
 80068c2:	1bc0      	subs	r0, r0, r7
 80068c4:	2864      	cmp	r0, #100	; 0x64
 80068c6:	d9f6      	bls.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068c8:	e753      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068ca:	f7fe fb3d 	bl	8004f48 <HAL_GetTick>
 80068ce:	1bc0      	subs	r0, r0, r7
 80068d0:	2864      	cmp	r0, #100	; 0x64
 80068d2:	d984      	bls.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80068d4:	e74d      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068d6:	f7fe fb37 	bl	8004f48 <HAL_GetTick>
 80068da:	1b80      	subs	r0, r0, r6
 80068dc:	2864      	cmp	r0, #100	; 0x64
 80068de:	f67f aecf 	bls.w	8006680 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80068e2:	e746      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068e4:	f7fe fb30 	bl	8004f48 <HAL_GetTick>
 80068e8:	1b40      	subs	r0, r0, r5
 80068ea:	2864      	cmp	r0, #100	; 0x64
 80068ec:	f67f af32 	bls.w	8006754 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80068f0:	e73f      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80068f2:	bf00      	nop
 80068f4:	40023800 	.word	0x40023800

080068f8 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80068f8:	4770      	bx	lr

080068fa <HAL_SDRAM_Init>:
{   
 80068fa:	b538      	push	{r3, r4, r5, lr}
 80068fc:	460d      	mov	r5, r1
  if(hsdram == NULL)
 80068fe:	4604      	mov	r4, r0
 8006900:	b1c8      	cbz	r0, 8006936 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006902:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800690a:	b91b      	cbnz	r3, 8006914 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800690c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006910:	f7ff fff2 	bl	80068f8 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006914:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006916:	1d21      	adds	r1, r4, #4
 8006918:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800691a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800691e:	f000 fd75 	bl	800740c <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	4629      	mov	r1, r5
 8006926:	6820      	ldr	r0, [r4, #0]
 8006928:	f000 fda6 	bl	8007478 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800692c:	2301      	movs	r3, #1
  return HAL_OK;
 800692e:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006930:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006934:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006936:	2001      	movs	r0, #1
 8006938:	e7fc      	b.n	8006934 <HAL_SDRAM_Init+0x3a>

0800693a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800693a:	b538      	push	{r3, r4, r5, lr}
 800693c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800693e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 8006942:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006944:	b2c0      	uxtb	r0, r0
 8006946:	2802      	cmp	r0, #2
 8006948:	d00d      	beq.n	8006966 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800694a:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800694c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800694e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006952:	f000 fdd5 	bl	8007500 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006956:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8006958:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800695a:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800695c:	bf0c      	ite	eq
 800695e:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006960:	2301      	movne	r3, #1
 8006962:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006966:	bd38      	pop	{r3, r4, r5, pc}

08006968 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006968:	b510      	push	{r4, lr}
 800696a:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800696c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8006970:	b2c0      	uxtb	r0, r0
 8006972:	2802      	cmp	r0, #2
 8006974:	d009      	beq.n	800698a <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006976:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006978:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800697a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800697e:	f000 fdd2 	bl	8007526 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006982:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8006984:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006986:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800698a:	bd10      	pop	{r4, pc}

0800698c <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800698c:	6803      	ldr	r3, [r0, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006994:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006996:	6842      	ldr	r2, [r0, #4]
 8006998:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800699c:	d10a      	bne.n	80069b4 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800699e:	6882      	ldr	r2, [r0, #8]
 80069a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80069a4:	d002      	beq.n	80069ac <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069a6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80069aa:	d103      	bne.n	80069b4 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80069b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80069ba:	d107      	bne.n	80069cc <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069cc:	2301      	movs	r3, #1
 80069ce:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069d2:	2300      	movs	r3, #0
 80069d4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80069d8:	2003      	movs	r0, #3
 80069da:	4770      	bx	lr

080069dc <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4604      	mov	r4, r0
 80069e0:	460d      	mov	r5, r1
 80069e2:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	6898      	ldr	r0, [r3, #8]
 80069e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069ec:	d100      	bne.n	80069f0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x14>
}
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 80069f0:	1c6a      	adds	r2, r5, #1
 80069f2:	d0f8      	beq.n	80069e6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80069f4:	f7fe faa8 	bl	8004f48 <HAL_GetTick>
 80069f8:	1b80      	subs	r0, r0, r6
 80069fa:	4285      	cmp	r5, r0
 80069fc:	d8f2      	bhi.n	80069e4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x8>
 80069fe:	4620      	mov	r0, r4
}
 8006a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a04:	f7ff bfc2 	b.w	800698c <SPI_WaitFifoStateUntilTimeout.part.1>

08006a08 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	4616      	mov	r6, r2
 8006a10:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 8006a12:	6829      	ldr	r1, [r5, #0]
 8006a14:	6888      	ldr	r0, [r1, #8]
 8006a16:	4020      	ands	r0, r4
 8006a18:	d100      	bne.n	8006a1c <SPI_WaitFifoStateUntilTimeout.constprop.10+0x14>
      }
    }
  }

  return HAL_OK;
}
 8006a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a1c:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8006a20:	d100      	bne.n	8006a24 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006a22:	7b0b      	ldrb	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8006a24:	1c73      	adds	r3, r6, #1
 8006a26:	d0f5      	beq.n	8006a14 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a28:	f7fe fa8e 	bl	8004f48 <HAL_GetTick>
 8006a2c:	1bc0      	subs	r0, r0, r7
 8006a2e:	4286      	cmp	r6, r0
 8006a30:	d8ef      	bhi.n	8006a12 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xa>
 8006a32:	4628      	mov	r0, r5
}
 8006a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a38:	f7ff bfa8 	b.w	800698c <SPI_WaitFifoStateUntilTimeout.part.1>

08006a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a3c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a3e:	4613      	mov	r3, r2
{
 8006a40:	460d      	mov	r5, r1
 8006a42:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a44:	460a      	mov	r2, r1
 8006a46:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8006a4a:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a4c:	f7ff ffdc 	bl	8006a08 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8006a50:	b128      	cbz	r0, 8006a5e <SPI_EndRxTxTransaction+0x22>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a52:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a54:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a56:	f043 0320 	orr.w	r3, r3, #32
 8006a5a:	6623      	str	r3, [r4, #96]	; 0x60
 8006a5c:	e00f      	b.n	8006a7e <SPI_EndRxTxTransaction+0x42>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5e:	4632      	mov	r2, r6
 8006a60:	4629      	mov	r1, r5
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff ffba 	bl	80069dc <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d1f2      	bne.n	8006a52 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a6c:	4633      	mov	r3, r6
 8006a6e:	462a      	mov	r2, r5
 8006a70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7ff ffc7 	bl	8006a08 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d1e9      	bne.n	8006a52 <SPI_EndRxTxTransaction+0x16>
  }

  return HAL_OK;
}
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}

08006a80 <HAL_SPI_Init>:
{
 8006a80:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8006a82:	4604      	mov	r4, r0
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d04a      	beq.n	8006b1e <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a8c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8006a90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006a94:	b91b      	cbnz	r3, 8006a9e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8006a96:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006a9a:	f7fd fbad 	bl	80041f8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006a9e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8006aa0:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006aa2:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006aa4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006aa8:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006aaa:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8006aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ab8:	d833      	bhi.n	8006b22 <HAL_SPI_Init+0xa2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006abe:	d000      	beq.n	8006ac2 <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ac0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006ac2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ac4:	b92b      	cbnz	r3, 8006ad2 <HAL_SPI_Init+0x52>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ac6:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006aca:	bf8c      	ite	hi
 8006acc:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006ace:	2301      	movls	r3, #1
 8006ad0:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006ad2:	69a0      	ldr	r0, [r4, #24]
 8006ad4:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8006ad8:	4333      	orrs	r3, r6
 8006ada:	6926      	ldr	r6, [r4, #16]
 8006adc:	4333      	orrs	r3, r6
 8006ade:	6966      	ldr	r6, [r4, #20]
 8006ae0:	4333      	orrs	r3, r6
 8006ae2:	69e6      	ldr	r6, [r4, #28]
 8006ae4:	4333      	orrs	r3, r6
 8006ae6:	6a26      	ldr	r6, [r4, #32]
 8006ae8:	4333      	orrs	r3, r6
 8006aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006aec:	4333      	orrs	r3, r6
 8006aee:	f400 7600 	and.w	r6, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006af2:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006af4:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006af6:	f000 0004 	and.w	r0, r0, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006afa:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006afe:	432b      	orrs	r3, r5
 8006b00:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006b02:	432b      	orrs	r3, r5
 8006b04:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b06:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b0c:	69d3      	ldr	r3, [r2, #28]
 8006b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b12:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8006b14:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b16:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b18:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006b1e:	2001      	movs	r0, #1
 8006b20:	e7fc      	b.n	8006b1c <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b22:	4619      	mov	r1, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b24:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 8006b28:	e7c9      	b.n	8006abe <HAL_SPI_Init+0x3e>

08006b2a <HAL_SPI_Transmit>:
{
 8006b2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006b2e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006b30:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8006b34:	4604      	mov	r4, r0
 8006b36:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8006b38:	2b01      	cmp	r3, #1
{
 8006b3a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006b3c:	f000 80ae 	beq.w	8006c9c <HAL_SPI_Transmit+0x172>
 8006b40:	2301      	movs	r3, #1
 8006b42:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8006b46:	f7fe f9ff 	bl	8004f48 <HAL_GetTick>
 8006b4a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006b4c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8006b50:	b2c0      	uxtb	r0, r0
 8006b52:	2801      	cmp	r0, #1
 8006b54:	f040 80a0 	bne.w	8006c98 <HAL_SPI_Transmit+0x16e>
  if ((pData == NULL) || (Size == 0U))
 8006b58:	2d00      	cmp	r5, #0
 8006b5a:	d05e      	beq.n	8006c1a <HAL_SPI_Transmit+0xf0>
 8006b5c:	f1b8 0f00 	cmp.w	r8, #0
 8006b60:	d05b      	beq.n	8006c1a <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b62:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b64:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b66:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b68:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b6c:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b6e:	6620      	str	r0, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferCount = Size;
 8006b74:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b78:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b7a:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b7e:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxXferSize  = Size;
 8006b82:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8006b86:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
 8006b8a:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b8c:	d103      	bne.n	8006b96 <HAL_SPI_Transmit+0x6c>
    SPI_1LINE_TX(hspi);
 8006b8e:	6803      	ldr	r3, [r0, #0]
 8006b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b94:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b96:	6803      	ldr	r3, [r0, #0]
 8006b98:	065b      	lsls	r3, r3, #25
 8006b9a:	d403      	bmi.n	8006ba4 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8006b9c:	6803      	ldr	r3, [r0, #0]
 8006b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba2:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba4:	68e2      	ldr	r2, [r4, #12]
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8006bac:	d93e      	bls.n	8006c2c <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bae:	b113      	cbz	r3, 8006bb6 <HAL_SPI_Transmit+0x8c>
 8006bb0:	f1b8 0f01 	cmp.w	r8, #1
 8006bb4:	d107      	bne.n	8006bc6 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006bba:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bbc:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006bbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8006bc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	b9a3      	cbnz	r3, 8006bf6 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bcc:	463a      	mov	r2, r7
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f7ff ff33 	bl	8006a3c <SPI_EndRxTxTransaction>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d15b      	bne.n	8006c92 <HAL_SPI_Transmit+0x168>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	b933      	cbnz	r3, 8006bec <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	9201      	str	r2, [sp, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bec:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8006bee:	3000      	adds	r0, #0
 8006bf0:	bf18      	it	ne
 8006bf2:	2001      	movne	r0, #1
error:
 8006bf4:	e011      	b.n	8006c1a <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	6893      	ldr	r3, [r2, #8]
 8006bfa:	0798      	lsls	r0, r3, #30
 8006bfc:	d505      	bpl.n	8006c0a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c00:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006c04:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c06:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c08:	e7d9      	b.n	8006bbe <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c0a:	f7fe f99d 	bl	8004f48 <HAL_GetTick>
 8006c0e:	1bc0      	subs	r0, r0, r7
 8006c10:	42b0      	cmp	r0, r6
 8006c12:	d3d8      	bcc.n	8006bc6 <HAL_SPI_Transmit+0x9c>
 8006c14:	1c71      	adds	r1, r6, #1
 8006c16:	d0d6      	beq.n	8006bc6 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8006c18:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006c20:	2300      	movs	r3, #0
 8006c22:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006c26:	b002      	add	sp, #8
 8006c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c2c:	b113      	cbz	r3, 8006c34 <HAL_SPI_Transmit+0x10a>
 8006c2e:	f1b8 0f01 	cmp.w	r8, #1
 8006c32:	d112      	bne.n	8006c5a <HAL_SPI_Transmit+0x130>
      if (hspi->TxXferCount > 1U)
 8006c34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d906      	bls.n	8006c48 <HAL_SPI_Transmit+0x11e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c3a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006c3e:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c40:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c44:	3b02      	subs	r3, #2
 8006c46:	e006      	b.n	8006c56 <HAL_SPI_Transmit+0x12c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c48:	782b      	ldrb	r3, [r5, #0]
 8006c4a:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8006c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c4e:	3301      	adds	r3, #1
 8006c50:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006c52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8006c5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0b4      	beq.n	8006bcc <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	0792      	lsls	r2, r2, #30
 8006c68:	d50b      	bpl.n	8006c82 <HAL_SPI_Transmit+0x158>
        if (hspi->TxXferCount > 1U)
 8006c6a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006c6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006c6e:	2a01      	cmp	r2, #1
 8006c70:	d904      	bls.n	8006c7c <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c72:	f830 2b02 	ldrh.w	r2, [r0], #2
 8006c76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c78:	63a0      	str	r0, [r4, #56]	; 0x38
 8006c7a:	e7e2      	b.n	8006c42 <HAL_SPI_Transmit+0x118>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c7c:	7802      	ldrb	r2, [r0, #0]
 8006c7e:	731a      	strb	r2, [r3, #12]
 8006c80:	e7e4      	b.n	8006c4c <HAL_SPI_Transmit+0x122>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c82:	f7fe f961 	bl	8004f48 <HAL_GetTick>
 8006c86:	1bc0      	subs	r0, r0, r7
 8006c88:	42b0      	cmp	r0, r6
 8006c8a:	d3e6      	bcc.n	8006c5a <HAL_SPI_Transmit+0x130>
 8006c8c:	1c73      	adds	r3, r6, #1
 8006c8e:	d0e4      	beq.n	8006c5a <HAL_SPI_Transmit+0x130>
 8006c90:	e7c2      	b.n	8006c18 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c92:	2320      	movs	r3, #32
 8006c94:	6623      	str	r3, [r4, #96]	; 0x60
 8006c96:	e7a0      	b.n	8006bda <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8006c98:	2002      	movs	r0, #2
 8006c9a:	e7be      	b.n	8006c1a <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8006c9c:	2002      	movs	r0, #2
 8006c9e:	e7c2      	b.n	8006c26 <HAL_SPI_Transmit+0xfc>

08006ca0 <HAL_SPI_TransmitReceive>:
{
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006ca6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8006caa:	4604      	mov	r4, r0
 8006cac:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8006cae:	2b01      	cmp	r3, #1
{
 8006cb0:	4691      	mov	r9, r2
 8006cb2:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8006cb4:	f000 8111 	beq.w	8006eda <HAL_SPI_TransmitReceive+0x23a>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8006cbe:	f7fe f943 	bl	8004f48 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006cc2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8006cc6:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 8006cc8:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8006cca:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d00a      	beq.n	8006ce6 <HAL_SPI_TransmitReceive+0x46>
 8006cd0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8006cd4:	f040 80ff 	bne.w	8006ed6 <HAL_SPI_TransmitReceive+0x236>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006cd8:	68a0      	ldr	r0, [r4, #8]
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	f040 80fb 	bne.w	8006ed6 <HAL_SPI_TransmitReceive+0x236>
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	f040 80f8 	bne.w	8006ed6 <HAL_SPI_TransmitReceive+0x236>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ce6:	2d00      	cmp	r5, #0
 8006ce8:	d049      	beq.n	8006d7e <HAL_SPI_TransmitReceive+0xde>
 8006cea:	f1b9 0f00 	cmp.w	r9, #0
 8006cee:	d046      	beq.n	8006d7e <HAL_SPI_TransmitReceive+0xde>
 8006cf0:	2e00      	cmp	r6, #0
 8006cf2:	d044      	beq.n	8006d7e <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cf4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d002      	beq.n	8006d02 <HAL_SPI_TransmitReceive+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cfc:	2305      	movs	r3, #5
 8006cfe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d02:	68e2      	ldr	r2, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	6820      	ldr	r0, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d08:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d0c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d0e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d12:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006d16:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 8006d1a:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d1c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d1e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8006d20:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d24:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d26:	d801      	bhi.n	8006d2c <HAL_SPI_TransmitReceive+0x8c>
 8006d28:	2e01      	cmp	r6, #1
 8006d2a:	d92a      	bls.n	8006d82 <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d30:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d32:	6803      	ldr	r3, [r0, #0]
 8006d34:	065b      	lsls	r3, r3, #25
 8006d36:	d403      	bmi.n	8006d40 <HAL_SPI_TransmitReceive+0xa0>
    __HAL_SPI_ENABLE(hspi);
 8006d38:	6803      	ldr	r3, [r0, #0]
 8006d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d40:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8006d44:	d956      	bls.n	8006df4 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d46:	b109      	cbz	r1, 8006d4c <HAL_SPI_TransmitReceive+0xac>
 8006d48:	2e01      	cmp	r6, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d4c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006d50:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8006d52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d54:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006d5c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	b98b      	cbnz	r3, 8006d88 <HAL_SPI_TransmitReceive+0xe8>
 8006d64:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	b96b      	cbnz	r3, 8006d88 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7ff fe63 	bl	8006a3c <SPI_EndRxTxTransaction>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d034      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d7a:	2320      	movs	r3, #32
 8006d7c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006d7e:	2001      	movs	r0, #1
 8006d80:	e030      	b.n	8006de4 <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d86:	e7d3      	b.n	8006d30 <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d88:	6822      	ldr	r2, [r4, #0]
 8006d8a:	6893      	ldr	r3, [r2, #8]
 8006d8c:	0799      	lsls	r1, r3, #30
 8006d8e:	d50d      	bpl.n	8006dac <HAL_SPI_TransmitReceive+0x10c>
 8006d90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	b153      	cbz	r3, 8006dac <HAL_SPI_TransmitReceive+0x10c>
 8006d96:	b14d      	cbz	r5, 8006dac <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        txallowed = 0U;
 8006d9a:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d9c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006da0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006da4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dac:	6893      	ldr	r3, [r2, #8]
 8006dae:	07db      	lsls	r3, r3, #31
 8006db0:	d50f      	bpl.n	8006dd2 <HAL_SPI_TransmitReceive+0x132>
 8006db2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	b15b      	cbz	r3, 8006dd2 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dba:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 8006dbc:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dc0:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dc4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8006dc6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dd2:	f7fe f8b9 	bl	8004f48 <HAL_GetTick>
 8006dd6:	eba0 0008 	sub.w	r0, r0, r8
 8006dda:	4287      	cmp	r7, r0
 8006ddc:	d8bf      	bhi.n	8006d5e <HAL_SPI_TransmitReceive+0xbe>
 8006dde:	1c7e      	adds	r6, r7, #1
 8006de0:	d0bd      	beq.n	8006d5e <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 8006de2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006dea:	2300      	movs	r3, #0
 8006dec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df4:	b109      	cbz	r1, 8006dfa <HAL_SPI_TransmitReceive+0x15a>
 8006df6:	2e01      	cmp	r6, #1
 8006df8:	d10a      	bne.n	8006e10 <HAL_SPI_TransmitReceive+0x170>
      if (hspi->TxXferCount > 1U)
 8006dfa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d94e      	bls.n	8006e9e <HAL_SPI_TransmitReceive+0x1fe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e00:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006e04:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 8006e06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e08:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e0a:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006e10:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	b923      	cbnz	r3, 8006e22 <HAL_SPI_TransmitReceive+0x182>
 8006e18:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0a4      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e22:	6822      	ldr	r2, [r4, #0]
 8006e24:	6893      	ldr	r3, [r2, #8]
 8006e26:	0798      	lsls	r0, r3, #30
 8006e28:	d510      	bpl.n	8006e4c <HAL_SPI_TransmitReceive+0x1ac>
 8006e2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	b16b      	cbz	r3, 8006e4c <HAL_SPI_TransmitReceive+0x1ac>
 8006e30:	b165      	cbz	r5, 8006e4c <HAL_SPI_TransmitReceive+0x1ac>
        if (hspi->TxXferCount > 1U)
 8006e32:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e36:	2901      	cmp	r1, #1
 8006e38:	d939      	bls.n	8006eae <HAL_SPI_TransmitReceive+0x20e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e3a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006e3e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e40:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e44:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8006e46:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8006e48:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8006e4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e4c:	6822      	ldr	r2, [r4, #0]
 8006e4e:	6893      	ldr	r3, [r2, #8]
 8006e50:	07d9      	lsls	r1, r3, #31
 8006e52:	d51b      	bpl.n	8006e8c <HAL_SPI_TransmitReceive+0x1ec>
 8006e54:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	b1bb      	cbz	r3, 8006e8c <HAL_SPI_TransmitReceive+0x1ec>
        if (hspi->RxXferCount > 1U)
 8006e5c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006e60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e62:	2901      	cmp	r1, #1
 8006e64:	d92b      	bls.n	8006ebe <HAL_SPI_TransmitReceive+0x21e>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e66:	68d1      	ldr	r1, [r2, #12]
 8006e68:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e6c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006e6e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006e72:	3b02      	subs	r3, #2
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006e7a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d803      	bhi.n	8006e8a <HAL_SPI_TransmitReceive+0x1ea>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e82:	6853      	ldr	r3, [r2, #4]
 8006e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e88:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8006e8a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e8c:	f7fe f85c 	bl	8004f48 <HAL_GetTick>
 8006e90:	eba0 0008 	sub.w	r0, r0, r8
 8006e94:	4287      	cmp	r7, r0
 8006e96:	d8bc      	bhi.n	8006e12 <HAL_SPI_TransmitReceive+0x172>
 8006e98:	1c7b      	adds	r3, r7, #1
 8006e9a:	d0ba      	beq.n	8006e12 <HAL_SPI_TransmitReceive+0x172>
 8006e9c:	e7a1      	b.n	8006de2 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e9e:	782b      	ldrb	r3, [r5, #0]
 8006ea0:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8006ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006ea8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	e7ae      	b.n	8006e0c <HAL_SPI_TransmitReceive+0x16c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8006eb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	e7c3      	b.n	8006e46 <HAL_SPI_TransmitReceive+0x1a6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ebe:	7b12      	ldrb	r2, [r2, #12]
 8006ec0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8006ec8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8006ed4:	e7d9      	b.n	8006e8a <HAL_SPI_TransmitReceive+0x1ea>
    errorcode = HAL_BUSY;
 8006ed6:	2002      	movs	r0, #2
 8006ed8:	e784      	b.n	8006de4 <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 8006eda:	2002      	movs	r0, #2
 8006edc:	e788      	b.n	8006df0 <HAL_SPI_TransmitReceive+0x150>
	...

08006ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee0:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ee2:	69c2      	ldr	r2, [r0, #28]
{
 8006ee4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ee6:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ee8:	6881      	ldr	r1, [r0, #8]
 8006eea:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eec:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006eee:	4301      	orrs	r1, r0
 8006ef0:	6960      	ldr	r0, [r4, #20]
 8006ef2:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ef4:	489a      	ldr	r0, [pc, #616]	; (8007160 <UART_SetConfig+0x280>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ef6:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ef8:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8006efa:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006efc:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006efe:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f00:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006f08:	4301      	orrs	r1, r0
 8006f0a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f0c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f0e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8006f10:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f12:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8006f16:	4301      	orrs	r1, r0
 8006f18:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f1a:	4992      	ldr	r1, [pc, #584]	; (8007164 <UART_SetConfig+0x284>)
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	d118      	bne.n	8006f52 <UART_SetConfig+0x72>
 8006f20:	4b91      	ldr	r3, [pc, #580]	; (8007168 <UART_SetConfig+0x288>)
 8006f22:	4992      	ldr	r1, [pc, #584]	; (800716c <UART_SetConfig+0x28c>)
 8006f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f28:	f003 0303 	and.w	r3, r3, #3
 8006f2c:	5ccb      	ldrb	r3, [r1, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006f32:	f040 80bd 	bne.w	80070b0 <UART_SetConfig+0x1d0>
  {
    switch (clocksource)
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	f200 80af 	bhi.w	800709a <UART_SetConfig+0x1ba>
 8006f3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f40:	00aa0095 	.word	0x00aa0095
 8006f44:	00ad00f9 	.word	0x00ad00f9
 8006f48:	00ad0105 	.word	0x00ad0105
 8006f4c:	00ad00ad 	.word	0x00ad00ad
 8006f50:	010b      	.short	0x010b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f52:	4987      	ldr	r1, [pc, #540]	; (8007170 <UART_SetConfig+0x290>)
 8006f54:	428b      	cmp	r3, r1
 8006f56:	d106      	bne.n	8006f66 <UART_SetConfig+0x86>
 8006f58:	4b83      	ldr	r3, [pc, #524]	; (8007168 <UART_SetConfig+0x288>)
 8006f5a:	4986      	ldr	r1, [pc, #536]	; (8007174 <UART_SetConfig+0x294>)
 8006f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f60:	f003 030c 	and.w	r3, r3, #12
 8006f64:	e7e2      	b.n	8006f2c <UART_SetConfig+0x4c>
 8006f66:	4984      	ldr	r1, [pc, #528]	; (8007178 <UART_SetConfig+0x298>)
 8006f68:	428b      	cmp	r3, r1
 8006f6a:	d118      	bne.n	8006f9e <UART_SetConfig+0xbe>
 8006f6c:	4b7e      	ldr	r3, [pc, #504]	; (8007168 <UART_SetConfig+0x288>)
 8006f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	f000 80e4 	beq.w	8007144 <UART_SetConfig+0x264>
 8006f7c:	d802      	bhi.n	8006f84 <UART_SetConfig+0xa4>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0d5      	beq.n	8006f2e <UART_SetConfig+0x4e>
 8006f82:	e005      	b.n	8006f90 <UART_SetConfig+0xb0>
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	f000 80d1 	beq.w	800712c <UART_SetConfig+0x24c>
 8006f8a:	2b30      	cmp	r3, #48	; 0x30
 8006f8c:	f000 80e0 	beq.w	8007150 <UART_SetConfig+0x270>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006f94:	f000 8081 	beq.w	800709a <UART_SetConfig+0x1ba>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      default:
        ret = HAL_ERROR;
 8006f98:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e0a9      	b.n	80070f2 <UART_SetConfig+0x212>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9e:	4977      	ldr	r1, [pc, #476]	; (800717c <UART_SetConfig+0x29c>)
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	d10d      	bne.n	8006fc0 <UART_SetConfig+0xe0>
 8006fa4:	4b70      	ldr	r3, [pc, #448]	; (8007168 <UART_SetConfig+0x288>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006faa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	f000 80c8 	beq.w	8007144 <UART_SetConfig+0x264>
 8006fb4:	d9e3      	bls.n	8006f7e <UART_SetConfig+0x9e>
 8006fb6:	2b80      	cmp	r3, #128	; 0x80
 8006fb8:	f000 80b8 	beq.w	800712c <UART_SetConfig+0x24c>
 8006fbc:	2bc0      	cmp	r3, #192	; 0xc0
 8006fbe:	e7e5      	b.n	8006f8c <UART_SetConfig+0xac>
 8006fc0:	496f      	ldr	r1, [pc, #444]	; (8007180 <UART_SetConfig+0x2a0>)
 8006fc2:	428b      	cmp	r3, r1
 8006fc4:	d110      	bne.n	8006fe8 <UART_SetConfig+0x108>
 8006fc6:	4b68      	ldr	r3, [pc, #416]	; (8007168 <UART_SetConfig+0x288>)
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd4:	f000 80b6 	beq.w	8007144 <UART_SetConfig+0x264>
 8006fd8:	d9d1      	bls.n	8006f7e <UART_SetConfig+0x9e>
 8006fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fde:	f000 80a5 	beq.w	800712c <UART_SetConfig+0x24c>
 8006fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe6:	e7d1      	b.n	8006f8c <UART_SetConfig+0xac>
 8006fe8:	4966      	ldr	r1, [pc, #408]	; (8007184 <UART_SetConfig+0x2a4>)
 8006fea:	428b      	cmp	r3, r1
 8006fec:	d114      	bne.n	8007018 <UART_SetConfig+0x138>
 8006fee:	4b5e      	ldr	r3, [pc, #376]	; (8007168 <UART_SetConfig+0x288>)
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffc:	f000 80a2 	beq.w	8007144 <UART_SetConfig+0x264>
 8007000:	d803      	bhi.n	800700a <UART_SetConfig+0x12a>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1c4      	bne.n	8006f90 <UART_SetConfig+0xb0>
 8007006:	2301      	movs	r3, #1
 8007008:	e791      	b.n	8006f2e <UART_SetConfig+0x4e>
 800700a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800700e:	f000 808d 	beq.w	800712c <UART_SetConfig+0x24c>
 8007012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007016:	e7b9      	b.n	8006f8c <UART_SetConfig+0xac>
 8007018:	495b      	ldr	r1, [pc, #364]	; (8007188 <UART_SetConfig+0x2a8>)
 800701a:	428b      	cmp	r3, r1
 800701c:	d113      	bne.n	8007046 <UART_SetConfig+0x166>
 800701e:	4b52      	ldr	r3, [pc, #328]	; (8007168 <UART_SetConfig+0x288>)
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007024:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702c:	f000 808a 	beq.w	8007144 <UART_SetConfig+0x264>
 8007030:	d803      	bhi.n	800703a <UART_SetConfig+0x15a>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1ac      	bne.n	8006f90 <UART_SetConfig+0xb0>
 8007036:	2300      	movs	r3, #0
 8007038:	e779      	b.n	8006f2e <UART_SetConfig+0x4e>
 800703a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800703e:	d075      	beq.n	800712c <UART_SetConfig+0x24c>
 8007040:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007044:	e7a2      	b.n	8006f8c <UART_SetConfig+0xac>
 8007046:	4951      	ldr	r1, [pc, #324]	; (800718c <UART_SetConfig+0x2ac>)
 8007048:	428b      	cmp	r3, r1
 800704a:	d1a1      	bne.n	8006f90 <UART_SetConfig+0xb0>
 800704c:	4b46      	ldr	r3, [pc, #280]	; (8007168 <UART_SetConfig+0x288>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007052:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800705a:	d073      	beq.n	8007144 <UART_SetConfig+0x264>
 800705c:	d98f      	bls.n	8006f7e <UART_SetConfig+0x9e>
 800705e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007062:	d063      	beq.n	800712c <UART_SetConfig+0x24c>
 8007064:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007068:	e790      	b.n	8006f8c <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 800706a:	f7ff f99b 	bl	80063a4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800706e:	6861      	ldr	r1, [r4, #4]
 8007070:	084a      	lsrs	r2, r1, #1
 8007072:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8007076:	fbb3 f3f1 	udiv	r3, r3, r1
 800707a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800707c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800707e:	f1a3 0110 	sub.w	r1, r3, #16
 8007082:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007086:	4291      	cmp	r1, r2
 8007088:	d90a      	bls.n	80070a0 <UART_SetConfig+0x1c0>
      ret = HAL_ERROR;
 800708a:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800708c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800708e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

  return ret;
}
 8007092:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007094:	f7ff f996 	bl	80063c4 <HAL_RCC_GetPCLK2Freq>
 8007098:	e7e9      	b.n	800706e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800709a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800709c:	2300      	movs	r3, #0
 800709e:	e7ee      	b.n	800707e <UART_SetConfig+0x19e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070a0:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070a4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80070a8:	6821      	ldr	r1, [r4, #0]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60cb      	str	r3, [r1, #12]
 80070ae:	e7ed      	b.n	800708c <UART_SetConfig+0x1ac>
    switch (clocksource)
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	f63f af71 	bhi.w	8006f98 <UART_SetConfig+0xb8>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0x1dc>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	08007105 	.word	0x08007105
 80070c4:	0800710b 	.word	0x0800710b
 80070c8:	08006f99 	.word	0x08006f99
 80070cc:	0800711d 	.word	0x0800711d
 80070d0:	08006f99 	.word	0x08006f99
 80070d4:	08006f99 	.word	0x08006f99
 80070d8:	08006f99 	.word	0x08006f99
 80070dc:	08007123 	.word	0x08007123
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e0:	f7ff f960 	bl	80063a4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070e4:	6862      	ldr	r2, [r4, #4]
 80070e6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80070ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80070f0:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f2:	f1a3 0110 	sub.w	r1, r3, #16
 80070f6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80070fa:	4291      	cmp	r1, r2
 80070fc:	d8c5      	bhi.n	800708a <UART_SetConfig+0x1aa>
      huart->Instance->BRR = usartdiv;
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	60d3      	str	r3, [r2, #12]
 8007102:	e7c3      	b.n	800708c <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007104:	f7ff f95e 	bl	80063c4 <HAL_RCC_GetPCLK2Freq>
 8007108:	e7ec      	b.n	80070e4 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800710a:	6860      	ldr	r0, [r4, #4]
 800710c:	0843      	lsrs	r3, r0, #1
 800710e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007112:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007116:	fbb3 f3f0 	udiv	r3, r3, r0
 800711a:	e7e8      	b.n	80070ee <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 800711c:	f7ff f876 	bl	800620c <HAL_RCC_GetSysClockFreq>
 8007120:	e7e0      	b.n	80070e4 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007122:	6860      	ldr	r0, [r4, #4]
 8007124:	0843      	lsrs	r3, r0, #1
 8007126:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800712a:	e7f4      	b.n	8007116 <UART_SetConfig+0x236>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800712c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007130:	d1eb      	bne.n	800710a <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007132:	6860      	ldr	r0, [r4, #4]
 8007134:	0843      	lsrs	r3, r0, #1
 8007136:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800713a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800713e:	fbb3 f3f0 	udiv	r3, r3, r0
 8007142:	e79a      	b.n	800707a <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007144:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007148:	d1e8      	bne.n	800711c <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 800714a:	f7ff f85f 	bl	800620c <HAL_RCC_GetSysClockFreq>
 800714e:	e78e      	b.n	800706e <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007150:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007154:	d1e5      	bne.n	8007122 <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007156:	6860      	ldr	r0, [r4, #4]
 8007158:	0843      	lsrs	r3, r0, #1
 800715a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800715e:	e7ee      	b.n	800713e <UART_SetConfig+0x25e>
 8007160:	efff69f3 	.word	0xefff69f3
 8007164:	40011000 	.word	0x40011000
 8007168:	40023800 	.word	0x40023800
 800716c:	080f7764 	.word	0x080f7764
 8007170:	40004400 	.word	0x40004400
 8007174:	080f7768 	.word	0x080f7768
 8007178:	40004800 	.word	0x40004800
 800717c:	40004c00 	.word	0x40004c00
 8007180:	40005000 	.word	0x40005000
 8007184:	40011400 	.word	0x40011400
 8007188:	40007800 	.word	0x40007800
 800718c:	40007c00 	.word	0x40007c00

08007190 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007190:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007192:	07da      	lsls	r2, r3, #31
{
 8007194:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007196:	d506      	bpl.n	80071a6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007198:	6801      	ldr	r1, [r0, #0]
 800719a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800719c:	684a      	ldr	r2, [r1, #4]
 800719e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80071a2:	4322      	orrs	r2, r4
 80071a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071a6:	079c      	lsls	r4, r3, #30
 80071a8:	d506      	bpl.n	80071b8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071aa:	6801      	ldr	r1, [r0, #0]
 80071ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80071ae:	684a      	ldr	r2, [r1, #4]
 80071b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071b4:	4322      	orrs	r2, r4
 80071b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b8:	0759      	lsls	r1, r3, #29
 80071ba:	d506      	bpl.n	80071ca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071bc:	6801      	ldr	r1, [r0, #0]
 80071be:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80071c0:	684a      	ldr	r2, [r1, #4]
 80071c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071c6:	4322      	orrs	r2, r4
 80071c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071ca:	071a      	lsls	r2, r3, #28
 80071cc:	d506      	bpl.n	80071dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ce:	6801      	ldr	r1, [r0, #0]
 80071d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80071d2:	684a      	ldr	r2, [r1, #4]
 80071d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071d8:	4322      	orrs	r2, r4
 80071da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071dc:	06dc      	lsls	r4, r3, #27
 80071de:	d506      	bpl.n	80071ee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e0:	6801      	ldr	r1, [r0, #0]
 80071e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80071e4:	688a      	ldr	r2, [r1, #8]
 80071e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071ea:	4322      	orrs	r2, r4
 80071ec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ee:	0699      	lsls	r1, r3, #26
 80071f0:	d506      	bpl.n	8007200 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071f2:	6801      	ldr	r1, [r0, #0]
 80071f4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80071f6:	688a      	ldr	r2, [r1, #8]
 80071f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071fc:	4322      	orrs	r2, r4
 80071fe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007200:	065a      	lsls	r2, r3, #25
 8007202:	d510      	bpl.n	8007226 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007204:	6801      	ldr	r1, [r0, #0]
 8007206:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007208:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800720e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007212:	ea42 0204 	orr.w	r2, r2, r4
 8007216:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007218:	d105      	bne.n	8007226 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800721a:	684a      	ldr	r2, [r1, #4]
 800721c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800721e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007222:	4322      	orrs	r2, r4
 8007224:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007226:	061b      	lsls	r3, r3, #24
 8007228:	d506      	bpl.n	8007238 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800722a:	6802      	ldr	r2, [r0, #0]
 800722c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800722e:	6853      	ldr	r3, [r2, #4]
 8007230:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007234:	430b      	orrs	r3, r1
 8007236:	6053      	str	r3, [r2, #4]
  }
}
 8007238:	bd10      	pop	{r4, pc}

0800723a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800723a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	9d06      	ldr	r5, [sp, #24]
 8007240:	4604      	mov	r4, r0
 8007242:	460f      	mov	r7, r1
 8007244:	4616      	mov	r6, r2
 8007246:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007248:	6821      	ldr	r1, [r4, #0]
 800724a:	69ca      	ldr	r2, [r1, #28]
 800724c:	ea37 0302 	bics.w	r3, r7, r2
 8007250:	bf0c      	ite	eq
 8007252:	2201      	moveq	r2, #1
 8007254:	2200      	movne	r2, #0
 8007256:	42b2      	cmp	r2, r6
 8007258:	d001      	beq.n	800725e <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800725a:	2000      	movs	r0, #0
 800725c:	e018      	b.n	8007290 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800725e:	1c68      	adds	r0, r5, #1
 8007260:	d0f3      	beq.n	800724a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007262:	f7fd fe71 	bl	8004f48 <HAL_GetTick>
 8007266:	eba0 0008 	sub.w	r0, r0, r8
 800726a:	42a8      	cmp	r0, r5
 800726c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800726e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007270:	d800      	bhi.n	8007274 <UART_WaitOnFlagUntilTimeout+0x3a>
 8007272:	b97d      	cbnz	r5, 8007294 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007278:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727a:	6883      	ldr	r3, [r0, #8]
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007282:	2320      	movs	r3, #32
 8007284:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007286:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8007288:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800728a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800728c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007294:	075a      	lsls	r2, r3, #29
 8007296:	d5d7      	bpl.n	8007248 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007298:	69c3      	ldr	r3, [r0, #28]
 800729a:	051b      	lsls	r3, r3, #20
 800729c:	d5d4      	bpl.n	8007248 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800729e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072a2:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072a4:	6803      	ldr	r3, [r0, #0]
 80072a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072aa:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ac:	6883      	ldr	r3, [r0, #8]
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80072b4:	2320      	movs	r3, #32
 80072b6:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80072b8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072ba:	67e3      	str	r3, [r4, #124]	; 0x7c
 80072bc:	e7e4      	b.n	8007288 <UART_WaitOnFlagUntilTimeout+0x4e>

080072be <HAL_UART_Transmit>:
{
 80072be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072c2:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80072c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80072c6:	4604      	mov	r4, r0
 80072c8:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80072ca:	2b20      	cmp	r3, #32
{
 80072cc:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80072ce:	d14c      	bne.n	800736a <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 80072d0:	2900      	cmp	r1, #0
 80072d2:	d048      	beq.n	8007366 <HAL_UART_Transmit+0xa8>
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	d046      	beq.n	8007366 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80072d8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d044      	beq.n	800736a <HAL_UART_Transmit+0xac>
 80072e0:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80072e4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072e8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ea:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ec:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80072ee:	f7fd fe2b 	bl	8004f48 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f2:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80072f4:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80072f6:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80072fe:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007302:	d103      	bne.n	800730c <HAL_UART_Transmit+0x4e>
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	b90b      	cbnz	r3, 800730c <HAL_UART_Transmit+0x4e>
 8007308:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800730a:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800730c:	2300      	movs	r3, #0
 800730e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8007312:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007316:	463b      	mov	r3, r7
 8007318:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800731c:	b292      	uxth	r2, r2
 800731e:	b93a      	cbnz	r2, 8007330 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007320:	2140      	movs	r1, #64	; 0x40
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff ff89 	bl	800723a <UART_WaitOnFlagUntilTimeout>
 8007328:	b940      	cbnz	r0, 800733c <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800732a:	2320      	movs	r3, #32
 800732c:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800732e:	e006      	b.n	800733e <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007330:	2200      	movs	r2, #0
 8007332:	2180      	movs	r1, #128	; 0x80
 8007334:	4620      	mov	r0, r4
 8007336:	f7ff ff80 	bl	800723a <UART_WaitOnFlagUntilTimeout>
 800733a:	b118      	cbz	r0, 8007344 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 800733c:	2003      	movs	r0, #3
}
 800733e:	b003      	add	sp, #12
 8007340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007344:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007346:	b95e      	cbnz	r6, 8007360 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007348:	f835 3b02 	ldrh.w	r3, [r5], #2
 800734c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007350:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8007352:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007356:	3b01      	subs	r3, #1
 8007358:	b29b      	uxth	r3, r3
 800735a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800735e:	e7d8      	b.n	8007312 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007360:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007364:	e7f4      	b.n	8007350 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8007366:	2001      	movs	r0, #1
 8007368:	e7e9      	b.n	800733e <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800736a:	2002      	movs	r0, #2
 800736c:	e7e7      	b.n	800733e <HAL_UART_Transmit+0x80>

0800736e <UART_CheckIdleState>:
{
 800736e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	2500      	movs	r5, #0
{
 8007372:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007374:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8007376:	f7fd fde7 	bl	8004f48 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800737a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800737c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	0712      	lsls	r2, r2, #28
 8007382:	d407      	bmi.n	8007394 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8007384:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8007386:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007388:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800738a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800738e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007390:	b003      	add	sp, #12
 8007392:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007394:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007398:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800739c:	4620      	mov	r0, r4
 800739e:	9200      	str	r2, [sp, #0]
 80073a0:	462a      	mov	r2, r5
 80073a2:	f7ff ff4a 	bl	800723a <UART_WaitOnFlagUntilTimeout>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d0ec      	beq.n	8007384 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80073aa:	2003      	movs	r0, #3
 80073ac:	e7f0      	b.n	8007390 <UART_CheckIdleState+0x22>

080073ae <HAL_UART_Init>:
{
 80073ae:	b510      	push	{r4, lr}
  if (huart == NULL)
 80073b0:	4604      	mov	r4, r0
 80073b2:	b340      	cbz	r0, 8007406 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80073b4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80073b6:	b91b      	cbnz	r3, 80073c0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80073b8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80073bc:	f7fc ff6c 	bl	8004298 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80073c0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80073c2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073c4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80073c6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80073c8:	6813      	ldr	r3, [r2, #0]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073d0:	f7ff fd86 	bl	8006ee0 <UART_SetConfig>
 80073d4:	2801      	cmp	r0, #1
 80073d6:	d016      	beq.n	8007406 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073da:	b113      	cbz	r3, 80073e2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80073dc:	4620      	mov	r0, r4
 80073de:	f7ff fed7 	bl	8007190 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80073e4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	f042 0201 	orr.w	r2, r2, #1
}
 80073fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8007400:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007402:	f7ff bfb4 	b.w	800736e <UART_CheckIdleState>
}
 8007406:	2001      	movs	r0, #1
 8007408:	bd10      	pop	{r4, pc}
	...

0800740c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800740c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007410:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8007412:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8007416:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800741a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800741e:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007422:	6809      	ldr	r1, [r1, #0]
 8007424:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007426:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007428:	2901      	cmp	r1, #1
 800742a:	4912      	ldr	r1, [pc, #72]	; (8007474 <FMC_SDRAM_Init+0x68>)
 800742c:	d00f      	beq.n	800744e <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800742e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007430:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007432:	432a      	orrs	r2, r5
 8007434:	ea42 0308 	orr.w	r3, r2, r8
 8007438:	ea43 030e 	orr.w	r3, r3, lr
 800743c:	ea43 030c 	orr.w	r3, r3, ip
 8007440:	433b      	orrs	r3, r7
 8007442:	4333      	orrs	r3, r6
 8007444:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007446:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007448:	2000      	movs	r0, #0
 800744a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800744e:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007450:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007452:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007456:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007458:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800745c:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800745e:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007462:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007464:	ea42 020c 	orr.w	r2, r2, ip
 8007468:	433a      	orrs	r2, r7
 800746a:	4332      	orrs	r2, r6
 800746c:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800746e:	6042      	str	r2, [r0, #4]
 8007470:	e7ea      	b.n	8007448 <FMC_SDRAM_Init+0x3c>
 8007472:	bf00      	nop
 8007474:	ffff8000 	.word	0xffff8000

08007478 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007478:	68cb      	ldr	r3, [r1, #12]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800747a:	2a01      	cmp	r2, #1
{
 800747c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800747e:	680c      	ldr	r4, [r1, #0]
 8007480:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 8007484:	694b      	ldr	r3, [r1, #20]
 8007486:	688e      	ldr	r6, [r1, #8]
 8007488:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800748c:	690d      	ldr	r5, [r1, #16]
 800748e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007492:	684c      	ldr	r4, [r1, #4]
 8007494:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8007498:	6989      	ldr	r1, [r1, #24]
 800749a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800749e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80074a2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80074a6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 80074aa:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80074ae:	ea4f 1404 	mov.w	r4, r4, lsl #4
 80074b2:	ea4f 4505 	mov.w	r5, r5, lsl #16
 80074b6:	ea4f 6101 	mov.w	r1, r1, lsl #24
 80074ba:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 80074be:	d00c      	beq.n	80074da <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074c0:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80074c4:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074c6:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80074c8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074cc:	4333      	orrs	r3, r6
 80074ce:	432b      	orrs	r3, r5
 80074d0:	430b      	orrs	r3, r1
 80074d2:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80074d4:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80074d6:	2000      	movs	r0, #0
 80074d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80074da:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074dc:	ea44 0206 	orr.w	r2, r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80074e0:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074e4:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80074e8:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074ec:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80074ee:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80074f0:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074f2:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80074f4:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80074f8:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074fa:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80074fc:	60c2      	str	r2, [r0, #12]
 80074fe:	e7ea      	b.n	80074d6 <FMC_SDRAM_Timing_Init+0x5e>

08007500 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007500:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 8007504:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007506:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8007508:	68ca      	ldr	r2, [r1, #12]
{
 800750a:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 800750c:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800750e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007512:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 8007514:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007516:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007518:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800751c:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8007522:	b002      	add	sp, #8
 8007524:	bd10      	pop	{r4, pc}

08007526 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007526:	6943      	ldr	r3, [r0, #20]
 8007528:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800752c:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 800752e:	2000      	movs	r0, #0
 8007530:	4770      	bx	lr

08007532 <_ZNK6tflite12RuntimeShape4DimsEi>:

  ~RuntimeShape() {}

  int32_t DimensionsCount() const { return size_; }
  int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
 8007532:	2900      	cmp	r1, #0
  int32_t Dims(int i) const {
 8007534:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
 8007536:	da01      	bge.n	800753c <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
 8007538:	f00f fc04 	bl	8016d44 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800753c:	6803      	ldr	r3, [r0, #0]
 800753e:	428b      	cmp	r3, r1
 8007540:	ddfa      	ble.n	8007538 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return dims_[i];
 8007542:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
 8007546:	6840      	ldr	r0, [r0, #4]
 8007548:	bd08      	pop	{r3, pc}

0800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 800754a:	b510      	push	{r4, lr}
  const int32_t* DimsData() const { return dims_; }
 800754c:	1d01      	adds	r1, r0, #4
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
 800754e:	6804      	ldr	r4, [r0, #0]
 8007550:	2300      	movs	r3, #0
    int buffer_size = 1;
 8007552:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
 8007554:	429c      	cmp	r4, r3
 8007556:	dd04      	ble.n	8007562 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
      buffer_size *= dims_data[i];
 8007558:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
 800755c:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
 800755e:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
 8007560:	e7f8      	b.n	8007554 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0xa>
    }
    return buffer_size;
  }
 8007562:	bd10      	pop	{r4, pc}

08007564 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8007564:	b40e      	push	{r1, r2, r3}
 8007566:	b503      	push	{r0, r1, lr}
 8007568:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 800756a:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
 800756c:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 8007570:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 8007572:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 8007574:	4798      	blx	r3
  va_end(args);
  return code;
}
 8007576:	b002      	add	sp, #8
 8007578:	f85d eb04 	ldr.w	lr, [sp], #4
 800757c:	b003      	add	sp, #12
 800757e:	4770      	bx	lr

08007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8007580:	b40c      	push	{r2, r3}
 8007582:	b507      	push	{r0, r1, r2, lr}
 8007584:	aa04      	add	r2, sp, #16
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 8007586:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8007588:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 800758c:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 800758e:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 8007590:	4798      	blx	r3
  va_end(args);
  return code;
}
 8007592:	b003      	add	sp, #12
 8007594:	f85d eb04 	ldr.w	lr, [sp], #4
 8007598:	b002      	add	sp, #8
 800759a:	4770      	bx	lr

0800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
        : allocator_(allocator) {}

    void operator()(void* data) { allocator_->Deallocate(data); }
 800759c:	6800      	ldr	r0, [r0, #0]
 800759e:	6803      	ldr	r3, [r0, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	4718      	bx	r3

080075a4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 80075a4:	3801      	subs	r0, #1
 80075a6:	b2c0      	uxtb	r0, r0
 80075a8:	2804      	cmp	r0, #4
 80075aa:	bf9a      	itte	ls
 80075ac:	4b01      	ldrls	r3, [pc, #4]	; (80075b4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>)
 80075ae:	5c18      	ldrbls	r0, [r3, r0]
  switch (activation) {
 80075b0:	2000      	movhi	r0, #0
      return kTfLiteActTanh;
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
  }
  return kTfLiteActNone;
}
 80075b2:	4770      	bx	lr
 80075b4:	080f922d 	.word	0x080f922d

080075b8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
  switch (padding) {
 80075b8:	b120      	cbz	r0, 80075c4 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
 80075ba:	2801      	cmp	r0, #1
    case Padding_SAME:
      return kTfLitePaddingSame;
    case Padding_VALID:
      return kTfLitePaddingValid;
  }
  return kTfLitePaddingUnknown;
 80075bc:	bf0c      	ite	eq
 80075be:	2002      	moveq	r0, #2
 80075c0:	2000      	movne	r0, #0
 80075c2:	4770      	bx	lr
      return kTfLitePaddingSame;
 80075c4:	2001      	movs	r0, #1
}
 80075c6:	4770      	bx	lr

080075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
 80075c8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
 80075ca:	b908      	cbnz	r0, 80075d0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
 80075cc:	f00f fbba 	bl	8016d44 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80075d0:	2900      	cmp	r1, #0
 80075d2:	d0fb      	beq.n	80075cc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
 80075d4:	2a00      	cmp	r2, #0
 80075d6:	d0f9      	beq.n	80075cc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0f7      	beq.n	80075cc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
 80075dc:	bd08      	pop	{r3, pc}
	...

080075e0 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66>:
static TfLiteStatus FlatBufferIntVectorToArray(
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4615      	mov	r5, r2
 80075e4:	461a      	mov	r2, r3
  if (!flat_vector) {
 80075e6:	b928      	cbnz	r0, 80075f4 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x14>
    TF_LITE_REPORT_ERROR(error_reporter,
 80075e8:	490f      	ldr	r1, [pc, #60]	; (8007628 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x48>)
      TF_LITE_REPORT_ERROR(
 80075ea:	4628      	mov	r0, r5
 80075ec:	f7ff ffba 	bl	8007564 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 80075f0:	2001      	movs	r0, #1
}
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
      scalar_tag;

  static FLATBUFFERS_CONSTEXPR bool is_span_observable =
      scalar_tag::value && (FLATBUFFERS_LITTLEENDIAN || sizeof(T) == 1);

  uoffset_t size() const { return EndianScalar(length_); }
 80075f4:	6804      	ldr	r4, [r0, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(DataType)) {
 80075f6:	2c08      	cmp	r4, #8
 80075f8:	d80c      	bhi.n	8007614 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x34>
 80075fa:	4602      	mov	r2, r0
      for (size_t i = 0; i < num_dimensions; ++i) {
 80075fc:	2300      	movs	r3, #0
 80075fe:	429c      	cmp	r4, r3
 8007600:	d010      	beq.n	8007624 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x44>
  typedef typename IndirectHelper<T>::return_type return_type;
  typedef typename IndirectHelper<T>::mutable_return_type mutable_return_type;
  typedef return_type value_type;

  return_type Get(uoffset_t i) const {
    FLATBUFFERS_ASSERT(i < size());
 8007602:	6805      	ldr	r5, [r0, #0]
 8007604:	42ab      	cmp	r3, r5
 8007606:	d307      	bcc.n	8007618 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x38>
 8007608:	4b08      	ldr	r3, [pc, #32]	; (800762c <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x4c>)
 800760a:	21aa      	movs	r1, #170	; 0xaa
 800760c:	4a08      	ldr	r2, [pc, #32]	; (8007630 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x50>)
 800760e:	4809      	ldr	r0, [pc, #36]	; (8007634 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x54>)
 8007610:	f00f fba0 	bl	8016d54 <__assert_func>
      TF_LITE_REPORT_ERROR(
 8007614:	4908      	ldr	r1, [pc, #32]	; (8007638 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x58>)
 8007616:	e7e8      	b.n	80075ea <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0xa>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8007618:	f852 5f04 	ldr.w	r5, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
 800761c:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8007620:	3301      	adds	r3, #1
 8007622:	e7ec      	b.n	80075fe <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x1e>
  return kTfLiteOk;
 8007624:	2000      	movs	r0, #0
 8007626:	e7e4      	b.n	80075f2 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66+0x12>
 8007628:	080f92a7 	.word	0x080f92a7
 800762c:	080f923a 	.word	0x080f923a
 8007630:	080f93ce 	.word	0x080f93ce
 8007634:	080f9245 	.word	0x080f9245
 8007638:	080f92d5 	.word	0x080f92d5

0800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
 800763c:	6803      	ldr	r3, [r0, #0]
 800763e:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007640:	8803      	ldrh	r3, [r0, #0]
 8007642:	428b      	cmp	r3, r1
 8007644:	bf8c      	ite	hi
 8007646:	5a40      	ldrhhi	r0, [r0, r1]
 8007648:	2000      	movls	r0, #0
  }
 800764a:	4770      	bx	lr

0800764c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 800764c:	b508      	push	{r3, lr}
 800764e:	4603      	mov	r3, r0
 8007650:	4610      	mov	r0, r2
  switch (tensor_type) {
 8007652:	2b11      	cmp	r3, #17
 8007654:	d830      	bhi.n	80076b8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x6c>
 8007656:	e8df f003 	tbb	[pc, r3]
 800765a:	090d      	.short	0x090d
 800765c:	211d1915 	.word	0x211d1915
 8007660:	1b251123 	.word	0x1b251123
 8007664:	291f270f 	.word	0x291f270f
 8007668:	2d13172b 	.word	0x2d13172b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 800766c:	230a      	movs	r3, #10
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
      return kTfLiteOk;
 800766e:	2000      	movs	r0, #0
      *type = kTfLiteFloat32;
 8007670:	700b      	strb	r3, [r1, #0]
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
 8007672:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
 8007674:	2301      	movs	r3, #1
 8007676:	e7fa      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
 8007678:	230b      	movs	r3, #11
 800767a:	e7f8      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
 800767c:	2307      	movs	r3, #7
 800767e:	e7f6      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt16;
 8007680:	2311      	movs	r3, #17
 8007682:	e7f4      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
 8007684:	2302      	movs	r3, #2
 8007686:	e7f2      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
 8007688:	2310      	movs	r3, #16
 800768a:	e7f0      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
 800768c:	2303      	movs	r3, #3
 800768e:	e7ee      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
 8007690:	2309      	movs	r3, #9
 8007692:	e7ec      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
 8007694:	2304      	movs	r3, #4
 8007696:	e7ea      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
 8007698:	230d      	movs	r3, #13
 800769a:	e7e8      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
 800769c:	2305      	movs	r3, #5
 800769e:	e7e6      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
 80076a0:	2306      	movs	r3, #6
 80076a2:	e7e4      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
 80076a4:	2308      	movs	r3, #8
 80076a6:	e7e2      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
 80076a8:	230c      	movs	r3, #12
 80076aa:	e7e0      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
 80076ac:	230e      	movs	r3, #14
 80076ae:	e7de      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
 80076b0:	230f      	movs	r3, #15
 80076b2:	e7dc      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt4;
 80076b4:	2312      	movs	r3, #18
 80076b6:	e7da      	b.n	800766e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
 80076b8:	2200      	movs	r2, #0
 80076ba:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80076bc:	461a      	mov	r2, r3
 80076be:	4902      	ldr	r1, [pc, #8]	; (80076c8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x7c>)
 80076c0:	f7ff ff50 	bl	8007564 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 80076c4:	2001      	movs	r0, #1
 80076c6:	e7d4      	b.n	8007672 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
 80076c8:	080f9316 	.word	0x080f9316

080076cc <_ZN6tflite14ParseHardSwishEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
 80076cc:	2000      	movs	r0, #0
 80076ce:	4770      	bx	lr

080076d0 <_ZN6tflite8ParsePadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
 80076d0:	2000      	movs	r0, #0
 80076d2:	4770      	bx	lr

080076d4 <_ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
 80076d4:	2000      	movs	r0, #0
 80076d6:	4770      	bx	lr

080076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4605      	mov	r5, r0
 80076dc:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 80076de:	f7ff ffad 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80076e2:	b100      	cbz	r0, 80076e6 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
 80076e4:	5c2c      	ldrb	r4, [r5, r0]
  }
 80076e6:	4620      	mov	r0, r4
 80076e8:	bd38      	pop	{r3, r4, r5, pc}

080076ea <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 80076ea:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 80076ec:	2200      	movs	r2, #0
 80076ee:	210a      	movs	r1, #10
 80076f0:	f7ff fff2 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
 80076f4:	bd08      	pop	{r3, pc}

080076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80076f6:	b538      	push	{r3, r4, r5, lr}
 80076f8:	4605      	mov	r5, r0
 80076fa:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 80076fc:	f7ff ff9e 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007700:	b100      	cbz	r0, 8007704 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0xe>
 8007702:	582c      	ldr	r4, [r5, r0]
  }
 8007704:	4620      	mov	r0, r4
 8007706:	bd38      	pop	{r3, r4, r5, pc}

08007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4605      	mov	r5, r0
 800770c:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 800770e:	f7ff ff95 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007712:	b100      	cbz	r0, 8007716 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
 8007714:	562c      	ldrsb	r4, [r5, r0]
  }
 8007716:	4620      	mov	r0, r4
 8007718:	bd38      	pop	{r3, r4, r5, pc}

0800771a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800771a:	b510      	push	{r4, lr}
 800771c:	ed2d 8b02 	vpush	{d8}
 8007720:	4604      	mov	r4, r0
 8007722:	eeb0 8a40 	vmov.f32	s16, s0
    auto field_offset = GetOptionalFieldOffset(field);
 8007726:	f7ff ff89 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800772a:	b110      	cbz	r0, 8007732 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x18>
 800772c:	4404      	add	r4, r0
 800772e:	ed94 8a00 	vldr	s16, [r4]
  }
 8007732:	eeb0 0a48 	vmov.f32	s0, s16
 8007736:	ecbd 8b02 	vpop	{d8}
 800773a:	bd10      	pop	{r4, pc}

0800773c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:

  template<typename P> P GetPointer(voffset_t field) {
 800773c:	b510      	push	{r4, lr}
 800773e:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 8007740:	f7ff ff7c 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8007744:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007746:	b108      	cbz	r0, 800774c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x10>
 8007748:	5820      	ldr	r0, [r4, r0]
 800774a:	4418      	add	r0, r3
                        : nullptr;
  }
 800774c:	bd10      	pop	{r4, pc}

0800774e <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 800774e:	b508      	push	{r3, lr}
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007750:	210c      	movs	r1, #12
 8007752:	f7ff fff3 	bl	800773c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
  }
 8007756:	bd08      	pop	{r3, pc}

08007758 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      void**) {
  return kTfLiteOk;
}

TfLiteStatus ParseAdd(const Operator* op, ErrorReporter* error_reporter,
                      BuiltinDataAllocator* allocator, void** builtin_data) {
 8007758:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800775c:	4615      	mov	r5, r2
 800775e:	4606      	mov	r6, r0
 8007760:	4688      	mov	r8, r1
 8007762:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007764:	f7ff ff30 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	2201      	movs	r2, #1
 800776c:	2102      	movs	r1, #2
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4628      	mov	r0, r5
 8007772:	4798      	blx	r3
    return new (allocated_memory) T();
 8007774:	4604      	mov	r4, r0
 8007776:	b110      	cbz	r0, 800777e <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
 8007778:	2300      	movs	r3, #0
 800777a:	7003      	strb	r3, [r0, #0]
 800777c:	7043      	strb	r3, [r0, #1]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800777e:	e9cd 5402 	strd	r5, r4, [sp, #8]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteAddParams, SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteAddParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007782:	b9a4      	cbnz	r4, 80077ae <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
 8007784:	4b19      	ldr	r3, [pc, #100]	; (80077ec <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
 8007786:	2401      	movs	r4, #1
 8007788:	4a19      	ldr	r2, [pc, #100]	; (80077f0 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
 800778a:	4641      	mov	r1, r8
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8007792:	4640      	mov	r0, r8
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4b17      	ldr	r3, [pc, #92]	; (80077f4 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>)
 8007798:	f7ff fef2 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 800779c:	9903      	ldr	r1, [sp, #12]
 800779e:	b111      	cbz	r1, 80077a6 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
	  get_deleter()(__ptr);
 80077a0:	a802      	add	r0, sp, #8
 80077a2:	f7ff fefb 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 80077a6:	4620      	mov	r0, r4
 80077a8:	b004      	add	sp, #16
 80077aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  const tflite::ConcatenationOptions *builtin_options_as_ConcatenationOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
  }
  const tflite::AddOptions *builtin_options_as_AddOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ff9b 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 80077b4:	280b      	cmp	r0, #11
 80077b6:	d114      	bne.n	80077e2 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7ff ffc8 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 80077be:	4605      	mov	r5, r0
 80077c0:	b178      	cbz	r0, 80077e2 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80077c2:	2200      	movs	r2, #0
 80077c4:	2104      	movs	r1, #4
 80077c6:	f7ff ff9f 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
 80077ca:	f7ff feeb 	bl	80075a4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    return GetField<uint8_t>(VT_POT_SCALE_INT16, 1) != 0;
 80077ce:	2201      	movs	r2, #1
    params->activation =
 80077d0:	7020      	strb	r0, [r4, #0]
 80077d2:	2106      	movs	r1, #6
 80077d4:	4628      	mov	r0, r5
 80077d6:	f7ff ff7f 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80077da:	3000      	adds	r0, #0
 80077dc:	bf18      	it	ne
 80077de:	2001      	movne	r0, #1
 80077e0:	7060      	strb	r0, [r4, #1]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
 80077e2:	2300      	movs	r3, #0
  *builtin_data = params.release();
 80077e4:	603c      	str	r4, [r7, #0]
 80077e6:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 80077e8:	461c      	mov	r4, r3
 80077ea:	e7d7      	b.n	800779c <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
 80077ec:	080f93bc 	.word	0x080f93bc
 80077f0:	080f93a5 	.word	0x080f93a5
 80077f4:	080f9364 	.word	0x080f9364

080077f8 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseConcatenation(const Operator* op,
                                ErrorReporter* error_reporter,
                                BuiltinDataAllocator* allocator,
                                void** builtin_data) {
 80077f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80077fc:	4615      	mov	r5, r2
 80077fe:	4606      	mov	r6, r0
 8007800:	4688      	mov	r8, r1
 8007802:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007804:	f7ff fee0 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	2204      	movs	r2, #4
 800780c:	2108      	movs	r1, #8
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4628      	mov	r0, r5
 8007812:	4798      	blx	r3
    return new (allocated_memory) T();
 8007814:	4604      	mov	r4, r0
 8007816:	b110      	cbz	r0, 800781e <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
 8007818:	2300      	movs	r3, #0
 800781a:	6003      	str	r3, [r0, #0]
 800781c:	7103      	strb	r3, [r0, #4]
 800781e:	e9cd 5402 	strd	r5, r4, [sp, #8]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteConcatenationParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConcatenationParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007822:	b9a4      	cbnz	r4, 800784e <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
 8007824:	4b18      	ldr	r3, [pc, #96]	; (8007888 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
 8007826:	2401      	movs	r4, #1
 8007828:	4a18      	ldr	r2, [pc, #96]	; (800788c <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
 800782a:	4641      	mov	r1, r8
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8007832:	4640      	mov	r0, r8
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	4b16      	ldr	r3, [pc, #88]	; (8007890 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
 8007838:	f7ff fea2 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 800783c:	9903      	ldr	r1, [sp, #12]
 800783e:	b111      	cbz	r1, 8007846 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
	  get_deleter()(__ptr);
 8007840:	a802      	add	r0, sp, #8
 8007842:	f7ff feab 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007846:	4620      	mov	r0, r4
 8007848:	b004      	add	sp, #16
 800784a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
 800784e:	4630      	mov	r0, r6
 8007850:	f7ff ff4b 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007854:	280a      	cmp	r0, #10
 8007856:	d111      	bne.n	800787c <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
 8007858:	4630      	mov	r0, r6
 800785a:	f7ff ff78 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 800785e:	4605      	mov	r5, r0
 8007860:	b160      	cbz	r0, 800787c <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8007862:	2200      	movs	r2, #0
 8007864:	2106      	movs	r1, #6
 8007866:	f7ff ff4f 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
 800786a:	f7ff fe9b 	bl	80075a4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    return GetField<int32_t>(VT_AXIS, 0);
 800786e:	2200      	movs	r2, #0
    params->activation =
 8007870:	7120      	strb	r0, [r4, #4]
 8007872:	2104      	movs	r1, #4
 8007874:	4628      	mov	r0, r5
 8007876:	f7ff ff3e 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    params->axis = schema_params->axis();
 800787a:	6020      	str	r0, [r4, #0]
	_M_t._M_ptr() = pointer();
 800787c:	2300      	movs	r3, #0
  *builtin_data = params.release();
 800787e:	603c      	str	r4, [r7, #0]
 8007880:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 8007882:	461c      	mov	r4, r3
 8007884:	e7da      	b.n	800783c <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
 8007886:	bf00      	nop
 8007888:	080f93bc 	.word	0x080f93bc
 800788c:	080f93a5 	.word	0x080f93a5
 8007890:	080f9364 	.word	0x080f9364

08007894 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8007894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007898:	4615      	mov	r5, r2
 800789a:	b085      	sub	sp, #20
 800789c:	4681      	mov	r9, r0
 800789e:	460f      	mov	r7, r1
 80078a0:	4698      	mov	r8, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80078a2:	f7ff fe91 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	2204      	movs	r2, #4
 80078aa:	211c      	movs	r1, #28
 80078ac:	4628      	mov	r0, r5
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4798      	blx	r3
    return new (allocated_memory) T();
 80078b2:	4604      	mov	r4, r0
 80078b4:	b118      	cbz	r0, 80078be <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
 80078b6:	221c      	movs	r2, #28
 80078b8:	2100      	movs	r1, #0
 80078ba:	f00f fad5 	bl	8016e68 <memset>
 80078be:	e9cd 5402 	strd	r5, r4, [sp, #8]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80078c2:	b9a4      	cbnz	r4, 80078ee <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
 80078c4:	4b2d      	ldr	r3, [pc, #180]	; (800797c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>)
 80078c6:	2401      	movs	r4, #1
 80078c8:	4a2d      	ldr	r2, [pc, #180]	; (8007980 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 80078ca:	4639      	mov	r1, r7
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	f240 531b 	movw	r3, #1307	; 0x51b
 80078d2:	4638      	mov	r0, r7
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	4b2b      	ldr	r3, [pc, #172]	; (8007984 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80078d8:	f7ff fe52 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 80078dc:	9903      	ldr	r1, [sp, #12]
 80078de:	b111      	cbz	r1, 80078e6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
	  get_deleter()(__ptr);
 80078e0:	a802      	add	r0, sp, #8
 80078e2:	f7ff fe5b 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 80078e6:	4620      	mov	r0, r4
 80078e8:	b005      	add	sp, #20
 80078ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 80078ee:	4648      	mov	r0, r9
 80078f0:	f7ff fefb 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 80078f4:	2801      	cmp	r0, #1
 80078f6:	4606      	mov	r6, r0
 80078f8:	d005      	beq.n	8007906 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x72>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80078fa:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
 80078fc:	2400      	movs	r4, #0
  *builtin_data = params.release();
 80078fe:	f8c8 3000 	str.w	r3, [r8]
 8007902:	9403      	str	r4, [sp, #12]
  return kTfLiteOk;
 8007904:	e7ea      	b.n	80078dc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
 8007906:	4648      	mov	r0, r9
 8007908:	f7ff ff21 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 800790c:	4605      	mov	r5, r0
 800790e:	2800      	cmp	r0, #0
 8007910:	d0f3      	beq.n	80078fa <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8007912:	2200      	movs	r2, #0
 8007914:	2104      	movs	r1, #4
 8007916:	f7ff fef7 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
 800791a:	f7ff fe4d 	bl	80075b8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800791e:	2200      	movs	r2, #0
 8007920:	7020      	strb	r0, [r4, #0]
 8007922:	2106      	movs	r1, #6
 8007924:	4628      	mov	r0, r5
 8007926:	f7ff fee6 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
 800792a:	2200      	movs	r2, #0
    params->stride_width = schema_params->stride_w();
 800792c:	6060      	str	r0, [r4, #4]
 800792e:	2108      	movs	r1, #8
 8007930:	4628      	mov	r0, r5
 8007932:	f7ff fee0 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8007936:	2200      	movs	r2, #0
    params->stride_height = schema_params->stride_h();
 8007938:	60a0      	str	r0, [r4, #8]
 800793a:	210a      	movs	r1, #10
 800793c:	4628      	mov	r0, r5
 800793e:	f7ff fee3 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
 8007942:	f7ff fe2f 	bl	80075a4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8007946:	4632      	mov	r2, r6
    params->activation =
 8007948:	7320      	strb	r0, [r4, #12]
 800794a:	210c      	movs	r1, #12
 800794c:	4628      	mov	r0, r5
 800794e:	f7ff fed2 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8007952:	4632      	mov	r2, r6
    params->dilation_width_factor = schema_params->dilation_w_factor();
 8007954:	6120      	str	r0, [r4, #16]
 8007956:	210e      	movs	r1, #14
 8007958:	4628      	mov	r0, r5
 800795a:	f7ff fecc 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_QUANTIZED_BIAS_TYPE, 0));
 800795e:	2200      	movs	r2, #0
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8007960:	6160      	str	r0, [r4, #20]
 8007962:	2110      	movs	r1, #16
 8007964:	4628      	mov	r0, r5
 8007966:	f7ff fecf 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    TF_LITE_ENSURE_STATUS(
 800796a:	f104 0118 	add.w	r1, r4, #24
 800796e:	463a      	mov	r2, r7
 8007970:	f7ff fe6c 	bl	800764c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007974:	4604      	mov	r4, r0
 8007976:	2800      	cmp	r0, #0
 8007978:	d0bf      	beq.n	80078fa <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
 800797a:	e7af      	b.n	80078dc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
 800797c:	080f93bc 	.word	0x080f93bc
 8007980:	080f93a5 	.word	0x080f93a5
 8007984:	080f9364 	.word	0x080f9364

08007988 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 8007988:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800798c:	4615      	mov	r5, r2
 800798e:	4606      	mov	r6, r0
 8007990:	4688      	mov	r8, r1
 8007992:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007994:	f7ff fe18 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	2204      	movs	r2, #4
 800799c:	211c      	movs	r1, #28
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4628      	mov	r0, r5
 80079a2:	4798      	blx	r3
    return new (allocated_memory) T();
 80079a4:	4604      	mov	r4, r0
 80079a6:	b118      	cbz	r0, 80079b0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28>
 80079a8:	221c      	movs	r2, #28
 80079aa:	2100      	movs	r1, #0
 80079ac:	f00f fa5c 	bl	8016e68 <memset>
 80079b0:	e9cd 5402 	strd	r5, r4, [sp, #8]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80079b4:	b9a4      	cbnz	r4, 80079e0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 80079b6:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd0>)
 80079b8:	2401      	movs	r4, #1
 80079ba:	4a28      	ldr	r2, [pc, #160]	; (8007a5c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>)
 80079bc:	4641      	mov	r1, r8
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	f240 5373 	movw	r3, #1395	; 0x573
 80079c4:	4640      	mov	r0, r8
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>)
 80079ca:	f7ff fdd9 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 80079ce:	9903      	ldr	r1, [sp, #12]
 80079d0:	b111      	cbz	r1, 80079d8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
	  get_deleter()(__ptr);
 80079d2:	a802      	add	r0, sp, #8
 80079d4:	f7ff fde2 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 80079d8:	4620      	mov	r0, r4
 80079da:	b004      	add	sp, #16
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 80079e0:	4630      	mov	r0, r6
 80079e2:	f7ff fe82 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 80079e6:	2802      	cmp	r0, #2
 80079e8:	d131      	bne.n	8007a4e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff feaf 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 80079f0:	4605      	mov	r5, r0
 80079f2:	b360      	cbz	r0, 8007a4e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 80079f4:	2200      	movs	r2, #0
 80079f6:	2104      	movs	r1, #4
 80079f8:	f7ff fe86 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
 80079fc:	f7ff fddc 	bl	80075b8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8007a00:	2200      	movs	r2, #0
 8007a02:	7020      	strb	r0, [r4, #0]
 8007a04:	2106      	movs	r1, #6
 8007a06:	4628      	mov	r0, r5
 8007a08:	f7ff fe75 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8007a0c:	2200      	movs	r2, #0
    params->stride_width = schema_params->stride_w();
 8007a0e:	6060      	str	r0, [r4, #4]
 8007a10:	2108      	movs	r1, #8
 8007a12:	4628      	mov	r0, r5
 8007a14:	f7ff fe6f 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 8007a18:	2200      	movs	r2, #0
    params->stride_height = schema_params->stride_h();
 8007a1a:	60a0      	str	r0, [r4, #8]
 8007a1c:	210a      	movs	r1, #10
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f7ff fe69 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8007a24:	2200      	movs	r2, #0
 8007a26:	210c      	movs	r1, #12
    params->depth_multiplier = schema_params->depth_multiplier();
 8007a28:	60e0      	str	r0, [r4, #12]
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f7ff fe6c 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
 8007a30:	f7ff fdb8 	bl	80075a4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8007a34:	2201      	movs	r2, #1
    params->activation =
 8007a36:	7420      	strb	r0, [r4, #16]
 8007a38:	210e      	movs	r1, #14
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f7ff fe5b 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8007a40:	2201      	movs	r2, #1
    params->dilation_width_factor = schema_params->dilation_w_factor();
 8007a42:	6160      	str	r0, [r4, #20]
 8007a44:	2110      	movs	r1, #16
 8007a46:	4628      	mov	r0, r5
 8007a48:	f7ff fe55 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8007a4c:	61a0      	str	r0, [r4, #24]
	_M_t._M_ptr() = pointer();
 8007a4e:	2300      	movs	r3, #0
  *builtin_data = params.release();
 8007a50:	603c      	str	r4, [r7, #0]
 8007a52:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 8007a54:	461c      	mov	r4, r3
 8007a56:	e7ba      	b.n	80079ce <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
 8007a58:	080f93bc 	.word	0x080f93bc
 8007a5c:	080f93a5 	.word	0x080f93a5
 8007a60:	080f9364 	.word	0x080f9364

08007a64 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8007a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a68:	4615      	mov	r5, r2
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	4681      	mov	r9, r0
 8007a6e:	460e      	mov	r6, r1
 8007a70:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007a72:	f7ff fda9 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007a76:	682b      	ldr	r3, [r5, #0]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	2105      	movs	r1, #5
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4798      	blx	r3
    return new (allocated_memory) T();
 8007a82:	4604      	mov	r4, r0
 8007a84:	b110      	cbz	r0, 8007a8c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28>
 8007a86:	2300      	movs	r3, #0
 8007a88:	6003      	str	r3, [r0, #0]
 8007a8a:	7103      	strb	r3, [r0, #4]
 8007a8c:	e9cd 5402 	strd	r5, r4, [sp, #8]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007a90:	b9a4      	cbnz	r4, 8007abc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 8007a92:	4b2e      	ldr	r3, [pc, #184]	; (8007b4c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>)
 8007a94:	4631      	mov	r1, r6
 8007a96:	4a2e      	ldr	r2, [pc, #184]	; (8007b50 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 8007a98:	4630      	mov	r0, r6
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f240 53f6 	movw	r3, #1526	; 0x5f6
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	4b2c      	ldr	r3, [pc, #176]	; (8007b54 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 8007aa4:	f7ff fd6c 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 8007aa8:	2401      	movs	r4, #1
	if (__ptr != nullptr)
 8007aaa:	9903      	ldr	r1, [sp, #12]
 8007aac:	b111      	cbz	r1, 8007ab4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
	  get_deleter()(__ptr);
 8007aae:	a802      	add	r0, sp, #8
 8007ab0:	f7ff fd74 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	b005      	add	sp, #20
 8007ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8007abc:	4648      	mov	r0, r9
 8007abe:	f7ff fe14 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007ac2:	2808      	cmp	r0, #8
 8007ac4:	4680      	mov	r8, r0
 8007ac6:	d13c      	bne.n	8007b42 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xde>
 8007ac8:	4648      	mov	r0, r9
 8007aca:	f7ff fe40 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8007ace:	4605      	mov	r5, r0
 8007ad0:	b3b8      	cbz	r0, 8007b42 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xde>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2104      	movs	r1, #4
 8007ad6:	f7ff fe17 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
 8007ada:	f7ff fd63 	bl	80075a4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8007ade:	2200      	movs	r2, #0
    params->activation =
 8007ae0:	7020      	strb	r0, [r4, #0]
 8007ae2:	4641      	mov	r1, r8
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f7ff fdf7 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8007aea:	3000      	adds	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 010a 	mov.w	r1, #10
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8007af4:	bf18      	it	ne
 8007af6:	2001      	movne	r0, #1
 8007af8:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8007afa:	4628      	mov	r0, r5
 8007afc:	f7ff fdec 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8007b00:	3000      	adds	r0, #0
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_QUANTIZED_BIAS_TYPE, 0));
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 010c 	mov.w	r1, #12
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8007b0a:	bf18      	it	ne
 8007b0c:	2001      	movne	r0, #1
 8007b0e:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_QUANTIZED_BIAS_TYPE, 0));
 8007b10:	4628      	mov	r0, r5
 8007b12:	f7ff fdf9 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    TF_LITE_ENSURE_STATUS(
 8007b16:	1d21      	adds	r1, r4, #4
 8007b18:	4632      	mov	r2, r6
 8007b1a:	f7ff fd97 	bl	800764c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d1c2      	bne.n	8007aaa <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8007b24:	4602      	mov	r2, r0
 8007b26:	2106      	movs	r1, #6
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f7ff fded 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (schema_params->weights_format()) {
 8007b2e:	b130      	cbz	r0, 8007b3e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xda>
 8007b30:	2801      	cmp	r0, #1
 8007b32:	d004      	beq.n	8007b3e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xda>
        TF_LITE_REPORT_ERROR(error_reporter,
 8007b34:	4908      	ldr	r1, [pc, #32]	; (8007b58 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff fd14 	bl	8007564 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 8007b3c:	e7b4      	b.n	8007aa8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
        params->weights_format =
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	7058      	strb	r0, [r3, #1]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007b42:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
 8007b44:	2400      	movs	r4, #0
  *builtin_data = params.release();
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	9403      	str	r4, [sp, #12]
  return kTfLiteOk;
 8007b4a:	e7ae      	b.n	8007aaa <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
 8007b4c:	080f93bc 	.word	0x080f93bc
 8007b50:	080f93a5 	.word	0x080f93a5
 8007b54:	080f9364 	.word	0x080f9364
 8007b58:	080f933a 	.word	0x080f933a

08007b5c <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseMul(const Operator* op, ErrorReporter* error_reporter,
                      BuiltinDataAllocator* allocator, void** builtin_data) {
 8007b5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007b60:	4615      	mov	r5, r2
 8007b62:	4606      	mov	r6, r0
 8007b64:	4688      	mov	r8, r1
 8007b66:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007b68:	f7ff fd2e 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4628      	mov	r0, r5
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4798      	blx	r3
    return new (allocated_memory) T();
 8007b78:	4604      	mov	r4, r0
 8007b7a:	b108      	cbz	r0, 8007b80 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x24>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	7003      	strb	r3, [r0, #0]
 8007b80:	e9cd 5402 	strd	r5, r4, [sp, #8]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteMulParams, SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteMulParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007b84:	b9a4      	cbnz	r4, 8007bb0 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
 8007b86:	4b15      	ldr	r3, [pc, #84]	; (8007bdc <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
 8007b88:	2401      	movs	r4, #1
 8007b8a:	4a15      	ldr	r2, [pc, #84]	; (8007be0 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	f240 7326 	movw	r3, #1830	; 0x726
 8007b94:	4640      	mov	r0, r8
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
 8007b9a:	f7ff fcf1 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 8007b9e:	9903      	ldr	r1, [sp, #12]
 8007ba0:	b111      	cbz	r1, 8007ba8 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4c>
	  get_deleter()(__ptr);
 8007ba2:	a802      	add	r0, sp, #8
 8007ba4:	f7ff fcfa 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007ba8:	4620      	mov	r0, r4
 8007baa:	b004      	add	sp, #16
 8007bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  const tflite::EmbeddingLookupSparseOptions *builtin_options_as_EmbeddingLookupSparseOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_EmbeddingLookupSparseOptions ? static_cast<const tflite::EmbeddingLookupSparseOptions *>(builtin_options()) : nullptr;
  }
  const tflite::MulOptions *builtin_options_as_MulOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_MulOptions ? static_cast<const tflite::MulOptions *>(builtin_options()) : nullptr;
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f7ff fd9a 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007bb6:	2815      	cmp	r0, #21
 8007bb8:	d10a      	bne.n	8007bd0 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7ff fdc7 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8007bc0:	b130      	cbz	r0, 8007bd0 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2104      	movs	r1, #4
 8007bc6:	f7ff fd9f 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
 8007bca:	f7ff fceb 	bl	80075a4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
 8007bce:	7020      	strb	r0, [r4, #0]
	_M_t._M_ptr() = pointer();
 8007bd0:	2300      	movs	r3, #0
  *builtin_data = params.release();
 8007bd2:	603c      	str	r4, [r7, #0]
 8007bd4:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 8007bd6:	461c      	mov	r4, r3
 8007bd8:	e7e1      	b.n	8007b9e <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x42>
 8007bda:	bf00      	nop
 8007bdc:	080f93bc 	.word	0x080f93bc
 8007be0:	080f93a5 	.word	0x080f93a5
 8007be4:	080f9364 	.word	0x080f9364

08007be8 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                           BuiltinDataAllocator*, void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePack(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8007be8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007bec:	4615      	mov	r5, r2
 8007bee:	4606      	mov	r6, r0
 8007bf0:	4688      	mov	r8, r1
 8007bf2:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007bf4:	f7ff fce8 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	2108      	movs	r1, #8
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4628      	mov	r0, r5
 8007c02:	4798      	blx	r3
    return new (allocated_memory) T();
 8007c04:	4604      	mov	r4, r0
 8007c06:	b110      	cbz	r0, 8007c0e <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c0e:	e9cd 5402 	strd	r5, r4, [sp, #8]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLitePackParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePackParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007c12:	b9a4      	cbnz	r4, 8007c3e <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
 8007c14:	4b17      	ldr	r3, [pc, #92]	; (8007c74 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>)
 8007c16:	2401      	movs	r4, #1
 8007c18:	4a17      	ldr	r2, [pc, #92]	; (8007c78 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	f240 734f 	movw	r3, #1871	; 0x74f
 8007c22:	4640      	mov	r0, r8
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
 8007c28:	f7ff fcaa 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 8007c2c:	9903      	ldr	r1, [sp, #12]
 8007c2e:	b111      	cbz	r1, 8007c36 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
	  get_deleter()(__ptr);
 8007c30:	a802      	add	r0, sp, #8
 8007c32:	f7ff fcb3 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007c36:	4620      	mov	r0, r4
 8007c38:	b004      	add	sp, #16
 8007c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  const tflite::FakeQuantOptions *builtin_options_as_FakeQuantOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FakeQuantOptions ? static_cast<const tflite::FakeQuantOptions *>(builtin_options()) : nullptr;
  }
  const tflite::PackOptions *builtin_options_as_PackOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_PackOptions ? static_cast<const tflite::PackOptions *>(builtin_options()) : nullptr;
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7ff fd53 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007c44:	283b      	cmp	r0, #59	; 0x3b
 8007c46:	d10f      	bne.n	8007c68 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f7ff fd80 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8007c4e:	4605      	mov	r5, r0
 8007c50:	b150      	cbz	r0, 8007c68 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
 8007c52:	2200      	movs	r2, #0
 8007c54:	2104      	movs	r1, #4
 8007c56:	f7ff fd4e 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
 8007c5a:	2200      	movs	r2, #0
    params->values_count = schema_params->values_count();
 8007c5c:	6020      	str	r0, [r4, #0]
 8007c5e:	2106      	movs	r1, #6
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7ff fd48 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    params->axis = schema_params->axis();
 8007c66:	6060      	str	r0, [r4, #4]
	_M_t._M_ptr() = pointer();
 8007c68:	2300      	movs	r3, #0
  *builtin_data = params.release();
 8007c6a:	603c      	str	r4, [r7, #0]
 8007c6c:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 8007c6e:	461c      	mov	r4, r3
 8007c70:	e7dc      	b.n	8007c2c <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
 8007c72:	bf00      	nop
 8007c74:	080f93bc 	.word	0x080f93bc
 8007c78:	080f93a5 	.word	0x080f93a5
 8007c7c:	080f9364 	.word	0x080f9364

08007c80 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8007c80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007c84:	4615      	mov	r5, r2
 8007c86:	4606      	mov	r6, r0
 8007c88:	4688      	mov	r8, r1
 8007c8a:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007c8c:	f7ff fc9c 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	2204      	movs	r2, #4
 8007c94:	2128      	movs	r1, #40	; 0x28
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4628      	mov	r0, r5
 8007c9a:	4798      	blx	r3
    return new (allocated_memory) T();
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	b118      	cbz	r0, 8007ca8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28>
 8007ca0:	2228      	movs	r2, #40	; 0x28
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	f00f f8e0 	bl	8016e68 <memset>
 8007ca8:	e9cd 5402 	strd	r5, r4, [sp, #8]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007cac:	b9a4      	cbnz	r4, 8007cd8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 8007cae:	4b25      	ldr	r3, [pc, #148]	; (8007d44 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
 8007cb0:	2401      	movs	r4, #1
 8007cb2:	4a25      	ldr	r2, [pc, #148]	; (8007d48 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>)
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	f44f 63ef 	mov.w	r3, #1912	; 0x778
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4b22      	ldr	r3, [pc, #136]	; (8007d4c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>)
 8007cc2:	f7ff fc5d 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 8007cc6:	9903      	ldr	r1, [sp, #12]
 8007cc8:	b111      	cbz	r1, 8007cd0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
	  get_deleter()(__ptr);
 8007cca:	a802      	add	r0, sp, #8
 8007ccc:	f7ff fc66 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	b004      	add	sp, #16
 8007cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7ff fd06 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007cde:	2805      	cmp	r0, #5
 8007ce0:	d12b      	bne.n	8007d3a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7ff fd33 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8007ce8:	4605      	mov	r5, r0
 8007cea:	b330      	cbz	r0, 8007d3a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8007cec:	2200      	movs	r2, #0
 8007cee:	2104      	movs	r1, #4
 8007cf0:	f7ff fd0a 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
 8007cf4:	f7ff fc60 	bl	80075b8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	7020      	strb	r0, [r4, #0]
 8007cfc:	2106      	movs	r1, #6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f7ff fcf9 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8007d04:	2200      	movs	r2, #0
    params->stride_width = schema_params->stride_w();
 8007d06:	6060      	str	r0, [r4, #4]
 8007d08:	2108      	movs	r1, #8
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f7ff fcf3 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 8007d10:	2200      	movs	r2, #0
    params->stride_height = schema_params->stride_h();
 8007d12:	60a0      	str	r0, [r4, #8]
 8007d14:	210a      	movs	r1, #10
 8007d16:	4628      	mov	r0, r5
 8007d18:	f7ff fced 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 8007d1c:	2200      	movs	r2, #0
    params->filter_width = schema_params->filter_width();
 8007d1e:	60e0      	str	r0, [r4, #12]
 8007d20:	210c      	movs	r1, #12
 8007d22:	4628      	mov	r0, r5
 8007d24:	f7ff fce7 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8007d28:	2200      	movs	r2, #0
    params->filter_height = schema_params->filter_height();
 8007d2a:	6120      	str	r0, [r4, #16]
 8007d2c:	210e      	movs	r1, #14
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f7ff fcea 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
 8007d34:	f7ff fc36 	bl	80075a4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
 8007d38:	7520      	strb	r0, [r4, #20]
	_M_t._M_ptr() = pointer();
 8007d3a:	2300      	movs	r3, #0
  *builtin_data = params.release();
 8007d3c:	603c      	str	r4, [r7, #0]
 8007d3e:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 8007d40:	461c      	mov	r4, r3
 8007d42:	e7c0      	b.n	8007cc6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
 8007d44:	080f93bc 	.word	0x080f93bc
 8007d48:	080f93a5 	.word	0x080f93a5
 8007d4c:	080f9364 	.word	0x080f9364

08007d50 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReducer(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8007d50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007d54:	4615      	mov	r5, r2
 8007d56:	4606      	mov	r6, r0
 8007d58:	4688      	mov	r8, r1
 8007d5a:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007d5c:	f7ff fc34 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	2201      	movs	r2, #1
 8007d64:	4628      	mov	r0, r5
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4798      	blx	r3
    return new (allocated_memory) T();
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	b108      	cbz	r0, 8007d74 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x24>
 8007d70:	2300      	movs	r3, #0
 8007d72:	7003      	strb	r3, [r0, #0]
 8007d74:	e9cd 5402 	strd	r5, r4, [sp, #8]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReducerParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReducerParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007d78:	b9a4      	cbnz	r4, 8007da4 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
 8007d7a:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
 8007d7c:	2401      	movs	r4, #1
 8007d7e:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
 8007d80:	4641      	mov	r1, r8
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	f44f 63f7 	mov.w	r3, #1976	; 0x7b8
 8007d88:	4640      	mov	r0, r8
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	4b12      	ldr	r3, [pc, #72]	; (8007dd8 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
 8007d8e:	f7ff fbf7 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 8007d92:	9903      	ldr	r1, [sp, #12]
 8007d94:	b111      	cbz	r1, 8007d9c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4c>
	  get_deleter()(__ptr);
 8007d96:	a802      	add	r0, sp, #8
 8007d98:	f7ff fc00 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	b004      	add	sp, #16
 8007da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff fca0 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007daa:	281b      	cmp	r0, #27
 8007dac:	d10b      	bne.n	8007dc6 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7ff fccd 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8007db4:	b138      	cbz	r0, 8007dc6 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
 8007db6:	2200      	movs	r2, #0
 8007db8:	2104      	movs	r1, #4
 8007dba:	f7ff fc8d 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8007dbe:	3000      	adds	r0, #0
 8007dc0:	bf18      	it	ne
 8007dc2:	2001      	movne	r0, #1
 8007dc4:	7020      	strb	r0, [r4, #0]
	_M_t._M_ptr() = pointer();
 8007dc6:	2300      	movs	r3, #0
  *builtin_data = params.release();
 8007dc8:	603c      	str	r4, [r7, #0]
 8007dca:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 8007dcc:	461c      	mov	r4, r3
 8007dce:	e7e0      	b.n	8007d92 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x42>
 8007dd0:	080f93bc 	.word	0x080f93bc
 8007dd4:	080f93a5 	.word	0x080f93a5
 8007dd8:	080f9364 	.word	0x080f9364

08007ddc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8007ddc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007de0:	4615      	mov	r5, r2
 8007de2:	4606      	mov	r6, r0
 8007de4:	4688      	mov	r8, r1
 8007de6:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007de8:	f7ff fbee 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	2204      	movs	r2, #4
 8007df0:	2124      	movs	r1, #36	; 0x24
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4628      	mov	r0, r5
 8007df6:	4798      	blx	r3
    return new (allocated_memory) T();
 8007df8:	4604      	mov	r4, r0
 8007dfa:	b118      	cbz	r0, 8007e04 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28>
 8007dfc:	2224      	movs	r2, #36	; 0x24
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f00f f832 	bl	8016e68 <memset>
 8007e04:	e9cd 5402 	strd	r5, r4, [sp, #8]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007e08:	b9a4      	cbnz	r4, 8007e34 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 8007e0a:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>)
 8007e0c:	2401      	movs	r4, #1
 8007e0e:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>)
 8007e10:	4641      	mov	r1, r8
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8007e18:	4640      	mov	r0, r8
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>)
 8007e1e:	f7ff fbaf 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 8007e22:	9903      	ldr	r1, [sp, #12]
 8007e24:	b111      	cbz	r1, 8007e2c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
	  get_deleter()(__ptr);
 8007e26:	a802      	add	r0, sp, #8
 8007e28:	f7ff fbb8 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	b004      	add	sp, #16
 8007e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff fc58 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007e3a:	2811      	cmp	r0, #17
 8007e3c:	d117      	bne.n	8007e6e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f7ff fc85 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8007e44:	4605      	mov	r5, r0
 8007e46:	b190      	cbz	r0, 8007e6e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    auto field_offset = GetOptionalFieldOffset(field);
 8007e48:	2104      	movs	r1, #4
 8007e4a:	f7ff fbf7 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8007e4e:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007e50:	b168      	cbz	r0, 8007e6e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
 8007e52:	582d      	ldr	r5, [r5, r0]
    if (new_shape != nullptr) {
 8007e54:	1970      	adds	r0, r6, r5
 8007e56:	d00a      	beq.n	8007e6e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
      TF_LITE_ENSURE_STATUS(
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4b0a      	ldr	r3, [pc, #40]	; (8007e84 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>)
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	f7ff fbbf 	bl	80075e0 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_EEPS5_PNS_13ErrorReporterEPKc.constprop.66>
 8007e62:	4604      	mov	r4, r0
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d1dc      	bne.n	8007e22 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
      params->num_dimensions = new_shape->size();
 8007e68:	5972      	ldr	r2, [r6, r5]
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	621a      	str	r2, [r3, #32]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007e6e:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
 8007e70:	2400      	movs	r4, #0
  *builtin_data = params.release();
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	9403      	str	r4, [sp, #12]
  return kTfLiteOk;
 8007e76:	e7d4      	b.n	8007e22 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
 8007e78:	080f93bc 	.word	0x080f93bc
 8007e7c:	080f93a5 	.word	0x080f93a5
 8007e80:	080f9364 	.word	0x080f9364
 8007e84:	080f9232 	.word	0x080f9232

08007e88 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                           BuiltinDataAllocator*, void**) {
  return kTfLiteOk;
}

TfLiteStatus ParseShape(const Operator* op, ErrorReporter* error_reporter,
                        BuiltinDataAllocator* allocator, void** builtin_data) {
 8007e88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	4698      	mov	r8, r3
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007e90:	6813      	ldr	r3, [r2, #0]
 8007e92:	2201      	movs	r2, #1
 8007e94:	4607      	mov	r7, r0
 8007e96:	460e      	mov	r6, r1
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	4798      	blx	r3
    return new (allocated_memory) T();
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	b108      	cbz	r0, 8007ea8 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	7003      	strb	r3, [r0, #0]
 8007ea8:	e9cd 5402 	strd	r5, r4, [sp, #8]
  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteShapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteShapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007eac:	b9a4      	cbnz	r4, 8007ed8 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
 8007eae:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
 8007eb0:	2401      	movs	r4, #1
 8007eb2:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>)
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	f640 03d7 	movw	r3, #2263	; 0x8d7
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
 8007ec2:	f7ff fb5d 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 8007ec6:	9903      	ldr	r1, [sp, #12]
 8007ec8:	b111      	cbz	r1, 8007ed0 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
	  get_deleter()(__ptr);
 8007eca:	a802      	add	r0, sp, #8
 8007ecc:	f7ff fb66 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	b004      	add	sp, #16
 8007ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ShapeOptions ? static_cast<const tflite::ShapeOptions *>(builtin_options()) : nullptr;
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f7ff fc06 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007ede:	2837      	cmp	r0, #55	; 0x37
 8007ee0:	d005      	beq.n	8007eee <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007ee2:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
 8007ee4:	2400      	movs	r4, #0
  *builtin_data = params.release();
 8007ee6:	f8c8 3000 	str.w	r3, [r8]
 8007eea:	9403      	str	r4, [sp, #12]
  return kTfLiteOk;
 8007eec:	e7eb      	b.n	8007ec6 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7ff fc2d 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d0f4      	beq.n	8007ee2 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUT_TYPE, 0));
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2104      	movs	r1, #4
 8007efc:	f7ff fc04 	bl	8007708 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->out_type(),
 8007f00:	4621      	mov	r1, r4
 8007f02:	4632      	mov	r2, r6
 8007f04:	f7ff fba2 	bl	800764c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d0e9      	beq.n	8007ee2 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
 8007f0e:	e7da      	b.n	8007ec6 <_ZN6tflite10ParseShapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
 8007f10:	080f93bc 	.word	0x080f93bc
 8007f14:	080f93a5 	.word	0x080f93a5
 8007f18:	080f9364 	.word	0x080f9364

08007f1c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8007f1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007f20:	4615      	mov	r5, r2
 8007f22:	4606      	mov	r6, r0
 8007f24:	4688      	mov	r8, r1
 8007f26:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007f28:	f7ff fb4e 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	2204      	movs	r2, #4
 8007f30:	4628      	mov	r0, r5
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4798      	blx	r3
    return new (allocated_memory) T();
 8007f38:	4604      	mov	r4, r0
 8007f3a:	b108      	cbz	r0, 8007f40 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x24>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6003      	str	r3, [r0, #0]
 8007f40:	e9cd 5402 	strd	r5, r4, [sp, #8]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007f44:	b9a4      	cbnz	r4, 8007f70 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
 8007f48:	2401      	movs	r4, #1
 8007f4a:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
 8007f4c:	4641      	mov	r1, r8
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	f640 1301 	movw	r3, #2305	; 0x901
 8007f54:	4640      	mov	r0, r8
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
 8007f5a:	f7ff fb11 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 8007f5e:	9903      	ldr	r1, [sp, #12]
 8007f60:	b111      	cbz	r1, 8007f68 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4c>
	  get_deleter()(__ptr);
 8007f62:	a802      	add	r0, sp, #8
 8007f64:	f7ff fb1a 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007f68:	4620      	mov	r0, r4
 8007f6a:	b004      	add	sp, #16
 8007f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7ff fbba 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 8007f76:	2809      	cmp	r0, #9
 8007f78:	d10a      	bne.n	8007f90 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7ff fbe7 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8007f80:	b130      	cbz	r0, 8007f90 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
    return GetField<float>(VT_BETA, 0.0f);
 8007f82:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8007fa8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
 8007f86:	2104      	movs	r1, #4
 8007f88:	f7ff fbc7 	bl	800771a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
 8007f8c:	ed84 0a00 	vstr	s0, [r4]
	_M_t._M_ptr() = pointer();
 8007f90:	2300      	movs	r3, #0
  *builtin_data = params.release();
 8007f92:	603c      	str	r4, [r7, #0]
 8007f94:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 8007f96:	461c      	mov	r4, r3
 8007f98:	e7e1      	b.n	8007f5e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x42>
 8007f9a:	bf00      	nop
 8007f9c:	080f93bc 	.word	0x080f93bc
 8007fa0:	080f93a5 	.word	0x080f93a5
 8007fa4:	080f9364 	.word	0x080f9364
 8007fa8:	00000000 	.word	0x00000000

08007fac <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseStridedSlice(const Operator* op,
                               ErrorReporter* error_reporter,
                               BuiltinDataAllocator* allocator,
                               void** builtin_data) {
 8007fac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007fb0:	4615      	mov	r5, r2
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	4688      	mov	r8, r1
 8007fb6:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8007fb8:	f7ff fb06 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	2118      	movs	r1, #24
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	4798      	blx	r3
    return new (allocated_memory) T();
 8007fc8:	4604      	mov	r4, r0
 8007fca:	b118      	cbz	r0, 8007fd4 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28>
 8007fcc:	2218      	movs	r2, #24
 8007fce:	2100      	movs	r1, #0
 8007fd0:	f00e ff4a 	bl	8016e68 <memset>
 8007fd4:	e9cd 5402 	strd	r5, r4, [sp, #8]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteStridedSliceParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteStridedSliceParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007fd8:	b9a4      	cbnz	r4, 8008004 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 8007fda:	4b25      	ldr	r3, [pc, #148]	; (8008070 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
 8007fdc:	2401      	movs	r4, #1
 8007fde:	4a25      	ldr	r2, [pc, #148]	; (8008074 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>)
 8007fe0:	4641      	mov	r1, r8
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	f640 13be 	movw	r3, #2494	; 0x9be
 8007fe8:	4640      	mov	r0, r8
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	4b22      	ldr	r3, [pc, #136]	; (8008078 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>)
 8007fee:	f7ff fac7 	bl	8007580 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
	if (__ptr != nullptr)
 8007ff2:	9903      	ldr	r1, [sp, #12]
 8007ff4:	b111      	cbz	r1, 8007ffc <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
	  get_deleter()(__ptr);
 8007ff6:	a802      	add	r0, sp, #8
 8007ff8:	f7ff fad0 	bl	800759c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	b004      	add	sp, #16
 8008000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_StridedSliceOptions ? static_cast<const tflite::StridedSliceOptions *>(builtin_options()) : nullptr;
 8008004:	4630      	mov	r0, r6
 8008006:	f7ff fb70 	bl	80076ea <_ZNK6tflite8Operator20builtin_options_typeEv>
 800800a:	2820      	cmp	r0, #32
 800800c:	d12a      	bne.n	8008064 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff fb9d 	bl	800774e <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
 8008014:	4605      	mov	r5, r0
 8008016:	b328      	cbz	r0, 8008064 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
 8008018:	2200      	movs	r2, #0
 800801a:	2104      	movs	r1, #4
 800801c:	f7ff fb6b 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_END_MASK, 0);
 8008020:	2200      	movs	r2, #0
    params->begin_mask = schema_params->begin_mask();
 8008022:	6020      	str	r0, [r4, #0]
 8008024:	2106      	movs	r1, #6
 8008026:	4628      	mov	r0, r5
 8008028:	f7ff fb65 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
 800802c:	2200      	movs	r2, #0
    params->end_mask = schema_params->end_mask();
 800802e:	6060      	str	r0, [r4, #4]
 8008030:	2108      	movs	r1, #8
 8008032:	4628      	mov	r0, r5
 8008034:	f7ff fb5f 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
 8008038:	2200      	movs	r2, #0
    params->ellipsis_mask = schema_params->ellipsis_mask();
 800803a:	60a0      	str	r0, [r4, #8]
 800803c:	210a      	movs	r1, #10
 800803e:	4628      	mov	r0, r5
 8008040:	f7ff fb59 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
 8008044:	2200      	movs	r2, #0
    params->new_axis_mask = schema_params->new_axis_mask();
 8008046:	60e0      	str	r0, [r4, #12]
 8008048:	210c      	movs	r1, #12
 800804a:	4628      	mov	r0, r5
 800804c:	f7ff fb53 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<uint8_t>(VT_OFFSET, 0) != 0;
 8008050:	2200      	movs	r2, #0
    params->shrink_axis_mask = schema_params->shrink_axis_mask();
 8008052:	6120      	str	r0, [r4, #16]
 8008054:	210e      	movs	r1, #14
 8008056:	4628      	mov	r0, r5
 8008058:	f7ff fb3e 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800805c:	3000      	adds	r0, #0
 800805e:	bf18      	it	ne
 8008060:	2001      	movne	r0, #1
 8008062:	7520      	strb	r0, [r4, #20]
	_M_t._M_ptr() = pointer();
 8008064:	2300      	movs	r3, #0
  *builtin_data = params.release();
 8008066:	603c      	str	r4, [r7, #0]
 8008068:	9303      	str	r3, [sp, #12]
  return kTfLiteOk;
 800806a:	461c      	mov	r4, r3
 800806c:	e7c1      	b.n	8007ff2 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
 800806e:	bf00      	nop
 8008070:	080f93bc 	.word	0x080f93bc
 8008074:	080f93a5 	.word	0x080f93a5
 8008078:	080f9364 	.word	0x080f9364

0800807c <TfLiteIntArrayGetSizeInBytes>:
namespace {

template <class T>
size_t TfLiteVarArrayGetSizeInBytes(const int size) {
  constexpr size_t data_size = sizeof(std::declval<T>().data[0]);
  size_t computed_size = sizeof(T) + data_size * size;
 800807c:	3001      	adds	r0, #1

extern "C" {

size_t TfLiteIntArrayGetSizeInBytes(int size) {
  return TfLiteVarArrayGetSizeInBytes<TfLiteIntArray>(size);
}
 800807e:	0080      	lsls	r0, r0, #2
 8008080:	4770      	bx	lr

08008082 <TfLiteIntArrayEqual>:
  if (a == b) {
 8008082:	4288      	cmp	r0, r1

int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
 8008084:	b508      	push	{r3, lr}
  if (a == b) {
 8008086:	d00e      	beq.n	80080a6 <TfLiteIntArrayEqual+0x24>
  if (a == nullptr || b == nullptr) {
 8008088:	b160      	cbz	r0, 80080a4 <TfLiteIntArrayEqual+0x22>
 800808a:	b171      	cbz	r1, 80080aa <TfLiteIntArrayEqual+0x28>
  return TfLiteVarArrayEqualsArray(a, b->size, b->data);
 800808c:	680a      	ldr	r2, [r1, #0]
  if (a->size != b_size) {
 800808e:	6803      	ldr	r3, [r0, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	d10a      	bne.n	80080aa <TfLiteIntArrayEqual+0x28>
  return !memcmp(a->data, b_data, a->size * sizeof(a->data[0]));
 8008094:	0092      	lsls	r2, r2, #2
 8008096:	3104      	adds	r1, #4
 8008098:	3004      	adds	r0, #4
 800809a:	f00e fecb 	bl	8016e34 <memcmp>
 800809e:	fab0 f080 	clz	r0, r0
 80080a2:	0940      	lsrs	r0, r0, #5
  return TfLiteVarArrayEqual(a, b);
}
 80080a4:	bd08      	pop	{r3, pc}
    return 1;
 80080a6:	2001      	movs	r0, #1
 80080a8:	e7fc      	b.n	80080a4 <TfLiteIntArrayEqual+0x22>
    return 0;
 80080aa:	2000      	movs	r0, #0
  return TfLiteVarArrayEqual(a, b);
 80080ac:	e7fa      	b.n	80080a4 <TfLiteIntArrayEqual+0x22>
	...

080080b0 <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80080b0:	2812      	cmp	r0, #18
 80080b2:	bf9a      	itte	ls
 80080b4:	4b02      	ldrls	r3, [pc, #8]	; (80080c0 <TfLiteTypeGetName+0x10>)
 80080b6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80080ba:	4802      	ldrhi	r0, [pc, #8]	; (80080c4 <TfLiteTypeGetName+0x14>)
      return "VARIANT";
    case kTfLiteInt4:
      return "INT4";
  }
  return "Unknown type";
}
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	080f949c 	.word	0x080f949c
 80080c4:	080f94e8 	.word	0x080f94e8

080080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:

int32_t MultiplyByQuantizedMultiplier(int32_t x, int32_t quantized_multiplier,
                                      int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80080c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
 80080cc:	2a00      	cmp	r2, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80080ce:	fa00 f003 	lsl.w	r0, r0, r3
  int right_shift = shift > 0 ? 0 : -shift;
 80080d2:	bfd4      	ite	le
 80080d4:	4252      	negle	r2, r2
 80080d6:	2200      	movgt	r2, #0
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80080d8:	4288      	cmp	r0, r1
                                      int shift) {
 80080da:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
 80080de:	d132      	bne.n	8008146 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x7e>
 80080e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080e4:	425c      	negs	r4, r3
 80080e6:	415c      	adcs	r4, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
 80080e8:	fb80 0101 	smull	r0, r1, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f171 0300 	sbcs.w	r3, r1, #0
 80080f2:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x98>)
 80080f4:	bfa8      	it	ge
 80080f6:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80080fa:	bb6c      	cbnz	r4, 8008158 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x90>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80080fc:	eb10 0b03 	adds.w	fp, r0, r3
 8008100:	eb41 7ce3 	adc.w	ip, r1, r3, asr #31
 8008104:	f1bb 0f00 	cmp.w	fp, #0
 8008108:	f17c 0300 	sbcs.w	r3, ip, #0
 800810c:	da06      	bge.n	800811c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x54>
 800810e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008112:	2500      	movs	r5, #0
 8008114:	eb1b 0b04 	adds.w	fp, fp, r4
 8008118:	eb4c 0c05 	adc.w	ip, ip, r5
 800811c:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8008120:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
 8008124:	2a1f      	cmp	r2, #31
 8008126:	dc10      	bgt.n	800814a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x82>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8008128:	2101      	movs	r1, #1
 800812a:	4091      	lsls	r1, r2
 800812c:	3901      	subs	r1, #1
  return a >> offset;
 800812e:	1048      	asrs	r0, r1, #1
  return a & b;
 8008130:	ea01 0403 	and.w	r4, r1, r3
  return a + b;
 8008134:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  return a >> offset;
 8008138:	4113      	asrs	r3, r2
  return a + b;
 800813a:	4284      	cmp	r4, r0
 800813c:	bfd4      	ite	le
 800813e:	4618      	movle	r0, r3
 8008140:	1c58      	addgt	r0, r3, #1
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8008142:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8008146:	2400      	movs	r4, #0
 8008148:	e7ce      	b.n	80080e8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
  assert(exponent <= 31);
 800814a:	4b06      	ldr	r3, [pc, #24]	; (8008164 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x9c>)
 800814c:	f240 1167 	movw	r1, #359	; 0x167
 8008150:	4a05      	ldr	r2, [pc, #20]	; (8008168 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xa0>)
 8008152:	4806      	ldr	r0, [pc, #24]	; (800816c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xa4>)
 8008154:	f00e fdfe 	bl	8016d54 <__assert_func>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8008158:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800815c:	e7e2      	b.n	8008124 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x5c>
 800815e:	bf00      	nop
 8008160:	c0000001 	.word	0xc0000001
 8008164:	080f9566 	.word	0x080f9566
 8008168:	080f96ce 	.word	0x080f96ce
 800816c:	080f9575 	.word	0x080f9575

08008170 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>:
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
 8008170:	2a00      	cmp	r2, #0
                                      int shift) {
 8008172:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert(quantized_multiplier >= 0);
 8008176:	da05      	bge.n	8008184 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x14>
 8008178:	4b27      	ldr	r3, [pc, #156]	; (8008218 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xa8>)
 800817a:	2129      	movs	r1, #41	; 0x29
 800817c:	4a27      	ldr	r2, [pc, #156]	; (800821c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xac>)
  assert(shift >= -31 && shift < 8);
 800817e:	4828      	ldr	r0, [pc, #160]	; (8008220 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xb0>)
 8008180:	f00e fde8 	bl	8016d54 <__assert_func>
 8008184:	f103 041f 	add.w	r4, r3, #31
 8008188:	2c26      	cmp	r4, #38	; 0x26
 800818a:	d903      	bls.n	8008194 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x24>
 800818c:	4b25      	ldr	r3, [pc, #148]	; (8008224 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xb4>)
 800818e:	212a      	movs	r1, #42	; 0x2a
 8008190:	4a22      	ldr	r2, [pc, #136]	; (800821c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xac>)
 8008192:	e7f4      	b.n	800817e <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xe>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
 8008194:	1c04      	adds	r4, r0, #0
 8008196:	f541 4500 	adc.w	r5, r1, #32768	; 0x8000
 800819a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800819e:	bf08      	it	eq
 80081a0:	2c00      	cmpeq	r4, #0
 80081a2:	d303      	bcc.n	80081ac <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x3c>
 80081a4:	4b20      	ldr	r3, [pc, #128]	; (8008228 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xb8>)
 80081a6:	212c      	movs	r1, #44	; 0x2c
 80081a8:	4a1c      	ldr	r2, [pc, #112]	; (800821c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xac>)
 80081aa:	e7e8      	b.n	800817e <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xe>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
 80081ac:	4c1f      	ldr	r4, [pc, #124]	; (800822c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0xbc>)
 80081ae:	42a2      	cmp	r2, r4
 80081b0:	bfd6      	itet	le
 80081b2:	f502 4200 	addle.w	r2, r2, #32768	; 0x8000
 80081b6:	f647 72ff 	movwgt	r2, #32767	; 0x7fff
 80081ba:	1412      	asrle	r2, r2, #16
                                   : 0x7FFF;
  int total_shift = 15 - shift;
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 80081bc:	17d6      	asrs	r6, r2, #31
 80081be:	fb02 f401 	mul.w	r4, r2, r1
 80081c2:	fb00 4406 	mla	r4, r0, r6, r4
 80081c6:	2601      	movs	r6, #1
 80081c8:	fba2 0100 	umull	r0, r1, r2, r0
 80081cc:	f1c3 020e 	rsb	r2, r3, #14
 80081d0:	f1a2 0c20 	sub.w	ip, r2, #32
 80081d4:	f1c2 0720 	rsb	r7, r2, #32
 80081d8:	fa06 f802 	lsl.w	r8, r6, r2
 80081dc:	4421      	add	r1, r4
 80081de:	fa06 f90c 	lsl.w	r9, r6, ip
 80081e2:	fa26 f707 	lsr.w	r7, r6, r7
 80081e6:	eb18 0400 	adds.w	r4, r8, r0
  int total_shift = 15 - shift;
 80081ea:	f1c3 000f 	rsb	r0, r3, #15
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 80081ee:	ea49 0907 	orr.w	r9, r9, r7
  int32_t result = x >> total_shift;
 80081f2:	f1c0 0220 	rsb	r2, r0, #32
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 80081f6:	eb49 0501 	adc.w	r5, r9, r1
  int32_t result = x >> total_shift;
 80081fa:	f1b0 0320 	subs.w	r3, r0, #32
 80081fe:	fa24 f000 	lsr.w	r0, r4, r0
 8008202:	fa05 f202 	lsl.w	r2, r5, r2
 8008206:	bf58      	it	pl
 8008208:	fa45 f303 	asrpl.w	r3, r5, r3
 800820c:	ea40 0002 	orr.w	r0, r0, r2
 8008210:	bf58      	it	pl
 8008212:	4318      	orrpl	r0, r3
  return result;
}
 8008214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008218:	080f95cf 	.word	0x080f95cf
 800821c:	080f9689 	.word	0x080f9689
 8008220:	080f95e9 	.word	0x080f95e9
 8008224:	080f9622 	.word	0x080f9622
 8008228:	080f963c 	.word	0x080f963c
 800822c:	7ffeffff 	.word	0x7ffeffff

08008230 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 8008230:	b570      	push	{r4, r5, r6, lr}
  for (int i = 0; i < num_elements / 2; i++) {
 8008232:	2402      	movs	r4, #2
 8008234:	2300      	movs	r3, #0
 8008236:	fb91 f4f4 	sdiv	r4, r1, r4
 800823a:	429c      	cmp	r4, r3
 800823c:	dd0a      	ble.n	8008254 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x24>
    int8_t byte = src_buffer[i];
    // Shift left first so that sign is properly extended when shifted right
    int8_t lower = static_cast<int8_t>(byte << 4) >> 4;
 800823e:	56c5      	ldrsb	r5, [r0, r3]
 8008240:	f345 0603 	sbfx	r6, r5, #0, #4
    int8_t higher = byte >> 4;
 8008244:	112d      	asrs	r5, r5, #4
    int8_t lower = static_cast<int8_t>(byte << 4) >> 4;
 8008246:	f802 6013 	strb.w	r6, [r2, r3, lsl #1]
    dst_buffer[2 * i] = lower;
    dst_buffer[2 * i + 1] = higher;
 800824a:	eb02 0643 	add.w	r6, r2, r3, lsl #1
  for (int i = 0; i < num_elements / 2; i++) {
 800824e:	3301      	adds	r3, #1
    int8_t higher = byte >> 4;
 8008250:	7075      	strb	r5, [r6, #1]
  for (int i = 0; i < num_elements / 2; i++) {
 8008252:	e7f2      	b.n	800823a <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0xa>
  }

  // If the buffer size is odd, extract the final lower nibble.
  if (num_elements % 2 != 0) {
 8008254:	07cb      	lsls	r3, r1, #31
    dst_buffer[num_elements - 1] =
        static_cast<int8_t>(src_buffer[num_elements / 2] << 4) >> 4;
 8008256:	bf41      	itttt	mi
 8008258:	5703      	ldrsbmi	r3, [r0, r4]
    dst_buffer[num_elements - 1] =
 800825a:	1852      	addmi	r2, r2, r1
        static_cast<int8_t>(src_buffer[num_elements / 2] << 4) >> 4;
 800825c:	f343 0303 	sbfxmi	r3, r3, #0, #4
    dst_buffer[num_elements - 1] =
 8008260:	f802 3c01 	strbmi.w	r3, [r2, #-1]
  }
}
 8008264:	bd70      	pop	{r4, r5, r6, pc}
	...

08008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8008268:	b538      	push	{r3, r4, r5, lr}
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 800826a:	2200      	movs	r2, #0
                        int* shift) {
 800826c:	4605      	mov	r5, r0
 800826e:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
 8008270:	2300      	movs	r3, #0
                        int* shift) {
 8008272:	ed2d 8b02 	vpush	{d8}
  if (double_multiplier == 0.) {
 8008276:	ec51 0b10 	vmov	r0, r1, d0
                        int* shift) {
 800827a:	eeb0 8a40 	vmov.f32	s16, s0
 800827e:	eef0 8a60 	vmov.f32	s17, s1
  if (double_multiplier == 0.) {
 8008282:	f7f8 fc43 	bl	8000b0c <__aeabi_dcmpeq>
 8008286:	b128      	cbz	r0, 8008294 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x2c>
    *quantized_multiplier = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	602b      	str	r3, [r5, #0]
    *shift = 0;
 800828c:	6023      	str	r3, [r4, #0]
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 800828e:	ecbd 8b02 	vpop	{d8}
 8008292:	bd38      	pop	{r3, r4, r5, pc}
  const double q = std::frexp(double_multiplier, shift);
 8008294:	4620      	mov	r0, r4
 8008296:	eeb0 0a48 	vmov.f32	s0, s16
 800829a:	eef0 0a68 	vmov.f32	s1, s17
 800829e:	f00e fb77 	bl	8016990 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 80082a2:	2200      	movs	r2, #0
 80082a4:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8c>)
 80082a6:	ec51 0b10 	vmov	r0, r1, d0
 80082aa:	f7f8 f9c7 	bl	800063c <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80082ae:	ec41 0b10 	vmov	d0, r0, r1
 80082b2:	f00e fba3 	bl	80169fc <round>
 80082b6:	ec51 0b10 	vmov	r0, r1, d0
 80082ba:	f7f8 fd39 	bl	8000d30 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 80082be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082c2:	2300      	movs	r3, #0
 80082c4:	4282      	cmp	r2, r0
 80082c6:	eb73 0c01 	sbcs.w	ip, r3, r1
 80082ca:	da01      	bge.n	80082d0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x68>
 80082cc:	f00e fd3a 	bl	8016d44 <abort>
  if (q_fixed == (1LL << 31)) {
 80082d0:	4299      	cmp	r1, r3
 80082d2:	bf01      	itttt	eq
 80082d4:	4290      	cmpeq	r0, r2
    ++*shift;
 80082d6:	6823      	ldreq	r3, [r4, #0]
    q_fixed /= 2;
 80082d8:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
    ++*shift;
 80082dc:	3301      	addeq	r3, #1
 80082de:	bf08      	it	eq
 80082e0:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	331f      	adds	r3, #31
    *shift = 0;
 80082e6:	bfbe      	ittt	lt
 80082e8:	2300      	movlt	r3, #0
    q_fixed = 0;
 80082ea:	2000      	movlt	r0, #0
    *shift = 0;
 80082ec:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80082ee:	6028      	str	r0, [r5, #0]
 80082f0:	e7cd      	b.n	800828e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x26>
 80082f2:	bf00      	nop
 80082f4:	41e00000 	.word	0x41e00000

080082f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 80082f8:	b538      	push	{r3, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
 80082fa:	2200      	movs	r2, #0
                                      int* left_shift) {
 80082fc:	4605      	mov	r5, r0
 80082fe:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8008300:	4b0d      	ldr	r3, [pc, #52]	; (8008338 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x40>)
                                      int* left_shift) {
 8008302:	ed2d 8b02 	vpush	{d8}
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8008306:	ec51 0b10 	vmov	r0, r1, d0
                                      int* left_shift) {
 800830a:	eeb0 8a40 	vmov.f32	s16, s0
 800830e:	eef0 8a60 	vmov.f32	s17, s1
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8008312:	f7f8 fc23 	bl	8000b5c <__aeabi_dcmpgt>
 8008316:	b908      	cbnz	r0, 800831c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x24>
 8008318:	f00e fd14 	bl	8016d44 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800831c:	4621      	mov	r1, r4
 800831e:	4628      	mov	r0, r5
 8008320:	eeb0 0a48 	vmov.f32	s0, s16
 8008324:	eef0 0a68 	vmov.f32	s1, s17
 8008328:	f7ff ff9e 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	dbf2      	blt.n	8008318 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
}
 8008332:	ecbd 8b02 	vpop	{d8}
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	3ff00000 	.word	0x3ff00000

0800833c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
 800833c:	b530      	push	{r4, r5, lr}
 800833e:	b085      	sub	sp, #20
 8008340:	4605      	mov	r5, r0
 8008342:	460c      	mov	r4, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
 8008344:	2200      	movs	r2, #0
 8008346:	4b11      	ldr	r3, [pc, #68]	; (800838c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x50>)
 8008348:	ec51 0b10 	vmov	r0, r1, d0
 800834c:	ed8d 0b00 	vstr	d0, [sp]
 8008350:	f7f8 fbe6 	bl	8000b20 <__aeabi_dcmplt>
 8008354:	ed9d 0b00 	vldr	d0, [sp]
 8008358:	b908      	cbnz	r0, 800835e <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x22>
 800835a:	f00e fcf3 	bl	8016d44 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
 800835e:	2200      	movs	r2, #0
 8008360:	2300      	movs	r3, #0
 8008362:	ec51 0b10 	vmov	r0, r1, d0
 8008366:	ed8d 0b00 	vstr	d0, [sp]
 800836a:	f7f8 fbf7 	bl	8000b5c <__aeabi_dcmpgt>
 800836e:	2800      	cmp	r0, #0
 8008370:	d0f3      	beq.n	800835a <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1e>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
 8008372:	a903      	add	r1, sp, #12
 8008374:	4628      	mov	r0, r5
 8008376:	ed9d 0b00 	vldr	d0, [sp]
 800837a:	f7ff ff75 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_LE(shift, 0);
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	dcea      	bgt.n	800835a <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1e>
  *left_shift = shift;
 8008384:	6023      	str	r3, [r4, #0]
}
 8008386:	b005      	add	sp, #20
 8008388:	bd30      	pop	{r4, r5, pc}
 800838a:	bf00      	nop
 800838c:	3ff00000 	.word	0x3ff00000

08008390 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
      0) {
    input_beta_real_multiplier = max_real_multiplier;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier =
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
 8008390:	2301      	movs	r3, #1
 8008392:	f1c0 001f 	rsb	r0, r0, #31
                              int32_t* quantized_multiplier, int* left_shift) {
 8008396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008398:	b085      	sub	sp, #20
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
 800839a:	fa03 f000 	lsl.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
 800839e:	4615      	mov	r5, r2
 80083a0:	460c      	mov	r4, r1
 80083a2:	ed8d 0b02 	vstr	d0, [sp, #8]
 80083a6:	ed8d 1b00 	vstr	d1, [sp]
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
 80083aa:	f7f8 f8dd 	bl	8000568 <__aeabi_i2d>
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	ed9d 1b00 	vldr	d1, [sp]
 80083b6:	ed9d 0b02 	vldr	d0, [sp, #8]
 80083ba:	ec53 2b11 	vmov	r2, r3, d1
 80083be:	ec51 0b10 	vmov	r0, r1, d0
 80083c2:	f7f8 f93b 	bl	800063c <__aeabi_dmul>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4630      	mov	r0, r6
 80083cc:	4639      	mov	r1, r7
 80083ce:	f7f8 f935 	bl	800063c <__aeabi_dmul>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80083d2:	a309      	add	r3, pc, #36	; (adr r3, 80083f8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x68>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	e9cd 0100 	strd	r0, r1, [sp]
 80083dc:	f7f8 fbbe 	bl	8000b5c <__aeabi_dcmpgt>
 80083e0:	ed9d 0b00 	vldr	d0, [sp]
 80083e4:	b108      	cbz	r0, 80083ea <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x5a>
	return __b;
 80083e6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80083f8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x68>
                       max_real_multiplier);
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 80083ea:	4629      	mov	r1, r5
 80083ec:	4620      	mov	r0, r4
                                   quantized_multiplier, left_shift);
}
 80083ee:	b005      	add	sp, #20
 80083f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 80083f4:	f7ff bf80 	b.w	80082f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
 80083f8:	ffc00000 	.word	0xffc00000
 80083fc:	41dfffff 	.word	0x41dfffff

08008400 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8008400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8008404:	2401      	movs	r4, #1
                         int total_signed_bits) {
 8008406:	4681      	mov	r9, r0
 8008408:	4615      	mov	r5, r2
 800840a:	4688      	mov	r8, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800840c:	fa04 f000 	lsl.w	r0, r4, r0
 8008410:	3801      	subs	r0, #1
 8008412:	f7f8 f8a9 	bl	8000568 <__aeabi_i2d>
 8008416:	4606      	mov	r6, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
 8008418:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
 800841c:	460f      	mov	r7, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 800841e:	f1c0 0320 	rsb	r3, r0, #32
 8008422:	f1a0 0120 	sub.w	r1, r0, #32
      1.0 * ((1 << input_integer_bits) - 1) *
 8008426:	fa04 f000 	lsl.w	r0, r4, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
 800842a:	fa24 f303 	lsr.w	r3, r4, r3
 800842e:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8008432:	4319      	orrs	r1, r3
 8008434:	f7f8 f8d4 	bl	80005e0 <__aeabi_l2d>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 f8fc 	bl	800063c <__aeabi_dmul>
      (1LL << input_left_shift);
 8008444:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
 8008448:	460f      	mov	r7, r1
      (1LL << input_left_shift);
 800844a:	f1a8 0120 	sub.w	r1, r8, #32
 800844e:	fa24 f303 	lsr.w	r3, r4, r3
      1.0 * ((1 << input_integer_bits) - 1) *
 8008452:	4606      	mov	r6, r0
      (1LL << input_left_shift);
 8008454:	fa04 f101 	lsl.w	r1, r4, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 8008458:	fa04 f008 	lsl.w	r0, r4, r8
 800845c:	4319      	orrs	r1, r3
 800845e:	f7f8 f8bf 	bl	80005e0 <__aeabi_l2d>
  const double max_input_rescaled =
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4630      	mov	r0, r6
 8008468:	4639      	mov	r1, r7
 800846a:	f7f8 fa11 	bl	8000890 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800846e:	ec41 0b10 	vmov	d0, r0, r1
 8008472:	f00e fa09 	bl	8016888 <floor>
 8008476:	ec51 0b10 	vmov	r0, r1, d0
 800847a:	f7f8 fb79 	bl	8000b70 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
 800847e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008482 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

#include <vector>

namespace tflite {

RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8008482:	b510      	push	{r4, lr}
 8008484:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 8008486:	b911      	cbnz	r1, 800848e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
 8008488:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 800848a:	4620      	mov	r0, r4
 800848c:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
 800848e:	6889      	ldr	r1, [r1, #8]
 8008490:	f851 2b04 	ldr.w	r2, [r1], #4
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 8008494:	2a06      	cmp	r2, #6
      : size_(dimensions_count) {
 8008496:	6002      	str	r2, [r0, #0]
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 8008498:	dd01      	ble.n	800849e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>
 800849a:	f00e fc53 	bl	8016d44 <abort>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800849e:	0092      	lsls	r2, r2, #2
 80084a0:	3004      	adds	r0, #4
 80084a2:	f00e fcd6 	bl	8016e52 <memcpy>
 80084a6:	e7f0      	b.n	800848a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>

080084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:

 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      : size_(new_shape_size) {
 80084aa:	6001      	str	r1, [r0, #0]
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
 80084ac:	4605      	mov	r5, r0
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
 80084ae:	6814      	ldr	r4, [r2, #0]
 80084b0:	428c      	cmp	r4, r1
 80084b2:	dd01      	ble.n	80084b8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x10>
 80084b4:	f00e fc46 	bl	8016d44 <abort>
 80084b8:	1d06      	adds	r6, r0, #4
    const int size_increase = new_shape_size - shape.DimensionsCount();
 80084ba:	1b0c      	subs	r4, r1, r4
    for (int i = 0; i < size_increase; ++i) {
 80084bc:	2000      	movs	r0, #0
 80084be:	4637      	mov	r7, r6
 80084c0:	42a0      	cmp	r0, r4
 80084c2:	d005      	beq.n	80084d0 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x28>
    TFLITE_DCHECK_LT(i, size_);
 80084c4:	4288      	cmp	r0, r1
 80084c6:	daf5      	bge.n	80084b4 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0xc>
    dims_[i] = val;
 80084c8:	f846 3b04 	str.w	r3, [r6], #4
    for (int i = 0; i < size_increase; ++i) {
 80084cc:	3001      	adds	r0, #1
 80084ce:	e7f7      	b.n	80084c0 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x18>
      SetDim(i, pad_value);
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
                sizeof(int32_t) * shape.DimensionsCount());
 80084d0:	4611      	mov	r1, r2
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80084d2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
                sizeof(int32_t) * shape.DimensionsCount());
 80084d6:	f851 2b04 	ldr.w	r2, [r1], #4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80084da:	0092      	lsls	r2, r2, #2
 80084dc:	f00e fcb9 	bl	8016e52 <memcpy>
  }
 80084e0:	4628      	mov	r0, r5
 80084e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80084e4:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
 80084e6:	b530      	push	{r4, r5, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80084e8:	d11d      	bne.n	8008526 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x42>
 80084ea:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80084ee:	425c      	negs	r4, r3
 80084f0:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
 80084f2:	fb80 2301 	smull	r2, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80084f6:	2a00      	cmp	r2, #0
 80084f8:	f173 0100 	sbcs.w	r1, r3, #0
 80084fc:	490c      	ldr	r1, [pc, #48]	; (8008530 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x4c>)
 80084fe:	bfa8      	it	ge
 8008500:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8008504:	b98c      	cbnz	r4, 800852a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x46>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8008506:	1854      	adds	r4, r2, r1
 8008508:	eb43 75e1 	adc.w	r5, r3, r1, asr #31
 800850c:	2c00      	cmp	r4, #0
 800850e:	f175 0300 	sbcs.w	r3, r5, #0
 8008512:	da04      	bge.n	800851e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3a>
 8008514:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008518:	2100      	movs	r1, #0
 800851a:	1824      	adds	r4, r4, r0
 800851c:	414d      	adcs	r5, r1
 800851e:	0fe0      	lsrs	r0, r4, #31
 8008520:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
}
 8008524:	bd30      	pop	{r4, r5, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8008526:	2400      	movs	r4, #0
 8008528:	e7e3      	b.n	80084f2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe>
 800852a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800852e:	e7f9      	b.n	8008524 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x40>
 8008530:	c0000001 	.word	0xc0000001

08008534 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int16_t>::min();
 8008534:	4288      	cmp	r0, r1
 8008536:	d111      	bne.n	800855c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x28>
 8008538:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800853c:	bf14      	ite	ne
 800853e:	2300      	movne	r3, #0
 8008540:	2301      	moveq	r3, #1
  std::int16_t nudge = ab_32 >= 0 ? (1 << 14) : (1 - (1 << 14));
 8008542:	4341      	muls	r1, r0
 8008544:	4808      	ldr	r0, [pc, #32]	; (8008568 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x34>)
 8008546:	bf58      	it	pl
 8008548:	f44f 4080 	movpl.w	r0, #16384	; 0x4000
  return overflow ? std::numeric_limits<std::int16_t>::max() : ab_x2_high16;
 800854c:	b943      	cbnz	r3, 8008560 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x2c>
      static_cast<std::int16_t>((ab_32 + nudge) / (1 << 15));
 800854e:	4408      	add	r0, r1
 8008550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008554:	fb90 f0f1 	sdiv	r0, r0, r1
}
 8008558:	b200      	sxth	r0, r0
 800855a:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int16_t>::min();
 800855c:	2300      	movs	r3, #0
 800855e:	e7f0      	b.n	8008542 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0xe>
 8008560:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8008564:	e7f8      	b.n	8008558 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x24>
 8008566:	bf00      	nop
 8008568:	ffffc001 	.word	0xffffc001

0800856c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
  assert(exponent >= 0);
 800856c:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800856e:	b508      	push	{r3, lr}
  assert(exponent >= 0);
 8008570:	da06      	bge.n	8008580 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x14>
 8008572:	4b0d      	ldr	r3, [pc, #52]	; (80085a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x3c>)
 8008574:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8008578:	4a0c      	ldr	r2, [pc, #48]	; (80085ac <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x40>)
  assert(exponent <= 31);
 800857a:	480d      	ldr	r0, [pc, #52]	; (80085b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x44>)
 800857c:	f00e fbea 	bl	8016d54 <__assert_func>
 8008580:	291f      	cmp	r1, #31
 8008582:	dd04      	ble.n	800858e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x22>
 8008584:	4b0b      	ldr	r3, [pc, #44]	; (80085b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x48>)
 8008586:	f240 1167 	movw	r1, #359	; 0x167
 800858a:	4a08      	ldr	r2, [pc, #32]	; (80085ac <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x40>)
 800858c:	e7f5      	b.n	800857a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800858e:	2301      	movs	r3, #1
 8008590:	408b      	lsls	r3, r1
 8008592:	3b01      	subs	r3, #1
  return a & b;
 8008594:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
 8008598:	105b      	asrs	r3, r3, #1
  return a + b;
 800859a:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
 800859e:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 80085a0:	429a      	cmp	r2, r3
 80085a2:	bfc8      	it	gt
 80085a4:	3001      	addgt	r0, #1
 80085a6:	bd08      	pop	{r3, pc}
 80085a8:	080f9728 	.word	0x080f9728
 80085ac:	080f9736 	.word	0x080f9736
 80085b0:	080f9575 	.word	0x080f9575
 80085b4:	080f9566 	.word	0x080f9566

080085b8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
  const float tmp = TfLiteRound(f / scale);
 80085b8:	eec0 0a80 	vdiv.f32	s1, s1, s0
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80085bc:	eddf 7a11 	vldr	s15, [pc, #68]	; 8008604 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x4c>
                             int32_t zero_point, float f, int32_t& q) {
 80085c0:	b513      	push	{r0, r1, r4, lr}
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80085c2:	fef8 0a60 	vrinta.f32	s1, s1
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80085c6:	eef4 0ae7 	vcmpe.f32	s1, s15
 80085ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ce:	db0f      	blt.n	80085f0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x38>
 80085d0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008608 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x50>
 80085d4:	eef4 0ae7 	vcmpe.f32	s1, s15
 80085d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085dc:	d808      	bhi.n	80085f0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x38>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  q = zero_point + static_cast<int32_t>(tmp);
 80085de:	eefd 0ae0 	vcvt.s32.f32	s1, s1
  return kTfLiteOk;
 80085e2:	2000      	movs	r0, #0
  q = zero_point + static_cast<int32_t>(tmp);
 80085e4:	ee10 3a90 	vmov	r3, s1
 80085e8:	440b      	add	r3, r1
 80085ea:	6013      	str	r3, [r2, #0]
}
 80085ec:	b002      	add	sp, #8
 80085ee:	bd10      	pop	{r4, pc}
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 80085f0:	4b06      	ldr	r3, [pc, #24]	; (800860c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x54>)
 80085f2:	4a07      	ldr	r2, [pc, #28]	; (8008610 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x58>)
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80085fa:	6944      	ldr	r4, [r0, #20]
 80085fc:	4905      	ldr	r1, [pc, #20]	; (8008614 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x5c>)
 80085fe:	47a0      	blx	r4
 8008600:	2001      	movs	r0, #1
 8008602:	e7f3      	b.n	80085ec <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x34>
 8008604:	cf000000 	.word	0xcf000000
 8008608:	4f000000 	.word	0x4f000000
 800860c:	080f97c5 	.word	0x080f97c5
 8008610:	080f9790 	.word	0x080f9790
 8008614:	080f93a5 	.word	0x080f93a5

08008618 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
      static_cast<double>(input->params.scale * filter->params.scale);
 8008618:	edd1 7a03 	vldr	s15, [r1, #12]
 800861c:	ed92 7a03 	vldr	s14, [r2, #12]
 8008620:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
 8008624:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8008626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
                                              double* multiplier) {
 800862a:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	da0a      	bge.n	8008648 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
 8008632:	4b0f      	ldr	r3, [pc, #60]	; (8008670 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
 8008634:	4a0f      	ldr	r2, [pc, #60]	; (8008674 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800863c:	6944      	ldr	r4, [r0, #20]
 800863e:	490e      	ldr	r1, [pc, #56]	; (8008678 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
 8008640:	47a0      	blx	r4
 8008642:	2001      	movs	r0, #1
}
 8008644:	b002      	add	sp, #8
 8008646:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
 8008648:	ee17 0a90 	vmov	r0, s15
 800864c:	f7f7 ff9e 	bl	800058c <__aeabi_f2d>
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8008654:	68f0      	ldr	r0, [r6, #12]
 8008656:	f7f7 ff99 	bl	800058c <__aeabi_f2d>
 800865a:	460b      	mov	r3, r1
 800865c:	4602      	mov	r2, r0
 800865e:	4629      	mov	r1, r5
 8008660:	4620      	mov	r0, r4
 8008662:	f7f8 f915 	bl	8000890 <__aeabi_ddiv>
 8008666:	9b06      	ldr	r3, [sp, #24]
 8008668:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
 800866c:	2000      	movs	r0, #0
 800866e:	e7e9      	b.n	8008644 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
 8008670:	080f97eb 	.word	0x080f97eb
 8008674:	080f9790 	.word	0x080f9790
 8008678:	080f93a5 	.word	0x080f93a5
 800867c:	00000000 	.word	0x00000000

08008680 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
 8008680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	4690      	mov	r8, r2
 8008686:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8008688:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
 800868a:	469a      	mov	sl, r3
 800868c:	460d      	mov	r5, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800868e:	f7f7 ff7d 	bl	800058c <__aeabi_f2d>
 8008692:	4606      	mov	r6, r0
 8008694:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
 8008696:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800869a:	f7f7 ff77 	bl	800058c <__aeabi_f2d>
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f7 ffc9 	bl	800063c <__aeabi_dmul>
 80086aa:	4606      	mov	r6, r0
 80086ac:	460f      	mov	r7, r1
                                              double* multiplier) {
 80086ae:	e9dd 9b0c 	ldrd	r9, fp, [sp, #48]	; 0x30
  if (bias) {
 80086b2:	f1ba 0f00 	cmp.w	sl, #0
 80086b6:	d01c      	beq.n	80086f2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x72>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80086b8:	f8da 000c 	ldr.w	r0, [sl, #12]
 80086bc:	f7f7 ff66 	bl	800058c <__aeabi_f2d>
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4630      	mov	r0, r6
 80086c6:	4639      	mov	r1, r7
 80086c8:	f7f7 fe00 	bl	80002cc <__aeabi_dsub>
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80086cc:	4606      	mov	r6, r0
 80086ce:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
 80086d2:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80086d6:	f7f7 ff59 	bl	800058c <__aeabi_f2d>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4630      	mov	r0, r6
 80086e0:	4639      	mov	r1, r7
 80086e2:	f7f8 f8d5 	bl	8000890 <__aeabi_ddiv>
 80086e6:	a313      	add	r3, pc, #76	; (adr r3, 8008734 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f7f8 fa22 	bl	8000b34 <__aeabi_dcmple>
 80086f0:	b150      	cbz	r0, 8008708 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x88>
                                          multiplier);
 80086f2:	464b      	mov	r3, r9
 80086f4:	4642      	mov	r2, r8
 80086f6:	4629      	mov	r1, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
 80086fe:	b003      	add	sp, #12
 8008700:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                          multiplier);
 8008704:	f7ff bf88 	b.w	8008618 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8008708:	4b07      	ldr	r3, [pc, #28]	; (8008728 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
 800870a:	4620      	mov	r0, r4
 800870c:	6965      	ldr	r5, [r4, #20]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	f240 1343 	movw	r3, #323	; 0x143
 8008714:	4a05      	ldr	r2, [pc, #20]	; (800872c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xac>)
 8008716:	4906      	ldr	r1, [pc, #24]	; (8008730 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb0>)
 8008718:	47a8      	blx	r5
}
 800871a:	2001      	movs	r0, #1
 800871c:	b003      	add	sp, #12
 800871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008722:	bf00      	nop
 8008724:	f3af 8000 	nop.w
 8008728:	080f9804 	.word	0x080f9804
 800872c:	080f9790 	.word	0x080f9790
 8008730:	080f93a5 	.word	0x080f93a5
 8008734:	47ae147b 	.word	0x47ae147b
 8008738:	3f947ae1 	.word	0x3f947ae1

0800873c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800873c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008740:	4699      	mov	r9, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 8008742:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
 8008744:	4606      	mov	r6, r0
  if (output->type == kTfLiteUInt8) {
 8008746:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
 8008748:	ed2d 8b02 	vpush	{d8}
 800874c:	b085      	sub	sp, #20
 800874e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (output->type == kTfLiteUInt8) {
 8008752:	d011      	beq.n	8008778 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 8008754:	2b09      	cmp	r3, #9
 8008756:	d02b      	beq.n	80087b0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x74>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 8008758:	2b07      	cmp	r3, #7
 800875a:	d02d      	beq.n	80087b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
 800875c:	4b3b      	ldr	r3, [pc, #236]	; (800884c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x110>)
 800875e:	4a3c      	ldr	r2, [pc, #240]	; (8008850 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x114>)
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8008766:	6944      	ldr	r4, [r0, #20]
 8008768:	493a      	ldr	r1, [pc, #232]	; (8008854 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x118>)
 800876a:	47a0      	blx	r4
 800876c:	2001      	movs	r0, #1
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
 800876e:	b005      	add	sp, #20
 8008770:	ecbd 8b02 	vpop	{d8}
 8008774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    qmax = std::numeric_limits<uint8_t>::max();
 8008778:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 800877a:	2500      	movs	r5, #0
  if (activation == kTfLiteActRelu) {
 800877c:	2901      	cmp	r1, #1
  const auto scale = output->params.scale;
 800877e:	ed92 8a03 	vldr	s16, [r2, #12]
  const auto zero_point = output->params.zero_point;
 8008782:	6917      	ldr	r7, [r2, #16]
  if (activation == kTfLiteActRelu) {
 8008784:	d11c      	bne.n	80087c0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x84>
    TF_LITE_ENSURE_OK(context,
 8008786:	aa03      	add	r2, sp, #12
 8008788:	eddf 0a33 	vldr	s1, [pc, #204]	; 8008858 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x11c>
 800878c:	4639      	mov	r1, r7
 800878e:	eeb0 0a48 	vmov.f32	s0, s16
 8008792:	4630      	mov	r0, r6
 8008794:	f7ff ff10 	bl	80085b8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8008798:	2800      	cmp	r0, #0
 800879a:	d1e8      	bne.n	800876e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    *act_min = std::max(qmin, tmp_q);
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	42ab      	cmp	r3, r5
 80087a0:	bfac      	ite	ge
 80087a2:	f8c9 3000 	strge.w	r3, [r9]
 80087a6:	f8c9 5000 	strlt.w	r5, [r9]
    *act_max = qmax;
 80087aa:	f8c8 4000 	str.w	r4, [r8]
 80087ae:	e7de      	b.n	800876e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmax = std::numeric_limits<int8_t>::max();
 80087b0:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 80087b2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80087b6:	e7e1      	b.n	800877c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x40>
    qmax = std::numeric_limits<int16_t>::max();
 80087b8:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
 80087bc:	4d27      	ldr	r5, [pc, #156]	; (800885c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x120>)
 80087be:	e7dd      	b.n	800877c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x40>
  } else if (activation == kTfLiteActRelu6) {
 80087c0:	2903      	cmp	r1, #3
 80087c2:	d124      	bne.n	800880e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xd2>
    TF_LITE_ENSURE_OK(context,
 80087c4:	aa03      	add	r2, sp, #12
 80087c6:	eddf 0a24 	vldr	s1, [pc, #144]	; 8008858 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x11c>
 80087ca:	4639      	mov	r1, r7
 80087cc:	eeb0 0a48 	vmov.f32	s0, s16
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff fef1 	bl	80085b8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d1c9      	bne.n	800876e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    TF_LITE_ENSURE_OK(context,
 80087da:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, tmp_q);
 80087de:	9b03      	ldr	r3, [sp, #12]
    TF_LITE_ENSURE_OK(context,
 80087e0:	aa03      	add	r2, sp, #12
    *act_min = std::max(qmin, tmp_q);
 80087e2:	42ab      	cmp	r3, r5
 80087e4:	bfac      	ite	ge
 80087e6:	f8c9 3000 	strge.w	r3, [r9]
 80087ea:	f8c9 5000 	strlt.w	r5, [r9]
    TF_LITE_ENSURE_OK(context,
 80087ee:	4639      	mov	r1, r7
 80087f0:	eeb0 0a48 	vmov.f32	s0, s16
 80087f4:	4630      	mov	r0, r6
 80087f6:	f7ff fedf 	bl	80085b8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d1b7      	bne.n	800876e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    *act_max = std::min(qmax, tmp_q);
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	42a3      	cmp	r3, r4
 8008802:	bfd4      	ite	le
 8008804:	f8c8 3000 	strle.w	r3, [r8]
 8008808:	f8c8 4000 	strgt.w	r4, [r8]
 800880c:	e7af      	b.n	800876e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
  } else if (activation == kTfLiteActReluN1To1) {
 800880e:	2902      	cmp	r1, #2
 8008810:	d115      	bne.n	800883e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x102>
    TF_LITE_ENSURE_OK(context,
 8008812:	aa03      	add	r2, sp, #12
 8008814:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8008818:	4639      	mov	r1, r7
 800881a:	eeb0 0a48 	vmov.f32	s0, s16
 800881e:	4630      	mov	r0, r6
 8008820:	f7ff feca 	bl	80085b8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8008824:	2800      	cmp	r0, #0
 8008826:	d1a2      	bne.n	800876e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    *act_min = std::max(qmin, tmp_q);
 8008828:	9b03      	ldr	r3, [sp, #12]
    TF_LITE_ENSURE_OK(context,
 800882a:	aa03      	add	r2, sp, #12
 800882c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, tmp_q);
 8008830:	42ab      	cmp	r3, r5
 8008832:	bfac      	ite	ge
 8008834:	f8c9 3000 	strge.w	r3, [r9]
 8008838:	f8c9 5000 	strlt.w	r5, [r9]
 800883c:	e7d7      	b.n	80087ee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb2>
    *act_min = qmin;
 800883e:	f8c9 5000 	str.w	r5, [r9]
  return kTfLiteOk;
 8008842:	2000      	movs	r0, #0
    *act_max = qmax;
 8008844:	f8c8 4000 	str.w	r4, [r8]
                                               output, act_min, act_max);
 8008848:	e791      	b.n	800876e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
 800884a:	bf00      	nop
 800884c:	080f9826 	.word	0x080f9826
 8008850:	080f9790 	.word	0x080f9790
 8008854:	080f93a5 	.word	0x080f93a5
 8008858:	00000000 	.word	0x00000000
 800885c:	ffff8000 	.word	0xffff8000

08008860 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    int num_channels) {
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8008864:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
    int num_channels) {
 8008868:	b08d      	sub	sp, #52	; 0x34
 800886a:	4604      	mov	r4, r0
 800886c:	460d      	mov	r5, r1
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800886e:	f1b8 0f01 	cmp.w	r8, #1
    int num_channels) {
 8008872:	4617      	mov	r7, r2
 8008874:	9307      	str	r3, [sp, #28]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8008876:	d00f      	beq.n	8008898 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x38>
 8008878:	4b70      	ldr	r3, [pc, #448]	; (8008a3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1dc>)
 800887a:	2601      	movs	r6, #1
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	4b70      	ldr	r3, [pc, #448]	; (8008a40 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1e0>)
 8008880:	e9cd 8602 	strd	r8, r6, [sp, #8]
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	23df      	movs	r3, #223	; 0xdf
 8008888:	6944      	ldr	r4, [r0, #20]
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800888a:	4a6e      	ldr	r2, [pc, #440]	; (8008a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1e4>)
 800888c:	496e      	ldr	r1, [pc, #440]	; (8008a48 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1e8>)
 800888e:	47a0      	blx	r4
    TF_LITE_ENSURE_EQ(
 8008890:	2001      	movs	r0, #1
}
 8008892:	b00d      	add	sp, #52	; 0x34
 8008894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8008898:	f892 6030 	ldrb.w	r6, [r2, #48]	; 0x30
 800889c:	2e01      	cmp	r6, #1
 800889e:	d008      	beq.n	80088b2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x52>
 80088a0:	4b66      	ldr	r3, [pc, #408]	; (8008a3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1dc>)
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	4b69      	ldr	r3, [pc, #420]	; (8008a4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1ec>)
 80088a6:	e9cd 6802 	strd	r6, r8, [sp, #8]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	23e1      	movs	r3, #225	; 0xe1
 80088ae:	6944      	ldr	r4, [r0, #20]
 80088b0:	e7eb      	b.n	800888a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a>
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
 80088b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
 80088b4:	b93a      	cbnz	r2, 80088c6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x66>
 80088b6:	4b66      	ldr	r3, [pc, #408]	; (8008a50 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1f0>)
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	23eb      	movs	r3, #235	; 0xeb
 80088bc:	6944      	ldr	r4, [r0, #20]
    TF_LITE_ENSURE(context,
 80088be:	4a61      	ldr	r2, [pc, #388]	; (8008a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1e4>)
 80088c0:	4964      	ldr	r1, [pc, #400]	; (8008a54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1f4>)
 80088c2:	47a0      	blx	r4
 80088c4:	e7e4      	b.n	8008890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x30>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 80088c6:	f8d2 a000 	ldr.w	sl, [r2]
 80088ca:	f1ba 0f00 	cmp.w	sl, #0
 80088ce:	d104      	bne.n	80088da <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x7a>
 80088d0:	4b61      	ldr	r3, [pc, #388]	; (8008a58 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1f8>)
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	23ec      	movs	r3, #236	; 0xec
 80088d6:	6944      	ldr	r4, [r0, #20]
 80088d8:	e7f1      	b.n	80088be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x5e>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 80088da:	f8da b000 	ldr.w	fp, [sl]
  if (is_per_channel) {
 80088de:	f1bb 0f01 	cmp.w	fp, #1
 80088e2:	dd38      	ble.n	8008956 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf6>
    TF_LITE_ENSURE(context,
 80088e4:	780b      	ldrb	r3, [r1, #0]
 80088e6:	2b09      	cmp	r3, #9
 80088e8:	d006      	beq.n	80088f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x98>
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	d004      	beq.n	80088f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x98>
 80088ee:	4b5b      	ldr	r3, [pc, #364]	; (8008a5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1fc>)
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	23f1      	movs	r3, #241	; 0xf1
 80088f4:	6944      	ldr	r4, [r0, #20]
 80088f6:	e7e2      	b.n	80088be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x5e>
    TF_LITE_ENSURE(context,
 80088f8:	783b      	ldrb	r3, [r7, #0]
 80088fa:	2b09      	cmp	r3, #9
 80088fc:	d00a      	beq.n	8008914 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xb4>
 80088fe:	2b12      	cmp	r3, #18
 8008900:	d008      	beq.n	8008914 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xb4>
 8008902:	4b57      	ldr	r3, [pc, #348]	; (8008a60 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x200>)
 8008904:	4620      	mov	r0, r4
 8008906:	4a4f      	ldr	r2, [pc, #316]	; (8008a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1e4>)
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	23f3      	movs	r3, #243	; 0xf3
 800890c:	6965      	ldr	r5, [r4, #20]
 800890e:	4951      	ldr	r1, [pc, #324]	; (8008a54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1f4>)
 8008910:	47a8      	blx	r5
 8008912:	e7bd      	b.n	8008890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x30>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8008914:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008916:	455b      	cmp	r3, fp
 8008918:	d00c      	beq.n	8008934 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xd4>
 800891a:	e9cd b302 	strd	fp, r3, [sp, #8]
 800891e:	4b51      	ldr	r3, [pc, #324]	; (8008a64 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x204>)
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	4b51      	ldr	r3, [pc, #324]	; (8008a68 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x208>)
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	23f4      	movs	r3, #244	; 0xf4
 8008928:	6965      	ldr	r5, [r4, #20]
    TF_LITE_ENSURE_EQ(
 800892a:	4a46      	ldr	r2, [pc, #280]	; (8008a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1e4>)
 800892c:	4620      	mov	r0, r4
 800892e:	4946      	ldr	r1, [pc, #280]	; (8008a48 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1e8>)
 8008930:	47a8      	blx	r5
 8008932:	e7ad      	b.n	8008890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x30>
 8008934:	6892      	ldr	r2, [r2, #8]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800893c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d008      	beq.n	8008956 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf6>
 8008944:	9303      	str	r3, [sp, #12]
 8008946:	4b49      	ldr	r3, [pc, #292]	; (8008a6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x20c>)
 8008948:	9202      	str	r2, [sp, #8]
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	4b45      	ldr	r3, [pc, #276]	; (8008a64 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x204>)
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	23f7      	movs	r3, #247	; 0xf7
 8008952:	6965      	ldr	r5, [r4, #20]
 8008954:	e7e9      	b.n	800892a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xca>
  const float input_scale = input->params.scale;
 8008956:	edd5 7a03 	vldr	s15, [r5, #12]
  for (int i = 0; i < num_channels; ++i) {
 800895a:	2600      	movs	r6, #0
  const float output_scale = output->params.scale;
 800895c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  const float input_scale = input->params.scale;
 800895e:	edcd 7a04 	vstr	s15, [sp, #16]
  const float output_scale = output->params.scale;
 8008962:	edd3 7a03 	vldr	s15, [r3, #12]
  const float* filter_scales = affine_quantization->scale->data;
 8008966:	f10a 0304 	add.w	r3, sl, #4
  const float output_scale = output->params.scale;
 800896a:	edcd 7a05 	vstr	s15, [sp, #20]
  const float* filter_scales = affine_quantization->scale->data;
 800896e:	9306      	str	r3, [sp, #24]
  for (int i = 0; i < num_channels; ++i) {
 8008970:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008972:	42b3      	cmp	r3, r6
 8008974:	dd30      	ble.n	80089d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x178>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8008976:	f1bb 0f01 	cmp.w	fp, #1
 800897a:	bfc9      	itett	gt
 800897c:	9b06      	ldrgt	r3, [sp, #24]
 800897e:	f8da 0004 	ldrle.w	r0, [sl, #4]
 8008982:	eb03 0386 	addgt.w	r3, r3, r6, lsl #2
 8008986:	6818      	ldrgt	r0, [r3, #0]
    const double filter_scale = static_cast<double>(scale);
 8008988:	f7f7 fe00 	bl	800058c <__aeabi_f2d>
 800898c:	4680      	mov	r8, r0
 800898e:	4689      	mov	r9, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8008990:	9804      	ldr	r0, [sp, #16]
 8008992:	f7f7 fdfb 	bl	800058c <__aeabi_f2d>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4640      	mov	r0, r8
 800899c:	4649      	mov	r1, r9
 800899e:	f7f7 fe4d 	bl	800063c <__aeabi_dmul>
 80089a2:	4680      	mov	r8, r0
 80089a4:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
 80089a6:	9805      	ldr	r0, [sp, #20]
 80089a8:	f7f7 fdf0 	bl	800058c <__aeabi_f2d>
    const double effective_output_scale = static_cast<double>(input_scale) *
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4640      	mov	r0, r8
 80089b2:	4649      	mov	r1, r9
 80089b4:	f7f7 ff6c 	bl	8000890 <__aeabi_ddiv>
 80089b8:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 80089bc:	a90a      	add	r1, sp, #40	; 0x28
 80089be:	a809      	add	r0, sp, #36	; 0x24
 80089c0:	f7ff fc52 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 80089c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
 80089cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80089d0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
 80089d4:	3601      	adds	r6, #1
 80089d6:	e7cb      	b.n	8008970 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x110>
  if (input->type == kTfLiteUInt8) {
 80089d8:	782b      	ldrb	r3, [r5, #0]
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d11a      	bne.n	8008a14 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1b4>
    double real_multiplier = 0.0;
 80089de:	ab0c      	add	r3, sp, #48	; 0x30
 80089e0:	2000      	movs	r0, #0
 80089e2:	2100      	movs	r1, #0
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80089e4:	463a      	mov	r2, r7
    double real_multiplier = 0.0;
 80089e6:	e963 0102 	strd	r0, r1, [r3, #-8]!
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	4629      	mov	r1, r5
 80089ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089f0:	4620      	mov	r0, r4
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	9b07      	ldr	r3, [sp, #28]
 80089f6:	f7ff fe43 	bl	8008680 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f47f af49 	bne.w	8008892 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x32>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8008a00:	a909      	add	r1, sp, #36	; 0x24
 8008a02:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008a04:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008a08:	f7ff fc2e 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8008a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a10:	425b      	negs	r3, r3
 8008a12:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8008a14:	782b      	ldrb	r3, [r5, #0]
 8008a16:	2b09      	cmp	r3, #9
 8008a18:	d003      	beq.n	8008a22 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1c2>
 8008a1a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d109      	bne.n	8008a36 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d6>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8008a22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a24:	4620      	mov	r0, r4
 8008a26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a28:	7819      	ldrb	r1, [r3, #0]
 8008a2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a30:	f7ff fe84 	bl	800873c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8008a34:	e72d      	b.n	8008892 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x32>
  return kTfLiteOk;
 8008a36:	2000      	movs	r0, #0
 8008a38:	e72b      	b.n	8008892 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x32>
 8008a3a:	bf00      	nop
 8008a3c:	080f9846 	.word	0x080f9846
 8008a40:	080f9860 	.word	0x080f9860
 8008a44:	080f9790 	.word	0x080f9790
 8008a48:	080f982c 	.word	0x080f982c
 8008a4c:	080f9879 	.word	0x080f9879
 8008a50:	080f9893 	.word	0x080f9893
 8008a54:	080f93a5 	.word	0x080f93a5
 8008a58:	080f98a7 	.word	0x080f98a7
 8008a5c:	080f98c2 	.word	0x080f98c2
 8008a60:	080f98fc 	.word	0x080f98fc
 8008a64:	080f9937 	.word	0x080f9937
 8008a68:	080f9944 	.word	0x080f9944
 8008a6c:	080f9965 	.word	0x080f9965

08008a70 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
 8008a70:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
 8008a72:	6889      	ldr	r1, [r1, #8]
 8008a74:	6880      	ldr	r0, [r0, #8]
 8008a76:	f7ff fb04 	bl	8008082 <TfLiteIntArrayEqual>
}
 8008a7a:	3000      	adds	r0, #0
 8008a7c:	bf18      	it	ne
 8008a7e:	2001      	movne	r0, #1
 8008a80:	bd08      	pop	{r3, pc}

08008a82 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>:
      sizeof(SingleArenaBufferAllocator), alignof(SingleArenaBufferAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
}

SingleArenaBufferAllocator::~SingleArenaBufferAllocator() {}
 8008a82:	4770      	bx	lr

08008a84 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh>:
  return nullptr;
}

TfLiteStatus SingleArenaBufferAllocator::DeallocateResizableBuffer(
    uint8_t* resizable_buf) {
  return ResizeBuffer(resizable_buf, 0, 1);
 8008a84:	6803      	ldr	r3, [r0, #0]
 8008a86:	2200      	movs	r2, #0
    uint8_t* resizable_buf) {
 8008a88:	b410      	push	{r4}
  return ResizeBuffer(resizable_buf, 0, 1);
 8008a8a:	69dc      	ldr	r4, [r3, #28]
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	46a4      	mov	ip, r4
}
 8008a90:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ResizeBuffer(resizable_buf, 0, 1);
 8008a94:	4760      	bx	ip

08008a96 <_ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh>:
  temp_buffer_count_++;
  return aligned_result;
}

void SingleArenaBufferAllocator::DeallocateTemp(uint8_t* temp_buf) {
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 8008a96:	69c3      	ldr	r3, [r0, #28]
 8008a98:	4059      	eors	r1, r3
  temp_buffer_count_--;
 8008a9a:	6a03      	ldr	r3, [r0, #32]
 8008a9c:	3b01      	subs	r3, #1
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 8008a9e:	61c1      	str	r1, [r0, #28]
  temp_buffer_count_--;
 8008aa0:	6203      	str	r3, [r0, #32]
}
 8008aa2:	4770      	bx	lr

08008aa4 <_ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv>:
  return kTfLiteOk;
}

uint8_t* SingleArenaBufferAllocator::GetOverlayMemoryAddress() const {
  return buffer_head_;
}
 8008aa4:	6880      	ldr	r0, [r0, #8]
 8008aa6:	4770      	bx	lr

08008aa8 <_ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const {
  return std::max(head_ - buffer_head_, temp_ - buffer_head_);
 8008aa8:	6881      	ldr	r1, [r0, #8]
 8008aaa:	6902      	ldr	r2, [r0, #16]
 8008aac:	6980      	ldr	r0, [r0, #24]
 8008aae:	1a52      	subs	r2, r2, r1
 8008ab0:	1a40      	subs	r0, r0, r1
}
 8008ab2:	4290      	cmp	r0, r2
 8008ab4:	bfb8      	it	lt
 8008ab6:	4610      	movlt	r0, r2
 8008ab8:	4770      	bx	lr

08008aba <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetPersistentUsedBytes() const {
  return buffer_tail_ - tail_;
 8008aba:	68c2      	ldr	r2, [r0, #12]
 8008abc:	6940      	ldr	r0, [r0, #20]
}
 8008abe:	1a10      	subs	r0, r2, r0
 8008ac0:	4770      	bx	lr

08008ac2 <_ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

  // Returns the size of the head section in bytes.
  size_t GetNonPersistentUsedBytes() const override;

  // Returns the size of all allocations in the tail section in bytes.
  size_t GetPersistentUsedBytes() const override;
 8008ac2:	f1a0 0004 	sub.w	r0, r0, #4
 8008ac6:	f7ff bff8 	b.w	8008aba <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>

08008aca <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>:
SingleArenaBufferAllocator::~SingleArenaBufferAllocator() {}
 8008aca:	b510      	push	{r4, lr}
 8008acc:	4604      	mov	r4, r0
 8008ace:	2124      	movs	r1, #36	; 0x24
 8008ad0:	f00d fead 	bl	801682e <_ZdlPvj>
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	bd10      	pop	{r4, pc}

08008ad8 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev>:
  virtual ~SingleArenaBufferAllocator();
 8008ad8:	f1a0 0004 	sub.w	r0, r0, #4
 8008adc:	f7ff bff5 	b.w	8008aca <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>

08008ae0 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj>:
                                                             size_t alignment) {
 8008ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	4688      	mov	r8, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8008ae8:	6880      	ldr	r0, [r0, #8]
 8008aea:	4611      	mov	r1, r2
                                                             size_t alignment) {
 8008aec:	4616      	mov	r6, r2
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8008aee:	f000 f943 	bl	8008d78 <_ZN6tflite14AlignPointerUpEPhj>
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8008af2:	6823      	ldr	r3, [r4, #0]
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8008af4:	4605      	mov	r5, r0
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8008af6:	4601      	mov	r1, r0
 8008af8:	4642      	mov	r2, r8
 8008afa:	69df      	ldr	r7, [r3, #28]
 8008afc:	4620      	mov	r0, r4
 8008afe:	4633      	mov	r3, r6
 8008b00:	47b8      	blx	r7
 8008b02:	2800      	cmp	r0, #0
}
 8008b04:	bf0c      	ite	eq
 8008b06:	4628      	moveq	r0, r5
 8008b08:	2000      	movne	r0, #0
 8008b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b0e <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj>:
    size_t size, size_t alignment) {
 8008b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	460f      	mov	r7, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8008b16:	6880      	ldr	r0, [r0, #8]
 8008b18:	4611      	mov	r1, r2
    size_t size, size_t alignment) {
 8008b1a:	4615      	mov	r5, r2
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8008b1c:	f000 f92c 	bl	8008d78 <_ZN6tflite14AlignPointerUpEPhj>
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	463a      	mov	r2, r7
 8008b24:	4601      	mov	r1, r0
 8008b26:	4620      	mov	r0, r4
 8008b28:	69de      	ldr	r6, [r3, #28]
 8008b2a:	462b      	mov	r3, r5
 8008b2c:	46b4      	mov	ip, r6
}
 8008b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8008b32:	4760      	bx	ip

08008b34 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj>:
                                                  size_t alignment) {
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4604      	mov	r4, r0
 8008b38:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8008b3a:	6980      	ldr	r0, [r0, #24]
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	f000 f91b 	bl	8008d78 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 8008b42:	6962      	ldr	r2, [r4, #20]
 8008b44:	1a12      	subs	r2, r2, r0
  if (available_memory < size) {
 8008b46:	42aa      	cmp	r2, r5
 8008b48:	d206      	bcs.n	8008b58 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x24>
    MicroPrintf(
 8008b4a:	4808      	ldr	r0, [pc, #32]	; (8008b6c <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x38>)
 8008b4c:	1aab      	subs	r3, r5, r2
 8008b4e:	4629      	mov	r1, r5
 8008b50:	f002 f8b2 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return nullptr;
 8008b54:	2000      	movs	r0, #0
}
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 8008b58:	69e3      	ldr	r3, [r4, #28]
  temp_ = aligned_result + size;
 8008b5a:	4405      	add	r5, r0
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 8008b5c:	4043      	eors	r3, r0
  temp_ = aligned_result + size;
 8008b5e:	61a5      	str	r5, [r4, #24]
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 8008b60:	61e3      	str	r3, [r4, #28]
  temp_buffer_count_++;
 8008b62:	6a23      	ldr	r3, [r4, #32]
 8008b64:	3301      	adds	r3, #1
 8008b66:	6223      	str	r3, [r4, #32]
  return aligned_result;
 8008b68:	e7f5      	b.n	8008b56 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x22>
 8008b6a:	bf00      	nop
 8008b6c:	080f99a2 	.word	0x080f99a2

08008b70 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv>:
bool SingleArenaBufferAllocator::IsAllTempDeallocated() {
 8008b70:	e9d0 2107 	ldrd	r2, r1, [r0, #28]
 8008b74:	b508      	push	{r3, lr}
  if (temp_buffer_count_ != 0 || temp_buffer_ptr_check_sum_ != 0) {
 8008b76:	b901      	cbnz	r1, 8008b7a <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0xa>
 8008b78:	b13a      	cbz	r2, 8008b8a <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x1a>
    MicroPrintf(
 8008b7a:	fab2 f282 	clz	r2, r2
 8008b7e:	4804      	ldr	r0, [pc, #16]	; (8008b90 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x20>)
 8008b80:	0952      	lsrs	r2, r2, #5
 8008b82:	f002 f899 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return false;
 8008b86:	2000      	movs	r0, #0
}
 8008b88:	bd08      	pop	{r3, pc}
  return true;
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	e7fc      	b.n	8008b88 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x18>
 8008b8e:	bf00      	nop
 8008b90:	080f9a9b 	.word	0x080f9a9b

08008b94 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv>:
  if (!IsAllTempDeallocated()) {
 8008b94:	6803      	ldr	r3, [r0, #0]
TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 8008b96:	b510      	push	{r4, lr}
  if (!IsAllTempDeallocated()) {
 8008b98:	691b      	ldr	r3, [r3, #16]
TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 8008b9a:	4604      	mov	r4, r0
  if (!IsAllTempDeallocated()) {
 8008b9c:	4798      	blx	r3
 8008b9e:	b920      	cbnz	r0, 8008baa <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x16>
    MicroPrintf(
 8008ba0:	4804      	ldr	r0, [pc, #16]	; (8008bb4 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x20>)
 8008ba2:	f002 f889 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8008ba6:	2001      	movs	r0, #1
}
 8008ba8:	bd10      	pop	{r4, pc}
  temp_ = head_;
 8008baa:	6923      	ldr	r3, [r4, #16]
  return kTfLiteOk;
 8008bac:	2000      	movs	r0, #0
  temp_ = head_;
 8008bae:	61a3      	str	r3, [r4, #24]
  return kTfLiteOk;
 8008bb0:	e7fa      	b.n	8008ba8 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x14>
 8008bb2:	bf00      	nop
 8008bb4:	080f9add 	.word	0x080f9add

08008bb8 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
    size_t size, size_t alignment) {
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4604      	mov	r4, r0
 8008bbc:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8008bbe:	6940      	ldr	r0, [r0, #20]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	1b40      	subs	r0, r0, r5
 8008bc4:	f000 f8de 	bl	8008d84 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	4283      	cmp	r3, r0
 8008bcc:	d907      	bls.n	8008bde <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x26>
    const size_t missing_memory = head_ - aligned_result;
 8008bce:	1a1b      	subs	r3, r3, r0
    MicroPrintf(
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	4804      	ldr	r0, [pc, #16]	; (8008be4 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x2c>)
 8008bd4:	1aea      	subs	r2, r5, r3
 8008bd6:	f002 f86f 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return nullptr;
 8008bda:	2000      	movs	r0, #0
}
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
  tail_ = aligned_result;
 8008bde:	6160      	str	r0, [r4, #20]
  return aligned_result;
 8008be0:	e7fc      	b.n	8008bdc <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x24>
 8008be2:	bf00      	nop
 8008be4:	080f9b22 	.word	0x080f9b22

08008be8 <_ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
  virtual uint8_t* AllocatePersistentBuffer(size_t size,
 8008be8:	f1a0 0004 	sub.w	r0, r0, #4
 8008bec:	f7ff bfe4 	b.w	8008bb8 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>

08008bf0 <_ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj>:

size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8008bf6:	6980      	ldr	r0, [r0, #24]
 8008bf8:	f000 f8be 	bl	8008d78 <_ZN6tflite14AlignPointerUpEPhj>
 8008bfc:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8008bfe:	4631      	mov	r1, r6
 8008c00:	6960      	ldr	r0, [r4, #20]
 8008c02:	f000 f8bf 	bl	8008d84 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
 8008c06:	1b40      	subs	r0, r0, r5
 8008c08:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c0c <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj>:
                                                      size_t alignment) {
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460f      	mov	r7, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8008c12:	6880      	ldr	r0, [r0, #8]
 8008c14:	4619      	mov	r1, r3
                                                      size_t alignment) {
 8008c16:	4615      	mov	r5, r2
 8008c18:	461e      	mov	r6, r3
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8008c1a:	f000 f8ad 	bl	8008d78 <_ZN6tflite14AlignPointerUpEPhj>
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 8008c1e:	6922      	ldr	r2, [r4, #16]
 8008c20:	69a3      	ldr	r3, [r4, #24]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d101      	bne.n	8008c2a <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x1e>
 8008c26:	42b8      	cmp	r0, r7
 8008c28:	d004      	beq.n	8008c34 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x28>
    MicroPrintf(
 8008c2a:	480c      	ldr	r0, [pc, #48]	; (8008c5c <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x50>)
 8008c2c:	f002 f844 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8008c30:	2001      	movs	r0, #1
}
 8008c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8008c34:	4631      	mov	r1, r6
 8008c36:	68a0      	ldr	r0, [r4, #8]
 8008c38:	f000 f89e 	bl	8008d78 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 8008c3c:	6962      	ldr	r2, [r4, #20]
 8008c3e:	1a12      	subs	r2, r2, r0
  if (available_memory < size) {
 8008c40:	4295      	cmp	r5, r2
 8008c42:	d905      	bls.n	8008c50 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x44>
    MicroPrintf(
 8008c44:	1aab      	subs	r3, r5, r2
 8008c46:	4629      	mov	r1, r5
 8008c48:	4805      	ldr	r0, [pc, #20]	; (8008c60 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x54>)
 8008c4a:	f002 f835 	bl	800acb8 <_Z11MicroPrintfPKcz>
 8008c4e:	e7ef      	b.n	8008c30 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x24>
  head_ = aligned_result + size;
 8008c50:	4428      	add	r0, r5
 8008c52:	6120      	str	r0, [r4, #16]
  temp_ = head_;
 8008c54:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
 8008c56:	2000      	movs	r0, #0
 8008c58:	e7eb      	b.n	8008c32 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x26>
 8008c5a:	bf00      	nop
 8008c5c:	080f99eb 	.word	0x080f99eb
 8008c60:	080f9a59 	.word	0x080f9a59

08008c64 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev>:
 8008c64:	3804      	subs	r0, #4
 8008c66:	4770      	bx	lr

08008c68 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_>:
SingleArenaBufferAllocator::SingleArenaBufferAllocator(uint8_t* buffer_head,
 8008c68:	b530      	push	{r4, r5, lr}
      temp_(buffer_head_) {}
 8008c6a:	4c07      	ldr	r4, [pc, #28]	; (8008c88 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_+0x20>)
 8008c6c:	e9c0 2103 	strd	r2, r1, [r0, #12]
 8008c70:	f104 0508 	add.w	r5, r4, #8
 8008c74:	344c      	adds	r4, #76	; 0x4c
 8008c76:	e9c0 2105 	strd	r2, r1, [r0, #20]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	6005      	str	r5, [r0, #0]
 8008c7e:	e9c0 4101 	strd	r4, r1, [r0, #4]
 8008c82:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8008c86:	bd30      	pop	{r4, r5, pc}
 8008c88:	080f9b6c 	.word	0x080f9b6c

08008c8c <_ZN6tflite26SingleArenaBufferAllocatorC1EPhj>:
SingleArenaBufferAllocator::SingleArenaBufferAllocator(uint8_t* buffer,
 8008c8c:	b508      	push	{r3, lr}
 8008c8e:	4603      	mov	r3, r0
    : SingleArenaBufferAllocator(buffer, buffer + buffer_size) {}
 8008c90:	440a      	add	r2, r1
 8008c92:	f7ff ffe9 	bl	8008c68 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_>
 8008c96:	4618      	mov	r0, r3
 8008c98:	bd08      	pop	{r3, pc}
	...

08008c9c <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>:
    uint8_t* buffer_head, size_t buffer_size) {
 8008c9c:	b500      	push	{lr}
 8008c9e:	460a      	mov	r2, r1
 8008ca0:	b08b      	sub	sp, #44	; 0x2c
  TFLITE_DCHECK(buffer_head != nullptr);
 8008ca2:	b908      	cbnz	r0, 8008ca8 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0xc>
 8008ca4:	f00e f84e 	bl	8016d44 <abort>
      SingleArenaBufferAllocator(buffer_head, buffer_size);
 8008ca8:	4601      	mov	r1, r0
 8008caa:	a801      	add	r0, sp, #4
 8008cac:	f7ff ffee 	bl	8008c8c <_ZN6tflite26SingleArenaBufferAllocatorC1EPhj>
      sizeof(SingleArenaBufferAllocator), alignof(SingleArenaBufferAllocator));
 8008cb0:	2204      	movs	r2, #4
 8008cb2:	2124      	movs	r1, #36	; 0x24
 8008cb4:	eb0d 0002 	add.w	r0, sp, r2
 8008cb8:	f7ff ff7e 	bl	8008bb8 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
 8008cbc:	b188      	cbz	r0, 8008ce2 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x46>
class SingleArenaBufferAllocator : public INonPersistentBufferAllocator,
 8008cbe:	4b0a      	ldr	r3, [pc, #40]	; (8008ce8 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x4c>)
 8008cc0:	6003      	str	r3, [r0, #0]
 8008cc2:	3344      	adds	r3, #68	; 0x44
 8008cc4:	6043      	str	r3, [r0, #4]
 8008cc6:	9b03      	ldr	r3, [sp, #12]
 8008cc8:	6083      	str	r3, [r0, #8]
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	60c3      	str	r3, [r0, #12]
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	6103      	str	r3, [r0, #16]
 8008cd2:	9b06      	ldr	r3, [sp, #24]
 8008cd4:	6143      	str	r3, [r0, #20]
 8008cd6:	9b07      	ldr	r3, [sp, #28]
 8008cd8:	6183      	str	r3, [r0, #24]
 8008cda:	9b08      	ldr	r3, [sp, #32]
 8008cdc:	61c3      	str	r3, [r0, #28]
 8008cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce0:	6203      	str	r3, [r0, #32]
}
 8008ce2:	b00b      	add	sp, #44	; 0x2c
 8008ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ce8:	080f9b74 	.word	0x080f9b74

08008cec <DebugLog>:
extern "C" void DebugLog(const char* format, va_list args) {
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  vfprintf(stderr, format, args);
 8008cec:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <DebugLog+0x10>)
 8008cee:	460a      	mov	r2, r1
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68d8      	ldr	r0, [r3, #12]
 8008cf6:	f00e baa7 	b.w	8017248 <vfiprintf>
 8008cfa:	bf00      	nop
 8008cfc:	20000028 	.word	0x20000028

08008d00 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
    return data_ - ReadScalar<soffset_t>(data_);
 8008d00:	6803      	ldr	r3, [r0, #0]
 8008d02:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008d04:	881a      	ldrh	r2, [r3, #0]
 8008d06:	2a0a      	cmp	r2, #10
 8008d08:	d907      	bls.n	8008d1a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1a>
 8008d0a:	895b      	ldrh	r3, [r3, #10]
    auto p = data_ + field_offset;
 8008d0c:	18c2      	adds	r2, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d0e:	b133      	cbz	r3, 8008d1e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1e>
 8008d10:	58c3      	ldr	r3, [r0, r3]
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
  if (subgraph->operators() != nullptr) {
 8008d12:	18d0      	adds	r0, r2, r3
 8008d14:	d004      	beq.n	8008d20 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x20>
  uoffset_t size() const { return EndianScalar(length_); }
 8008d16:	58d0      	ldr	r0, [r2, r3]
    return subgraph->operators()->size();
 8008d18:	4770      	bx	lr
  } else {
    return 0;
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	4770      	bx	lr
 8008d1e:	4618      	mov	r0, r3
  }
}
 8008d20:	4770      	bx	lr
	...

08008d24 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
    return data_ - ReadScalar<soffset_t>(data_);
 8008d24:	6803      	ldr	r3, [r0, #0]
 8008d26:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008d28:	881a      	ldrh	r2, [r3, #0]
 8008d2a:	2a08      	cmp	r2, #8
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	d917      	bls.n	8008d60 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3c>
 8008d30:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
 8008d32:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d34:	b1a3      	cbz	r3, 8008d60 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3c>
 8008d36:	58c2      	ldr	r2, [r0, r3]
 8008d38:	18a3      	adds	r3, r4, r2
    FLATBUFFERS_ASSERT(i < size());
 8008d3a:	58a2      	ldr	r2, [r4, r2]
 8008d3c:	4291      	cmp	r1, r2
 8008d3e:	d305      	bcc.n	8008d4c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x28>
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x44>)
 8008d42:	21aa      	movs	r1, #170	; 0xaa
 8008d44:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>)
 8008d46:	480a      	ldr	r0, [pc, #40]	; (8008d70 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>)
 8008d48:	f00e f804 	bl	8016d54 <__assert_func>
    return const_cast<mutable_return_type>(IndirectHelper<T>::Read(Data(), i));
  }

  // The raw data in little endian format. Use with care.
  const uint8_t *Data() const {
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008d4c:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 8008d4e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008d52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
}
 8008d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return NumSubgraphOperators(subgraph);
 8008d5a:	4418      	add	r0, r3
 8008d5c:	f7ff bfd0 	b.w	8008d00 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  uoffset_t size() const { return EndianScalar(length_); }
 8008d60:	2300      	movs	r3, #0
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	deff      	udf	#255	; 0xff
 8008d66:	bf00      	nop
 8008d68:	080f923a 	.word	0x080f923a
 8008d6c:	080f9bc8 	.word	0x080f9bc8
 8008d70:	080f9245 	.word	0x080f9245

08008d74 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>:
  // layout as flatbuffers:Vector<int32_t>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteIntArray*>(
      reinterpret_cast<const TfLiteIntArray*>(flatbuffer_array));
}
 8008d74:	4770      	bx	lr

08008d76 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfEE>:
  // layout as flatbuffers:Vector<float>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteFloatArray*>(
      reinterpret_cast<const TfLiteFloatArray*>(flatbuffer_array));
}
 8008d76:	4770      	bx	lr

08008d78 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8008d78:	1e4b      	subs	r3, r1, #1
 8008d7a:	4418      	add	r0, r3
 8008d7c:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 8008d80:	4348      	muls	r0, r1
 8008d82:	4770      	bx	lr

08008d84 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8008d84:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 8008d88:	4348      	muls	r0, r1
 8008d8a:	4770      	bx	lr

08008d8c <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8008d8c:	3801      	subs	r0, #1
 8008d8e:	4408      	add	r0, r1
 8008d90:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
 8008d94:	4348      	muls	r0, r1
 8008d96:	4770      	bx	lr

08008d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 8008d98:	3801      	subs	r0, #1
 8008d9a:	2811      	cmp	r0, #17
 8008d9c:	d816      	bhi.n	8008dcc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x34>
 8008d9e:	e8df f000 	tbb	[pc, r0]
 8008da2:	0d0d      	.short	0x0d0d
 8008da4:	11150f11 	.word	0x11150f11
 8008da8:	09110f09 	.word	0x09110f09
 8008dac:	0d0f130f 	.word	0x0d0f130f
 8008db0:	11150d15 	.word	0x11150d15
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8008db4:	2302      	movs	r3, #2
      break;
    case kTfLiteFloat32:
      *size = sizeof(float);
 8008db6:	600b      	str	r3, [r1, #0]
      *size = sizeof(int8_t);
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
 8008db8:	2000      	movs	r0, #0
      break;
 8008dba:	4770      	bx	lr
      *size = sizeof(float);
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	e7fa      	b.n	8008db6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1e>
      *size = sizeof(double);
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	e7f8      	b.n	8008db6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1e>
      *size = sizeof(uint8_t);
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e7f6      	b.n	8008db6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1e>
      *size = sizeof(double) * 2;
 8008dc8:	2310      	movs	r3, #16
 8008dca:	e7f4      	b.n	8008db6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1e>
      return kTfLiteError;
 8008dcc:	2001      	movs	r0, #1
}
 8008dce:	4770      	bx	lr

08008dd0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>:
    return data_ - ReadScalar<soffset_t>(data_);
 8008dd0:	6803      	ldr	r3, [r0, #0]
 8008dd2:	1ac3      	subs	r3, r0, r3

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size) {
 8008dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dd6:	881f      	ldrh	r7, [r3, #0]
 8008dd8:	460d      	mov	r5, r1
 8008dda:	4616      	mov	r6, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008ddc:	2f04      	cmp	r7, #4
 8008dde:	d927      	bls.n	8008e30 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x60>
 8008de0:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
 8008de2:	1884      	adds	r4, r0, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008de4:	b172      	cbz	r2, 8008e04 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x34>
 8008de6:	5881      	ldr	r1, [r0, r2]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8008de8:	1862      	adds	r2, r4, r1
 8008dea:	d00b      	beq.n	8008e04 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x34>
 8008dec:	f854 e001 	ldr.w	lr, [r4, r1]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8008df0:	2100      	movs	r1, #0
  int element_count = 1;
 8008df2:	2401      	movs	r4, #1
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8008df4:	4571      	cmp	r1, lr
 8008df6:	d006      	beq.n	8008e06 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x36>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8008df8:	f852 cf04 	ldr.w	ip, [r2, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8008dfc:	3101      	adds	r1, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8008dfe:	fb0c f404 	mul.w	r4, ip, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8008e02:	e7f7      	b.n	8008df4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x24>
  int element_count = 1;
 8008e04:	2401      	movs	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008e06:	2f06      	cmp	r7, #6
 8008e08:	d913      	bls.n	8008e32 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x62>
 8008e0a:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8008e0c:	b19b      	cbz	r3, 8008e36 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x66>
 8008e0e:	56c0      	ldrsb	r0, [r0, r3]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(
 8008e10:	f10d 0107 	add.w	r1, sp, #7
 8008e14:	f00d fcb0 	bl	8016778 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8008e18:	b940      	cbnz	r0, 8008e2c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x5c>
      ConvertTensorType(flatbuffer_tensor.type(), &tf_lite_type));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008e20:	f7ff ffba 	bl	8008d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8008e24:	b910      	cbnz	r0, 8008e2c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x5c>
  *bytes = element_count * (*type_size);
 8008e26:	6833      	ldr	r3, [r6, #0]
 8008e28:	435c      	muls	r4, r3
 8008e2a:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
 8008e2c:	b003      	add	sp, #12
 8008e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int element_count = 1;
 8008e30:	2401      	movs	r4, #1
 8008e32:	2000      	movs	r0, #0
 8008e34:	e7ec      	b.n	8008e10 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x40>
 8008e36:	4618      	mov	r0, r3
 8008e38:	e7ea      	b.n	8008e10 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x40>

08008e3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8008e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TFLITE_DCHECK(out_bytes != nullptr);
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	b909      	cbnz	r1, 8008e44 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0xa>
 8008e40:	f00d ff80 	bl	8016d44 <abort>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8008e44:	6843      	ldr	r3, [r0, #4]
 8008e46:	b153      	cbz	r3, 8008e5e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8008e48:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e4c:	2100      	movs	r1, #0
  int element_count = 1;
 8008e4e:	2201      	movs	r2, #1
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8008e50:	428e      	cmp	r6, r1
 8008e52:	dd05      	ble.n	8008e60 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x26>
      element_count *= eval_tensor->dims->data[n];
 8008e54:	f853 5b04 	ldr.w	r5, [r3], #4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8008e58:	3101      	adds	r1, #1
      element_count *= eval_tensor->dims->data[n];
 8008e5a:	436a      	muls	r2, r5
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8008e5c:	e7f8      	b.n	8008e50 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
  int element_count = 1;
 8008e5e:	2201      	movs	r2, #1
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8008e60:	a901      	add	r1, sp, #4
 8008e62:	7a00      	ldrb	r0, [r0, #8]
 8008e64:	f7ff ff98 	bl	8008d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8008e68:	b910      	cbnz	r0, 8008e70 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x36>
  *out_bytes = element_count * type_size;
 8008e6a:	9b01      	ldr	r3, [sp, #4]
 8008e6c:	435a      	muls	r2, r3
 8008e6e:	6022      	str	r2, [r4, #0]
  return kTfLiteOk;
}
 8008e70:	b002      	add	sp, #8
 8008e72:	bd70      	pop	{r4, r5, r6, pc}

08008e74 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>:

// Mark the given Allocation info as first created at the specified allocation
// scope count. Only the first creation must be recorded since the allocation
// scope count monotonically increases throughout the lifetime marking process.
void AllocationInfoBuilder::UpdateFirstCreated(AllocationInfo* current,
                                               int allocation_scope_count) {
 8008e74:	b508      	push	{r3, lr}
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 8008e76:	688b      	ldr	r3, [r1, #8]
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	dd01      	ble.n	8008e80 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi+0xc>
 8008e7c:	f00d ff62 	bl	8016d44 <abort>
  if (current->first_created == kUninitializedLifetime) {
 8008e80:	3301      	adds	r3, #1
    current->first_created = allocation_scope_count;
 8008e82:	bf08      	it	eq
 8008e84:	608a      	streq	r2, [r1, #8]
  }
}
 8008e86:	bd08      	pop	{r3, pc}

08008e88 <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>:
    return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus AllocationInfoBuilder::FreeAllocationInfo() {
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	4604      	mov	r4, r0
  non_persistent_allocator_->DeallocateTemp(
 8008e8c:	6840      	ldr	r0, [r0, #4]
      reinterpret_cast<uint8_t*>(info_.allocation_info));
 8008e8e:	6803      	ldr	r3, [r0, #0]
  non_persistent_allocator_->DeallocateTemp(
 8008e90:	68a1      	ldr	r1, [r4, #8]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	4798      	blx	r3
  non_persistent_allocator_->DeallocateTemp(
 8008e96:	6860      	ldr	r0, [r4, #4]
 8008e98:	6921      	ldr	r1, [r4, #16]
      reinterpret_cast<uint8_t*>(info_.subgraph_offsets));
 8008e9a:	6803      	ldr	r3, [r0, #0]
  non_persistent_allocator_->DeallocateTemp(
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	4798      	blx	r3
  return kTfLiteOk;
}
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	bd10      	pop	{r4, pc}

08008ea4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>:
}

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const int32_t** offline_planner_offsets) {
 8008ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  }
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8008ea8:	6805      	ldr	r5, [r0, #0]
 8008eaa:	4607      	mov	r7, r0
 8008eac:	4688      	mov	r8, r1
    auto field_offset = GetOptionalFieldOffset(field);
 8008eae:	2110      	movs	r1, #16
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f7fe fbc3 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8008eb6:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d066      	beq.n	8008f8a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe6>
 8008ebc:	582a      	ldr	r2, [r5, r0]
  if (model_->metadata()) {
 8008ebe:	42d3      	cmn	r3, r2
 8008ec0:	d063      	beq.n	8008f8a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe6>
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 8008ec2:	2600      	movs	r6, #0
      auto metadata = model_->metadata()->Get(i);

      if (metadata->name()) {
        const size_t metadata_name_size = metadata->name()->size();

        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8008ec4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8008fa8 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x104>
    auto field_offset = GetOptionalFieldOffset(field);
 8008ec8:	2110      	movs	r1, #16
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7fe fbb6 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8008ed0:	1829      	adds	r1, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d05b      	beq.n	8008f8e <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xea>
 8008ed6:	582a      	ldr	r2, [r5, r0]
 8008ed8:	188b      	adds	r3, r1, r2
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 8008eda:	588a      	ldr	r2, [r1, r2]
 8008edc:	4296      	cmp	r6, r2
 8008ede:	d254      	bcs.n	8008f8a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008ee0:	3304      	adds	r3, #4
    auto field_offset = GetOptionalFieldOffset(field);
 8008ee2:	2104      	movs	r1, #4
    p += i * sizeof(uoffset_t);
 8008ee4:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008ee8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008eec:	449a      	add	sl, r3
 8008eee:	4650      	mov	r0, sl
 8008ef0:	f7fe fba4 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8008ef4:	eb0a 0200 	add.w	r2, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d044      	beq.n	8008f86 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe2>
 8008efc:	f85a 3000 	ldr.w	r3, [sl, r0]
      if (metadata->name()) {
 8008f00:	18d0      	adds	r0, r2, r3
 8008f02:	d040      	beq.n	8008f86 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe2>
  uoffset_t size() const { return EndianScalar(length_); }
 8008f04:	58d4      	ldr	r4, [r2, r3]
        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8008f06:	4649      	mov	r1, r9
 8008f08:	3004      	adds	r0, #4
 8008f0a:	2c17      	cmp	r4, #23
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	bf28      	it	cs
 8008f10:	2217      	movcs	r2, #23
 8008f12:	f00e fb87 	bl	8017624 <strncmp>
                     std::min(metadata_name_size,
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 8008f16:	bbb0      	cbnz	r0, 8008f86 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe2>
 8008f18:	2c17      	cmp	r4, #23
 8008f1a:	d134      	bne.n	8008f86 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe2>
    auto field_offset = GetOptionalFieldOffset(field);
 8008f1c:	210c      	movs	r1, #12
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f7fe fb8c 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8008f24:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008f26:	b188      	cbz	r0, 8008f4c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xa8>
 8008f28:	5828      	ldr	r0, [r5, r0]
 8008f2a:	4404      	add	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 8008f2c:	2106      	movs	r1, #6
 8008f2e:	4650      	mov	r0, sl
 8008f30:	f7fe fb84 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8008f34:	b108      	cbz	r0, 8008f3a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x96>
 8008f36:	f85a 0000 	ldr.w	r0, [sl, r0]
    FLATBUFFERS_ASSERT(i < size());
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	4283      	cmp	r3, r0
 8008f3e:	d807      	bhi.n	8008f50 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xac>
 8008f40:	4b15      	ldr	r3, [pc, #84]	; (8008f98 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf4>)
 8008f42:	21aa      	movs	r1, #170	; 0xaa
 8008f44:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf8>)
 8008f46:	4816      	ldr	r0, [pc, #88]	; (8008fa0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xfc>)
 8008f48:	f00d ff04 	bl	8016d54 <__assert_func>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	e7ed      	b.n	8008f2c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x88>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f50:	3404      	adds	r4, #4
    auto field_offset = GetOptionalFieldOffset(field);
 8008f52:	2104      	movs	r1, #4
    p += i * sizeof(uoffset_t);
 8008f54:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008f58:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8008f5c:	441c      	add	r4, r3
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f7fe fb6c 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8008f64:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008f66:	b1a0      	cbz	r0, 8008f92 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xee>
 8008f68:	5822      	ldr	r2, [r4, r0]
 8008f6a:	4413      	add	r3, r2
              reinterpret_cast<const uint32_t*>(array->data());
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
          *offline_planner_offsets =
              reinterpret_cast<const int32_t*>(&metadata_buffer[3]);

          if (info_.tensor_count != nbr_tensors) {
 8008f6c:	69ba      	ldr	r2, [r7, #24]
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8008f6e:	68d9      	ldr	r1, [r3, #12]
              reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8008f70:	3310      	adds	r3, #16
          if (info_.tensor_count != nbr_tensors) {
 8008f72:	428a      	cmp	r2, r1
          *offline_planner_offsets =
 8008f74:	f8c8 3000 	str.w	r3, [r8]
          if (info_.tensor_count != nbr_tensors) {
 8008f78:	d005      	beq.n	8008f86 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe2>
            MicroPrintf(
 8008f7a:	480a      	ldr	r0, [pc, #40]	; (8008fa4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x100>)
 8008f7c:	f001 fe9c 	bl	800acb8 <_Z11MicroPrintfPKcz>
                "Nbr of offline buffer offsets (%d) in metadata "
                "not equal nbr tensors (%d)\n",
                nbr_tensors, info_.tensor_count);
            return kTfLiteError;
 8008f80:	2001      	movs	r0, #1
        }
      }
    }
  }
  return kTfLiteOk;
}
 8008f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 8008f86:	3601      	adds	r6, #1
 8008f88:	e79e      	b.n	8008ec8 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x24>
  return kTfLiteOk;
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e7f9      	b.n	8008f82 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xde>
  uoffset_t size() const { return EndianScalar(length_); }
 8008f8e:	6803      	ldr	r3, [r0, #0]
 8008f90:	deff      	udf	#255	; 0xff
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8008f92:	68c3      	ldr	r3, [r0, #12]
 8008f94:	e7fc      	b.n	8008f90 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xec>
 8008f96:	bf00      	nop
 8008f98:	080f923a 	.word	0x080f923a
 8008f9c:	080f9ea4 	.word	0x080f9ea4
 8008fa0:	080f9245 	.word	0x080f9245
 8008fa4:	080f9d57 	.word	0x080f9d57
 8008fa8:	080f9cc2 	.word	0x080f9cc2

08008fac <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008fac:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 8008fae:	6803      	ldr	r3, [r0, #0]
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	d305      	bcc.n	8008fc0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x14>
 8008fb4:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x1c>)
 8008fb6:	21aa      	movs	r1, #170	; 0xaa
 8008fb8:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <_ZNK11flatbuffers6VectorIlE3GetEm+0x20>)
 8008fba:	4805      	ldr	r0, [pc, #20]	; (8008fd0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x24>)
 8008fbc:	f00d feca 	bl	8016d54 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008fc0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
 8008fc4:	6840      	ldr	r0, [r0, #4]
 8008fc6:	bd08      	pop	{r3, pc}
 8008fc8:	080f923a 	.word	0x080f923a
 8008fcc:	080fa284 	.word	0x080fa284
 8008fd0:	080f9245 	.word	0x080f9245

08008fd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008fd4:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 8008fd6:	6803      	ldr	r3, [r0, #0]
 8008fd8:	4299      	cmp	r1, r3
 8008fda:	d305      	bcc.n	8008fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x14>
 8008fdc:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x24>)
 8008fde:	21aa      	movs	r1, #170	; 0xaa
 8008fe0:	4a06      	ldr	r2, [pc, #24]	; (8008ffc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x28>)
 8008fe2:	4807      	ldr	r0, [pc, #28]	; (8009000 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x2c>)
 8008fe4:	f00d feb6 	bl	8016d54 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008fe8:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 8008fea:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008fee:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 8008ff2:	4410      	add	r0, r2
 8008ff4:	bd08      	pop	{r3, pc}
 8008ff6:	bf00      	nop
 8008ff8:	080f923a 	.word	0x080f923a
 8008ffc:	080f9f9a 	.word	0x080f9f9a
 8009000:	080f9245 	.word	0x080f9245

08009004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009004:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 8009006:	6803      	ldr	r3, [r0, #0]
 8009008:	4299      	cmp	r1, r3
 800900a:	d305      	bcc.n	8009018 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x14>
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x24>)
 800900e:	21aa      	movs	r1, #170	; 0xaa
 8009010:	4a06      	ldr	r2, [pc, #24]	; (800902c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x28>)
 8009012:	4807      	ldr	r0, [pc, #28]	; (8009030 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x2c>)
 8009014:	f00d fe9e 	bl	8016d54 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009018:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 800901a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800901e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 8009022:	4410      	add	r0, r2
 8009024:	bd08      	pop	{r3, pc}
 8009026:	bf00      	nop
 8009028:	080f923a 	.word	0x080f923a
 800902c:	080fa090 	.word	0x080fa090
 8009030:	080f9245 	.word	0x080f9245

08009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009034:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 8009036:	6803      	ldr	r3, [r0, #0]
 8009038:	4299      	cmp	r1, r3
 800903a:	d305      	bcc.n	8009048 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x14>
 800903c:	4b06      	ldr	r3, [pc, #24]	; (8009058 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x24>)
 800903e:	21aa      	movs	r1, #170	; 0xaa
 8009040:	4a06      	ldr	r2, [pc, #24]	; (800905c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x28>)
 8009042:	4807      	ldr	r0, [pc, #28]	; (8009060 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x2c>)
 8009044:	f00d fe86 	bl	8016d54 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009048:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 800904a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800904e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 8009052:	4410      	add	r0, r2
 8009054:	bd08      	pop	{r3, pc}
 8009056:	bf00      	nop
 8009058:	080f923a 	.word	0x080f923a
 800905c:	080fa18a 	.word	0x080fa18a
 8009060:	080f9245 	.word	0x080f9245

08009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009064:	b510      	push	{r4, lr}
 8009066:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 8009068:	f7fe fae8 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800906c:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800906e:	b108      	cbz	r0, 8009074 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x10>
 8009070:	5820      	ldr	r0, [r4, r0]
 8009072:	4418      	add	r0, r3
  }
 8009074:	bd10      	pop	{r4, pc}
	...

08009078 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 8009078:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 800907c:	4608      	mov	r0, r1
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 800907e:	460d      	mov	r5, r1
 8009080:	4617      	mov	r7, r2
  for (uint32_t i = 0; i < operators_size; i++) {
 8009082:	2400      	movs	r4, #0
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8009084:	f7ff fe3c 	bl	8008d00 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
      size_t tensor_size = -1;
 8009088:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 800908c:	4606      	mov	r6, r0
  for (uint32_t i = 0; i < operators_size; i++) {
 800908e:	42b4      	cmp	r4, r6
 8009090:	d030      	beq.n	80090f4 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x7c>
    auto field_offset = GetOptionalFieldOffset(field);
 8009092:	210a      	movs	r1, #10
 8009094:	4628      	mov	r0, r5
 8009096:	f7fe fad1 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800909a:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800909c:	b108      	cbz	r0, 80090a2 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x2a>
 800909e:	5828      	ldr	r0, [r5, r0]
 80090a0:	4418      	add	r0, r3
    const auto op = subgraph->operators()->Get(i);
 80090a2:	4621      	mov	r1, r4
    for (size_t n = 0;
 80090a4:	f04f 0900 	mov.w	r9, #0
    const auto op = subgraph->operators()->Get(i);
 80090a8:	f7ff ffac 	bl	8009004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80090ac:	4682      	mov	sl, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80090ae:	2114      	movs	r1, #20
 80090b0:	4650      	mov	r0, sl
 80090b2:	f7ff ffd7 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
         op->intermediates() != nullptr && n < op->intermediates()->size();
 80090b6:	b188      	cbz	r0, 80090dc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x64>
 80090b8:	6803      	ldr	r3, [r0, #0]
 80090ba:	4599      	cmp	r9, r3
 80090bc:	d20e      	bcs.n	80090dc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x64>
      const int tensor_index = op->intermediates()->Get(n);
 80090be:	4649      	mov	r1, r9
 80090c0:	f7ff ff74 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 80090c4:	230c      	movs	r3, #12
 80090c6:	a901      	add	r1, sp, #4
      size_t tensor_size = -1;
 80090c8:	f8cd 8004 	str.w	r8, [sp, #4]
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 80090cc:	fb03 7000 	mla	r0, r3, r0, r7
 80090d0:	f7ff feb3 	bl	8008e3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80090d4:	b120      	cbz	r0, 80090e0 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x68>
}
 80090d6:	b002      	add	sp, #8
 80090d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (uint32_t i = 0; i < operators_size; i++) {
 80090dc:	3401      	adds	r4, #1
 80090de:	e7d6      	b.n	800908e <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x16>
      if (tensor_size != 0) {
 80090e0:	9901      	ldr	r1, [sp, #4]
 80090e2:	b121      	cbz	r1, 80090ee <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x76>
        MicroPrintf(
 80090e4:	4804      	ldr	r0, [pc, #16]	; (80090f8 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x80>)
 80090e6:	f001 fde7 	bl	800acb8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 80090ea:	2001      	movs	r0, #1
 80090ec:	e7f3      	b.n	80090d6 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    for (size_t n = 0;
 80090ee:	f109 0901 	add.w	r9, r9, #1
 80090f2:	e7dc      	b.n	80090ae <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
  return kTfLiteOk;
 80090f4:	2000      	movs	r0, #0
 80090f6:	e7ee      	b.n	80090d6 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
 80090f8:	080f9cda 	.word	0x080f9cda

080090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80090fc:	b510      	push	{r4, lr}
 80090fe:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 8009100:	f7fe fa9c 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8009104:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009106:	b108      	cbz	r0, 800910c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x10>
 8009108:	5820      	ldr	r0, [r4, r0]
 800910a:	4418      	add	r0, r3
  }
 800910c:	bd10      	pop	{r4, pc}

0800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800910e:	b510      	push	{r4, lr}
 8009110:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 8009112:	f7fe fa93 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8009116:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009118:	b108      	cbz	r0, 800911e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x10>
 800911a:	5820      	ldr	r0, [r4, r0]
 800911c:	4418      	add	r0, r3
  }
 800911e:	bd10      	pop	{r4, pc}

08009120 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:
    SubgraphAllocations* allocations) {
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	b08b      	sub	sp, #44	; 0x2c
 8009126:	4604      	mov	r4, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009128:	6800      	ldr	r0, [r0, #0]
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 800912a:	f04f 0918 	mov.w	r9, #24
    SubgraphAllocations* allocations) {
 800912e:	9103      	str	r1, [sp, #12]
 8009130:	2108      	movs	r1, #8
  for (size_t i = 0;
 8009132:	f04f 0800 	mov.w	r8, #0
    SubgraphAllocations* allocations) {
 8009136:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800913a:	f7ff ffe8 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800913e:	9903      	ldr	r1, [sp, #12]
 8009140:	f7ff ff78 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
  AllocationInfo* allocation_info = info_.allocation_info;
 8009144:	68a3      	ldr	r3, [r4, #8]
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 8009146:	9a03      	ldr	r2, [sp, #12]
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8009148:	4607      	mov	r7, r0
  AllocationInfo* allocation_info = info_.allocation_info;
 800914a:	9304      	str	r3, [sp, #16]
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
  AllocationInfo* subgraph_allocation_info =
 8009152:	9b04      	ldr	r3, [sp, #16]
 8009154:	fb09 3606 	mla	r6, r9, r6, r3
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8009158:	f7ff fdd2 	bl	8008d00 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800915c:	9008      	str	r0, [sp, #32]
 800915e:	2106      	movs	r1, #6
 8009160:	4638      	mov	r0, r7
 8009162:	f7ff ff7f 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
 8009166:	4605      	mov	r5, r0
 8009168:	b1b8      	cbz	r0, 800919a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7a>
 800916a:	6803      	ldr	r3, [r0, #0]
 800916c:	4598      	cmp	r8, r3
 800916e:	d213      	bcs.n	8009198 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x78>
    const int tensor_index = subgraph->inputs()->Get(i);
 8009170:	4641      	mov	r1, r8
 8009172:	f7ff ff1b 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8009176:	fb09 6500 	mla	r5, r9, r0, r6
    UpdateFirstCreated(current, allocation_scope_count_);
 800917a:	6a22      	ldr	r2, [r4, #32]
 800917c:	4620      	mov	r0, r4
 800917e:	4629      	mov	r1, r5
 8009180:	f7ff fe78 	bl	8008e74 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    UpdateLastUsed(current, allocation_scope_count_);
 8009184:	6a23      	ldr	r3, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8009186:	68ea      	ldr	r2, [r5, #12]
 8009188:	4293      	cmp	r3, r2
 800918a:	da01      	bge.n	8009190 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x70>
 800918c:	f00d fdda 	bl	8016d44 <abort>
  current->last_used = allocation_scope_count;
 8009190:	60eb      	str	r3, [r5, #12]
  for (size_t i = 0;
 8009192:	f108 0801 	add.w	r8, r8, #1
 8009196:	e7e2      	b.n	800915e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x3e>
 8009198:	2500      	movs	r5, #0
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 800919a:	f04f 0818 	mov.w	r8, #24
  for (uint32_t i = 0; i < operators_size; i++) {
 800919e:	9b08      	ldr	r3, [sp, #32]
 80091a0:	429d      	cmp	r5, r3
 80091a2:	f000 8095 	beq.w	80092d0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1b0>
    allocation_scope_count_++;
 80091a6:	6a23      	ldr	r3, [r4, #32]
    auto field_offset = GetOptionalFieldOffset(field);
 80091a8:	210a      	movs	r1, #10
 80091aa:	4638      	mov	r0, r7
 80091ac:	3301      	adds	r3, #1
 80091ae:	6223      	str	r3, [r4, #32]
 80091b0:	f7fe fa44 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 80091b4:	183b      	adds	r3, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80091b6:	b108      	cbz	r0, 80091bc <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x9c>
 80091b8:	5838      	ldr	r0, [r7, r0]
 80091ba:	4418      	add	r0, r3
    const auto* op = subgraph->operators()->Get(i);
 80091bc:	4629      	mov	r1, r5
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 80091be:	f04f 0a00 	mov.w	sl, #0
    const auto* op = subgraph->operators()->Get(i);
 80091c2:	f7ff ff1f 	bl	8009004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80091c6:	4681      	mov	r9, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80091c8:	2108      	movs	r1, #8
 80091ca:	4648      	mov	r0, r9
 80091cc:	f7ff ff4a 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80091d0:	6a23      	ldr	r3, [r4, #32]
 80091d2:	9305      	str	r3, [sp, #20]
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 80091d4:	b110      	cbz	r0, 80091dc <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xbc>
 80091d6:	6803      	ldr	r3, [r0, #0]
 80091d8:	459a      	cmp	sl, r3
 80091da:	d321      	bcc.n	8009220 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x100>
    MarkSubgraphLifetimesIfNecessary(op, scratch_buffer_requests,
 80091dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 80091de:	f04f 0b00 	mov.w	fp, #0
    MarkSubgraphLifetimesIfNecessary(op, scratch_buffer_requests,
 80091e2:	4649      	mov	r1, r9
 80091e4:	4620      	mov	r0, r4
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091ec:	f000 f894 	bl	8009318 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 80091f0:	2106      	movs	r1, #6
 80091f2:	4648      	mov	r0, r9
 80091f4:	f7ff ff36 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 80091f8:	4682      	mov	sl, r0
 80091fa:	b1f8      	cbz	r0, 800923c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x11c>
 80091fc:	6803      	ldr	r3, [r0, #0]
 80091fe:	459b      	cmp	fp, r3
 8009200:	d21a      	bcs.n	8009238 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x118>
      const int tensor_index = op->inputs()->Get(n);
 8009202:	4659      	mov	r1, fp
 8009204:	f7ff fed2 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
      if (tensor_index >= 0) {
 8009208:	2800      	cmp	r0, #0
 800920a:	db06      	blt.n	800921a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xfa>
        AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 800920c:	fb08 6000 	mla	r0, r8, r0, r6
        UpdateLastUsed(current, allocation_scope_count_);
 8009210:	6a23      	ldr	r3, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8009212:	68c2      	ldr	r2, [r0, #12]
 8009214:	4293      	cmp	r3, r2
 8009216:	dbb9      	blt.n	800918c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6c>
  current->last_used = allocation_scope_count;
 8009218:	60c3      	str	r3, [r0, #12]
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 800921a:	f10b 0b01 	add.w	fp, fp, #1
 800921e:	e7e7      	b.n	80091f0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xd0>
      const int tensor_index = op->outputs()->Get(n);
 8009220:	4651      	mov	r1, sl
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8009222:	f10a 0a01 	add.w	sl, sl, #1
      const int tensor_index = op->outputs()->Get(n);
 8009226:	f7ff fec1 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
      UpdateFirstCreated(current, allocation_scope_count_);
 800922a:	9a05      	ldr	r2, [sp, #20]
 800922c:	fb08 6100 	mla	r1, r8, r0, r6
 8009230:	4620      	mov	r0, r4
 8009232:	f7ff fe1f 	bl	8008e74 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8009236:	e7c7      	b.n	80091c8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa8>
 8009238:	f04f 0a00 	mov.w	sl, #0
 800923c:	2108      	movs	r1, #8
 800923e:	4648      	mov	r0, r9
 8009240:	f7ff ff10 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8009244:	b110      	cbz	r0, 800924c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x12c>
 8009246:	6803      	ldr	r3, [r0, #0]
 8009248:	459a      	cmp	sl, r3
 800924a:	d331      	bcc.n	80092b0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x190>
        &allocation_info[info_.scratch_offset];
 800924c:	6963      	ldr	r3, [r4, #20]
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 800924e:	f04f 0a00 	mov.w	sl, #0
 8009252:	9a04      	ldr	r2, [sp, #16]
 8009254:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009258:	fb08 2b03 	mla	fp, r8, r3, r2
 800925c:	69e3      	ldr	r3, [r4, #28]
 800925e:	4553      	cmp	r3, sl
 8009260:	d934      	bls.n	80092cc <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ac>
      if (request.node_idx == static_cast<int>(i) &&
 8009262:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009266:	429d      	cmp	r5, r3
 8009268:	d11d      	bne.n	80092a6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x186>
 800926a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800926e:	9a03      	ldr	r2, [sp, #12]
 8009270:	4293      	cmp	r3, r2
 8009272:	d118      	bne.n	80092a6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x186>
 8009274:	fb08 f20a 	mul.w	r2, r8, sl
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8009278:	9807      	ldr	r0, [sp, #28]
      internal::ScratchBufferRequest request =
 800927a:	f8d9 1000 	ldr.w	r1, [r9]
 800927e:	eb0b 0302 	add.w	r3, fp, r2
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8009282:	eb00 008a 	add.w	r0, r0, sl, lsl #2
 8009286:	6058      	str	r0, [r3, #4]
        UpdateFirstCreated(current, start_allocation_scope_count);
 8009288:	4620      	mov	r0, r4
        current->bytes = request.bytes;
 800928a:	f84b 1002 	str.w	r1, [fp, r2]
        UpdateFirstCreated(current, start_allocation_scope_count);
 800928e:	4619      	mov	r1, r3
 8009290:	9a05      	ldr	r2, [sp, #20]
 8009292:	9309      	str	r3, [sp, #36]	; 0x24
 8009294:	f7ff fdee 	bl	8008e74 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8009298:	9b09      	ldr	r3, [sp, #36]	; 0x24
        UpdateLastUsed(current, allocation_scope_count_);
 800929a:	6a22      	ldr	r2, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 800929c:	68d9      	ldr	r1, [r3, #12]
 800929e:	428a      	cmp	r2, r1
 80092a0:	f6ff af74 	blt.w	800918c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6c>
  current->last_used = allocation_scope_count;
 80092a4:	60da      	str	r2, [r3, #12]
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 80092a6:	f10a 0a01 	add.w	sl, sl, #1
 80092aa:	f109 090c 	add.w	r9, r9, #12
 80092ae:	e7d5      	b.n	800925c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x13c>
      const int tensor_index = op->outputs()->Get(n);
 80092b0:	4651      	mov	r1, sl
 80092b2:	f7ff fe7b 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80092b6:	fb08 6000 	mla	r0, r8, r0, r6
      UpdateLastUsed(current, allocation_scope_count_);
 80092ba:	6a23      	ldr	r3, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 80092bc:	68c2      	ldr	r2, [r0, #12]
 80092be:	4293      	cmp	r3, r2
 80092c0:	f6ff af64 	blt.w	800918c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6c>
  current->last_used = allocation_scope_count;
 80092c4:	60c3      	str	r3, [r0, #12]
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 80092c6:	f10a 0a01 	add.w	sl, sl, #1
 80092ca:	e7b7      	b.n	800923c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x11c>
  for (uint32_t i = 0; i < operators_size; i++) {
 80092cc:	3501      	adds	r5, #1
 80092ce:	e766      	b.n	800919e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7e>
  for (size_t i = 0;
 80092d0:	2500      	movs	r5, #0
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80092d2:	f04f 0918 	mov.w	r9, #24
 80092d6:	2108      	movs	r1, #8
 80092d8:	4638      	mov	r0, r7
 80092da:	f7ff fec3 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
 80092de:	b1b0      	cbz	r0, 800930e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ee>
 80092e0:	6803      	ldr	r3, [r0, #0]
 80092e2:	429d      	cmp	r5, r3
 80092e4:	d213      	bcs.n	800930e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ee>
    const int tensor_index = subgraph->outputs()->Get(i);
 80092e6:	4629      	mov	r1, r5
 80092e8:	f7ff fe60 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80092ec:	fb09 6800 	mla	r8, r9, r0, r6
    UpdateFirstCreated(current, allocation_scope_count_);
 80092f0:	6a22      	ldr	r2, [r4, #32]
 80092f2:	4620      	mov	r0, r4
 80092f4:	4641      	mov	r1, r8
 80092f6:	f7ff fdbd 	bl	8008e74 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    UpdateLastUsed(current, allocation_scope_count_);
 80092fa:	6a23      	ldr	r3, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 80092fc:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8009300:	4293      	cmp	r3, r2
 8009302:	f6ff af43 	blt.w	800918c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6c>
  current->last_used = allocation_scope_count;
 8009306:	f8c8 300c 	str.w	r3, [r8, #12]
  for (size_t i = 0;
 800930a:	3501      	adds	r5, #1
 800930c:	e7e3      	b.n	80092d6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1b6>
}
 800930e:	2000      	movs	r0, #0
 8009310:	b00b      	add	sp, #44	; 0x2c
 8009312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009318 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:
    SubgraphAllocations* allocations) {
 8009318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 800931c:	6804      	ldr	r4, [r0, #0]
 800931e:	4606      	mov	r6, r0
 8009320:	460d      	mov	r5, r1
    auto field_offset = GetOptionalFieldOffset(field);
 8009322:	2106      	movs	r1, #6
 8009324:	4620      	mov	r0, r4
 8009326:	4698      	mov	r8, r3
 8009328:	4617      	mov	r7, r2
 800932a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800932e:	f7fe f985 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8009332:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009334:	b180      	cbz	r0, 8009358 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x40>
 8009336:	5824      	ldr	r4, [r4, r0]
 8009338:	441c      	add	r4, r3
    auto field_offset = GetOptionalFieldOffset(field);
 800933a:	2104      	movs	r1, #4
 800933c:	4628      	mov	r0, r5
 800933e:	f7fe f97d 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009342:	b100      	cbz	r0, 8009346 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2e>
 8009344:	5828      	ldr	r0, [r5, r0]
    FLATBUFFERS_ASSERT(i < size());
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	4283      	cmp	r3, r0
 800934a:	d807      	bhi.n	800935c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x44>
 800934c:	4b38      	ldr	r3, [pc, #224]	; (8009430 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x118>)
 800934e:	21aa      	movs	r1, #170	; 0xaa
 8009350:	4a38      	ldr	r2, [pc, #224]	; (8009434 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x11c>)
 8009352:	4839      	ldr	r0, [pc, #228]	; (8009438 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x120>)
 8009354:	f00d fcfe 	bl	8016d54 <__assert_func>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009358:	4604      	mov	r4, r0
 800935a:	e7ee      	b.n	800933a <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800935c:	3404      	adds	r4, #4
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 800935e:	2200      	movs	r2, #0
 8009360:	210a      	movs	r1, #10
    p += i * sizeof(uoffset_t);
 8009362:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8009366:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800936a:	4460      	add	r0, ip
 800936c:	f7fe f9c3 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  switch (opcode->builtin_code()) {
 8009370:	2877      	cmp	r0, #119	; 0x77
 8009372:	d051      	beq.n	8009418 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x100>
 8009374:	2881      	cmp	r0, #129	; 0x81
 8009376:	d037      	beq.n	80093e8 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xd0>
 8009378:	2876      	cmp	r0, #118	; 0x76
 800937a:	d147      	bne.n	800940c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf4>
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 800937c:	2200      	movs	r2, #0
 800937e:	210a      	movs	r1, #10
 8009380:	4628      	mov	r0, r5
 8009382:	f7fe f9a9 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
 8009386:	285c      	cmp	r0, #92	; 0x5c
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 8009388:	d14d      	bne.n	8009426 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10e>
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800938a:	4628      	mov	r0, r5
 800938c:	210c      	movs	r1, #12
 800938e:	f7fe f9d5 	bl	800773c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8009392:	4605      	mov	r5, r0
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
 8009394:	2200      	movs	r2, #0
 8009396:	2104      	movs	r1, #4
 8009398:	4628      	mov	r0, r5
 800939a:	f7fe f9ac 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800939e:	4604      	mov	r4, r0
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
 80093a0:	2200      	movs	r2, #0
 80093a2:	4628      	mov	r0, r5
 80093a4:	2106      	movs	r1, #6
 80093a6:	f7fe f9a6 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  if (first_subgraph_index != -1) {
 80093aa:	1c62      	adds	r2, r4, #1
 80093ac:	4605      	mov	r5, r0
 80093ae:	d00b      	beq.n	80093c8 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xb0>
    allocation_scope_count_++;
 80093b0:	6a33      	ldr	r3, [r6, #32]
    TF_LITE_ENSURE_STATUS(
 80093b2:	463a      	mov	r2, r7
 80093b4:	f8cd 9000 	str.w	r9, [sp]
 80093b8:	4621      	mov	r1, r4
    allocation_scope_count_++;
 80093ba:	3301      	adds	r3, #1
    TF_LITE_ENSURE_STATUS(
 80093bc:	4630      	mov	r0, r6
    allocation_scope_count_++;
 80093be:	6233      	str	r3, [r6, #32]
    TF_LITE_ENSURE_STATUS(
 80093c0:	4643      	mov	r3, r8
 80093c2:	f7ff fead 	bl	8009120 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 80093c6:	bb10      	cbnz	r0, 800940e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf6>
  if (second_subgraph_index != -1) {
 80093c8:	1c6b      	adds	r3, r5, #1
 80093ca:	d01f      	beq.n	800940c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf4>
    allocation_scope_count_++;
 80093cc:	6a33      	ldr	r3, [r6, #32]
    TF_LITE_ENSURE_STATUS(
 80093ce:	463a      	mov	r2, r7
 80093d0:	4629      	mov	r1, r5
 80093d2:	4630      	mov	r0, r6
    allocation_scope_count_++;
 80093d4:	3301      	adds	r3, #1
    TF_LITE_ENSURE_STATUS(
 80093d6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    allocation_scope_count_++;
 80093da:	6233      	str	r3, [r6, #32]
    TF_LITE_ENSURE_STATUS(
 80093dc:	4643      	mov	r3, r8
}
 80093de:	b003      	add	sp, #12
 80093e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    TF_LITE_ENSURE_STATUS(
 80093e4:	f7ff be9c 	b.w	8009120 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 80093e8:	2200      	movs	r2, #0
 80093ea:	210a      	movs	r1, #10
 80093ec:	4628      	mov	r0, r5
 80093ee:	f7fe f973 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 80093f2:	2867      	cmp	r0, #103	; 0x67
 80093f4:	d10e      	bne.n	8009414 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xfc>
 80093f6:	210c      	movs	r1, #12
 80093f8:	4628      	mov	r0, r5
 80093fa:	f7fe f99f 	bl	800773c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
    return GetField<int32_t>(VT_INIT_SUBGRAPH_INDEX, 0);
 80093fe:	2104      	movs	r1, #4
 8009400:	2200      	movs	r2, #0
 8009402:	f7fe f978 	bl	80076f6 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  if (first_subgraph_index != -1) {
 8009406:	1c41      	adds	r1, r0, #1
 8009408:	4604      	mov	r4, r0
 800940a:	d10e      	bne.n	800942a <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x112>
  return kTfLiteOk;
 800940c:	2000      	movs	r0, #0
}
 800940e:	b003      	add	sp, #12
 8009410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 8009414:	2000      	movs	r0, #0
 8009416:	e7f2      	b.n	80093fe <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xe6>
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8009418:	2200      	movs	r2, #0
 800941a:	210a      	movs	r1, #10
 800941c:	4628      	mov	r0, r5
 800941e:	f7fe f95b 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 8009422:	285d      	cmp	r0, #93	; 0x5d
 8009424:	e7b0      	b.n	8009388 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x70>
 8009426:	2500      	movs	r5, #0
 8009428:	e7b4      	b.n	8009394 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7c>
  int second_subgraph_index = -1;
 800942a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800942e:	e7bf      	b.n	80093b0 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x98>
 8009430:	080f923a 	.word	0x080f923a
 8009434:	080f9da2 	.word	0x080f9da2
 8009438:	080f9245 	.word	0x080f9245

0800943c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>:
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 800943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8009440:	2600      	movs	r6, #0
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 8009442:	b085      	sub	sp, #20
  AllocationInfo* allocation_info = info_.allocation_info;
 8009444:	6883      	ldr	r3, [r0, #8]
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 8009446:	4607      	mov	r7, r0
  int offline_index = 0;
 8009448:	46b1      	mov	r9, r6
      current->first_created = kUninitializedLifetime;
 800944a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  AllocationInfo* allocation_info = info_.allocation_info;
 800944e:	9300      	str	r3, [sp, #0]
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 8009450:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009454:	2108      	movs	r1, #8
 8009456:	6838      	ldr	r0, [r7, #0]
 8009458:	f7ff fe59 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 800945c:	6803      	ldr	r3, [r0, #0]
 800945e:	429e      	cmp	r6, r3
 8009460:	d266      	bcs.n	8009530 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xf4>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8009462:	4631      	mov	r1, r6
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 8009464:	2418      	movs	r4, #24
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8009466:	f7ff fde5 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 800946a:	9b02      	ldr	r3, [sp, #8]
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800946c:	4682      	mov	sl, r0
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 800946e:	4601      	mov	r1, r0
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 8009470:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 8009474:	4638      	mov	r0, r7
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 8009476:	685d      	ldr	r5, [r3, #4]
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 8009478:	693b      	ldr	r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 800947a:	462a      	mov	r2, r5
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 800947c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8009480:	435c      	muls	r4, r3
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 8009482:	f7ff fdf9 	bl	8009078 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>
 8009486:	2800      	cmp	r0, #0
 8009488:	d169      	bne.n	800955e <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x122>
 800948a:	9b00      	ldr	r3, [sp, #0]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800948c:	4680      	mov	r8, r0
 800948e:	441c      	add	r4, r3
 8009490:	2104      	movs	r1, #4
 8009492:	4650      	mov	r0, sl
 8009494:	f7ff fe32 	bl	80090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8009498:	6803      	ldr	r3, [r0, #0]
 800949a:	4598      	cmp	r8, r3
 800949c:	d246      	bcs.n	800952c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xf0>
      current->output_ptr = &(eval_tensors[i].data.data);
 800949e:	6065      	str	r5, [r4, #4]
      TF_LITE_ENSURE_STATUS(
 80094a0:	4621      	mov	r1, r4
 80094a2:	4628      	mov	r0, r5
 80094a4:	f7ff fcc9 	bl	8008e3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d158      	bne.n	800955e <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x122>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 80094ac:	682b      	ldr	r3, [r5, #0]
      current->last_used = kUninitializedLifetime;
 80094ae:	e9c4 bb02 	strd	fp, fp, [r4, #8]
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 80094b2:	bbab      	cbnz	r3, 8009520 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xe4>
 80094b4:	2104      	movs	r1, #4
 80094b6:	4650      	mov	r0, sl
 80094b8:	9303      	str	r3, [sp, #12]
 80094ba:	f7ff fe1f 	bl	80090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80094be:	4641      	mov	r1, r8
 80094c0:	f7ff fd88 	bl	8008fd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	210e      	movs	r1, #14
 80094c8:	461a      	mov	r2, r3
 80094ca:	f7fe f905 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
          (eval_tensors[i].data.data == nullptr) &&
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	b918      	cbnz	r0, 80094da <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x9e>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	3300      	adds	r3, #0
 80094d6:	bf18      	it	ne
 80094d8:	2301      	movne	r3, #1
      current->needs_allocating =
 80094da:	7523      	strb	r3, [r4, #20]
      if (offline_offsets) {
 80094dc:	9b01      	ldr	r3, [sp, #4]
 80094de:	b30b      	cbz	r3, 8009524 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xe8>
        current->offline_offset = offline_offsets[offline_index++];
 80094e0:	f109 0301 	add.w	r3, r9, #1
 80094e4:	2104      	movs	r1, #4
 80094e6:	4650      	mov	r0, sl
 80094e8:	9303      	str	r3, [sp, #12]
 80094ea:	9b01      	ldr	r3, [sp, #4]
 80094ec:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 80094f0:	f8c4 9010 	str.w	r9, [r4, #16]
 80094f4:	f7ff fe02 	bl	80090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
        if (subgraph->tensors()->Get(i)->is_variable() &&
 80094f8:	4641      	mov	r1, r8
 80094fa:	f7ff fd6b 	bl	8008fd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80094fe:	2200      	movs	r2, #0
 8009500:	210e      	movs	r1, #14
 8009502:	f7fe f8e9 	bl	80076d8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	b120      	cbz	r0, 8009514 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xd8>
 800950a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800950e:	d001      	beq.n	8009514 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xd8>
          current->needs_allocating = true;
 8009510:	2201      	movs	r2, #1
 8009512:	7522      	strb	r2, [r4, #20]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009514:	f108 0801 	add.w	r8, r8, #1
 8009518:	3418      	adds	r4, #24
 800951a:	350c      	adds	r5, #12
 800951c:	4699      	mov	r9, r3
 800951e:	e7b7      	b.n	8009490 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x54>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8009520:	4603      	mov	r3, r0
 8009522:	e7da      	b.n	80094da <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x9e>
        current->offline_offset = kOnlinePlannedBuffer;
 8009524:	f8c4 b010 	str.w	fp, [r4, #16]
 8009528:	464b      	mov	r3, r9
 800952a:	e7f3      	b.n	8009514 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xd8>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 800952c:	3601      	adds	r6, #1
 800952e:	e791      	b.n	8009454 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x18>
      &allocation_info[info_.scratch_offset];
 8009530:	2218      	movs	r2, #24
 8009532:	9900      	ldr	r1, [sp, #0]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	fb02 1303 	mla	r3, r2, r3, r1
 800953a:	69f9      	ldr	r1, [r7, #28]
 800953c:	1898      	adds	r0, r3, r2
 800953e:	fb02 0101 	mla	r1, r2, r1, r0
    current->first_created = kUninitializedLifetime;
 8009542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    current->needs_allocating = true;
 8009546:	2001      	movs	r0, #1
 8009548:	3318      	adds	r3, #24
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 800954a:	4299      	cmp	r1, r3
 800954c:	d006      	beq.n	800955c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x120>
    current->needs_allocating = true;
 800954e:	f803 0c04 	strb.w	r0, [r3, #-4]
    current->offline_offset = kOnlinePlannedBuffer;
 8009552:	f843 2c08 	str.w	r2, [r3, #-8]
    current->last_used = kUninitializedLifetime;
 8009556:	e943 2204 	strd	r2, r2, [r3, #-16]
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 800955a:	e7f5      	b.n	8009548 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x10c>
  return kTfLiteOk;
 800955c:	2000      	movs	r0, #0
}
 800955e:	b005      	add	sp, #20
 8009560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009564 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>:
    int scratch_buffer_request_count) {
 8009564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009568:	4604      	mov	r4, r0
 800956a:	4688      	mov	r8, r1
 800956c:	6800      	ldr	r0, [r0, #0]
 800956e:	2108      	movs	r1, #8
 8009570:	f7ff fdcd 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8009574:	6805      	ldr	r5, [r0, #0]
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 8009576:	6860      	ldr	r0, [r4, #4]
 8009578:	2204      	movs	r2, #4
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 800957a:	00ad      	lsls	r5, r5, #2
          subgraph_offsets_length, alignof(size_t)));
 800957c:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 800957e:	4629      	mov	r1, r5
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	4798      	blx	r3
 8009584:	4607      	mov	r7, r0
  info_.subgraph_offsets =
 8009586:	6120      	str	r0, [r4, #16]
  if (info_.subgraph_offsets == nullptr) {
 8009588:	b350      	cbz	r0, 80095e0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x7c>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 800958a:	2600      	movs	r6, #0
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800958c:	f8d4 9000 	ldr.w	r9, [r4]
  size_t tensor_count = 0;
 8009590:	4635      	mov	r5, r6
 8009592:	2108      	movs	r1, #8
 8009594:	4648      	mov	r0, r9
 8009596:	f7ff fdba 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 800959a:	6803      	ldr	r3, [r0, #0]
 800959c:	429e      	cmp	r6, r3
 800959e:	d20f      	bcs.n	80095c0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x5c>
    info_.subgraph_offsets[subgraph_idx] = tensor_count;
 80095a0:	f847 5026 	str.w	r5, [r7, r6, lsl #2]
 80095a4:	2108      	movs	r1, #8
 80095a6:	4648      	mov	r0, r9
 80095a8:	f7ff fdb1 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 80095ac:	4631      	mov	r1, r6
 80095ae:	f7ff fd41 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80095b2:	2104      	movs	r1, #4
 80095b4:	f7ff fda2 	bl	80090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80095b8:	6803      	ldr	r3, [r0, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 80095ba:	3601      	adds	r6, #1
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 80095bc:	441d      	add	r5, r3
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 80095be:	e7e8      	b.n	8009592 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x2e>
  info_.scratch_offset = tensor_count;
 80095c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
  size_t bytes = sizeof(AllocationInfo) * info_.allocation_info_count;
 80095c4:	2318      	movs	r3, #24
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 80095c6:	4445      	add	r5, r8
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80095c8:	6860      	ldr	r0, [r4, #4]
 80095ca:	2204      	movs	r2, #4
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 80095cc:	60e5      	str	r5, [r4, #12]
  size_t bytes = sizeof(AllocationInfo) * info_.allocation_info_count;
 80095ce:	435d      	muls	r5, r3
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80095d0:	6803      	ldr	r3, [r0, #0]
  info_.scratch_buffer_count = scratch_buffer_request_count;
 80095d2:	f8c4 801c 	str.w	r8, [r4, #28]
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	4629      	mov	r1, r5
 80095da:	4798      	blx	r3
  info_.allocation_info = reinterpret_cast<AllocationInfo*>(
 80095dc:	60a0      	str	r0, [r4, #8]
  if (info_.allocation_info == nullptr) {
 80095de:	b930      	cbnz	r0, 80095ee <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x8a>
    MicroPrintf(
 80095e0:	4804      	ldr	r0, [pc, #16]	; (80095f4 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x90>)
 80095e2:	4629      	mov	r1, r5
 80095e4:	f001 fb68 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 80095e8:	2001      	movs	r0, #1
}
 80095ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
 80095ee:	2000      	movs	r0, #0
 80095f0:	e7fb      	b.n	80095ea <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x86>
 80095f2:	bf00      	nop
 80095f4:	080f9d16 	.word	0x080f9d16

080095f8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  explicit MicroBuiltinDataAllocator(
      IPersistentBufferAllocator* persistent_allocator)
      : persistent_allocator_(persistent_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    return persistent_allocator_->AllocatePersistentBuffer(size,
 80095f8:	6840      	ldr	r0, [r0, #4]
                                                           alignment_hint);
 80095fa:	6803      	ldr	r3, [r0, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	4718      	bx	r3

08009600 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
  void Deallocate(void* data) override {
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8009600:	4770      	bx	lr

08009602 <_ZN6tflite14MicroAllocatorD1Ev>:
    : non_persistent_buffer_allocator_(non_persistent_buffer_allocator),
      persistent_buffer_allocator_(persistent_buffer_allocator),
      memory_planner_(memory_planner),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
 8009602:	4770      	bx	lr

08009604 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009604:	6880      	ldr	r0, [r0, #8]
      bytes, MicroArenaBufferAlignment());
 8009606:	2210      	movs	r2, #16
 8009608:	6803      	ldr	r3, [r0, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	4718      	bx	r3

0800960e <_ZN6tflite14MicroAllocator18AllocateTempBufferEjj>:
  }
  return tensor;
}

uint8_t* MicroAllocator::AllocateTempBuffer(size_t size, size_t alignment) {
  return non_persistent_buffer_allocator_->AllocateTemp(size, alignment);
 800960e:	6840      	ldr	r0, [r0, #4]
 8009610:	6803      	ldr	r3, [r0, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	4718      	bx	r3

08009616 <_ZN6tflite14MicroAllocator20DeallocateTempBufferEPh>:
}

void MicroAllocator::DeallocateTempBuffer(uint8_t* buffer) {
  non_persistent_buffer_allocator_->DeallocateTemp(buffer);
 8009616:	6840      	ldr	r0, [r0, #4]
 8009618:	6803      	ldr	r3, [r0, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	4718      	bx	r3

0800961e <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
}

TfLiteStatus MicroAllocator::ResetTempAllocations() {
  return non_persistent_buffer_allocator_->ResetTempAllocations();
 800961e:	6840      	ldr	r0, [r0, #4]
 8009620:	6803      	ldr	r3, [r0, #0]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	4718      	bx	r3

08009626 <_ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv>:
}

bool MicroAllocator::IsAllTempDeallocated() {
  return non_persistent_buffer_allocator_->IsAllTempDeallocated();
 8009626:	6840      	ldr	r0, [r0, #4]
 8009628:	6803      	ldr	r3, [r0, #0]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	4718      	bx	r3

0800962e <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
  return kTfLiteOk;
}

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
  return reinterpret_cast<TfLiteTensor*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 800962e:	6880      	ldr	r0, [r0, #8]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8009630:	2204      	movs	r2, #4
 8009632:	2140      	movs	r1, #64	; 0x40
 8009634:	6803      	ldr	r3, [r0, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	4718      	bx	r3

0800963a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 800963a:	4770      	bx	lr

0800963c <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
void MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	4605      	mov	r5, r0
  TFLITE_DCHECK(tensor != nullptr);
 8009640:	460c      	mov	r4, r1
 8009642:	b909      	cbnz	r1, 8009648 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0xc>
 8009644:	f00d fb7e 	bl	8016d44 <abort>
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 8009648:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800964c:	2b01      	cmp	r3, #1
 800964e:	d10c      	bne.n	800966a <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x2e>
    TFLITE_DCHECK(tensor->quantization.params != nullptr);
 8009650:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8009652:	2e00      	cmp	r6, #0
 8009654:	d0f6      	beq.n	8009644 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x8>
    non_persistent_buffer_allocator_->DeallocateTemp(
 8009656:	6840      	ldr	r0, [r0, #4]
 8009658:	6871      	ldr	r1, [r6, #4]
        reinterpret_cast<uint8_t*>(quantization->zero_point));
 800965a:	6803      	ldr	r3, [r0, #0]
    non_persistent_buffer_allocator_->DeallocateTemp(
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	4798      	blx	r3
    non_persistent_buffer_allocator_->DeallocateTemp(
 8009660:	6868      	ldr	r0, [r5, #4]
 8009662:	4631      	mov	r1, r6
        reinterpret_cast<uint8_t*>(quantization));
 8009664:	6803      	ldr	r3, [r0, #0]
    non_persistent_buffer_allocator_->DeallocateTemp(
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	4798      	blx	r3
  tensor->quantization.type = kTfLiteNoQuantization;
 800966a:	2300      	movs	r3, #0
  non_persistent_buffer_allocator_->DeallocateTemp(
 800966c:	6868      	ldr	r0, [r5, #4]
 800966e:	4621      	mov	r1, r4
  tensor->quantization.params = nullptr;
 8009670:	6363      	str	r3, [r4, #52]	; 0x34
  tensor->quantization.type = kTfLiteNoQuantization;
 8009672:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  tensor->dims = nullptr;
 8009676:	e9c4 3301 	strd	r3, r3, [r4, #4]
      reinterpret_cast<uint8_t*>(tensor));
 800967a:	6803      	ldr	r3, [r0, #0]
}
 800967c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  non_persistent_buffer_allocator_->DeallocateTemp(
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	4718      	bx	r3

08009684 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
 8009684:	b510      	push	{r4, lr}
 8009686:	4604      	mov	r4, r0
 8009688:	2124      	movs	r1, #36	; 0x24
 800968a:	f00d f8d0 	bl	801682e <_ZdlPvj>
 800968e:	4620      	mov	r0, r4
 8009690:	bd10      	pop	{r4, pc}

08009692 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 8009692:	b510      	push	{r4, lr}
 8009694:	4604      	mov	r4, r0
 8009696:	2108      	movs	r1, #8
 8009698:	f00d f8c9 	bl	801682e <_ZdlPvj>
 800969c:	4620      	mov	r0, r4
 800969e:	bd10      	pop	{r4, pc}

080096a0 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:
          max_head_buffer_usage_, MicroArenaBufferAlignment()));
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4615      	mov	r5, r2
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80096a4:	460c      	mov	r4, r1
 80096a6:	b909      	cbnz	r1, 80096ac <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0xc>
 80096a8:	f00d fb4c 	bl	8016d44 <abort>

  if (scratch_buffer_request_count_ == 0) {
 80096ac:	6983      	ldr	r3, [r0, #24]
 80096ae:	b133      	cbz	r3, 80096be <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80096b0:	6880      	ldr	r0, [r0, #8]
 80096b2:	2204      	movs	r2, #4
 80096b4:	00a9      	lsls	r1, r5, #2
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 80096b6:	6803      	ldr	r3, [r0, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	4798      	blx	r3
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 80096bc:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
 80096be:	2000      	movs	r0, #0
 80096c0:	bd38      	pop	{r3, r4, r5, pc}

080096c2 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 80096c2:	b510      	push	{r4, lr}
 80096c4:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 80096c6:	2108      	movs	r1, #8
 80096c8:	f7fd ffb8 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 80096cc:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80096ce:	b108      	cbz	r0, 80096d4 <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
 80096d0:	5820      	ldr	r0, [r4, r0]
 80096d2:	4418      	add	r0, r3
  }
 80096d4:	bd10      	pop	{r4, pc}

080096d6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 80096d6:	b510      	push	{r4, lr}
 80096d8:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 80096da:	210a      	movs	r1, #10
 80096dc:	f7fd ffae 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 80096e0:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80096e2:	b108      	cbz	r0, 80096e8 <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
 80096e4:	5820      	ldr	r0, [r4, r0]
 80096e6:	4418      	add	r0, r3
  }
 80096e8:	bd10      	pop	{r4, pc}

080096ea <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 80096ea:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 80096ec:	2106      	movs	r1, #6
 80096ee:	4604      	mov	r4, r0
 80096f0:	f7fd ffa4 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80096f4:	b100      	cbz	r0, 80096f8 <_ZNK6tflite6Tensor4typeEv+0xe>
 80096f6:	5620      	ldrsb	r0, [r4, r0]
  }
 80096f8:	bd10      	pop	{r4, pc}

080096fa <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80096fa:	b510      	push	{r4, lr}
 80096fc:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 80096fe:	2108      	movs	r1, #8
 8009700:	f7fd ff9c 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8009704:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009706:	b108      	cbz	r0, 800970c <_ZNK6tflite5Model9subgraphsEv+0x12>
 8009708:	5820      	ldr	r0, [r4, r0]
 800970a:	4418      	add	r0, r3
  }
 800970c:	bd10      	pop	{r4, pc}
	...

08009710 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	460c      	mov	r4, r1
    auto field_offset = GetOptionalFieldOffset(field);
 8009714:	2108      	movs	r1, #8
 8009716:	4605      	mov	r5, r0
 8009718:	f7fd ff90 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800971c:	b100      	cbz	r0, 8009720 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x10>
 800971e:	5828      	ldr	r0, [r5, r0]
    FLATBUFFERS_ASSERT(i < size());
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	4283      	cmp	r3, r0
 8009724:	d805      	bhi.n	8009732 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x22>
 8009726:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x54>)
 8009728:	21aa      	movs	r1, #170	; 0xaa
 800972a:	4a0f      	ldr	r2, [pc, #60]	; (8009768 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x58>)
 800972c:	480f      	ldr	r0, [pc, #60]	; (800976c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5c>)
 800972e:	f00d fb11 	bl	8016d54 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009732:	1d23      	adds	r3, r4, #4
    p += i * sizeof(uoffset_t);
 8009734:	eb03 0480 	add.w	r4, r3, r0, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8009738:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800973c:	1824      	adds	r4, r4, r0
 800973e:	d00c      	beq.n	800975a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x4a>
    auto field_offset = GetOptionalFieldOffset(field);
 8009740:	2104      	movs	r1, #4
 8009742:	4620      	mov	r0, r4
 8009744:	f7fd ff7a 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8009748:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800974a:	b128      	cbz	r0, 8009758 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x48>
 800974c:	5823      	ldr	r3, [r4, r0]
    if (auto* array = buffer->data()) {
 800974e:	18d1      	adds	r1, r2, r3
 8009750:	d005      	beq.n	800975e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x4e>
      if (array->size()) {
 8009752:	58d0      	ldr	r0, [r2, r3]
 8009754:	b100      	cbz	r0, 8009758 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x48>
 8009756:	1d08      	adds	r0, r1, #4
}
 8009758:	bd38      	pop	{r3, r4, r5, pc}
  void* out_buffer = nullptr;
 800975a:	4620      	mov	r0, r4
 800975c:	e7fc      	b.n	8009758 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x48>
 800975e:	4608      	mov	r0, r1
 8009760:	e7fa      	b.n	8009758 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x48>
 8009762:	bf00      	nop
 8009764:	080f923a 	.word	0x080f923a
 8009768:	080fa6ac 	.word	0x080fa6ac
 800976c:	080f9245 	.word	0x080f9245

08009770 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor>:
    TfLiteEvalTensor* result) {
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *result = {};
 8009772:	4616      	mov	r6, r2
 8009774:	2300      	movs	r3, #0
    TfLiteEvalTensor* result) {
 8009776:	460f      	mov	r7, r1
 8009778:	4614      	mov	r4, r2
 800977a:	4605      	mov	r5, r0
  *result = {};
 800977c:	e9c2 3300 	strd	r3, r3, [r2]
 8009780:	f846 3f08 	str.w	r3, [r6, #8]!
  TF_LITE_ENSURE_STATUS(
 8009784:	f7ff ffb1 	bl	80096ea <_ZNK6tflite6Tensor4typeEv>
 8009788:	4631      	mov	r1, r6
 800978a:	f00c fff5 	bl	8016778 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 800978e:	4606      	mov	r6, r0
 8009790:	b980      	cbnz	r0, 80097b4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x44>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8009792:	4639      	mov	r1, r7
 8009794:	4628      	mov	r0, r5
 8009796:	f7ff ffbb 	bl	8009710 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    auto field_offset = GetOptionalFieldOffset(field);
 800979a:	2104      	movs	r1, #4
 800979c:	6020      	str	r0, [r4, #0]
 800979e:	4628      	mov	r0, r5
 80097a0:	f7fd ff4c 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 80097a4:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80097a6:	b110      	cbz	r0, 80097ae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x3e>
 80097a8:	5828      	ldr	r0, [r5, r0]
  if (flatbuffer_tensor.shape() == nullptr) {
 80097aa:	1818      	adds	r0, r3, r0
 80097ac:	d104      	bne.n	80097b8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x48>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 80097ae:	4b04      	ldr	r3, [pc, #16]	; (80097c0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x50>)
 80097b0:	2600      	movs	r6, #0
 80097b2:	6063      	str	r3, [r4, #4]
}
 80097b4:	4630      	mov	r0, r6
 80097b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 80097b8:	f7ff fadc 	bl	8008d74 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 80097bc:	6060      	str	r0, [r4, #4]
 80097be:	e7f9      	b.n	80097b4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x44>
 80097c0:	080fa354 	.word	0x080fa354

080097c4 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE>:
    MicroMemoryPlanner* memory_planner) {
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	460d      	mov	r5, r1
  TFLITE_DCHECK(memory_allocator != nullptr);
 80097c8:	4604      	mov	r4, r0
 80097ca:	b908      	cbnz	r0, 80097d0 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0xc>
 80097cc:	f00d faba 	bl	8016d44 <abort>
  TFLITE_DCHECK(memory_planner != nullptr);
 80097d0:	2900      	cmp	r1, #0
 80097d2:	d0fb      	beq.n	80097cc <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x8>
      sizeof(MicroAllocator), alignof(MicroAllocator));
 80097d4:	6803      	ldr	r3, [r0, #0]
 80097d6:	2204      	movs	r2, #4
 80097d8:	2124      	movs	r1, #36	; 0x24
 80097da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097dc:	4798      	blx	r3
      MicroAllocator(memory_allocator, memory_allocator, memory_planner);
 80097de:	b150      	cbz	r0, 80097f6 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x32>
      model_is_allocating_(false) {}
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x34>)
 80097e2:	6105      	str	r5, [r0, #16]
 80097e4:	e9c0 3400 	strd	r3, r4, [r0]
 80097e8:	2300      	movs	r3, #0
      MicroAllocator(memory_allocator, memory_allocator, memory_planner);
 80097ea:	3404      	adds	r4, #4
      model_is_allocating_(false) {}
 80097ec:	7503      	strb	r3, [r0, #20]
 80097ee:	6084      	str	r4, [r0, #8]
 80097f0:	6203      	str	r3, [r0, #32]
 80097f2:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	080fa668 	.word	0x080fa668

080097fc <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE>:
                                       MemoryPlannerType memory_planner_type) {
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	4604      	mov	r4, r0
 8009800:	460e      	mov	r6, r1
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 8009802:	2110      	movs	r1, #16
                                       MemoryPlannerType memory_planner_type) {
 8009804:	4615      	mov	r5, r2
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 8009806:	f7ff fab7 	bl	8008d78 <_ZN6tflite14AlignPointerUpEPhj>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800980a:	19a1      	adds	r1, r4, r6
      SingleArenaBufferAllocator::Create(aligned_arena, aligned_arena_size);
 800980c:	1a09      	subs	r1, r1, r0
 800980e:	f7ff fa45 	bl	8008c9c <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>
      CreateMemoryPlanner(memory_planner_type, memory_allocator);
 8009812:	4604      	mov	r4, r0
 8009814:	b100      	cbz	r0, 8009818 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x1c>
 8009816:	3004      	adds	r0, #4
  switch (memory_planner_type) {
 8009818:	b18d      	cbz	r5, 800983e <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x42>
 800981a:	2d01      	cmp	r5, #1
 800981c:	d11a      	bne.n	8009854 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x58>
          sizeof(LinearMemoryPlanner), alignof(LinearMemoryPlanner));
 800981e:	6803      	ldr	r3, [r0, #0]
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 8009820:	2204      	movs	r2, #4
 8009822:	f241 010c 	movw	r1, #4108	; 0x100c
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	4798      	blx	r3
      memory_planner = new (memory_planner_buffer) LinearMemoryPlanner();
 800982a:	4605      	mov	r5, r0
 800982c:	b108      	cbz	r0, 8009832 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x36>
 800982e:	f00c ff97 	bl	8016760 <_ZN6tflite19LinearMemoryPlannerC1Ev>
  return Create(memory_allocator, memory_planner);
 8009832:	4629      	mov	r1, r5
 8009834:	4620      	mov	r0, r4
}
 8009836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return Create(memory_allocator, memory_planner);
 800983a:	f7ff bfc3 	b.w	80097c4 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE>
          sizeof(GreedyMemoryPlanner), alignof(GreedyMemoryPlanner));
 800983e:	6803      	ldr	r3, [r0, #0]
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 8009840:	2204      	movs	r2, #4
 8009842:	212c      	movs	r1, #44	; 0x2c
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	4798      	blx	r3
      memory_planner = new (memory_planner_buffer) GreedyMemoryPlanner();
 8009848:	4605      	mov	r5, r0
 800984a:	2800      	cmp	r0, #0
 800984c:	d0f1      	beq.n	8009832 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x36>
 800984e:	f00c fd55 	bl	80162fc <_ZN6tflite19GreedyMemoryPlannerC1Ev>
 8009852:	e7ee      	b.n	8009832 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x36>
  MicroMemoryPlanner* memory_planner = nullptr;
 8009854:	2500      	movs	r5, #0
 8009856:	e7ec      	b.n	8009832 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x36>

08009858 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
 8009858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985c:	461d      	mov	r5, r3
  if (!model_is_allocating_) {
 800985e:	7d03      	ldrb	r3, [r0, #20]
    ScratchBufferHandle** scratch_buffer_handles) {
 8009860:	4604      	mov	r4, r0
 8009862:	460f      	mov	r7, r1
 8009864:	4690      	mov	r8, r2
  if (!model_is_allocating_) {
 8009866:	b92b      	cbnz	r3, 8009874 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x1c>
    MicroPrintf(
 8009868:	480b      	ldr	r0, [pc, #44]	; (8009898 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x40>)
 800986a:	f001 fa25 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800986e:	2001      	movs	r0, #1
}
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8009874:	6803      	ldr	r3, [r0, #0]
 8009876:	4629      	mov	r1, r5
 8009878:	6982      	ldr	r2, [r0, #24]
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	4798      	blx	r3
 800987e:	2800      	cmp	r0, #0
 8009880:	d1f6      	bne.n	8009870 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x18>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph_allocations,
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	4642      	mov	r2, r8
 8009886:	4639      	mov	r1, r7
 8009888:	4620      	mov	r0, r4
 800988a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	47b0      	blx	r6
 8009890:	2800      	cmp	r0, #0
 8009892:	d1ed      	bne.n	8009870 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x18>
  model_is_allocating_ = false;
 8009894:	7520      	strb	r0, [r4, #20]
  return kTfLiteOk;
 8009896:	e7eb      	b.n	8009870 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x18>
 8009898:	080fa409 	.word	0x080fa409

0800989c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800989c:	2300      	movs	r3, #0

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  scratch_buffer_head_ =
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 800989e:	2204      	movs	r2, #4
 80098a0:	2190      	movs	r1, #144	; 0x90
TfLiteStatus MicroAllocator::InitScratchBufferData() {
 80098a2:	b510      	push	{r4, lr}
 80098a4:	4604      	mov	r4, r0
  scratch_buffer_request_count_ = 0;
 80098a6:	6183      	str	r3, [r0, #24]
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 80098a8:	6840      	ldr	r0, [r0, #4]
          sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
          alignof(internal::ScratchBufferRequest));
 80098aa:	6803      	ldr	r3, [r0, #0]
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	4798      	blx	r3
  scratch_buffer_head_ =
 80098b0:	61e0      	str	r0, [r4, #28]
  if (scratch_buffer_head_ == nullptr) {
    return kTfLiteError;
  }

  return kTfLiteOk;
}
 80098b2:	fab0 f080 	clz	r0, r0
 80098b6:	0940      	lsrs	r0, r0, #5
 80098b8:	bd10      	pop	{r4, pc}
	...

080098bc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	4604      	mov	r4, r0
  TFLITE_DCHECK(model != nullptr);
 80098c0:	460e      	mov	r6, r1
 80098c2:	b909      	cbnz	r1, 80098c8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc>
 80098c4:	f00d fa3e 	bl	8016d44 <abort>
  if (model_is_allocating_) {
 80098c8:	7d03      	ldrb	r3, [r0, #20]
 80098ca:	b123      	cbz	r3, 80098d6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x1a>
    MicroPrintf(
 80098cc:	481d      	ldr	r0, [pc, #116]	; (8009944 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x88>)
 80098ce:	f001 f9f3 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return nullptr;
 80098d2:	2500      	movs	r5, #0
 80098d4:	e022      	b.n	800991c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x60>
  model_is_allocating_ = true;
 80098d6:	2301      	movs	r3, #1
          alignof(MicroBuiltinDataAllocator));
 80098d8:	2204      	movs	r2, #4
 80098da:	2108      	movs	r1, #8
  model_is_allocating_ = true;
 80098dc:	7503      	strb	r3, [r0, #20]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80098de:	6880      	ldr	r0, [r0, #8]
          alignof(MicroBuiltinDataAllocator));
 80098e0:	6803      	ldr	r3, [r0, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	4798      	blx	r3
  builtin_data_allocator_ = new (data_allocator_buffer)
 80098e6:	b118      	cbz	r0, 80098f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x34>
      MicroBuiltinDataAllocator(persistent_buffer_allocator_);
 80098e8:	68a3      	ldr	r3, [r4, #8]
      : persistent_allocator_(persistent_allocator) {}
 80098ea:	4a17      	ldr	r2, [pc, #92]	; (8009948 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x8c>)
 80098ec:	e9c0 2300 	strd	r2, r3, [r0]
  builtin_data_allocator_ = new (data_allocator_buffer)
 80098f0:	60e0      	str	r0, [r4, #12]
  if (InitScratchBufferData() != kTfLiteOk) {
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7ff ffd2 	bl	800989c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d1ea      	bne.n	80098d2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x16>
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80098fc:	68a5      	ldr	r5, [r4, #8]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 80098fe:	4630      	mov	r0, r6
 8009900:	f7ff fefb 	bl	80096fa <_ZNK6tflite5Model9subgraphsEv>
 8009904:	6801      	ldr	r1, [r0, #0]
          alignof(SubgraphAllocations)));
 8009906:	682b      	ldr	r3, [r5, #0]
 8009908:	4628      	mov	r0, r5
 800990a:	2204      	movs	r2, #4
 800990c:	00c9      	lsls	r1, r1, #3
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	4798      	blx	r3
  if (output == nullptr) {
 8009912:	4605      	mov	r5, r0
 8009914:	b920      	cbnz	r0, 8009920 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x64>
    MicroPrintf("Failed to allocate memory for model metadata.");
 8009916:	480d      	ldr	r0, [pc, #52]	; (800994c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x90>)
 8009918:	f001 f9ce 	bl	800acb8 <_Z11MicroPrintfPKcz>
}
 800991c:	4628      	mov	r0, r5
 800991e:	bd70      	pop	{r4, r5, r6, pc}
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	4602      	mov	r2, r0
 8009924:	4631      	mov	r1, r6
 8009926:	4620      	mov	r0, r4
 8009928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992a:	4798      	blx	r3
 800992c:	2800      	cmp	r0, #0
 800992e:	d1d0      	bne.n	80098d2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x16>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	462a      	mov	r2, r5
 8009934:	4631      	mov	r1, r6
 8009936:	4620      	mov	r0, r4
 8009938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993a:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800993c:	2800      	cmp	r0, #0
 800993e:	d0ed      	beq.n	800991c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x60>
 8009940:	e7c7      	b.n	80098d2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x16>
 8009942:	bf00      	nop
 8009944:	080fa386 	.word	0x080fa386
 8009948:	080fa650 	.word	0x080fa650
 800994c:	080fa3db 	.word	0x080fa3db

08009950 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
 8009950:	2104      	movs	r1, #4
 8009952:	69c0      	ldr	r0, [r0, #28]
 8009954:	f7ff ba10 	b.w	8008d78 <_ZN6tflite14AlignPointerUpEPhj>

08009958 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
                                                         int* buffer_idx) {
 8009958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800995c:	4605      	mov	r5, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800995e:	2400      	movs	r4, #0
                                                         int* buffer_idx) {
 8009960:	469a      	mov	sl, r3
 8009962:	4688      	mov	r8, r1
 8009964:	4691      	mov	r9, r2
  size_t current_node_request_count = 0;
 8009966:	4627      	mov	r7, r4
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8009968:	f7ff fff2 	bl	8009950 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800996c:	69ae      	ldr	r6, [r5, #24]
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800996e:	230c      	movs	r3, #12
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8009970:	42a6      	cmp	r6, r4
 8009972:	d007      	beq.n	8009984 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2c>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8009974:	fb03 0204 	mla	r2, r3, r4, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8009978:	3401      	adds	r4, #1
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800997a:	6852      	ldr	r2, [r2, #4]
 800997c:	3201      	adds	r2, #1
      ++current_node_request_count;
 800997e:	bf08      	it	eq
 8009980:	3701      	addeq	r7, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8009982:	e7f5      	b.n	8009970 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x18>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8009984:	2f0b      	cmp	r7, #11
 8009986:	d906      	bls.n	8009996 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 8009988:	480b      	ldr	r0, [pc, #44]	; (80099b8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>)
 800998a:	210c      	movs	r1, #12
 800998c:	f001 f994 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8009990:	2001      	movs	r0, #1
}
 8009992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      &requests[scratch_buffer_request_count_];
 8009996:	240c      	movs	r4, #12
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      &requests[scratch_buffer_request_count_];
 800999c:	4374      	muls	r4, r6
  internal::ScratchBufferRequest* current_request =
 800999e:	1907      	adds	r7, r0, r4
  current_request->bytes = bytes;
 80099a0:	f840 8004 	str.w	r8, [r0, r4]
  return kTfLiteOk;
 80099a4:	2000      	movs	r0, #0
  current_request->subgraph_idx = subgraph_idx;
 80099a6:	e9c7 3901 	strd	r3, r9, [r7, #4]
  *buffer_idx = scratch_buffer_request_count_;
 80099aa:	f8ca 6000 	str.w	r6, [sl]
  ++scratch_buffer_request_count_;
 80099ae:	69ab      	ldr	r3, [r5, #24]
 80099b0:	3301      	adds	r3, #1
 80099b2:	61ab      	str	r3, [r5, #24]
  return kTfLiteOk;
 80099b4:	e7ed      	b.n	8009992 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3a>
 80099b6:	bf00      	nop
 80099b8:	080fa4fe 	.word	0x080fa4fe

080099bc <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80099bc:	6803      	ldr	r3, [r0, #0]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80099be:	b570      	push	{r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80099c0:	695b      	ldr	r3, [r3, #20]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80099c2:	4604      	mov	r4, r0
 80099c4:	460d      	mov	r5, r1
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80099c6:	4798      	blx	r3
 80099c8:	b9c8      	cbnz	r0, 80099fe <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x42>
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80099ca:	4620      	mov	r0, r4
 80099cc:	f7ff ffc0 	bl	8009950 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80099d0:	69a3      	ldr	r3, [r4, #24]
 80099d2:	220c      	movs	r2, #12
 80099d4:	435a      	muls	r2, r3
 80099d6:	1813      	adds	r3, r2, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80099d8:	4298      	cmp	r0, r3
 80099da:	d006      	beq.n	80099ea <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80099dc:	6841      	ldr	r1, [r0, #4]
 80099de:	300c      	adds	r0, #12
 80099e0:	3101      	adds	r1, #1
      requests[i].node_idx = node_id;
 80099e2:	bf08      	it	eq
 80099e4:	f840 5c08 	streq.w	r5, [r0, #-8]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80099e8:	e7f6      	b.n	80099d8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x1c>
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 80099ea:	6860      	ldr	r0, [r4, #4]
 80099ec:	3290      	adds	r2, #144	; 0x90
 80099ee:	69e1      	ldr	r1, [r4, #28]
 80099f0:	6803      	ldr	r3, [r0, #0]
 80099f2:	69dd      	ldr	r5, [r3, #28]
 80099f4:	2304      	movs	r3, #4
 80099f6:	46ac      	mov	ip, r5
}
 80099f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 80099fc:	4760      	bx	ip
}
 80099fe:	bd70      	pop	{r4, r5, r6, pc}

08009a00 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
}

TfLiteBridgeBuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
 8009a00:	68c0      	ldr	r0, [r0, #12]
 8009a02:	4770      	bx	lr

08009a04 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009a04:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 8009a06:	6803      	ldr	r3, [r0, #0]
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d305      	bcc.n	8009a18 <_ZNK11flatbuffers6VectorIxE3GetEm+0x14>
 8009a0c:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <_ZNK11flatbuffers6VectorIxE3GetEm+0x20>)
 8009a0e:	21aa      	movs	r1, #170	; 0xaa
 8009a10:	4a05      	ldr	r2, [pc, #20]	; (8009a28 <_ZNK11flatbuffers6VectorIxE3GetEm+0x24>)
 8009a12:	4806      	ldr	r0, [pc, #24]	; (8009a2c <_ZNK11flatbuffers6VectorIxE3GetEm+0x28>)
 8009a14:	f00d f99e 	bl	8016d54 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009a18:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  }
 8009a1c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009a20:	bd08      	pop	{r3, pc}
 8009a22:	bf00      	nop
 8009a24:	080f923a 	.word	0x080f923a
 8009a28:	080fa7a2 	.word	0x080fa7a2
 8009a2c:	080f9245 	.word	0x080f9245

08009a30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor>:
    TfLiteTensor* result) {
 8009a30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009a36:	4605      	mov	r5, r0
 8009a38:	460e      	mov	r6, r1
 8009a3a:	4617      	mov	r7, r2
 8009a3c:	4699      	mov	r9, r3
  TFLITE_DCHECK(result != nullptr);
 8009a3e:	b90c      	cbnz	r4, 8009a44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x14>
 8009a40:	f00d f980 	bl	8016d44 <abort>
  *result = {};
 8009a44:	2100      	movs	r1, #0
 8009a46:	2240      	movs	r2, #64	; 0x40
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f00d fa0d 	bl	8016e68 <memset>
  TF_LITE_ENSURE_STATUS(
 8009a4e:	4648      	mov	r0, r9
 8009a50:	f7ff fe4b 	bl	80096ea <_ZNK6tflite6Tensor4typeEv>
 8009a54:	4621      	mov	r1, r4
 8009a56:	f00c fe8f 	bl	8016778 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d15f      	bne.n	8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
    auto field_offset = GetOptionalFieldOffset(field);
 8009a5e:	210e      	movs	r1, #14
 8009a60:	4648      	mov	r0, r9
 8009a62:	f7fd fdeb 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009a66:	b108      	cbz	r0, 8009a6c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x3c>
 8009a68:	f819 0000 	ldrb.w	r0, [r9, r0]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8009a6c:	3000      	adds	r0, #0
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8009a6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a70:	bf18      	it	ne
 8009a72:	2001      	movne	r0, #1
 8009a74:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8009a78:	4648      	mov	r0, r9
 8009a7a:	f7ff fe49 	bl	8009710 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8009a7e:	6060      	str	r0, [r4, #4]
  if (result->data.data == nullptr) {
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d14f      	bne.n	8009b24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xf4>
    result->allocation_type = kTfLiteArenaRw;
 8009a84:	2302      	movs	r3, #2
    result->allocation_type = kTfLiteMmapRo;
 8009a86:	7523      	strb	r3, [r4, #20]
  TF_LITE_ENSURE_STATUS(
 8009a88:	aa01      	add	r2, sp, #4
 8009a8a:	f104 0118 	add.w	r1, r4, #24
 8009a8e:	4648      	mov	r0, r9
 8009a90:	f7ff f99e 	bl	8008dd0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d142      	bne.n	8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
    auto field_offset = GetOptionalFieldOffset(field);
 8009a98:	2104      	movs	r1, #4
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	f7fd fdce 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8009aa0:	eb09 0300 	add.w	r3, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009aa4:	b118      	cbz	r0, 8009aae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x7e>
 8009aa6:	f859 0000 	ldr.w	r0, [r9, r0]
  if (flatbuffer_tensor.shape() == nullptr) {
 8009aaa:	1818      	adds	r0, r3, r0
 8009aac:	d13c      	bne.n	8009b28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xf8>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8009aae:	4b48      	ldr	r3, [pc, #288]	; (8009bd0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x1a0>)
 8009ab0:	60a3      	str	r3, [r4, #8]
    auto field_offset = GetOptionalFieldOffset(field);
 8009ab2:	210c      	movs	r1, #12
 8009ab4:	4648      	mov	r0, r9
 8009ab6:	f7fd fdc1 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 8009aba:	eb09 0800 	add.w	r8, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009abe:	b370      	cbz	r0, 8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
 8009ac0:	f859 0000 	ldr.w	r0, [r9, r0]
      src_quantization->zero_point() &&
 8009ac4:	eb18 0800 	adds.w	r8, r8, r0
  if (src_quantization && src_quantization->scale() &&
 8009ac8:	4640      	mov	r0, r8
      src_quantization->zero_point() &&
 8009aca:	d028      	beq.n	8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
  if (src_quantization && src_quantization->scale() &&
 8009acc:	f7ff fdf9 	bl	80096c2 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009ad0:	4681      	mov	r9, r0
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d07b      	beq.n	8009bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x19e>
 8009ad6:	6800      	ldr	r0, [r0, #0]
 8009ad8:	b308      	cbz	r0, 8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
      src_quantization->zero_point() &&
 8009ada:	4640      	mov	r0, r8
 8009adc:	f7ff fdfb 	bl	80096d6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
 8009ae0:	b1e8      	cbz	r0, 8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
      src_quantization->zero_point() &&
 8009ae2:	6800      	ldr	r0, [r0, #0]
 8009ae4:	b1d8      	cbz	r0, 8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
 8009ae6:	f8d9 3004 	ldr.w	r3, [r9, #4]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8009aea:	4640      	mov	r0, r8
    result->params.scale = src_quantization->scale()->Get(0);
 8009aec:	60e3      	str	r3, [r4, #12]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8009aee:	f7ff fdf2 	bl	80096d6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009af2:	2100      	movs	r1, #0
 8009af4:	f7ff ff86 	bl	8009a04 <_ZNK11flatbuffers6VectorIxE3GetEm>
    result->params.zero_point =
 8009af8:	6120      	str	r0, [r4, #16]
    int channels = src_quantization->scale()->size();
 8009afa:	4640      	mov	r0, r8
 8009afc:	f7ff fde1 	bl	80096c2 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009b00:	f8d0 9000 	ldr.w	r9, [r0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8009b04:	b1a7      	cbz	r7, 8009b30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x100>
                      alignof(TfLiteAffineQuantization)))
 8009b06:	6833      	ldr	r3, [r6, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8009b08:	2204      	movs	r2, #4
 8009b0a:	210c      	movs	r1, #12
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	4798      	blx	r3
    if (quantization == nullptr) {
 8009b12:	4607      	mov	r7, r0
 8009b14:	b9f8      	cbnz	r0, 8009b56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x126>
      MicroPrintf("Unable to allocate TfLiteAffineQuantization.\n");
 8009b16:	482f      	ldr	r0, [pc, #188]	; (8009bd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x1a4>)
      MicroPrintf("Unable to allocate quantization->zero_point.\n");
 8009b18:	f001 f8ce 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8009b1c:	2001      	movs	r0, #1
}
 8009b1e:	b002      	add	sp, #8
 8009b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    result->allocation_type = kTfLiteMmapRo;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e7ae      	b.n	8009a86 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x56>
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 8009b28:	f7ff f924 	bl	8008d74 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 8009b2c:	60a0      	str	r0, [r4, #8]
 8009b2e:	e7c0      	b.n	8009ab2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x82>
                      alignof(TfLiteAffineQuantization)));
 8009b30:	682b      	ldr	r3, [r5, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8009b32:	2204      	movs	r2, #4
 8009b34:	210c      	movs	r1, #12
 8009b36:	4628      	mov	r0, r5
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	4798      	blx	r3
    if (quantization == nullptr) {
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0e9      	beq.n	8009b16 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xe6>
                      alignof(TfLiteIntArray)));
 8009b42:	682b      	ldr	r3, [r5, #0]
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8009b44:	4648      	mov	r0, r9
                      alignof(TfLiteIntArray)));
 8009b46:	689e      	ldr	r6, [r3, #8]
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8009b48:	f7fe fa98 	bl	800807c <TfLiteIntArrayGetSizeInBytes>
            ? reinterpret_cast<TfLiteIntArray*>(
 8009b4c:	2204      	movs	r2, #4
 8009b4e:	4601      	mov	r1, r0
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b0      	blx	r6
 8009b54:	e008      	b.n	8009b68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x138>
                      alignof(TfLiteIntArray)))
 8009b56:	6833      	ldr	r3, [r6, #0]
                  non_persistent_buffer_allocator->AllocateTemp(
 8009b58:	4648      	mov	r0, r9
                      alignof(TfLiteIntArray)))
 8009b5a:	689d      	ldr	r5, [r3, #8]
                  non_persistent_buffer_allocator->AllocateTemp(
 8009b5c:	f7fe fa8e 	bl	800807c <TfLiteIntArrayGetSizeInBytes>
            ? reinterpret_cast<TfLiteIntArray*>(
 8009b60:	2204      	movs	r2, #4
 8009b62:	4601      	mov	r1, r0
 8009b64:	4630      	mov	r0, r6
 8009b66:	47a8      	blx	r5
    quantization->zero_point =
 8009b68:	6078      	str	r0, [r7, #4]
    if (quantization->zero_point == nullptr) {
 8009b6a:	b908      	cbnz	r0, 8009b70 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x140>
      MicroPrintf("Unable to allocate quantization->zero_point.\n");
 8009b6c:	481a      	ldr	r0, [pc, #104]	; (8009bd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x1a8>)
 8009b6e:	e7d3      	b.n	8009b18 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xe8>
        FlatBufferVectorToTfLiteTypeArray(src_quantization->scale());
 8009b70:	4640      	mov	r0, r8
    for (int i = 0; i < channels; i++) {
 8009b72:	2500      	movs	r5, #0
        FlatBufferVectorToTfLiteTypeArray(src_quantization->scale());
 8009b74:	f7ff fda5 	bl	80096c2 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009b78:	f7ff f8fd 	bl	8008d76 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfEE>
    quantization->zero_point->size = channels;
 8009b7c:	687e      	ldr	r6, [r7, #4]
    quantization->scale =
 8009b7e:	6038      	str	r0, [r7, #0]
    quantization->zero_point->size = channels;
 8009b80:	f846 9b04 	str.w	r9, [r6], #4
    for (int i = 0; i < channels; i++) {
 8009b84:	45a9      	cmp	r9, r5
 8009b86:	dd14      	ble.n	8009bb2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x182>
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8009b88:	4640      	mov	r0, r8
 8009b8a:	f7ff fda4 	bl	80096d6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009b8e:	4682      	mov	sl, r0
                                   src_quantization->scale()->size()
 8009b90:	4640      	mov	r0, r8
 8009b92:	f7ff fd96 	bl	80096c2 <_ZNK6tflite22QuantizationParameters5scaleEv>
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8009b96:	f8da 3000 	ldr.w	r3, [sl]
 8009b9a:	6802      	ldr	r2, [r0, #0]
                               : src_quantization->zero_point()->Get(0);
 8009b9c:	4650      	mov	r0, sl
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8009b9e:	4293      	cmp	r3, r2
                               ? src_quantization->zero_point()->Get(i)
 8009ba0:	bf0c      	ite	eq
 8009ba2:	4629      	moveq	r1, r5
                               : src_quantization->zero_point()->Get(0);
 8009ba4:	2100      	movne	r1, #0
 8009ba6:	f7ff ff2d 	bl	8009a04 <_ZNK11flatbuffers6VectorIxE3GetEm>
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8009baa:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
    for (int i = 0; i < channels; i++) {
 8009bae:	3501      	adds	r5, #1
 8009bb0:	e7e8      	b.n	8009b84 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x154>
    auto field_offset = GetOptionalFieldOffset(field);
 8009bb2:	2110      	movs	r1, #16
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	f7fd fd41 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009bba:	b108      	cbz	r0, 8009bc0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x190>
 8009bbc:	f858 0000 	ldr.w	r0, [r8, r0]
    result->quantization = {kTfLiteAffineQuantization, quantization};
 8009bc0:	2301      	movs	r3, #1
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8009bc2:	60b8      	str	r0, [r7, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
 8009bc4:	6367      	str	r7, [r4, #52]	; 0x34
  return kTfLiteOk;
 8009bc6:	2000      	movs	r0, #0
    result->quantization = {kTfLiteAffineQuantization, quantization};
 8009bc8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8009bcc:	e7a7      	b.n	8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
 8009bce:	e7a6      	b.n	8009b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xee>
 8009bd0:	080fa354 	.word	0x080fa354
 8009bd4:	080fa5ea 	.word	0x080fa5ea
 8009bd8:	080fa618 	.word	0x080fa618

08009bdc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8009bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be0:	4606      	mov	r6, r0
 8009be2:	460f      	mov	r7, r1
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8009be4:	4615      	mov	r5, r2
 8009be6:	b90a      	cbnz	r2, 8009bec <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
 8009be8:	f00d f8ac 	bl	8016d44 <abort>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8009bec:	2400      	movs	r4, #0
            sizeof(NodeAndRegistration) * operators_size,
 8009bee:	f04f 082c 	mov.w	r8, #44	; 0x2c
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	f7ff fd81 	bl	80096fa <_ZNK6tflite5Model9subgraphsEv>
 8009bf8:	6803      	ldr	r3, [r0, #0]
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	d21a      	bcs.n	8009c34 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x58>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8009bfe:	4621      	mov	r1, r4
 8009c00:	f7ff fa18 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d0ef      	beq.n	8009be8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc>
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8009c08:	f7ff f87a 	bl	8008d00 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009c0c:	68b3      	ldr	r3, [r6, #8]
            alignof(NodeAndRegistration)));
 8009c0e:	fb08 f100 	mul.w	r1, r8, r0
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8009c1a:	2204      	movs	r2, #4
 8009c1c:	47c8      	blx	r9
    if (output == nullptr) {
 8009c1e:	b928      	cbnz	r0, 8009c2c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x50>
      MicroPrintf("Failed to allocate memory for node_and_registrations.");
 8009c20:	4805      	ldr	r0, [pc, #20]	; (8009c38 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x5c>)
 8009c22:	f001 f849 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8009c26:	2001      	movs	r0, #1
}
 8009c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 8009c2c:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8009c30:	3401      	adds	r4, #1
 8009c32:	e7de      	b.n	8009bf2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
  return kTfLiteOk;
 8009c34:	2000      	movs	r0, #0
 8009c36:	e7f7      	b.n	8009c28 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x4c>
 8009c38:	080fa534 	.word	0x080fa534

08009c3c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
 8009c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c40:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009c42:	4606      	mov	r6, r0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8009c44:	4608      	mov	r0, r1
    int tensor_index, int subgraph_index) {
 8009c46:	468a      	mov	sl, r1
 8009c48:	4615      	mov	r5, r2
 8009c4a:	4698      	mov	r8, r3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8009c4c:	f7ff fd55 	bl	80096fa <_ZNK6tflite5Model9subgraphsEv>
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7ff f9ef 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
  TFLITE_DCHECK(subgraph != nullptr);
 8009c56:	b908      	cbnz	r0, 8009c5c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x20>
 8009c58:	f00d f874 	bl	8016d44 <abort>
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8009c5c:	6833      	ldr	r3, [r6, #0]
 8009c5e:	4630      	mov	r0, r6
 8009c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c62:	4798      	blx	r3
  if (tensor == nullptr) {
 8009c64:	4604      	mov	r4, r0
 8009c66:	b930      	cbnz	r0, 8009c76 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    MicroPrintf("Failed to allocate memory for persistent TfLiteTensor");
 8009c68:	4813      	ldr	r0, [pc, #76]	; (8009cb8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>)
 8009c6a:	f001 f825 	bl	800acb8 <_Z11MicroPrintfPKcz>
}
 8009c6e:	4620      	mov	r0, r4
 8009c70:	b003      	add	sp, #12
 8009c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          /*allocate_temp=*/false) != kTfLiteOk) {
 8009c76:	6833      	ldr	r3, [r6, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 8009c78:	f04f 0900 	mov.w	r9, #0
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	4651      	mov	r1, sl
 8009c80:	4630      	mov	r0, r6
 8009c82:	e9cd 7900 	strd	r7, r9, [sp]
 8009c86:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 8009c8a:	4643      	mov	r3, r8
 8009c8c:	47d8      	blx	fp
 8009c8e:	b120      	cbz	r0, 8009c9a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x5e>
    MicroPrintf(
 8009c90:	480a      	ldr	r0, [pc, #40]	; (8009cbc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x80>)
    return nullptr;
 8009c92:	464c      	mov	r4, r9
    MicroPrintf(
 8009c94:	f001 f810 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return nullptr;
 8009c98:	e7e9      	b.n	8009c6e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x32>
  if (subgraph_allocations != nullptr) {
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	d0e7      	beq.n	8009c6e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x32>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8009c9e:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	686a      	ldr	r2, [r5, #4]
 8009ca6:	fb03 f308 	mul.w	r3, r3, r8
 8009caa:	18d1      	adds	r1, r2, r3
    tensor->data.data =
 8009cac:	58d3      	ldr	r3, [r2, r3]
 8009cae:	6063      	str	r3, [r4, #4]
    tensor->dims =
 8009cb0:	684b      	ldr	r3, [r1, #4]
 8009cb2:	60a3      	str	r3, [r4, #8]
 8009cb4:	e7db      	b.n	8009c6e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x32>
 8009cb6:	bf00      	nop
 8009cb8:	080fa56a 	.word	0x080fa56a
 8009cbc:	080fa5a0 	.word	0x080fa5a0

08009cc0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
 8009cc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009cc6:	4607      	mov	r7, r0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8009cc8:	4608      	mov	r0, r1
    int tensor_index, int subgraph_index) {
 8009cca:	4689      	mov	r9, r1
 8009ccc:	4615      	mov	r5, r2
 8009cce:	4698      	mov	r8, r3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8009cd0:	f7ff fd13 	bl	80096fa <_ZNK6tflite5Model9subgraphsEv>
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	f7ff f9ad 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
  TFLITE_DCHECK(subgraph != nullptr);
 8009cda:	b908      	cbnz	r0, 8009ce0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x20>
 8009cdc:	f00d f832 	bl	8016d44 <abort>
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 8009ce0:	6878      	ldr	r0, [r7, #4]
                                                     alignof(TfLiteTensor)));
 8009ce2:	2204      	movs	r2, #4
 8009ce4:	2140      	movs	r1, #64	; 0x40
 8009ce6:	6803      	ldr	r3, [r0, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	4798      	blx	r3
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8009cec:	683b      	ldr	r3, [r7, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8009cee:	2201      	movs	r2, #1
                                                     alignof(TfLiteTensor)));
 8009cf0:	4604      	mov	r4, r0
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	e9cd 6200 	strd	r6, r2, [sp]
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	f8d3 a038 	ldr.w	sl, [r3, #56]	; 0x38
 8009cfe:	4638      	mov	r0, r7
 8009d00:	4643      	mov	r3, r8
 8009d02:	47d0      	blx	sl
 8009d04:	b138      	cbz	r0, 8009d16 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x56>
    return nullptr;
 8009d06:	2400      	movs	r4, #0
    MicroPrintf(
 8009d08:	480a      	ldr	r0, [pc, #40]	; (8009d34 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>)
 8009d0a:	f000 ffd5 	bl	800acb8 <_Z11MicroPrintfPKcz>
}
 8009d0e:	4620      	mov	r0, r4
 8009d10:	b002      	add	sp, #8
 8009d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (subgraph_allocations != nullptr) {
 8009d16:	2d00      	cmp	r5, #0
 8009d18:	d0f9      	beq.n	8009d0e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x4e>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8009d1a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8009d1e:	230c      	movs	r3, #12
 8009d20:	686a      	ldr	r2, [r5, #4]
 8009d22:	fb03 f308 	mul.w	r3, r3, r8
 8009d26:	18d1      	adds	r1, r2, r3
    tensor->data.data =
 8009d28:	58d3      	ldr	r3, [r2, r3]
 8009d2a:	6063      	str	r3, [r4, #4]
    tensor->dims =
 8009d2c:	684b      	ldr	r3, [r1, #4]
 8009d2e:	60a3      	str	r3, [r4, #8]
 8009d30:	e7ed      	b.n	8009d0e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x4e>
 8009d32:	bf00      	nop
 8009d34:	080fa454 	.word	0x080fa454

08009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	4699      	mov	r9, r3
 8009d3e:	b091      	sub	sp, #68	; 0x44
  AllocationInfoBuilder builder(model, non_persistent_buffer_allocator_);
 8009d40:	6843      	ldr	r3, [r0, #4]
    ScratchBufferHandle* scratch_buffer_handles) {
 8009d42:	4605      	mov	r5, r0
 8009d44:	4688      	mov	r8, r1
 8009d46:	4617      	mov	r7, r2
// `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(const Model* model,
                        INonPersistentBufferAllocator* non_persistent_allocator)
      : model_(model), non_persistent_allocator_(non_persistent_allocator) {}
 8009d48:	e9cd 1307 	strd	r1, r3, [sp, #28]
 8009d4c:	2300      	movs	r3, #0
  TF_LITE_ENSURE_STATUS(
 8009d4e:	6981      	ldr	r1, [r0, #24]
 8009d50:	a807      	add	r0, sp, #28
 8009d52:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d54:	f7ff fc06 	bl	8009564 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>
 8009d58:	4604      	mov	r4, r0
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d171      	bne.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
  const int32_t* offline_planner_offsets = nullptr;
 8009d5e:	a910      	add	r1, sp, #64	; 0x40
 8009d60:	f841 0d2c 	str.w	r0, [r1, #-44]!
  TF_LITE_ENSURE_STATUS(
 8009d64:	a807      	add	r0, sp, #28
 8009d66:	f7ff f89d 	bl	8008ea4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d168      	bne.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8009d70:	4606      	mov	r6, r0
 8009d72:	4640      	mov	r0, r8
 8009d74:	f7ff fcc1 	bl	80096fa <_ZNK6tflite5Model9subgraphsEv>
 8009d78:	6803      	ldr	r3, [r0, #0]
 8009d7a:	429e      	cmp	r6, r3
 8009d7c:	d213      	bcs.n	8009da6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x6e>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8009d7e:	4631      	mov	r1, r6
 8009d80:	f7ff f958 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 8009d84:	4601      	mov	r1, r0
 8009d86:	b908      	cbnz	r0, 8009d8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x54>
 8009d88:	f00c ffdc 	bl	8016d44 <abort>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
 8009d92:	4628      	mov	r0, r5
 8009d94:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009d96:	6852      	ldr	r2, [r2, #4]
 8009d98:	9b05      	ldr	r3, [sp, #20]
 8009d9a:	47a0      	blx	r4
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d14f      	bne.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8009da2:	3601      	adds	r6, #1
 8009da4:	e7e5      	b.n	8009d72 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x3a>
  TF_LITE_ENSURE_STATUS(
 8009da6:	463a      	mov	r2, r7
 8009da8:	9905      	ldr	r1, [sp, #20]
 8009daa:	a807      	add	r0, sp, #28
 8009dac:	f7ff fb46 	bl	800943c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>
 8009db0:	4604      	mov	r4, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d145      	bne.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
      GetScratchBufferRequests();
 8009db6:	4628      	mov	r0, r5
 8009db8:	f7ff fdca 	bl	8009950 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	9700      	str	r7, [sp, #0]
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	a807      	add	r0, sp, #28
 8009dc6:	f7ff f9ab 	bl	8009120 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 8009dca:	4604      	mov	r4, r0
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d138      	bne.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
  int allocation_info_count = builder.AllocationCount();
 8009dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          MicroArenaBufferAlignment());
 8009dd2:	2110      	movs	r1, #16
      non_persistent_buffer_allocator_->GetAvailableMemory(
 8009dd4:	6868      	ldr	r0, [r5, #4]
  int allocation_info_count = builder.AllocationCount();
 8009dd6:	9303      	str	r3, [sp, #12]
          MicroArenaBufferAlignment());
 8009dd8:	6803      	ldr	r3, [r0, #0]
  AllocationInfo* allocation_info = builder.Finish();
 8009dda:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
          MicroArenaBufferAlignment());
 8009dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de0:	4798      	blx	r3
 8009de2:	4606      	mov	r6, r0
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 8009de4:	6868      	ldr	r0, [r5, #4]
      remaining_arena_size, MicroArenaBufferAlignment());
 8009de6:	2210      	movs	r2, #16
 8009de8:	4631      	mov	r1, r6
 8009dea:	6803      	ldr	r3, [r0, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	4798      	blx	r3
  if (planner_arena == nullptr) {
 8009df0:	4680      	mov	r8, r0
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d030      	beq.n	8009e58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x120>
  memory_planner_->Init(planner_arena, remaining_arena_size);
 8009df6:	6928      	ldr	r0, [r5, #16]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	464f      	mov	r7, r9
 8009dfe:	6803      	ldr	r3, [r0, #0]
  TF_LITE_ENSURE_STATUS(
 8009e00:	464e      	mov	r6, r9
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8009e02:	46a3      	mov	fp, r4
  memory_planner_->Init(planner_arena, remaining_arena_size);
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8009e08:	f8d5 a010 	ldr.w	sl, [r5, #16]
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	455b      	cmp	r3, fp
 8009e10:	d024      	beq.n	8009e5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x124>
    if (current->needs_allocating) {
 8009e12:	7d33      	ldrb	r3, [r6, #20]
 8009e14:	b91b      	cbnz	r3, 8009e1e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xe6>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8009e16:	f10b 0b01 	add.w	fp, fp, #1
 8009e1a:	3618      	adds	r6, #24
 8009e1c:	e7f6      	b.n	8009e0c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xd4>
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 8009e1e:	2110      	movs	r1, #16
 8009e20:	6830      	ldr	r0, [r6, #0]
 8009e22:	f7fe ffb3 	bl	8008d8c <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8009e26:	6932      	ldr	r2, [r6, #16]
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 8009e28:	4601      	mov	r1, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8009e2a:	1c53      	adds	r3, r2, #1
 8009e2c:	f8da 3000 	ldr.w	r3, [sl]
 8009e30:	d10b      	bne.n	8009e4a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x112>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(aligned_bytes_required,
 8009e32:	689c      	ldr	r4, [r3, #8]
 8009e34:	4650      	mov	r0, sl
 8009e36:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8009e3a:	47a0      	blx	r4
        TF_LITE_ENSURE_STATUS(
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d0e9      	beq.n	8009e16 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xde>
}
 8009e42:	4620      	mov	r0, r4
 8009e44:	b011      	add	sp, #68	; 0x44
 8009e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TF_LITE_ENSURE_STATUS(
 8009e4a:	9200      	str	r2, [sp, #0]
 8009e4c:	4650      	mov	r0, sl
 8009e4e:	68dc      	ldr	r4, [r3, #12]
 8009e50:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8009e54:	47a0      	blx	r4
 8009e56:	e7f1      	b.n	8009e3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x104>
    return kTfLiteError;
 8009e58:	2401      	movs	r4, #1
 8009e5a:	e7f2      	b.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
  TF_LITE_ENSURE_STATUS(
 8009e5c:	6868      	ldr	r0, [r5, #4]
  int planner_index = 0;
 8009e5e:	2600      	movs	r6, #0
  TF_LITE_ENSURE_STATUS(
 8009e60:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009e64:	6803      	ldr	r3, [r0, #0]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	4798      	blx	r3
 8009e6a:	2318      	movs	r3, #24
 8009e6c:	9a03      	ldr	r2, [sp, #12]
 8009e6e:	4683      	mov	fp, r0
 8009e70:	fb03 9902 	mla	r9, r3, r2, r9
      int offset = -1;
 8009e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8009e78:	454f      	cmp	r7, r9
 8009e7a:	d015      	beq.n	8009ea8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x170>
    if (current->needs_allocating) {
 8009e7c:	7d3a      	ldrb	r2, [r7, #20]
 8009e7e:	b18a      	cbz	r2, 8009ea4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x16c>
      TF_LITE_ENSURE_STATUS(
 8009e80:	f8da 2000 	ldr.w	r2, [sl]
 8009e84:	4631      	mov	r1, r6
      int offset = -1;
 8009e86:	9306      	str	r3, [sp, #24]
      TF_LITE_ENSURE_STATUS(
 8009e88:	4650      	mov	r0, sl
 8009e8a:	6994      	ldr	r4, [r2, #24]
 8009e8c:	aa06      	add	r2, sp, #24
      int offset = -1;
 8009e8e:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
 8009e90:	47a0      	blx	r4
 8009e92:	4604      	mov	r4, r0
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d1d4      	bne.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8009e98:	9a06      	ldr	r2, [sp, #24]
      ++planner_index;
 8009e9a:	3601      	adds	r6, #1
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	445a      	add	r2, fp
      ++planner_index;
 8009ea0:	9b03      	ldr	r3, [sp, #12]
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8009ea2:	600a      	str	r2, [r1, #0]
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	e7e7      	b.n	8009e78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x140>
  builder.FreeAllocationInfo();
 8009ea8:	a807      	add	r0, sp, #28
 8009eaa:	f7fe ffed 	bl	8008e88 <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>
  non_persistent_buffer_allocator_->DeallocateTemp(planner_arena);
 8009eae:	6868      	ldr	r0, [r5, #4]
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	6803      	ldr	r3, [r0, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8009eb8:	6868      	ldr	r0, [r5, #4]
 8009eba:	6803      	ldr	r3, [r0, #0]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	4798      	blx	r3
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d1bd      	bne.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
  TF_LITE_ENSURE_STATUS(
 8009ec6:	6868      	ldr	r0, [r5, #4]
 8009ec8:	69e9      	ldr	r1, [r5, #28]
 8009eca:	6803      	ldr	r3, [r0, #0]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	4798      	blx	r3
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d1b5      	bne.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
  head_usage = memory_planner_->GetMaximumMemorySize();
 8009ed6:	6928      	ldr	r0, [r5, #16]
 8009ed8:	6803      	ldr	r3, [r0, #0]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	4798      	blx	r3
  if (max_head_buffer_usage_ < head_usage) {
 8009ede:	6a2b      	ldr	r3, [r5, #32]
  TF_LITE_ENSURE_STATUS(
 8009ee0:	2210      	movs	r2, #16
  if (max_head_buffer_usage_ < head_usage) {
 8009ee2:	4283      	cmp	r3, r0
    max_head_buffer_usage_ = head_usage;
 8009ee4:	bf38      	it	cc
 8009ee6:	6228      	strcc	r0, [r5, #32]
  TF_LITE_ENSURE_STATUS(
 8009ee8:	6868      	ldr	r0, [r5, #4]
 8009eea:	6a29      	ldr	r1, [r5, #32]
 8009eec:	6803      	ldr	r3, [r0, #0]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef0:	4798      	blx	r3
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	e7a5      	b.n	8009e42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
	...

08009ef8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl>:
    const int32_t* offline_planner_offsets) {
 8009ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009efc:	4607      	mov	r7, r0
 8009efe:	4688      	mov	r8, r1
 8009f00:	461e      	mov	r6, r3
 8009f02:	4615      	mov	r5, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009f04:	2400      	movs	r4, #0
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009f06:	2104      	movs	r1, #4
 8009f08:	4640      	mov	r0, r8
 8009f0a:	f7ff f8f7 	bl	80090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8009f0e:	6803      	ldr	r3, [r0, #0]
 8009f10:	429c      	cmp	r4, r3
 8009f12:	d227      	bcs.n	8009f64 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x6c>
    auto* tensor = subgraph->tensors()->Get(i);
 8009f14:	4621      	mov	r1, r4
 8009f16:	f7ff f85d 	bl	8008fd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    auto field_offset = GetOptionalFieldOffset(field);
 8009f1a:	210e      	movs	r1, #14
 8009f1c:	4681      	mov	r9, r0
 8009f1e:	f7fd fb8d 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009f22:	b1e0      	cbz	r0, 8009f5e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x66>
    if (tensor->is_variable()) {
 8009f24:	f819 3000 	ldrb.w	r3, [r9, r0]
 8009f28:	b1cb      	cbz	r3, 8009f5e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x66>
      if (offline_planner_offsets == nullptr ||
 8009f2a:	b11e      	cbz	r6, 8009f34 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x3c>
 8009f2c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8009f30:	3301      	adds	r3, #1
 8009f32:	d114      	bne.n	8009f5e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x66>
        TF_LITE_ENSURE_STATUS(
 8009f34:	a901      	add	r1, sp, #4
 8009f36:	4628      	mov	r0, r5
 8009f38:	f7fe ff7f 	bl	8008e3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8009f3c:	b960      	cbnz	r0, 8009f58 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x60>
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009f3e:	68b8      	ldr	r0, [r7, #8]
 8009f40:	2210      	movs	r2, #16
 8009f42:	9901      	ldr	r1, [sp, #4]
                buffer_size, MicroArenaBufferAlignment());
 8009f44:	6803      	ldr	r3, [r0, #0]
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	4798      	blx	r3
        eval_tensors[i].data.data =
 8009f4a:	6028      	str	r0, [r5, #0]
        if (eval_tensors[i].data.data == nullptr) {
 8009f4c:	b938      	cbnz	r0, 8009f5e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x66>
          MicroPrintf("Failed to allocate variable tensor of size %d",
 8009f4e:	4806      	ldr	r0, [pc, #24]	; (8009f68 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x70>)
 8009f50:	9901      	ldr	r1, [sp, #4]
 8009f52:	f000 feb1 	bl	800acb8 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 8009f56:	2001      	movs	r0, #1
}
 8009f58:	b003      	add	sp, #12
 8009f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009f5e:	3401      	adds	r4, #1
 8009f60:	350c      	adds	r5, #12
 8009f62:	e7d0      	b.n	8009f06 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xe>
  return kTfLiteOk;
 8009f64:	2000      	movs	r0, #0
 8009f66:	e7f7      	b.n	8009f58 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x60>
 8009f68:	080fa358 	.word	0x080fa358

08009f6c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8009f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	4683      	mov	fp, r0
 8009f72:	460e      	mov	r6, r1
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8009f74:	4691      	mov	r9, r2
 8009f76:	b90a      	cbnz	r2, 8009f7c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
 8009f78:	f00c fee4 	bl	8016d44 <abort>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8009f7c:	2500      	movs	r5, #0
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f7ff fbbb 	bl	80096fa <_ZNK6tflite5Model9subgraphsEv>
 8009f84:	6803      	ldr	r3, [r0, #0]
 8009f86:	429d      	cmp	r5, r3
 8009f88:	d245      	bcs.n	800a016 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f7ff f852 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 8009f90:	9000      	str	r0, [sp, #0]
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d0f0      	beq.n	8009f78 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc>
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009f96:	2104      	movs	r1, #4
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009f98:	270c      	movs	r7, #12
 8009f9a:	f7ff f8af 	bl	80090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
  uoffset_t size() const { return EndianScalar(length_); }
 8009f9e:	f8d0 a000 	ldr.w	sl, [r0]
 8009fa2:	f8db 0008 	ldr.w	r0, [fp, #8]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8009fa6:	2204      	movs	r2, #4
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009fa8:	fb07 f40a 	mul.w	r4, r7, sl
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8009fac:	6803      	ldr	r3, [r0, #0]
 8009fae:	4621      	mov	r1, r4
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	4798      	blx	r3
    if (tensors == nullptr) {
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	b938      	cbnz	r0, 8009fc8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x5c>
      MicroPrintf(
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4818      	ldr	r0, [pc, #96]	; (800a01c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
        MicroPrintf("Failed to initialize tensor %d", i);
 8009fbc:	f000 fe7c 	bl	800acb8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009fc0:	2001      	movs	r0, #1
}
 8009fc2:	b003      	add	sp, #12
 8009fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (size_t i = 0; i < alloc_count; ++i) {
 8009fc8:	2400      	movs	r4, #0
 8009fca:	4554      	cmp	r4, sl
 8009fcc:	d01d      	beq.n	800a00a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x9e>
 8009fce:	2104      	movs	r1, #4
 8009fd0:	9800      	ldr	r0, [sp, #0]
 8009fd2:	f7ff f893 	bl	80090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
          *subgraph->tensors()->Get(i), model->buffers(), &tensors[i]);
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	f7fe fffc 	bl	8008fd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    auto field_offset = GetOptionalFieldOffset(field);
 8009fdc:	210c      	movs	r1, #12
 8009fde:	9001      	str	r0, [sp, #4]
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7fd fb2b 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009fe6:	9b01      	ldr	r3, [sp, #4]
    auto p = data_ + field_offset;
 8009fe8:	1831      	adds	r1, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009fea:	b150      	cbz	r0, 800a002 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
 8009fec:	5830      	ldr	r0, [r6, r0]
 8009fee:	4401      	add	r1, r0
 8009ff0:	fb07 8204 	mla	r2, r7, r4, r8
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff fbbb 	bl	8009770 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
 8009ffa:	b120      	cbz	r0, 800a006 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x9a>
        MicroPrintf("Failed to initialize tensor %d", i);
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4808      	ldr	r0, [pc, #32]	; (800a020 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
 800a000:	e7dc      	b.n	8009fbc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x50>
 800a002:	4601      	mov	r1, r0
 800a004:	e7f4      	b.n	8009ff0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    for (size_t i = 0; i < alloc_count; ++i) {
 800a006:	3401      	adds	r4, #1
 800a008:	e7df      	b.n	8009fca <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x5e>
    subgraph_allocations[subgraph_idx].tensors = tensors;
 800a00a:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800a00e:	3501      	adds	r5, #1
    subgraph_allocations[subgraph_idx].tensors = tensors;
 800a010:	f8c3 8004 	str.w	r8, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800a014:	e7b3      	b.n	8009f7e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
 800a016:	2000      	movs	r0, #0
 800a018:	e7d3      	b.n	8009fc2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800a01a:	bf00      	nop
 800a01c:	080fa498 	.word	0x080fa498
 800a020:	080fa4df 	.word	0x080fa4df

0800a024 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
    int subgraph_idx, bool allocate_temp) {
 800a024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800a028:	e9d0 6501 	ldrd	r6, r5, [r0, #4]
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 800a02c:	4608      	mov	r0, r1
    int subgraph_idx, bool allocate_temp) {
 800a02e:	4699      	mov	r9, r3
 800a030:	4690      	mov	r8, r2
 800a032:	460c      	mov	r4, r1
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 800a034:	f7ff fb61 	bl	80096fa <_ZNK6tflite5Model9subgraphsEv>
 800a038:	9908      	ldr	r1, [sp, #32]
 800a03a:	f7fe fffb 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a03e:	2104      	movs	r1, #4
 800a040:	f7ff f85c 	bl	80090fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800a044:	4649      	mov	r1, r9
 800a046:	f7fe ffc5 	bl	8008fd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    auto field_offset = GetOptionalFieldOffset(field);
 800a04a:	210c      	movs	r1, #12
 800a04c:	4681      	mov	r9, r0
 800a04e:	4620      	mov	r0, r4
 800a050:	f7fd faf4 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    int subgraph_idx, bool allocate_temp) {
 800a054:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
    auto p = data_ + field_offset;
 800a058:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a05a:	b108      	cbz	r0, 800a060 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3c>
 800a05c:	5820      	ldr	r0, [r4, r0]
 800a05e:	4418      	add	r0, r3
      model->buffers(), tensor);
 800a060:	464b      	mov	r3, r9
 800a062:	463a      	mov	r2, r7
 800a064:	4631      	mov	r1, r6
 800a066:	e9cd 0808 	strd	r0, r8, [sp, #32]
 800a06a:	4628      	mov	r0, r5
}
 800a06c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      model->buffers(), tensor);
 800a070:	f7ff bcde 	b.w	8009a30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor>

0800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
}  // namespace

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 800a074:	680b      	ldr	r3, [r1, #0]
  if (index >= 0 && index < max_size) {
 800a076:	2a00      	cmp	r2, #0
                                                    int index) {
 800a078:	b410      	push	{r4}
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 800a07a:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
 800a07e:	db0a      	blt.n	800a096 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x22>
 800a080:	4291      	cmp	r1, r2
 800a082:	dd08      	ble.n	800a096 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x22>
    const int tensor_index = tensor_indices[index];
 800a084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
 800a088:	2900      	cmp	r1, #0
 800a08a:	db04      	blt.n	800a096 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x22>
    return nullptr;
  }
  return AllocateTempTfLiteTensor(tensor_index);
 800a08c:	6803      	ldr	r3, [r0, #0]
}
 800a08e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return AllocateTempTfLiteTensor(tensor_index);
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	4718      	bx	r3
}
 800a096:	2000      	movs	r0, #0
 800a098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 800a09e:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
 800a0a0:	2a00      	cmp	r2, #0
                                                     int index) {
 800a0a2:	b410      	push	{r4}
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 800a0a4:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
 800a0a8:	db0a      	blt.n	800a0c0 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x22>
 800a0aa:	4291      	cmp	r1, r2
 800a0ac:	dd08      	ble.n	800a0c0 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x22>
    const int tensor_index = tensor_indices[index];
 800a0ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	db04      	blt.n	800a0c0 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x22>
    return nullptr;
  }
  return AllocateTempTfLiteTensor(tensor_index);
 800a0b6:	6803      	ldr	r3, [r0, #0]
}
 800a0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return AllocateTempTfLiteTensor(tensor_index);
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	4718      	bx	r3
}
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 800a0c8:	b40e      	push	{r1, r2, r3}
 800a0ca:	b503      	push	{r0, r1, lr}
 800a0cc:	a903      	add	r1, sp, #12
 800a0ce:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
 800a0d2:	9101      	str	r1, [sp, #4]
  VMicroPrintf(format, args);
 800a0d4:	f000 fde6 	bl	800aca4 <_Z12VMicroPrintfPKcSt9__va_list>
  va_end(args);
}
 800a0d8:	b002      	add	sp, #8
 800a0da:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0de:	b003      	add	sp, #12
 800a0e0:	4770      	bx	lr

0800a0e2 <_ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj>:
// TODO(b/213010668): migrate all existing kernels to use MicroContext, delete
// these functions, and remove corresponding members from the TfLiteContext
// struct for TFLM.
inline void* MicroContextAllocatePersistentBuffer(TfLiteContext* ctx,
                                                  size_t bytes) {
  return GetMicroContext(ctx)->AllocatePersistentBuffer(bytes);
 800a0e2:	68c0      	ldr	r0, [r0, #12]
 800a0e4:	6803      	ldr	r3, [r0, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	4718      	bx	r3

0800a0ea <_ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi>:
}
inline TfLiteStatus MicroContextRequestScratchBufferInArena(TfLiteContext* ctx,
                                                            size_t bytes,
                                                            int* buffer_idx) {
  return GetMicroContext(ctx)->RequestScratchBufferInArena(bytes, buffer_idx);
 800a0ea:	68c0      	ldr	r0, [r0, #12]
 800a0ec:	6803      	ldr	r3, [r0, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	4718      	bx	r3

0800a0f2 <_ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti>:
}
inline void* MicroContextGetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  return GetMicroContext(ctx)->GetScratchBuffer(buffer_idx);
 800a0f2:	68c0      	ldr	r0, [r0, #12]
 800a0f4:	6803      	ldr	r3, [r0, #0]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	4718      	bx	r3

0800a0fa <_ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti>:
}
inline TfLiteTensor* MicroContextGetTensor(const struct TfLiteContext* context,
                                           int tensor_idx) {
  return GetMicroContext(context)->AllocateTempTfLiteTensor(tensor_idx);
 800a0fa:	68c0      	ldr	r0, [r0, #12]
 800a0fc:	6803      	ldr	r3, [r0, #0]
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	4718      	bx	r3

0800a102 <_ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti>:
}
inline TfLiteEvalTensor* MicroContextGetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  return GetMicroContext(context)->GetEvalTensor(tensor_idx);
 800a102:	68c0      	ldr	r0, [r0, #12]
 800a104:	6803      	ldr	r3, [r0, #0]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	4718      	bx	r3

0800a10a <_ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType>:
}
inline TfLiteExternalContext* MicroContextGetExternalContext(
    TfLiteContext* context, TfLiteExternalContextType unused) {
  return reinterpret_cast<TfLiteExternalContext*>(
      GetMicroContext(context)->external_context());
 800a10a:	68c0      	ldr	r0, [r0, #12]
 800a10c:	6803      	ldr	r3, [r0, #0]
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	4718      	bx	r3
	...

0800a114 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
// Check 'v' is out of closed range [low; high].
// Workaround for GCC warning [-Werror=type-limits]:
// comparison is always true due to limited range of data type.
template<typename T>
inline bool IsOutRange(const T &v, const T &low, const T &high) {
  return (v < low) || (high < v);
 800a114:	28cd      	cmp	r0, #205	; 0xcd
  return EnumNamesBuiltinOperator()[index];
 800a116:	bf9a      	itte	ls
 800a118:	4b02      	ldrls	r3, [pc, #8]	; (800a124 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x10>)
 800a11a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 800a11e:	4802      	ldrhi	r0, [pc, #8]	; (800a128 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x14>)
}
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	080fa87c 	.word	0x080fa87c
 800a128:	08018413 	.word	0x08018413

0800a12c <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE>:
  if (graph_.GetAllocations() != nullptr) {
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfilerInterface* profiler) {
 800a12c:	b570      	push	{r4, r5, r6, lr}
  micro_context_.SetInterpreterState(
 800a12e:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
void MicroInterpreter::Init(MicroProfilerInterface* profiler) {
 800a132:	4604      	mov	r4, r0
 800a134:	460e      	mov	r6, r1
  micro_context_.SetInterpreterState(
 800a136:	2100      	movs	r1, #0
 800a138:	4628      	mov	r0, r5
 800a13a:	f000 fb65 	bl	800a808 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kInit);
  context_.impl_ = static_cast<void*>(&micro_context_);
  context_.ReportError = MicroContextReportOpError;
 800a13e:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x3c>)
  context_.impl_ = static_cast<void*>(&micro_context_);
 800a140:	6165      	str	r5, [r4, #20]
  context_.ReportError = MicroContextReportOpError;
 800a142:	61e3      	str	r3, [r4, #28]
  context_.GetTensor = MicroContextGetTensor;
 800a144:	4b09      	ldr	r3, [pc, #36]	; (800a16c <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x40>)
  context_.GetEvalTensor = MicroContextGetEvalTensor;
  context_.profiler = profiler;
 800a146:	63e6      	str	r6, [r4, #60]	; 0x3c
  context_.GetTensor = MicroContextGetTensor;
 800a148:	65a3      	str	r3, [r4, #88]	; 0x58
  context_.GetEvalTensor = MicroContextGetEvalTensor;
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x44>)
 800a14c:	65e3      	str	r3, [r4, #92]	; 0x5c
  context_.RequestScratchBufferInArena =
 800a14e:	4b09      	ldr	r3, [pc, #36]	; (800a174 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x48>)
 800a150:	64a3      	str	r3, [r4, #72]	; 0x48
      MicroContextRequestScratchBufferInArena;
  context_.GetExternalContext = MicroContextGetExternalContext;
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x4c>)
 800a154:	6323      	str	r3, [r4, #48]	; 0x30
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 800a156:	4b09      	ldr	r3, [pc, #36]	; (800a17c <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x50>)
 800a158:	6423      	str	r3, [r4, #64]	; 0x40
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x54>)
 800a15c:	64e3      	str	r3, [r4, #76]	; 0x4c

  initialization_status_ = kTfLiteOk;
 800a15e:	2300      	movs	r3, #0
 800a160:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
}
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	bf00      	nop
 800a168:	0800a0c9 	.word	0x0800a0c9
 800a16c:	0800a0fb 	.word	0x0800a0fb
 800a170:	0800a103 	.word	0x0800a103
 800a174:	0800a0eb 	.word	0x0800a0eb
 800a178:	0800a10b 	.word	0x0800a10b
 800a17c:	0800a0e3 	.word	0x0800a0e3
 800a180:	0800a0f3 	.word	0x0800a0f3

0800a184 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>:
MicroInterpreter::MicroInterpreter(const Model* model,
 800a184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      micro_context_(&allocator_, model_, &graph_) {
 800a186:	f100 0608 	add.w	r6, r0, #8
MicroInterpreter::MicroInterpreter(const Model* model,
 800a18a:	461d      	mov	r5, r3
 800a18c:	4604      	mov	r4, r0
 800a18e:	460f      	mov	r7, r1
      micro_context_(&allocator_, model_, &graph_) {
 800a190:	e9c0 1200 	strd	r1, r2, [r0]
 800a194:	2264      	movs	r2, #100	; 0x64
 800a196:	2100      	movs	r1, #0
 800a198:	4630      	mov	r0, r6
 800a19a:	f00c fe65 	bl	8016e68 <memset>
      allocator_(*MicroAllocator::Create(
 800a19e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800a1a2:	9908      	ldr	r1, [sp, #32]
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f7ff fb29 	bl	80097fc <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE>
      micro_context_(&allocator_, model_, &graph_) {
 800a1aa:	f104 0570 	add.w	r5, r4, #112	; 0x70
 800a1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
      allocator_(*MicroAllocator::Create(
 800a1b0:	4603      	mov	r3, r0
      micro_context_(&allocator_, model_, &graph_) {
 800a1b2:	66e0      	str	r0, [r4, #108]	; 0x6c
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	9200      	str	r2, [sp, #0]
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	463a      	mov	r2, r7
 800a1bc:	f000 fd34 	bl	800ac28 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a1c6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 800a1ca:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800a1ce:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
 800a1d2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800a1d6:	6822      	ldr	r2, [r4, #0]
 800a1d8:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
 800a1dc:	462b      	mov	r3, r5
 800a1de:	f000 fb03 	bl	800a7e8 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE>
  Init(profiler);
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a1e6:	f7ff ffa1 	bl	800a12c <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE>
}
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	b003      	add	sp, #12
 800a1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a1f0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.6>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 800a1f0:	b508      	push	{r3, lr}
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a1f2:	2108      	movs	r1, #8
 800a1f4:	f7fe ff8b 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    return model_->subgraphs()->Get(0)->outputs()->size();
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	f7fe ff1b 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800a1fe:	2108      	movs	r1, #8
 800a200:	f7fe ff30 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  }
 800a204:	6800      	ldr	r0, [r0, #0]
 800a206:	bd08      	pop	{r3, pc}

0800a208 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	460c      	mov	r4, r1
 800a20c:	4605      	mov	r5, r0
  const size_t length = outputs_size();
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	f7ff ffee 	bl	800a1f0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.6>
  if (index >= length) {
 800a214:	42a0      	cmp	r0, r4
  const size_t length = outputs_size();
 800a216:	4602      	mov	r2, r0
  if (index >= length) {
 800a218:	d805      	bhi.n	800a226 <_ZN6tflite16MicroInterpreter6outputEj+0x1e>
    MicroPrintf("Output index %d out of range (length is %d)", index, length);
 800a21a:	4805      	ldr	r0, [pc, #20]	; (800a230 <_ZN6tflite16MicroInterpreter6outputEj+0x28>)
 800a21c:	4621      	mov	r1, r4
 800a21e:	f000 fd4b 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return nullptr;
 800a222:	2000      	movs	r0, #0
  }
  return output_tensors_[index];
}
 800a224:	bd38      	pop	{r3, r4, r5, pc}
  return output_tensors_[index];
 800a226:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800a22a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a22e:	e7f9      	b.n	800a224 <_ZN6tflite16MicroInterpreter6outputEj+0x1c>
 800a230:	080fadec 	.word	0x080fadec

0800a234 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.4>:
  size_t inputs_size() const {
 800a234:	b508      	push	{r3, lr}
 800a236:	2108      	movs	r1, #8
 800a238:	f7fe ff69 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    return model_->subgraphs()->Get(0)->inputs()->size();
 800a23c:	2100      	movs	r1, #0
 800a23e:	f7fe fef9 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800a242:	2106      	movs	r1, #6
 800a244:	f7fe ff0e 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  }
 800a248:	6800      	ldr	r0, [r0, #0]
 800a24a:	bd08      	pop	{r3, pc}

0800a24c <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	460c      	mov	r4, r1
 800a250:	4605      	mov	r5, r0
  const size_t length = inputs_size();
 800a252:	6800      	ldr	r0, [r0, #0]
 800a254:	f7ff ffee 	bl	800a234 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.4>
  if (index >= length) {
 800a258:	42a0      	cmp	r0, r4
  const size_t length = inputs_size();
 800a25a:	4602      	mov	r2, r0
  if (index >= length) {
 800a25c:	d805      	bhi.n	800a26a <_ZN6tflite16MicroInterpreter5inputEj+0x1e>
    MicroPrintf("Input index %d out of range (length is %d)", index, length);
 800a25e:	4805      	ldr	r0, [pc, #20]	; (800a274 <_ZN6tflite16MicroInterpreter5inputEj+0x28>)
 800a260:	4621      	mov	r1, r4
 800a262:	f000 fd29 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return nullptr;
 800a266:	2000      	movs	r0, #0
}
 800a268:	bd38      	pop	{r3, r4, r5, pc}
  return input_tensors_[index];
 800a26a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a26e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a272:	e7f9      	b.n	800a268 <_ZN6tflite16MicroInterpreter5inputEj+0x1c>
 800a274:	080fad94 	.word	0x080fad94

0800a278 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
 800a278:	b538      	push	{r3, r4, r5, lr}
  if (graph_.GetAllocations() != nullptr) {
 800a27a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
MicroInterpreter::~MicroInterpreter() {
 800a27e:	4604      	mov	r4, r0
 800a280:	f100 0570 	add.w	r5, r0, #112	; 0x70
  if (graph_.GetAllocations() != nullptr) {
 800a284:	b113      	cbz	r3, 800a28c <_ZN6tflite16MicroInterpreterD1Ev+0x14>
    graph_.FreeSubgraphs();
 800a286:	4628      	mov	r0, r5
 800a288:	f000 fb36 	bl	800a8f8 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800a28c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800a290:	f000 fa34 	bl	800a6fc <_ZN6tflite23MicroInterpreterContextD1Ev>
 800a294:	4628      	mov	r0, r5
 800a296:	f000 facb 	bl	800a830 <_ZN6tflite21MicroInterpreterGraphD1Ev>
}
 800a29a:	4620      	mov	r0, r4
 800a29c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a2a0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	b08b      	sub	sp, #44	; 0x2c
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800a2a8:	f04f 0a00 	mov.w	sl, #0
 800a2ac:	f106 0070 	add.w	r0, r6, #112	; 0x70
 800a2b0:	f000 fc97 	bl	800abe2 <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv>
 800a2b4:	4550      	cmp	r0, sl
 800a2b6:	f340 80f7 	ble.w	800a4a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x208>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800a2ba:	6834      	ldr	r4, [r6, #0]
 800a2bc:	2108      	movs	r1, #8
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7fe ff25 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800a2c4:	4651      	mov	r1, sl
 800a2c6:	f7fe feb5 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 800a2ca:	4683      	mov	fp, r0
 800a2cc:	b908      	cbnz	r0, 800a2d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x32>
 800a2ce:	f00c fd39 	bl	8016d44 <abort>
    auto field_offset = GetOptionalFieldOffset(field);
 800a2d2:	2106      	movs	r1, #6
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f7fd f9b1 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800a2da:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a2dc:	b330      	cbz	r0, 800a32c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8c>
 800a2de:	5825      	ldr	r5, [r4, r0]
 800a2e0:	441d      	add	r5, r3
        allocator_.GetBuiltinDataAllocator();
 800a2e2:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
    for (size_t i = 0; i < operators_size; ++i) {
 800a2e4:	2700      	movs	r7, #0
        allocator_.GetBuiltinDataAllocator();
 800a2e6:	f7ff fb8b 	bl	8009a00 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800a2ea:	9003      	str	r0, [sp, #12]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800a2ec:	4658      	mov	r0, fp
 800a2ee:	f7fe fd07 	bl	8008d00 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800a2f2:	9004      	str	r0, [sp, #16]
 800a2f4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a2f8:	9300      	str	r3, [sp, #0]
    for (size_t i = 0; i < operators_size; ++i) {
 800a2fa:	9b04      	ldr	r3, [sp, #16]
 800a2fc:	429f      	cmp	r7, r3
 800a2fe:	f000 80d0 	beq.w	800a4a2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x202>
    auto field_offset = GetOptionalFieldOffset(field);
 800a302:	210a      	movs	r1, #10
 800a304:	4658      	mov	r0, fp
 800a306:	f7fd f999 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800a30a:	eb0b 0100 	add.w	r1, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a30e:	2800      	cmp	r0, #0
 800a310:	f000 80cc 	beq.w	800a4ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20c>
 800a314:	f85b 2000 	ldr.w	r2, [fp, r0]
 800a318:	188b      	adds	r3, r1, r2
    FLATBUFFERS_ASSERT(i < size());
 800a31a:	588a      	ldr	r2, [r1, r2]
 800a31c:	4297      	cmp	r7, r2
 800a31e:	d307      	bcc.n	800a330 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x90>
 800a320:	4b63      	ldr	r3, [pc, #396]	; (800a4b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x210>)
 800a322:	21aa      	movs	r1, #170	; 0xaa
 800a324:	4a63      	ldr	r2, [pc, #396]	; (800a4b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x214>)
 800a326:	4864      	ldr	r0, [pc, #400]	; (800a4b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x218>)
 800a328:	f00c fd14 	bl	8016d54 <__assert_func>
 800a32c:	4605      	mov	r5, r0
 800a32e:	e7d8      	b.n	800a2e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x42>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a330:	3304      	adds	r3, #4
    auto field_offset = GetOptionalFieldOffset(field);
 800a332:	2104      	movs	r1, #4
    p += i * sizeof(uoffset_t);
 800a334:	eb03 0487 	add.w	r4, r3, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a338:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a33c:	441c      	add	r4, r3
 800a33e:	4620      	mov	r0, r4
 800a340:	f7fd f97c 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800a344:	b150      	cbz	r0, 800a35c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xbc>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800a346:	f854 8000 	ldr.w	r8, [r4, r0]
      if (index >= opcodes->size()) {
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	4543      	cmp	r3, r8
 800a34e:	d807      	bhi.n	800a360 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc0>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800a350:	4641      	mov	r1, r8
 800a352:	485a      	ldr	r0, [pc, #360]	; (800a4bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x21c>)
          MicroPrintf("Did not find a parser for %s",
 800a354:	f000 fcb0 	bl	800acb8 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 800a358:	2201      	movs	r2, #1
 800a35a:	e023      	b.n	800a3a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x104>
 800a35c:	4680      	mov	r8, r0
 800a35e:	e7f4      	b.n	800a34a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xaa>
 800a360:	1d2a      	adds	r2, r5, #4
 800a362:	f04f 092c 	mov.w	r9, #44	; 0x2c
    p += i * sizeof(uoffset_t);
 800a366:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a36a:	f852 3028 	ldr.w	r3, [r2, r8, lsl #2]
                                          .node_and_registrations[i]
 800a36e:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 800a372:	fb09 f907 	mul.w	r9, r9, r7
 800a376:	440b      	add	r3, r1
 800a378:	9900      	ldr	r1, [sp, #0]
 800a37a:	5852      	ldr	r2, [r2, r1]
                                          .registration));
 800a37c:	4618      	mov	r0, r3
 800a37e:	6871      	ldr	r1, [r6, #4]
                                          .node_and_registrations[i]
 800a380:	444a      	add	r2, r9
                                          .registration));
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	3228      	adds	r2, #40	; 0x28
 800a386:	f000 fca5 	bl	800acd4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration>
      if (status != kTfLiteOk) {
 800a38a:	9b01      	ldr	r3, [sp, #4]
 800a38c:	b170      	cbz	r0, 800a3ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x10c>
 800a38e:	9000      	str	r0, [sp, #0]
        MicroPrintf("Failed to get registration from op code %s\n ",
 800a390:	4618      	mov	r0, r3
 800a392:	f00c fa2d 	bl	80167f0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800a396:	f7ff febd 	bl	800a114 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a39a:	4601      	mov	r1, r0
 800a39c:	4848      	ldr	r0, [pc, #288]	; (800a4c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x220>)
 800a39e:	f000 fc8b 	bl	800acb8 <_Z11MicroPrintfPKcz>
        return status;
 800a3a2:	9a00      	ldr	r2, [sp, #0]
}
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	b00b      	add	sp, #44	; 0x2c
 800a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     .node_and_registrations[i]
 800a3ac:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
                                     .registration;
 800a3b0:	9900      	ldr	r1, [sp, #0]
 800a3b2:	585b      	ldr	r3, [r3, r1]
 800a3b4:	444b      	add	r3, r9
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
 800a3b8:	b913      	cbnz	r3, 800a3c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x120>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800a3ba:	4641      	mov	r1, r8
 800a3bc:	4841      	ldr	r0, [pc, #260]	; (800a4c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x224>)
 800a3be:	e7c9      	b.n	800a354 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb4>
      BuiltinOperator op_type =
 800a3c0:	f8d3 8014 	ldr.w	r8, [r3, #20]
    auto field_offset = GetOptionalFieldOffset(field);
 800a3c4:	210e      	movs	r1, #14
      unsigned char* builtin_data = nullptr;
 800a3c6:	9009      	str	r0, [sp, #36]	; 0x24
 800a3c8:	4620      	mov	r0, r4
      if (op_type == BuiltinOperator_CUSTOM) {
 800a3ca:	f1b8 0f20 	cmp.w	r8, #32
 800a3ce:	d146      	bne.n	800a45e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1be>
 800a3d0:	f7fd f934 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800a3d4:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d13a      	bne.n	800a450 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1b0>
      size_t custom_data_size = 0;
 800a3da:	2300      	movs	r3, #0
      const char* custom_data = nullptr;
 800a3dc:	9301      	str	r3, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a3de:	2106      	movs	r1, #6
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	f7fe fe3e 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
          FlatBufferVectorToTfLiteTypeArray(op->inputs());
 800a3e8:	f7fe fcc4 	bl	8008d74 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 800a3ec:	2108      	movs	r1, #8
 800a3ee:	9005      	str	r0, [sp, #20]
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f7fe fe37 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 800a3f6:	f7fe fcbd 	bl	8008d74 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800a3fa:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 800a3fe:	9b00      	ldr	r3, [sp, #0]
      *node = {};
 800a400:	2100      	movs	r1, #0
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 800a402:	9006      	str	r0, [sp, #24]
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800a404:	58d3      	ldr	r3, [r2, r3]
      *node = {};
 800a406:	2228      	movs	r2, #40	; 0x28
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800a408:	eb03 0809 	add.w	r8, r3, r9
 800a40c:	9302      	str	r3, [sp, #8]
      *node = {};
 800a40e:	4640      	mov	r0, r8
 800a410:	f00c fd2a 	bl	8016e68 <memset>
      node->inputs = inputs_array;
 800a414:	9b02      	ldr	r3, [sp, #8]
 800a416:	2114      	movs	r1, #20
 800a418:	4620      	mov	r0, r4
 800a41a:	461a      	mov	r2, r3
 800a41c:	9b05      	ldr	r3, [sp, #20]
 800a41e:	f842 3009 	str.w	r3, [r2, r9]
      node->outputs = outputs_array;
 800a422:	9b06      	ldr	r3, [sp, #24]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800a424:	9a09      	ldr	r2, [sp, #36]	; 0x24
      node->outputs = outputs_array;
 800a426:	f8c8 3004 	str.w	r3, [r8, #4]
      node->custom_initial_data = custom_data;
 800a42a:	9b01      	ldr	r3, [sp, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800a42c:	f8c8 2014 	str.w	r2, [r8, #20]
      node->custom_initial_data = custom_data;
 800a430:	f8c8 3018 	str.w	r3, [r8, #24]
      node->custom_initial_data_size = custom_data_size;
 800a434:	9b07      	ldr	r3, [sp, #28]
 800a436:	f8c8 301c 	str.w	r3, [r8, #28]
 800a43a:	f7fe fe13 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 800a43e:	b128      	cbz	r0, 800a44c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
 800a440:	6803      	ldr	r3, [r0, #0]
 800a442:	b11b      	cbz	r3, 800a44c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
            FlatBufferVectorToTfLiteTypeArray(op->intermediates());
 800a444:	f7fe fc96 	bl	8008d74 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
        node->intermediates =
 800a448:	f8c8 0008 	str.w	r0, [r8, #8]
    for (size_t i = 0; i < operators_size; ++i) {
 800a44c:	3701      	adds	r7, #1
 800a44e:	e754      	b.n	800a2fa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a450:	5823      	ldr	r3, [r4, r0]
        if (op->custom_options() != nullptr) {
 800a452:	18d1      	adds	r1, r2, r3
 800a454:	d0c1      	beq.n	800a3da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x13a>
 800a456:	3104      	adds	r1, #4
  uoffset_t size() const { return EndianScalar(length_); }
 800a458:	58d3      	ldr	r3, [r2, r3]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a45a:	9101      	str	r1, [sp, #4]
 800a45c:	e7bf      	b.n	800a3de <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x13e>
    auto field_offset = GetOptionalFieldOffset(field);
 800a45e:	f7fd f8ed 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800a462:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a464:	b140      	cbz	r0, 800a478 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
 800a466:	5822      	ldr	r2, [r4, r0]
        if (op->custom_options() != nullptr) {
 800a468:	42d3      	cmn	r3, r2
 800a46a:	d005      	beq.n	800a478 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 800a46c:	4640      	mov	r0, r8
 800a46e:	f7ff fe51 	bl	800a114 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a472:	4601      	mov	r1, r0
 800a474:	4814      	ldr	r0, [pc, #80]	; (800a4c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x228>)
 800a476:	e76d      	b.n	800a354 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb4>
            op_resolver_.GetOpDataParser(op_type);
 800a478:	6870      	ldr	r0, [r6, #4]
 800a47a:	4641      	mov	r1, r8
 800a47c:	6803      	ldr	r3, [r0, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	4798      	blx	r3
        if (parser == nullptr) {
 800a482:	b928      	cbnz	r0, 800a490 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>
          MicroPrintf("Did not find a parser for %s",
 800a484:	4640      	mov	r0, r8
 800a486:	f7ff fe45 	bl	800a114 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a48a:	4601      	mov	r1, r0
 800a48c:	480f      	ldr	r0, [pc, #60]	; (800a4cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>)
 800a48e:	e761      	b.n	800a354 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb4>
        TF_LITE_ENSURE_STATUS(CallBuiltinParseFunction(
 800a490:	9a03      	ldr	r2, [sp, #12]
 800a492:	ab09      	add	r3, sp, #36	; 0x24
 800a494:	4621      	mov	r1, r4
 800a496:	f00c f97b 	bl	8016790 <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>
 800a49a:	4602      	mov	r2, r0
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d09c      	beq.n	800a3da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x13a>
 800a4a0:	e780      	b.n	800a3a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x104>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800a4a2:	f10a 0a01 	add.w	sl, sl, #1
 800a4a6:	e701      	b.n	800a2ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	e77b      	b.n	800a3a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x104>
  uoffset_t size() const { return EndianScalar(length_); }
 800a4ac:	6803      	ldr	r3, [r0, #0]
 800a4ae:	deff      	udf	#255	; 0xff
 800a4b0:	080f923a 	.word	0x080f923a
 800a4b4:	080fae18 	.word	0x080fae18
 800a4b8:	080f9245 	.word	0x080f9245
 800a4bc:	080facb9 	.word	0x080facb9
 800a4c0:	080face3 	.word	0x080face3
 800a4c4:	080fad10 	.word	0x080fad10
 800a4c8:	080fad31 	.word	0x080fad31
 800a4cc:	080fad77 	.word	0x080fad77

0800a4d0 <_ZN6tflite16MicroInterpreter5ResetEv>:

TfLiteStatus MicroInterpreter::Reset() {
 800a4d0:	b510      	push	{r4, lr}
  TfLiteStatus status = graph_.ResetSubgraphs();
 800a4d2:	f100 0470 	add.w	r4, r0, #112	; 0x70
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 f9e4 	bl	800a8a4 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv>
  if (status != kTfLiteOk) {
 800a4dc:	b920      	cbnz	r0, 800a4e8 <_ZN6tflite16MicroInterpreter5ResetEv+0x18>
    return status;
  }
  return graph_.ResetVariableTensors();
 800a4de:	4620      	mov	r0, r4
}
 800a4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return graph_.ResetVariableTensors();
 800a4e4:	f000 bae2 	b.w	800aaac <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv>
}
 800a4e8:	bd10      	pop	{r4, pc}
	...

0800a4ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
 800a4ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 800a4f0:	6801      	ldr	r1, [r0, #0]
TfLiteStatus MicroInterpreter::AllocateTensors() {
 800a4f2:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 800a4f4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800a4f6:	f7ff f9e1 	bl	80098bc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	b948      	cbnz	r0, 800a512 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26>
    initialization_status_ = kTfLiteError;
 800a4fe:	2401      	movs	r4, #1
    MicroPrintf("Failed starting model allocation.\n");
 800a500:	4869      	ldr	r0, [pc, #420]	; (800a6a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1bc>)
 800a502:	f000 fbd9 	bl	800acb8 <_Z11MicroPrintfPKcz>
    initialization_status_ = kTfLiteError;
 800a506:	f885 4091 	strb.w	r4, [r5, #145]	; 0x91
}
 800a50a:	4620      	mov	r0, r4
 800a50c:	b003      	add	sp, #12
 800a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  graph_.SetSubgraphAllocations(allocations);
 800a512:	f105 0770 	add.w	r7, r5, #112	; 0x70
 800a516:	4638      	mov	r0, r7
 800a518:	f000 fac6 	bl	800aaa8 <_ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 800a51c:	4628      	mov	r0, r5
 800a51e:	f7ff febf 	bl	800a2a0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 800a522:	4604      	mov	r4, r0
 800a524:	2800      	cmp	r0, #0
 800a526:	d1f0      	bne.n	800a50a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e>
  micro_context_.SetInterpreterState(
 800a528:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
 800a52c:	4601      	mov	r1, r0
 800a52e:	4630      	mov	r0, r6
 800a530:	f000 f96a 	bl	800a808 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
  TF_LITE_ENSURE_STATUS(graph_.InitSubgraphs());
 800a534:	4638      	mov	r0, r7
 800a536:	f000 f983 	bl	800a840 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv>
 800a53a:	4604      	mov	r4, r0
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d1e4      	bne.n	800a50a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e>
  micro_context_.SetInterpreterState(
 800a540:	2101      	movs	r1, #1
 800a542:	4630      	mov	r0, r6
 800a544:	f000 f960 	bl	800a808 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
  TF_LITE_ENSURE_STATUS(graph_.PrepareSubgraphs());
 800a548:	4638      	mov	r0, r7
 800a54a:	f000 f9ff 	bl	800a94c <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv>
 800a54e:	4604      	mov	r4, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	d1da      	bne.n	800a50a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e>
  micro_context_.SetInterpreterState(
 800a554:	2102      	movs	r1, #2
 800a556:	4630      	mov	r0, r6
 800a558:	f000 f956 	bl	800a808 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 800a55c:	f105 0394 	add.w	r3, r5, #148	; 0x94
 800a560:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 800a564:	6829      	ldr	r1, [r5, #0]
 800a566:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800a568:	f7ff f976 	bl	8009858 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 800a56c:	4604      	mov	r4, r0
 800a56e:	2800      	cmp	r0, #0
 800a570:	d1cb      	bne.n	800a50a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e>
  micro_context_.SetScratchBufferHandles(scratch_buffer_handles_);
 800a572:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800a576:	4630      	mov	r0, r6
 800a578:	f000 f944 	bl	800a804 <_ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a57c:	6eef      	ldr	r7, [r5, #108]	; 0x6c
          sizeof(TfLiteTensor*) * inputs_size()));
 800a57e:	6828      	ldr	r0, [r5, #0]
 800a580:	f7ff fe58 	bl	800a234 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.4>
 800a584:	683b      	ldr	r3, [r7, #0]
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a586:	0081      	lsls	r1, r0, #2
 800a588:	4638      	mov	r0, r7
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	4798      	blx	r3
  input_tensors_ =
 800a58e:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
  if (input_tensors_ == nullptr) {
 800a592:	b940      	cbnz	r0, 800a5a6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xba>
        sizeof(TfLiteTensor*) * inputs_size());
 800a594:	6828      	ldr	r0, [r5, #0]
 800a596:	f7ff fe4d 	bl	800a234 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.4>
    MicroPrintf(
 800a59a:	0081      	lsls	r1, r0, #2
 800a59c:	4843      	ldr	r0, [pc, #268]	; (800a6ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c0>)
      MicroPrintf("Failed to initialize input tensor %d", i);
 800a59e:	f000 fb8b 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800a5a2:	2401      	movs	r4, #1
 800a5a4:	e7b1      	b.n	800a50a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e>
    return *model_->subgraphs()->Get(0)->inputs();
 800a5a6:	46a2      	mov	sl, r4
  for (size_t i = 0; i < inputs_size(); ++i) {
 800a5a8:	682f      	ldr	r7, [r5, #0]
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	f7ff fe42 	bl	800a234 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.4>
 800a5b0:	f8d5 806c 	ldr.w	r8, [r5, #108]	; 0x6c
 800a5b4:	42a0      	cmp	r0, r4
 800a5b6:	f8d8 9000 	ldr.w	r9, [r8]
 800a5ba:	d924      	bls.n	800a606 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a5bc:	2108      	movs	r1, #8
 800a5be:	4638      	mov	r0, r7
 800a5c0:	f7fe fda5 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	f7fe fd35 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800a5ca:	2106      	movs	r1, #6
 800a5cc:	f7fe fd4a 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	f7fe fceb 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a5d6:	f8cd a000 	str.w	sl, [sp]
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f8d9 9000 	ldr.w	r9, [r9]
 800a5e0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 800a5e4:	4639      	mov	r1, r7
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	f8d5 b098 	ldr.w	fp, [r5, #152]	; 0x98
 800a5ec:	47c8      	blx	r9
    if (input_tensors_[i] == nullptr) {
 800a5ee:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a5f2:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
    if (input_tensors_[i] == nullptr) {
 800a5f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a5fa:	b913      	cbnz	r3, 800a602 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
      MicroPrintf("Failed to initialize input tensor %d", i);
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	482c      	ldr	r0, [pc, #176]	; (800a6b0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c4>)
 800a600:	e7cd      	b.n	800a59e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb2>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800a602:	3401      	adds	r4, #1
 800a604:	e7d0      	b.n	800a5a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbc>
          sizeof(TfLiteTensor*) * outputs_size()));
 800a606:	4638      	mov	r0, r7
 800a608:	f7ff fdf2 	bl	800a1f0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.6>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a60c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a610:	0081      	lsls	r1, r0, #2
 800a612:	4640      	mov	r0, r8
 800a614:	4798      	blx	r3
  output_tensors_ =
 800a616:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
  if (output_tensors_ == nullptr) {
 800a61a:	b928      	cbnz	r0, 800a628 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13c>
        sizeof(TfLiteTensor*) * outputs_size());
 800a61c:	6828      	ldr	r0, [r5, #0]
 800a61e:	f7ff fde7 	bl	800a1f0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.6>
    MicroPrintf(
 800a622:	0081      	lsls	r1, r0, #2
 800a624:	4823      	ldr	r0, [pc, #140]	; (800a6b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>)
 800a626:	e7ba      	b.n	800a59e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb2>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800a628:	2400      	movs	r4, #0
  const flatbuffers::Vector<int32_t>& outputs() const {
    return *model_->subgraphs()->Get(0)->outputs();
 800a62a:	46a1      	mov	r9, r4
 800a62c:	682f      	ldr	r7, [r5, #0]
 800a62e:	4638      	mov	r0, r7
 800a630:	f7ff fdde 	bl	800a1f0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.6>
 800a634:	42a0      	cmp	r0, r4
 800a636:	d928      	bls.n	800a68a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x19e>
 800a638:	2108      	movs	r1, #8
 800a63a:	4638      	mov	r0, r7
 800a63c:	f7fe fd67 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800a640:	2100      	movs	r1, #0
 800a642:	f7fe fcf7 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a646:	f8d5 806c 	ldr.w	r8, [r5, #108]	; 0x6c
 800a64a:	2108      	movs	r1, #8
 800a64c:	f7fe fd0a 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800a650:	4621      	mov	r1, r4
 800a652:	f7fe fcab 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
 800a656:	f8d8 3000 	ldr.w	r3, [r8]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a65a:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 800a65e:	4639      	mov	r1, r7
 800a660:	f8cd 9000 	str.w	r9, [sp]
 800a664:	f8d3 b000 	ldr.w	fp, [r3]
 800a668:	4603      	mov	r3, r0
 800a66a:	4640      	mov	r0, r8
 800a66c:	f8d5 a09c 	ldr.w	sl, [r5, #156]	; 0x9c
 800a670:	47d8      	blx	fp
    if (output_tensors_[i] == nullptr) {
 800a672:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a676:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    if (output_tensors_[i] == nullptr) {
 800a67a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a67e:	b913      	cbnz	r3, 800a686 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x19a>
      MicroPrintf("Failed to initialize output tensor %d", i);
 800a680:	4621      	mov	r1, r4
 800a682:	480d      	ldr	r0, [pc, #52]	; (800a6b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1cc>)
 800a684:	e78b      	b.n	800a59e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb2>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800a686:	3401      	adds	r4, #1
 800a688:	e7d0      	b.n	800a62c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x140>
  TF_LITE_ENSURE_STATUS(Reset());
 800a68a:	4628      	mov	r0, r5
 800a68c:	f7ff ff20 	bl	800a4d0 <_ZN6tflite16MicroInterpreter5ResetEv>
 800a690:	4604      	mov	r4, r0
 800a692:	2800      	cmp	r0, #0
 800a694:	f47f af39 	bne.w	800a50a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e>
  tensors_allocated_ = true;
 800a698:	2301      	movs	r3, #1
  micro_context_.SetInterpreterState(
 800a69a:	2103      	movs	r1, #3
 800a69c:	4630      	mov	r0, r6
  tensors_allocated_ = true;
 800a69e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
  micro_context_.SetInterpreterState(
 800a6a2:	f000 f8b1 	bl	800a808 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
  return kTfLiteOk;
 800a6a6:	e730      	b.n	800a50a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e>
 800a6a8:	080fabb8 	.word	0x080fabb8
 800a6ac:	080fabdb 	.word	0x080fabdb
 800a6b0:	080fac24 	.word	0x080fac24
 800a6b4:	080fac49 	.word	0x080fac49
 800a6b8:	080fac93 	.word	0x080fac93

0800a6bc <_ZN6tflite16MicroInterpreter6InvokeEv>:
  if (initialization_status_ != kTfLiteOk) {
 800a6bc:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
TfLiteStatus MicroInterpreter::Invoke() {
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
 800a6c4:	b123      	cbz	r3, 800a6d0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x14>
    MicroPrintf("Invoke() called after initialization failed\n");
 800a6c6:	480a      	ldr	r0, [pc, #40]	; (800a6f0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x34>)
 800a6c8:	f000 faf6 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800a6cc:	2001      	movs	r0, #1
}
 800a6ce:	bd10      	pop	{r4, pc}
  if (!tensors_allocated_) {
 800a6d0:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800a6d4:	b133      	cbz	r3, 800a6e4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x28>
  return graph_.InvokeSubgraph(0);
 800a6d6:	f104 0070 	add.w	r0, r4, #112	; 0x70
 800a6da:	2100      	movs	r1, #0
}
 800a6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return graph_.InvokeSubgraph(0);
 800a6e0:	f000 b98a 	b.w	800a9f8 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800a6e4:	f7ff ff02 	bl	800a4ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d0f4      	beq.n	800a6d6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1a>
 800a6ec:	e7ef      	b.n	800a6ce <_ZN6tflite16MicroInterpreter6InvokeEv+0x12>
 800a6ee:	bf00      	nop
 800a6f0:	080fadbf 	.word	0x080fadbf

0800a6f4 <_ZN6tflite23MicroInterpreterContext16external_contextEv>:
  // Does not take ownership of the pointer and the pointer must refer to valid
  // an object that outlive this class instance.
  // This can only be called once to set one external context.
  TfLiteStatus set_external_context(void* external_context_payload) override;

  void* external_context() override { return external_context_payload_; }
 800a6f4:	6980      	ldr	r0, [r0, #24]
 800a6f6:	4770      	bx	lr

0800a6f8 <_ZN6tflite23MicroInterpreterContext5graphEv>:

  MicroGraph& graph() override { return graph_; }
 800a6f8:	6880      	ldr	r0, [r0, #8]
 800a6fa:	4770      	bx	lr

0800a6fc <_ZN6tflite23MicroInterpreterContextD1Ev>:
    : allocator_(*allocator),
      graph_(*graph),
      model_(model),
      state_(InterpreterState::kInit) {}

MicroInterpreterContext::~MicroInterpreterContext() {}
 800a6fc:	4770      	bx	lr

0800a6fe <_ZN6tflite23MicroInterpreterContext24AllocateTempTfLiteTensorEi>:
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
}

TfLiteTensor* MicroInterpreterContext::AllocateTempTfLiteTensor(
    int tensor_idx) {
 800a6fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 800a700:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	6955      	ldr	r5, [r2, #20]
 800a708:	9500      	str	r5, [sp, #0]
 800a70a:	685d      	ldr	r5, [r3, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	6912      	ldr	r2, [r2, #16]
 800a710:	68c1      	ldr	r1, [r0, #12]
 800a712:	4620      	mov	r0, r4
 800a714:	47a8      	blx	r5
}
 800a716:	b003      	add	sp, #12
 800a718:	bd30      	pop	{r4, r5, pc}

0800a71a <_ZN6tflite23MicroInterpreterContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 800a71a:	6840      	ldr	r0, [r0, #4]
 800a71c:	6803      	ldr	r3, [r0, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	4718      	bx	r3

0800a722 <_ZN6tflite23MicroInterpreterContext13GetEvalTensorEi>:
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
  allocator_.DeallocateTempBuffer(buffer);
}

TfLiteEvalTensor* MicroInterpreterContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 800a722:	6882      	ldr	r2, [r0, #8]
              .tensors[tensor_idx];
 800a724:	e9d2 3004 	ldrd	r3, r0, [r2, #16]
 800a728:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
}
 800a72c:	200c      	movs	r0, #12
              .tensors[tensor_idx];
 800a72e:	685b      	ldr	r3, [r3, #4]
}
 800a730:	fb00 3001 	mla	r0, r0, r1, r3
 800a734:	4770      	bx	lr

0800a736 <_ZN6tflite23MicroInterpreterContextD0Ev>:
MicroInterpreterContext::~MicroInterpreterContext() {}
 800a736:	b510      	push	{r4, lr}
 800a738:	4604      	mov	r4, r0
 800a73a:	211c      	movs	r1, #28
 800a73c:	f00c f877 	bl	801682e <_ZdlPvj>
 800a740:	4620      	mov	r0, r4
 800a742:	bd10      	pop	{r4, pc}

0800a744 <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj>:
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 800a744:	6903      	ldr	r3, [r0, #16]
 800a746:	2b01      	cmp	r3, #1
void* MicroInterpreterContext::AllocatePersistentBuffer(size_t bytes) {
 800a748:	b510      	push	{r4, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 800a74a:	d901      	bls.n	800a750 <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj+0xc>
 800a74c:	f00c fafa 	bl	8016d44 <abort>
  return allocator_.AllocatePersistentBuffer(bytes);
 800a750:	6840      	ldr	r0, [r0, #4]
 800a752:	6803      	ldr	r3, [r0, #0]
}
 800a754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return allocator_.AllocatePersistentBuffer(bytes);
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	4718      	bx	r3

0800a75c <_ZN6tflite23MicroInterpreterContext16GetScratchBufferEi>:
void* MicroInterpreterContext::GetScratchBuffer(int buffer_idx) {
 800a75c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kInvoke);
 800a75e:	6903      	ldr	r3, [r0, #16]
 800a760:	2b03      	cmp	r3, #3
 800a762:	d001      	beq.n	800a768 <_ZN6tflite23MicroInterpreterContext16GetScratchBufferEi+0xc>
 800a764:	f00c faee 	bl	8016d44 <abort>
  return handle->data;
 800a768:	6943      	ldr	r3, [r0, #20]
}
 800a76a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800a76e:	bd08      	pop	{r3, pc}

0800a770 <_ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj>:
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800a770:	6903      	ldr	r3, [r0, #16]
 800a772:	2b01      	cmp	r3, #1
                                                     size_t alignment) {
 800a774:	b510      	push	{r4, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800a776:	d001      	beq.n	800a77c <_ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj+0xc>
 800a778:	f00c fae4 	bl	8016d44 <abort>
  return allocator_.AllocateTempBuffer(size, alignment);
 800a77c:	6840      	ldr	r0, [r0, #4]
 800a77e:	6803      	ldr	r3, [r0, #0]
}
 800a780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return allocator_.AllocateTempBuffer(size, alignment);
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	4718      	bx	r3

0800a788 <_ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh>:
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800a788:	6903      	ldr	r3, [r0, #16]
 800a78a:	2b01      	cmp	r3, #1
void MicroInterpreterContext::DeallocateTempBuffer(uint8_t* buffer) {
 800a78c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800a78e:	d001      	beq.n	800a794 <_ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh+0xc>
 800a790:	f00c fad8 	bl	8016d44 <abort>
  allocator_.DeallocateTempBuffer(buffer);
 800a794:	6840      	ldr	r0, [r0, #4]
 800a796:	6803      	ldr	r3, [r0, #0]
}
 800a798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  allocator_.DeallocateTempBuffer(buffer);
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	4718      	bx	r3

0800a7a0 <_ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi>:
    size_t bytes, int* buffer_idx) {
 800a7a0:	4613      	mov	r3, r2
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800a7a2:	6902      	ldr	r2, [r0, #16]
 800a7a4:	2a01      	cmp	r2, #1
    size_t bytes, int* buffer_idx) {
 800a7a6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800a7a8:	d001      	beq.n	800a7ae <_ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi+0xe>
 800a7aa:	f00c facb 	bl	8016d44 <abort>
  return allocator_.RequestScratchBufferInArena(
 800a7ae:	6884      	ldr	r4, [r0, #8]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 800a7b0:	6840      	ldr	r0, [r0, #4]
 800a7b2:	6962      	ldr	r2, [r4, #20]
}
 800a7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 800a7b8:	f7ff b8ce 	b.w	8009958 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>

0800a7bc <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv>:
    ScratchBufferHandle* scratch_buffer_handles) {
  scratch_buffer_handles_ = scratch_buffer_handles;
}

TfLiteStatus MicroInterpreterContext::set_external_context(
    void* external_context_payload) {
 800a7bc:	b508      	push	{r3, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 800a7be:	6903      	ldr	r3, [r0, #16]
 800a7c0:	f023 0302 	bic.w	r3, r3, #2
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d001      	beq.n	800a7cc <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x10>
 800a7c8:	f00c fabc 	bl	8016d44 <abort>
 800a7cc:	6982      	ldr	r2, [r0, #24]
                state_ == InterpreterState::kInvoke);
  if (external_context_payload == nullptr ||
 800a7ce:	b101      	cbz	r1, 800a7d2 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x16>
 800a7d0:	b122      	cbz	r2, 800a7dc <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x20>
      external_context_payload_ != nullptr) {
    MicroPrintf(
 800a7d2:	4804      	ldr	r0, [pc, #16]	; (800a7e4 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x28>)
 800a7d4:	f000 fa70 	bl	800acb8 <_Z11MicroPrintfPKcz>
        "Attempting to set external context to %x but it was %x already",
        external_context_payload, external_context_payload_);
    return kTfLiteError;
 800a7d8:	2001      	movs	r0, #1
  }

  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}
 800a7da:	bd08      	pop	{r3, pc}
  external_context_payload_ = external_context_payload;
 800a7dc:	6181      	str	r1, [r0, #24]
  return kTfLiteOk;
 800a7de:	4610      	mov	r0, r2
 800a7e0:	e7fb      	b.n	800a7da <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x1e>
 800a7e2:	bf00      	nop
 800a7e4:	080fb836 	.word	0x080fb836

0800a7e8 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE>:
MicroInterpreterContext::MicroInterpreterContext(MicroAllocator* allocator,
 800a7e8:	b530      	push	{r4, r5, lr}
      state_(InterpreterState::kInit) {}
 800a7ea:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800a7ee:	4d04      	ldr	r5, [pc, #16]	; (800a800 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE+0x18>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e9c0 5100 	strd	r5, r1, [r0]
 800a7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7fa:	6183      	str	r3, [r0, #24]
 800a7fc:	bd30      	pop	{r4, r5, pc}
 800a7fe:	bf00      	nop
 800a800:	080fb880 	.word	0x080fb880

0800a804 <_ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:
  scratch_buffer_handles_ = scratch_buffer_handles;
 800a804:	6141      	str	r1, [r0, #20]
}
 800a806:	4770      	bx	lr

0800a808 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>:

void MicroInterpreterContext::SetInterpreterState(InterpreterState state) {
  state_ = state;
 800a808:	6101      	str	r1, [r0, #16]
}
 800a80a:	4770      	bx	lr

0800a80c <_ZN6tflite21MicroInterpreterGraph20GetResourceVariablesEv>:
  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }

  // Get the resource variables for this TFLM graph.
  MicroResourceVariables* GetResourceVariables() { return resource_variables_; }
 800a80c:	6980      	ldr	r0, [r0, #24]
 800a80e:	4770      	bx	lr

0800a810 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TFLMRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800a810:	6943      	ldr	r3, [r0, #20]
 800a812:	2b20      	cmp	r3, #32
 800a814:	d101      	bne.n	800a81a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration+0xa>
    return registration->custom_name;
 800a816:	6980      	ldr	r0, [r0, #24]
 800a818:	4770      	bx	lr
  return (v < low) || (high < v);
 800a81a:	2bcd      	cmp	r3, #205	; 0xcd
  return EnumNamesBuiltinOperator()[index];
 800a81c:	bf9a      	itte	ls
 800a81e:	4a02      	ldrls	r2, [pc, #8]	; (800a828 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration+0x18>)
 800a820:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 800a824:	4801      	ldrhi	r0, [pc, #4]	; (800a82c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration+0x1c>)
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
 800a826:	4770      	bx	lr
 800a828:	080fa87c 	.word	0x080fa87c
 800a82c:	08018413 	.word	0x08018413

0800a830 <_ZN6tflite21MicroInterpreterGraphD1Ev>:
  if (model != nullptr) {
    subgraphs_ = model->subgraphs();
  }
}

MicroInterpreterGraph::~MicroInterpreterGraph() {}
 800a830:	4770      	bx	lr

0800a832 <_ZN6tflite21MicroInterpreterGraphD0Ev>:
 800a832:	b510      	push	{r4, lr}
 800a834:	4604      	mov	r4, r0
 800a836:	2120      	movs	r1, #32
 800a838:	f00b fff9 	bl	801682e <_ZdlPvj>
 800a83c:	4620      	mov	r0, r4
 800a83e:	bd10      	pop	{r4, pc}

0800a840 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::InitSubgraphs() {
 800a840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	4604      	mov	r4, r0
  int previous_subgraph_idx = current_subgraph_index_;
 800a846:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a84a:	2600      	movs	r6, #0
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    for (size_t i = 0; i < operators_size; ++i) {
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800a84c:	f04f 092c 	mov.w	r9, #44	; 0x2c
 800a850:	69e3      	ldr	r3, [r4, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	429e      	cmp	r6, r3
 800a856:	d220      	bcs.n	800a89a <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
 800a858:	6166      	str	r6, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a85a:	4631      	mov	r1, r6
 800a85c:	68a0      	ldr	r0, [r4, #8]
 800a85e:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 800a862:	f7fe fa5f 	bl	8008d24 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800a866:	2700      	movs	r7, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a868:	4682      	mov	sl, r0
    for (size_t i = 0; i < operators_size; ++i) {
 800a86a:	4557      	cmp	r7, sl
 800a86c:	d013      	beq.n	800a896 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800a86e:	6923      	ldr	r3, [r4, #16]
 800a870:	f853 500b 	ldr.w	r5, [r3, fp]
 800a874:	fb09 5507 	mla	r5, r9, r7, r5
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800a878:	6aab      	ldr	r3, [r5, #40]	; 0x28
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
        init_data_size = node->custom_initial_data_size;
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800a87a:	6969      	ldr	r1, [r5, #20]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800a87c:	695a      	ldr	r2, [r3, #20]
        init_data_size = 0;
      }
      if (registration->init) {
 800a87e:	681b      	ldr	r3, [r3, #0]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800a880:	2a20      	cmp	r2, #32
        init_data_size = node->custom_initial_data_size;
 800a882:	bf0c      	ite	eq
 800a884:	e9d5 1206 	ldrdeq	r1, r2, [r5, #24]
        init_data_size = 0;
 800a888:	2200      	movne	r2, #0
      if (registration->init) {
 800a88a:	b113      	cbz	r3, 800a892 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x52>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800a88c:	6860      	ldr	r0, [r4, #4]
 800a88e:	4798      	blx	r3
        node->user_data =
 800a890:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800a892:	3701      	adds	r7, #1
 800a894:	e7e9      	b.n	800a86a <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x2a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a896:	3601      	adds	r6, #1
 800a898:	e7da      	b.n	800a850 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x10>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800a89a:	f8c4 8014 	str.w	r8, [r4, #20]

  return kTfLiteOk;
}
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8a4 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroInterpreterGraph::ResetSubgraphs() {
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	4604      	mov	r4, r0
  int previous_subgraph_idx = current_subgraph_index_;
 800a8aa:	6947      	ldr	r7, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a8ac:	2500      	movs	r5, #0
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    for (size_t i = 0; i < operators_size; ++i) {
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800a8ae:	f04f 082c 	mov.w	r8, #44	; 0x2c
 800a8b2:	69e3      	ldr	r3, [r4, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	429d      	cmp	r5, r3
 800a8b8:	d21a      	bcs.n	800a8f0 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x4c>
    current_subgraph_index_ = subgraph_idx;
 800a8ba:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a8bc:	4629      	mov	r1, r5
 800a8be:	68a0      	ldr	r0, [r4, #8]
 800a8c0:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 800a8c4:	f7fe fa2e 	bl	8008d24 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800a8c8:	2600      	movs	r6, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a8ca:	4681      	mov	r9, r0
    for (size_t i = 0; i < operators_size; ++i) {
 800a8cc:	454e      	cmp	r6, r9
 800a8ce:	d00d      	beq.n	800a8ec <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x48>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	f853 300a 	ldr.w	r3, [r3, sl]
 800a8d6:	fb08 3306 	mla	r3, r8, r6, r3
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800a8da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                                                 .node_and_registrations[i]
                                                 .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->reset != nullptr) {
 800a8dc:	b122      	cbz	r2, 800a8e8 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x44>
 800a8de:	6912      	ldr	r2, [r2, #16]
 800a8e0:	b112      	cbz	r2, 800a8e8 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x44>
        registration->reset(context_, node->user_data);
 800a8e2:	6919      	ldr	r1, [r3, #16]
 800a8e4:	6860      	ldr	r0, [r4, #4]
 800a8e6:	4790      	blx	r2
    for (size_t i = 0; i < operators_size; ++i) {
 800a8e8:	3601      	adds	r6, #1
 800a8ea:	e7ef      	b.n	800a8cc <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x28>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a8ec:	3501      	adds	r5, #1
 800a8ee:	e7e0      	b.n	800a8b2 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0xe>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800a8f0:	6167      	str	r7, [r4, #20]

  return kTfLiteOk;
}
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a8f8 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::FreeSubgraphs() {
 800a8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	4604      	mov	r4, r0
  int previous_subgraph_idx = current_subgraph_index_;
 800a8fe:	6947      	ldr	r7, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a900:	2500      	movs	r5, #0
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    for (size_t i = 0; i < operators_size; ++i) {
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800a902:	f04f 082c 	mov.w	r8, #44	; 0x2c
 800a906:	69e3      	ldr	r3, [r4, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	429d      	cmp	r5, r3
 800a90c:	d21a      	bcs.n	800a944 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x4c>
    current_subgraph_index_ = subgraph_idx;
 800a90e:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a910:	4629      	mov	r1, r5
 800a912:	68a0      	ldr	r0, [r4, #8]
 800a914:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 800a918:	f7fe fa04 	bl	8008d24 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800a91c:	2600      	movs	r6, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a91e:	4681      	mov	r9, r0
    for (size_t i = 0; i < operators_size; ++i) {
 800a920:	454e      	cmp	r6, r9
 800a922:	d00d      	beq.n	800a940 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x48>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800a924:	6923      	ldr	r3, [r4, #16]
 800a926:	f853 300a 	ldr.w	r3, [r3, sl]
 800a92a:	fb08 3306 	mla	r3, r8, r6, r3
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800a92e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                                                 .node_and_registrations[i]
                                                 .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800a930:	b122      	cbz	r2, 800a93c <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x44>
 800a932:	6852      	ldr	r2, [r2, #4]
 800a934:	b112      	cbz	r2, 800a93c <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x44>
        registration->free(context_, node->user_data);
 800a936:	6919      	ldr	r1, [r3, #16]
 800a938:	6860      	ldr	r0, [r4, #4]
 800a93a:	4790      	blx	r2
    for (size_t i = 0; i < operators_size; ++i) {
 800a93c:	3601      	adds	r6, #1
 800a93e:	e7ef      	b.n	800a920 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x28>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a940:	3501      	adds	r5, #1
 800a942:	e7e0      	b.n	800a906 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0xe>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800a944:	6167      	str	r7, [r4, #20]

  return kTfLiteOk;
}
 800a946:	2000      	movs	r0, #0
 800a948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a94c <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv>:
TfLiteStatus MicroInterpreterGraph::PrepareSubgraphs() {
 800a94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a950:	4604      	mov	r4, r0
  int previous_subgraph_idx = current_subgraph_index_;
 800a952:	6947      	ldr	r7, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a954:	2500      	movs	r5, #0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800a956:	f04f 082c 	mov.w	r8, #44	; 0x2c
 800a95a:	69e3      	ldr	r3, [r4, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	429d      	cmp	r5, r3
 800a960:	d22c      	bcs.n	800a9bc <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x70>
    current_subgraph_index_ = subgraph_idx;
 800a962:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a964:	4629      	mov	r1, r5
 800a966:	68a0      	ldr	r0, [r4, #8]
 800a968:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 800a96c:	f7fe f9da 	bl	8008d24 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800a970:	2600      	movs	r6, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800a972:	4681      	mov	r9, r0
    for (size_t i = 0; i < operators_size; ++i) {
 800a974:	454e      	cmp	r6, r9
 800a976:	d01f      	beq.n	800a9b8 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x6c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	f853 100a 	ldr.w	r1, [r3, sl]
 800a97e:	fb08 1106 	mla	r1, r8, r6, r1
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800a982:	f8d1 b028 	ldr.w	fp, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
 800a986:	f8db 3008 	ldr.w	r3, [fp, #8]
 800a98a:	b17b      	cbz	r3, 800a9ac <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x60>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800a98c:	6860      	ldr	r0, [r4, #4]
 800a98e:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
 800a990:	4601      	mov	r1, r0
 800a992:	b158      	cbz	r0, 800a9ac <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x60>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 800a994:	4658      	mov	r0, fp
 800a996:	f7ff ff3b 	bl	800a810 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800a99a:	4632      	mov	r2, r6
 800a99c:	460b      	mov	r3, r1
 800a99e:	4601      	mov	r1, r0
 800a9a0:	4808      	ldr	r0, [pc, #32]	; (800a9c4 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x78>)
 800a9a2:	f000 f989 	bl	800acb8 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 800a9a6:	2001      	movs	r0, #1
}
 800a9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	68e0      	ldr	r0, [r4, #12]
 800a9b0:	f7ff f804 	bl	80099bc <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	e7dd      	b.n	800a974 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x28>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	e7ce      	b.n	800a95a <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0xe>
  current_subgraph_index_ = previous_subgraph_idx;
 800a9bc:	6167      	str	r7, [r4, #20]
  return kTfLiteOk;
 800a9be:	2000      	movs	r0, #0
 800a9c0:	e7f2      	b.n	800a9a8 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x5c>
 800a9c2:	bf00      	nop
 800a9c4:	080fb91a 	.word	0x080fb91a

0800a9c8 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE>:
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag,
                               MicroProfilerInterface* profiler)
      : profiler_(profiler) {
 800a9c8:	2300      	movs	r3, #0
  explicit ScopedMicroProfiler(const char* tag,
 800a9ca:	b510      	push	{r4, lr}
 800a9cc:	4604      	mov	r4, r0
      : profiler_(profiler) {
 800a9ce:	e9c0 3200 	strd	r3, r2, [r0]
    if (profiler_ != nullptr) {
 800a9d2:	b122      	cbz	r2, 800a9de <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE+0x16>
      event_handle_ = profiler_->BeginEvent(tag);
 800a9d4:	6813      	ldr	r3, [r2, #0]
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	4798      	blx	r3
 800a9dc:	6020      	str	r0, [r4, #0]
    }
  }
 800a9de:	4620      	mov	r0, r4
 800a9e0:	bd10      	pop	{r4, pc}

0800a9e2 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 800a9e2:	b510      	push	{r4, lr}
 800a9e4:	4604      	mov	r4, r0
    if (profiler_ != nullptr) {
 800a9e6:	6840      	ldr	r0, [r0, #4]
 800a9e8:	b118      	cbz	r0, 800a9f2 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x10>
      profiler_->EndEvent(event_handle_);
 800a9ea:	6803      	ldr	r3, [r0, #0]
 800a9ec:	6821      	ldr	r1, [r4, #0]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	4798      	blx	r3
    }
  }
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	bd10      	pop	{r4, pc}
	...

0800a9f8 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi>:
 800a9f8:	69c3      	ldr	r3, [r0, #28]

TfLiteStatus MicroInterpreterGraph::InvokeSubgraph(int subgraph_idx) {
 800a9fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	4604      	mov	r4, r0
  int previous_subgraph_idx = current_subgraph_index_;
 800aa02:	f8d0 8014 	ldr.w	r8, [r0, #20]
TfLiteStatus MicroInterpreterGraph::InvokeSubgraph(int subgraph_idx) {
 800aa06:	460f      	mov	r7, r1
  current_subgraph_index_ = subgraph_idx;

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800aa08:	4291      	cmp	r1, r2
  current_subgraph_index_ = subgraph_idx;
 800aa0a:	6161      	str	r1, [r4, #20]
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800aa0c:	d307      	bcc.n	800aa1e <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x26>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
 800aa0e:	2501      	movs	r5, #1
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800aa10:	4823      	ldr	r0, [pc, #140]	; (800aaa0 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xa8>)
 800aa12:	f000 f951 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
 800aa16:	4628      	mov	r0, r5
 800aa18:	b003      	add	sp, #12
 800aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800aa1e:	6880      	ldr	r0, [r0, #8]
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800aa20:	00ff      	lsls	r7, r7, #3
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800aa22:	f7fe f97f 	bl	8008d24 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
  for (size_t i = 0; i < operators_size; ++i) {
 800aa26:	2600      	movs	r6, #0
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800aa28:	4681      	mov	r9, r0
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800aa2a:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
  for (size_t i = 0; i < operators_size; ++i) {
 800aa2e:	454e      	cmp	r6, r9
 800aa30:	d031      	beq.n	800aa96 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x9e>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800aa32:	6923      	ldr	r3, [r4, #16]
 800aa34:	59dd      	ldr	r5, [r3, r7]
 800aa36:	fb0a 5506 	mla	r5, sl, r6, r5
    const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800aa3a:	f8d5 b028 	ldr.w	fp, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfilerInterface*>(context_->profiler));
 800aa3e:	4658      	mov	r0, fp
 800aa40:	f7ff fee6 	bl	800a810 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800aa44:	6863      	ldr	r3, [r4, #4]
 800aa46:	4601      	mov	r1, r0
 800aa48:	4668      	mov	r0, sp
 800aa4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa4c:	f7ff ffbc 	bl	800a9c8 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE>
    TFLITE_DCHECK(registration->invoke);
 800aa50:	f8db 300c 	ldr.w	r3, [fp, #12]
 800aa54:	b90b      	cbnz	r3, 800aa5a <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x62>
 800aa56:	f00c f975 	bl	8016d44 <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	6860      	ldr	r0, [r4, #4]
 800aa5e:	4798      	blx	r3
 800aa60:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
 800aa62:	68e0      	ldr	r0, [r4, #12]
 800aa64:	6803      	ldr	r3, [r0, #0]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
 800aa6a:	2d01      	cmp	r5, #1
 800aa6c:	d10c      	bne.n	800aa88 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x90>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 800aa6e:	4658      	mov	r0, fp
 800aa70:	f7ff fece 	bl	800a810 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800aa74:	462b      	mov	r3, r5
 800aa76:	4601      	mov	r1, r0
 800aa78:	4632      	mov	r2, r6
 800aa7a:	480a      	ldr	r0, [pc, #40]	; (800aaa4 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xac>)
 800aa7c:	f000 f91c 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800aa80:	4668      	mov	r0, sp
 800aa82:	f7ff ffae 	bl	800a9e2 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 800aa86:	e7c6      	b.n	800aa16 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x1e>
    } else if (invoke_status != kTfLiteOk) {
 800aa88:	2d00      	cmp	r5, #0
 800aa8a:	d1f9      	bne.n	800aa80 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x88>
        reinterpret_cast<MicroProfilerInterface*>(context_->profiler));
 800aa8c:	4668      	mov	r0, sp
  for (size_t i = 0; i < operators_size; ++i) {
 800aa8e:	3601      	adds	r6, #1
        reinterpret_cast<MicroProfilerInterface*>(context_->profiler));
 800aa90:	f7ff ffa7 	bl	800a9e2 <_ZN6tflite19ScopedMicroProfilerD1Ev>
  for (size_t i = 0; i < operators_size; ++i) {
 800aa94:	e7cb      	b.n	800aa2e <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x36>
  current_subgraph_index_ = previous_subgraph_idx;
 800aa96:	f8c4 8014 	str.w	r8, [r4, #20]
  return kTfLiteOk;
 800aa9a:	2500      	movs	r5, #0
 800aa9c:	e7bb      	b.n	800aa16 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x1e>
 800aa9e:	bf00      	nop
 800aaa0:	080fb8b4 	.word	0x080fb8b4
 800aaa4:	080fb8e6 	.word	0x080fb8e6

0800aaa8 <_ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  return model_->subgraphs()->size();
}

void MicroInterpreterGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
  subgraph_allocations_ = subgraph_allocations;
 800aaa8:	6101      	str	r1, [r0, #16]
}
 800aaaa:	4770      	bx	lr

0800aaac <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreterGraph::ResetVariableTensors() {
 800aaac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	4607      	mov	r7, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800aab2:	2600      	movs	r6, #0
 800aab4:	69f8      	ldr	r0, [r7, #28]
 800aab6:	6803      	ldr	r3, [r0, #0]
 800aab8:	429e      	cmp	r6, r3
 800aaba:	d268      	bcs.n	800ab8e <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xe2>
  return_type operator[](uoffset_t i) const { return Get(i); }
 800aabc:	4631      	mov	r1, r6
 800aabe:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800aac2:	f7fe fab7 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800aac6:	2500      	movs	r5, #0
 800aac8:	4680      	mov	r8, r0
    auto field_offset = GetOptionalFieldOffset(field);
 800aaca:	2104      	movs	r1, #4
 800aacc:	4640      	mov	r0, r8
 800aace:	f7fc fdb5 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800aad2:	eb08 0100 	add.w	r1, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d062      	beq.n	800aba0 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xf4>
 800aada:	f858 3000 	ldr.w	r3, [r8, r0]
 800aade:	18ca      	adds	r2, r1, r3
 800aae0:	58cb      	ldr	r3, [r1, r3]
 800aae2:	429d      	cmp	r5, r3
 800aae4:	d251      	bcs.n	800ab8a <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xde>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800aae6:	3204      	adds	r2, #4
    p += i * sizeof(uoffset_t);
 800aae8:	eb02 0185 	add.w	r1, r2, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800aaec:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800aaf0:	eb01 0b03 	add.w	fp, r1, r3
    auto field_offset = GetOptionalFieldOffset(field);
 800aaf4:	210e      	movs	r1, #14
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	f7fc fda0 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d03e      	beq.n	800ab7e <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xd2>
      if (tensor->is_variable()) {
 800ab00:	f81b 2000 	ldrb.w	r2, [fp, r0]
 800ab04:	2a00      	cmp	r2, #0
 800ab06:	d03a      	beq.n	800ab7e <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xd2>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	230c      	movs	r3, #12
 800ab0c:	a901      	add	r1, sp, #4
 800ab0e:	444a      	add	r2, r9
 800ab10:	fb03 fa05 	mul.w	sl, r3, r5
 800ab14:	6850      	ldr	r0, [r2, #4]
 800ab16:	4450      	add	r0, sl
 800ab18:	f7fe f98f 	bl	8008e3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d13a      	bne.n	800ab98 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xec>
    auto field_offset = GetOptionalFieldOffset(field);
 800ab22:	2106      	movs	r1, #6
 800ab24:	4658      	mov	r0, fp
 800ab26:	f7fc fd89 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800ab2a:	b350      	cbz	r0, 800ab82 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xd6>
        if (tensor->type() == tflite::TensorType_INT8) {
 800ab2c:	f91b 2000 	ldrsb.w	r2, [fp, r0]
 800ab30:	2a09      	cmp	r2, #9
 800ab32:	d128      	bne.n	800ab86 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xda>
    auto field_offset = GetOptionalFieldOffset(field);
 800ab34:	210c      	movs	r1, #12
 800ab36:	4658      	mov	r0, fp
 800ab38:	f7fc fd80 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800ab3c:	eb0b 0200 	add.w	r2, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ab40:	b190      	cbz	r0, 800ab68 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xbc>
 800ab42:	f85b 4000 	ldr.w	r4, [fp, r0]
 800ab46:	4414      	add	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 800ab48:	210a      	movs	r1, #10
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f7fc fd76 	bl	800763c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
 800ab50:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ab52:	b328      	cbz	r0, 800aba0 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xf4>
 800ab54:	5823      	ldr	r3, [r4, r0]
 800ab56:	18d1      	adds	r1, r2, r3
    FLATBUFFERS_ASSERT(i < size());
 800ab58:	58d3      	ldr	r3, [r2, r3]
 800ab5a:	b93b      	cbnz	r3, 800ab6c <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xc0>
 800ab5c:	4b11      	ldr	r3, [pc, #68]	; (800aba4 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xf8>)
 800ab5e:	21aa      	movs	r1, #170	; 0xaa
 800ab60:	4a11      	ldr	r2, [pc, #68]	; (800aba8 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xfc>)
 800ab62:	4812      	ldr	r0, [pc, #72]	; (800abac <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x100>)
 800ab64:	f00c f8f6 	bl	8016d54 <__assert_func>
 800ab68:	4604      	mov	r4, r0
 800ab6a:	e7ed      	b.n	800ab48 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x9c>
          value = tensor->quantization()->zero_point()->Get(0);
 800ab6c:	6849      	ldr	r1, [r1, #4]
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	9a01      	ldr	r2, [sp, #4]
 800ab72:	444b      	add	r3, r9
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f853 000a 	ldr.w	r0, [r3, sl]
 800ab7a:	f00c f975 	bl	8016e68 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800ab7e:	3501      	adds	r5, #1
 800ab80:	e7a3      	b.n	800aaca <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x1e>
        int value = 0;
 800ab82:	4601      	mov	r1, r0
 800ab84:	e7f3      	b.n	800ab6e <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xc2>
 800ab86:	4621      	mov	r1, r4
 800ab88:	e7f1      	b.n	800ab6e <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xc2>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800ab8a:	3601      	adds	r6, #1
 800ab8c:	e792      	b.n	800aab4 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x8>
  if (resource_variables_ != nullptr) {
 800ab8e:	69b8      	ldr	r0, [r7, #24]
 800ab90:	b108      	cbz	r0, 800ab96 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xea>
    resource_variables_->ResetAll();
 800ab92:	f000 f8eb 	bl	800ad6c <_ZN6tflite22MicroResourceVariables8ResetAllEv>
  return kTfLiteOk;
 800ab96:	2400      	movs	r4, #0
}
 800ab98:	4620      	mov	r0, r4
 800ab9a:	b003      	add	sp, #12
 800ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 800aba0:	6803      	ldr	r3, [r0, #0]
 800aba2:	deff      	udf	#255	; 0xff
 800aba4:	080f923a 	.word	0x080f923a
 800aba8:	080fb990 	.word	0x080fb990
 800abac:	080f9245 	.word	0x080f9245

0800abb0 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii>:
size_t MicroInterpreterGraph::NumSubgraphInputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
}

TfLiteEvalTensor* MicroInterpreterGraph::GetSubgraphInput(int subgraph_idx,
                                                          int input_idx) {
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	460c      	mov	r4, r1
 800abb4:	4605      	mov	r5, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800abb6:	2108      	movs	r1, #8
 800abb8:	6880      	ldr	r0, [r0, #8]
 800abba:	4616      	mov	r6, r2
 800abbc:	f7fe faa7 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800abc0:	4621      	mov	r1, r4
 800abc2:	f7fe fa37 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800abc6:	2106      	movs	r1, #6
 800abc8:	f7fe fa4c 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800abcc:	4631      	mov	r1, r6
 800abce:	f7fe f9ed 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800abd2:	6929      	ldr	r1, [r5, #16]
}
 800abd4:	220c      	movs	r2, #12
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800abd6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800abda:	684b      	ldr	r3, [r1, #4]
}
 800abdc:	fb02 3000 	mla	r0, r2, r0, r3
 800abe0:	bd70      	pop	{r4, r5, r6, pc}

0800abe2 <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv>:
int MicroInterpreterGraph::NumSubgraphs() {
 800abe2:	b508      	push	{r3, lr}
 800abe4:	2108      	movs	r1, #8
 800abe6:	6880      	ldr	r0, [r0, #8]
 800abe8:	f7fe fa91 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
}
 800abec:	6800      	ldr	r0, [r0, #0]
 800abee:	bd08      	pop	{r3, pc}

0800abf0 <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi>:
size_t MicroInterpreterGraph::NumSubgraphInputs(int subgraph_idx) {
 800abf0:	b510      	push	{r4, lr}
 800abf2:	460c      	mov	r4, r1
 800abf4:	6880      	ldr	r0, [r0, #8]
 800abf6:	2108      	movs	r1, #8
 800abf8:	f7fe fa89 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 800abfc:	4621      	mov	r1, r4
 800abfe:	f7fe fa19 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ac02:	2106      	movs	r1, #6
 800ac04:	f7fe fa2e 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
}
 800ac08:	6800      	ldr	r0, [r0, #0]
 800ac0a:	bd10      	pop	{r4, pc}

0800ac0c <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi>:

size_t MicroInterpreterGraph::NumSubgraphOutputs(int subgraph_idx) {
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	460c      	mov	r4, r1
 800ac10:	6880      	ldr	r0, [r0, #8]
 800ac12:	2108      	movs	r1, #8
 800ac14:	f7fe fa7b 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800ac18:	4621      	mov	r1, r4
 800ac1a:	f7fe fa0b 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ac1e:	2108      	movs	r1, #8
 800ac20:	f7fe fa20 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
}
 800ac24:	6800      	ldr	r0, [r0, #0]
 800ac26:	bd10      	pop	{r4, pc}

0800ac28 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>:
MicroInterpreterGraph::MicroInterpreterGraph(
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	4604      	mov	r4, r0
      resource_variables_(resource_variables) {
 800ac2c:	4808      	ldr	r0, [pc, #32]	; (800ac50 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x28>)
 800ac2e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ac32:	2300      	movs	r3, #0
 800ac34:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800ac38:	9b02      	ldr	r3, [sp, #8]
 800ac3a:	e9c4 0100 	strd	r0, r1, [r4]
 800ac3e:	61a3      	str	r3, [r4, #24]
  if (model != nullptr) {
 800ac40:	b122      	cbz	r2, 800ac4c <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x24>
 800ac42:	2108      	movs	r1, #8
 800ac44:	4610      	mov	r0, r2
 800ac46:	f7fe fa62 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    subgraphs_ = model->subgraphs();
 800ac4a:	61e0      	str	r0, [r4, #28]
}
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	bd10      	pop	{r4, pc}
 800ac50:	080fb958 	.word	0x080fb958

0800ac54 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroInterpreterGraph::GetSubgraphOutput(int subgraph_idx,
                                                           int output_idx) {
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	460c      	mov	r4, r1
 800ac58:	4605      	mov	r5, r0
 800ac5a:	2108      	movs	r1, #8
 800ac5c:	6880      	ldr	r0, [r0, #8]
 800ac5e:	4616      	mov	r6, r2
 800ac60:	f7fe fa55 	bl	800910e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 800ac64:	4621      	mov	r1, r4
 800ac66:	f7fe f9e5 	bl	8009034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ac6a:	2108      	movs	r1, #8
 800ac6c:	f7fe f9fa 	bl	8009064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800ac70:	4631      	mov	r1, r6
 800ac72:	f7fe f99b 	bl	8008fac <_ZNK11flatbuffers6VectorIlE3GetEm>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800ac76:	6929      	ldr	r1, [r5, #16]
}
 800ac78:	220c      	movs	r2, #12
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800ac7a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ac7e:	684b      	ldr	r3, [r1, #4]
}
 800ac80:	fb02 3000 	mla	r0, r2, r0, r3
 800ac84:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac88 <_ZN12_GLOBAL__N_19VDebugLogEPKcz.constprop.0>:
#endif

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
namespace {

void VDebugLog(const char* format, ...) {
 800ac88:	b40f      	push	{r0, r1, r2, r3}
 800ac8a:	b507      	push	{r0, r1, r2, lr}
  va_list args;
  va_start(args, format);
  DebugLog(format, args);
 800ac8c:	4804      	ldr	r0, [pc, #16]	; (800aca0 <_ZN12_GLOBAL__N_19VDebugLogEPKcz.constprop.0+0x18>)
  va_start(args, format);
 800ac8e:	a905      	add	r1, sp, #20
 800ac90:	9101      	str	r1, [sp, #4]
  DebugLog(format, args);
 800ac92:	f7fe f82b 	bl	8008cec <DebugLog>
  va_end(args);
}
 800ac96:	b003      	add	sp, #12
 800ac98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac9c:	b004      	add	sp, #16
 800ac9e:	4770      	bx	lr
 800aca0:	08018411 	.word	0x08018411

0800aca4 <_Z12VMicroPrintfPKcSt9__va_list>:

}  // namespace

void VMicroPrintf(const char* format, va_list args) {
 800aca4:	b508      	push	{r3, lr}
  DebugLog(format, args);
 800aca6:	f7fe f821 	bl	8008cec <DebugLog>
  // TODO(b/290051015): remove "\r\n"
  VDebugLog("\r\n");
 800acaa:	4802      	ldr	r0, [pc, #8]	; (800acb4 <_Z12VMicroPrintfPKcSt9__va_list+0x10>)
}
 800acac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  VDebugLog("\r\n");
 800acb0:	f7ff bfea 	b.w	800ac88 <_ZN12_GLOBAL__N_19VDebugLogEPKcz.constprop.0>
 800acb4:	08018411 	.word	0x08018411

0800acb8 <_Z11MicroPrintfPKcz>:

void MicroPrintf(const char* format, ...) {
 800acb8:	b40f      	push	{r0, r1, r2, r3}
 800acba:	b507      	push	{r0, r1, r2, lr}
 800acbc:	a904      	add	r1, sp, #16
 800acbe:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
 800acc2:	9101      	str	r1, [sp, #4]
  VMicroPrintf(format, args);
 800acc4:	f7ff ffee 	bl	800aca4 <_Z12VMicroPrintfPKcSt9__va_list>
  va_end(args);
}
 800acc8:	b003      	add	sp, #12
 800acca:	f85d eb04 	ldr.w	lr, [sp], #4
 800acce:	b004      	add	sp, #16
 800acd0:	4770      	bx	lr
	...

0800acd4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(const OperatorCode* opcode,
                                       const MicroOpResolver& op_resolver,
                                       const TFLMRegistration** registration) {
 800acd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
 800acd8:	2400      	movs	r4, #0
                                       const TFLMRegistration** registration) {
 800acda:	4607      	mov	r7, r0
 800acdc:	460e      	mov	r6, r1
 800acde:	4690      	mov	r8, r2
  *registration = nullptr;
 800ace0:	6014      	str	r4, [r2, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800ace2:	f00b fd85 	bl	80167f0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>

  if (builtin_code > BuiltinOperator_MAX) {
 800ace6:	28cd      	cmp	r0, #205	; 0xcd
  auto builtin_code = GetBuiltinCode(opcode);
 800ace8:	4605      	mov	r5, r0
  if (builtin_code > BuiltinOperator_MAX) {
 800acea:	dd06      	ble.n	800acfa <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x26>
    MicroPrintf("Op builtin_code out of range: %d.", builtin_code);
 800acec:	4601      	mov	r1, r0
 800acee:	481a      	ldr	r0, [pc, #104]	; (800ad58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x84>)
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    *registration = op_resolver.FindOp(builtin_code);
    if (*registration == nullptr) {
      MicroPrintf("Didn't find op for builtin opcode '%s'",
 800acf0:	f7ff ffe2 	bl	800acb8 <_Z11MicroPrintfPKcz>
                  EnumNameBuiltinOperator(builtin_code));
      status = kTfLiteError;
    }
  } else if (!opcode->custom_code()) {
    MicroPrintf("Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800acf4:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
 800acf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800acfa:	2820      	cmp	r0, #32
 800acfc:	d00f      	beq.n	800ad1e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x4a>
    *registration = op_resolver.FindOp(builtin_code);
 800acfe:	6833      	ldr	r3, [r6, #0]
 800ad00:	4601      	mov	r1, r0
 800ad02:	4630      	mov	r0, r6
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4798      	blx	r3
 800ad08:	f8c8 0000 	str.w	r0, [r8]
    if (*registration == nullptr) {
 800ad0c:	bb08      	cbnz	r0, 800ad52 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x7e>
 800ad0e:	2d00      	cmp	r5, #0
      MicroPrintf("Didn't find op for builtin opcode '%s'",
 800ad10:	4812      	ldr	r0, [pc, #72]	; (800ad5c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x88>)
  return EnumNamesBuiltinOperator()[index];
 800ad12:	bfaa      	itet	ge
 800ad14:	4b12      	ldrge	r3, [pc, #72]	; (800ad60 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x8c>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 800ad16:	4913      	ldrlt	r1, [pc, #76]	; (800ad64 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x90>)
  return EnumNamesBuiltinOperator()[index];
 800ad18:	f853 1025 	ldrge.w	r1, [r3, r5, lsl #2]
 800ad1c:	e7e8      	b.n	800acf0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x1c>
    return data_ - ReadScalar<soffset_t>(data_);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	1afb      	subs	r3, r7, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800ad22:	881a      	ldrh	r2, [r3, #0]
 800ad24:	2a06      	cmp	r2, #6
 800ad26:	d905      	bls.n	800ad34 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x60>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800ad28:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
 800ad2a:	18f9      	adds	r1, r7, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ad2c:	b113      	cbz	r3, 800ad34 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x60>
 800ad2e:	58fb      	ldr	r3, [r7, r3]
  } else if (!opcode->custom_code()) {
 800ad30:	18c9      	adds	r1, r1, r3
 800ad32:	d103      	bne.n	800ad3c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x68>
    MicroPrintf("Operator with CUSTOM builtin_code has no custom_code.\n");
 800ad34:	480c      	ldr	r0, [pc, #48]	; (800ad68 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x94>)
 800ad36:	f7ff ffbf 	bl	800acb8 <_Z11MicroPrintfPKcz>
 800ad3a:	e7db      	b.n	800acf4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x20>
    *registration = op_resolver.FindOp(name);
 800ad3c:	6833      	ldr	r3, [r6, #0]
 800ad3e:	3104      	adds	r1, #4
 800ad40:	4630      	mov	r0, r6
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	4798      	blx	r3
 800ad46:	f8c8 0000 	str.w	r0, [r8]
    status = kTfLiteError;
 800ad4a:	fab0 f080 	clz	r0, r0
 800ad4e:	0940      	lsrs	r0, r0, #5
 800ad50:	e7d1      	b.n	800acf6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x22>
  TfLiteStatus status = kTfLiteOk;
 800ad52:	4620      	mov	r0, r4
 800ad54:	e7cf      	b.n	800acf6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x22>
 800ad56:	bf00      	nop
 800ad58:	080fba68 	.word	0x080fba68
 800ad5c:	080fba8a 	.word	0x080fba8a
 800ad60:	080fa87c 	.word	0x080fa87c
 800ad64:	08018413 	.word	0x08018413
 800ad68:	080fbab1 	.word	0x080fbab1

0800ad6c <_ZN6tflite22MicroResourceVariables8ResetAllEv>:
  TFLITE_DCHECK(EvalTensorBytes(tensor) == variable.bytes);
  memcpy(variable.resource_buffer, tensor->data.raw, variable.bytes);
  return kTfLiteOk;
}

TfLiteStatus MicroResourceVariables::ResetAll() {
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	4605      	mov	r5, r0
  for (int i = 0; i < num_resource_variables_; i++) {
 800ad70:	2400      	movs	r4, #0
    MicroResourceVariable variable = resource_variables_[i];
 800ad72:	2614      	movs	r6, #20
  for (int i = 0; i < num_resource_variables_; i++) {
 800ad74:	68ab      	ldr	r3, [r5, #8]
 800ad76:	42a3      	cmp	r3, r4
 800ad78:	dd0a      	ble.n	800ad90 <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x24>
    MicroResourceVariable variable = resource_variables_[i];
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	fb06 3304 	mla	r3, r6, r4, r3
  for (int i = 0; i < num_resource_variables_; i++) {
 800ad80:	3401      	adds	r4, #1
    // TODO(b/269669735): Explains why casting zero_point to int8 and memset.
    memset(variable.resource_buffer, variable.default_value, variable.bytes);
 800ad82:	68da      	ldr	r2, [r3, #12]
 800ad84:	f993 1010 	ldrsb.w	r1, [r3, #16]
 800ad88:	6898      	ldr	r0, [r3, #8]
 800ad8a:	f00c f86d 	bl	8016e68 <memset>
  for (int i = 0; i < num_resource_variables_; i++) {
 800ad8e:	e7f1      	b.n	800ad74 <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x8>
  }
  return kTfLiteOk;
}
 800ad90:	2000      	movs	r0, #0
 800ad92:	bd70      	pop	{r4, r5, r6, pc}

0800ad94 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
 800ad94:	4603      	mov	r3, r0
 800ad96:	2200      	movs	r2, #0
  int result = 1;
 800ad98:	2001      	movs	r0, #1
int ElementCount(const TfLiteIntArray& dims) {
 800ad9a:	b510      	push	{r4, lr}
  for (int i = 0; i < dims.size; ++i) {
 800ad9c:	f853 4b04 	ldr.w	r4, [r3], #4
 800ada0:	4294      	cmp	r4, r2
 800ada2:	dd04      	ble.n	800adae <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
 800ada4:	f853 1b04 	ldr.w	r1, [r3], #4
  for (int i = 0; i < dims.size; ++i) {
 800ada8:	3201      	adds	r2, #1
    result *= dims.data[i];
 800adaa:	4348      	muls	r0, r1
  for (int i = 0; i < dims.size; ++i) {
 800adac:	e7f8      	b.n	800ada0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xc>
  }
  return result;
}
 800adae:	bd10      	pop	{r4, pc}

0800adb0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
    count *= dims[i];
  }
  return count;
}

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800adb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return NumElements(dims->data, dims->size);
 800adb4:	f100 0a04 	add.w	sl, r0, #4
 800adb8:	f8d0 b000 	ldr.w	fp, [r0]
  for (int i = 0; i < num_dims; ++i) {
 800adbc:	2600      	movs	r6, #0
  int64_t count = 1;
 800adbe:	2401      	movs	r4, #1
 800adc0:	2500      	movs	r5, #0
  for (int i = 0; i < num_dims; ++i) {
 800adc2:	45b3      	cmp	fp, r6
 800adc4:	dd21      	ble.n	800ae0a <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    if (count <= 0) {
 800adc6:	2c01      	cmp	r4, #1
 800adc8:	f175 0300 	sbcs.w	r3, r5, #0
 800adcc:	db1d      	blt.n	800ae0a <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    TF_LITE_ASSERT(dims[i] < std::numeric_limits<int>::max() / count);
 800adce:	f85a 7026 	ldr.w	r7, [sl, r6, lsl #2]
 800add2:	462b      	mov	r3, r5
 800add4:	4622      	mov	r2, r4
 800add6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800adda:	2100      	movs	r1, #0
 800addc:	ea4f 79e7 	mov.w	r9, r7, asr #31
 800ade0:	f7f5 ff3e 	bl	8000c60 <__aeabi_ldivmod>
 800ade4:	4287      	cmp	r7, r0
 800ade6:	eb79 0301 	sbcs.w	r3, r9, r1
 800adea:	db05      	blt.n	800adf8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x48>
 800adec:	4909      	ldr	r1, [pc, #36]	; (800ae14 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x64>)
 800adee:	480a      	ldr	r0, [pc, #40]	; (800ae18 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x68>)
 800adf0:	f7ff ff62 	bl	800acb8 <_Z11MicroPrintfPKcz>
 800adf4:	f00b ffa6 	bl	8016d44 <abort>
    count *= dims[i];
 800adf8:	fb04 f309 	mul.w	r3, r4, r9
  for (int i = 0; i < num_dims; ++i) {
 800adfc:	3601      	adds	r6, #1
    count *= dims[i];
 800adfe:	fb07 3305 	mla	r3, r7, r5, r3
 800ae02:	fba4 4507 	umull	r4, r5, r4, r7
 800ae06:	441d      	add	r5, r3
 800ae08:	e7db      	b.n	800adc2 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x12>
}
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae12:	bf00      	nop
 800ae14:	080fbae8 	.word	0x080fbae8
 800ae18:	080fc3f1 	.word	0x080fc3f1

0800ae1c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 800ae1c:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 800ae1e:	6804      	ldr	r4, [r0, #0]
 800ae20:	680b      	ldr	r3, [r1, #0]
 800ae22:	429c      	cmp	r4, r3
 800ae24:	d001      	beq.n	800ae2a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0xe>
 800ae26:	f00b ff8d 	bl	8016d44 <abort>
 800ae2a:	2301      	movs	r3, #1
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 800ae2c:	1e5a      	subs	r2, r3, #1
 800ae2e:	4294      	cmp	r4, r2
 800ae30:	dd09      	ble.n	800ae46 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2a>
    return dims_[i];
 800ae32:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800ae36:	3301      	adds	r3, #1
 800ae38:	eb01 0583 	add.w	r5, r1, r3, lsl #2
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800ae3c:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800ae40:	4295      	cmp	r5, r2
 800ae42:	d0f3      	beq.n	800ae2c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x10>
 800ae44:	e7ef      	b.n	800ae26 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0xa>
  const int32_t* DimsData() const { return dims_; }
 800ae46:	1d03      	adds	r3, r0, #4
    for (int i = 0; i < size_; i++) {
 800ae48:	2200      	movs	r2, #0
    int buffer_size = 1;
 800ae4a:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
 800ae4c:	4294      	cmp	r4, r2
 800ae4e:	dd04      	ble.n	800ae5a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x3e>
      buffer_size *= dims_data[i];
 800ae50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
 800ae54:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 800ae56:	4348      	muls	r0, r1
 800ae58:	e7f8      	b.n	800ae4c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x30>
  }
  return shape.FlatSize();
}
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}

0800ae5c <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE>:
#include "tensorflow/lite/kernels/internal/types.h"

namespace tflite {
namespace reference_integer_ops {

inline void CheckArithmeticParams(const ArithmeticParams& params) {
 800ae5c:	b508      	push	{r3, lr}
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800ae5e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
 800ae62:	429a      	cmp	r2, r3
 800ae64:	dd01      	ble.n	800ae6a <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0xe>
 800ae66:	f00b ff6d 	bl	8016d44 <abort>
                   params.quantized_activation_max);
  // Input offset is negative input zero point. Activation tensors are
  // asymmetric quantized so they span the full int8 range.
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
 800ae6a:	6842      	ldr	r2, [r0, #4]
 800ae6c:	2a80      	cmp	r2, #128	; 0x80
 800ae6e:	dcfa      	bgt.n	800ae66 <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0xa>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
 800ae70:	6883      	ldr	r3, [r0, #8]
 800ae72:	337f      	adds	r3, #127	; 0x7f
 800ae74:	2bff      	cmp	r3, #255	; 0xff
 800ae76:	d8f6      	bhi.n	800ae66 <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0xa>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
 800ae78:	327f      	adds	r2, #127	; 0x7f
 800ae7a:	dbf4      	blt.n	800ae66 <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0xa>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
}
 800ae7c:	bd08      	pop	{r3, pc}

0800ae7e <_ZN6tflite7AddInitEP13TfLiteContextPKcj>:

  return kTfLiteOk;
}

void* AddInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800ae7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* AddInit(TfLiteContext* context, const char* buffer, size_t length) {
 800ae80:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800ae82:	b90b      	cbnz	r3, 800ae88 <_ZN6tflite7AddInitEP13TfLiteContextPKcj+0xa>
 800ae84:	f00b ff5e 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataAdd));
 800ae88:	213c      	movs	r1, #60	; 0x3c
}
 800ae8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpDataAdd));
 800ae8e:	4718      	bx	r3

0800ae90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
                                const RuntimeShape& check_shape_1) {
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	460d      	mov	r5, r1
 800ae94:	4616      	mov	r6, r2
  const int size_1 = shape.FlatSize();
 800ae96:	f7fc fb58 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800ae9a:	4604      	mov	r4, r0
  const int size_2 = check_shape_0.FlatSize();
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f7fc fb54 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800aea2:	4605      	mov	r5, r0
  const int size_3 = check_shape_1.FlatSize();
 800aea4:	4630      	mov	r0, r6
 800aea6:	f7fc fb50 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
 800aeaa:	42ac      	cmp	r4, r5
 800aeac:	d001      	beq.n	800aeb2 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x22>
 800aeae:	f00b ff49 	bl	8016d44 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
 800aeb2:	4284      	cmp	r4, r0
 800aeb4:	d1fb      	bne.n	800aeae <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x1e>
}
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}

0800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800aeb8:	4288      	cmp	r0, r1
}
#endif  // USE_NEON
// Double-rounding MultiplyByQuantizedMultiplier
#else
inline int32_t MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800aeba:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
 800aebe:	d12c      	bne.n	800af1a <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x62>
 800aec0:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800aec4:	425c      	negs	r4, r3
 800aec6:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
 800aec8:	fb80 0101 	smull	r0, r1, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800aecc:	2800      	cmp	r0, #0
 800aece:	f171 0300 	sbcs.w	r3, r1, #0
 800aed2:	4b1f      	ldr	r3, [pc, #124]	; (800af50 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x98>)
 800aed4:	bfa8      	it	ge
 800aed6:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800aeda:	bb04      	cbnz	r4, 800af1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x66>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800aedc:	eb10 0b03 	adds.w	fp, r0, r3
 800aee0:	eb41 7ce3 	adc.w	ip, r1, r3, asr #31
 800aee4:	f1bb 0f00 	cmp.w	fp, #0
 800aee8:	f17c 0300 	sbcs.w	r3, ip, #0
 800aeec:	da06      	bge.n	800aefc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x44>
 800aeee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800aef2:	2500      	movs	r5, #0
 800aef4:	eb1b 0b04 	adds.w	fp, fp, r4
 800aef8:	eb4c 0c05 	adc.w	ip, ip, r5
 800aefc:	ea4f 70db 	mov.w	r0, fp, lsr #31
 800af00:	ea40 014c 	orr.w	r1, r0, ip, lsl #1
  assert(exponent >= 0);
 800af04:	2a00      	cmp	r2, #0
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
 800af06:	f1c2 0400 	rsb	r4, r2, #0
 800af0a:	dd0b      	ble.n	800af24 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x6c>
 800af0c:	4b11      	ldr	r3, [pc, #68]	; (800af54 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x9c>)
 800af0e:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800af12:	4a11      	ldr	r2, [pc, #68]	; (800af58 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0xa0>)
  assert(exponent <= 31);
 800af14:	4811      	ldr	r0, [pc, #68]	; (800af5c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0xa4>)
 800af16:	f00b ff1d 	bl	8016d54 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800af1a:	2400      	movs	r4, #0
 800af1c:	e7d4      	b.n	800aec8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x10>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800af1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af22:	e7ef      	b.n	800af04 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x4c>
  assert(exponent <= 31);
 800af24:	321f      	adds	r2, #31
 800af26:	da04      	bge.n	800af32 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x7a>
 800af28:	4b0d      	ldr	r3, [pc, #52]	; (800af60 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0xa8>)
 800af2a:	f240 1167 	movw	r1, #359	; 0x167
 800af2e:	4a0a      	ldr	r2, [pc, #40]	; (800af58 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0xa0>)
 800af30:	e7f0      	b.n	800af14 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x5c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800af32:	2301      	movs	r3, #1
 800af34:	40a3      	lsls	r3, r4
 800af36:	3b01      	subs	r3, #1
  return a & b;
 800af38:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
 800af3c:	105b      	asrs	r3, r3, #1
  return a + b;
 800af3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
 800af42:	4121      	asrs	r1, r4
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
 800af44:	4298      	cmp	r0, r3
 800af46:	bfd4      	ite	le
 800af48:	4608      	movle	r0, r1
 800af4a:	1c48      	addgt	r0, r1, #1
 800af4c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 800af50:	c0000001 	.word	0xc0000001
 800af54:	080f9728 	.word	0x080f9728
 800af58:	080fbc42 	.word	0x080fbc42
 800af5c:	080f9575 	.word	0x080f9575
 800af60:	080f9566 	.word	0x080f9566

0800af64 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>:
                                check_arithmetic_params, binary_func);
}

inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
  const int32_t input1_val = params.input1_offset + x;
  const int32_t input2_val = params.input2_offset + y;
 800af64:	6893      	ldr	r3, [r2, #8]
 800af66:	4419      	add	r1, r3
  const int32_t input1_val = params.input1_offset + x;
 800af68:	6853      	ldr	r3, [r2, #4]
inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
 800af6a:	b570      	push	{r4, r5, r6, lr}
  const int32_t input1_val = params.input1_offset + x;
 800af6c:	4418      	add	r0, r3
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
 800af6e:	6996      	ldr	r6, [r2, #24]
inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
 800af70:	4614      	mov	r4, r2
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
 800af72:	fa01 f506 	lsl.w	r5, r1, r6
  const int32_t scaled_input1_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
 800af76:	40b0      	lsls	r0, r6
 800af78:	e9d2 1207 	ldrd	r1, r2, [r2, #28]
 800af7c:	f7ff ff9c 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800af80:	4606      	mov	r6, r0
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
 800af82:	4628      	mov	r0, r5
 800af84:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 800af88:	f7ff ff96 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800af8c:	4430      	add	r0, r6
 800af8e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800af92:	f7ff ff91 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          raw_sum, params.output_multiplier, params.output_shift) +
 800af96:	68e3      	ldr	r3, [r4, #12]
 800af98:	4418      	add	r0, r3
      params.output_offset;
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
               std::max(params.quantized_activation_min, raw_output));
  return static_cast<int8_t>(clamped_output);
 800af9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af9c:	4298      	cmp	r0, r3
 800af9e:	bfb8      	it	lt
 800afa0:	4618      	movlt	r0, r3
 800afa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afa4:	4298      	cmp	r0, r3
 800afa6:	bfa8      	it	ge
 800afa8:	4618      	movge	r0, r3
}
 800afaa:	b240      	sxtb	r0, r0
 800afac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afb0 <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps>:
                                 const RuntimeShape& input1_shape,
                                 const int16_t* input1_data,
                                 const RuntimeShape& input2_shape,
                                 const int16_t* input2_data,
                                 const RuntimeShape& output_shape,
                                 int16_t* output_data) {
 800afb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	4604      	mov	r4, r0
 800afb6:	9201      	str	r2, [sp, #4]
 800afb8:	4608      	mov	r0, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800afba:	e9d4 980b 	ldrd	r9, r8, [r4, #44]	; 0x2c
 800afbe:	45c1      	cmp	r9, r8
 800afc0:	dd01      	ble.n	800afc6 <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps+0x16>
 800afc2:	f00b febf 	bl	8016d44 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800afc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afc8:	4619      	mov	r1, r3
 800afca:	f7ff ff61 	bl	800ae90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  int max_value = std::numeric_limits<int16_t>::max();

  TFLITE_DCHECK_GT(params.input1_offset, -max_value);
 800afce:	6867      	ldr	r7, [r4, #4]
 800afd0:	4a1e      	ldr	r2, [pc, #120]	; (800b04c <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps+0x9c>)
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800afd2:	9000      	str	r0, [sp, #0]
  TFLITE_DCHECK_GT(params.input1_offset, -max_value);
 800afd4:	4297      	cmp	r7, r2
 800afd6:	dbf4      	blt.n	800afc2 <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps+0x12>
  TFLITE_DCHECK_GT(params.input2_offset, -max_value);
  TFLITE_DCHECK_LT(params.input1_offset, max_value);
 800afd8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
  TFLITE_DCHECK_GT(params.input2_offset, -max_value);
 800afdc:	f8d4 a008 	ldr.w	sl, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, max_value);
 800afe0:	4297      	cmp	r7, r2
 800afe2:	dcee      	bgt.n	800afc2 <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps+0x12>
  TFLITE_DCHECK_LT(params.input2_offset, max_value);
 800afe4:	4452      	add	r2, sl
 800afe6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800afea:	428a      	cmp	r2, r1
 800afec:	d8e9      	bhi.n	800afc2 <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps+0x12>
  for (int i = 0; i < size; ++i) {
 800afee:	2500      	movs	r5, #0
 800aff0:	9b00      	ldr	r3, [sp, #0]
 800aff2:	42ab      	cmp	r3, r5
 800aff4:	dd26      	ble.n	800b044 <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps+0x94>
    const int32_t input2_val = params.input2_offset + input2_data[i];
 800aff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
 800aff8:	69a3      	ldr	r3, [r4, #24]
    const int32_t input2_val = params.input2_offset + input2_data[i];
 800affa:	f932 6015 	ldrsh.w	r6, [r2, r5, lsl #1]
    const int32_t input1_val = params.input1_offset + input1_data[i];
 800affe:	9a01      	ldr	r2, [sp, #4]
    const int32_t input2_val = params.input2_offset + input2_data[i];
 800b000:	4456      	add	r6, sl
    const int32_t input1_val = params.input1_offset + input1_data[i];
 800b002:	f932 0015 	ldrsh.w	r0, [r2, r5, lsl #1]
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
 800b006:	409e      	lsls	r6, r3
    const int32_t input1_val = params.input1_offset + input1_data[i];
 800b008:	4438      	add	r0, r7
    const int32_t scaled_input1_val =
 800b00a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 800b00e:	4098      	lsls	r0, r3
 800b010:	f7ff ff52 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800b014:	4683      	mov	fp, r0
    const int32_t scaled_input2_val =
 800b016:	4630      	mov	r0, r6
 800b018:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 800b01c:	f7ff ff4c 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800b020:	4458      	add	r0, fp
 800b022:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800b026:	f7ff ff47 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
            raw_sum, params.output_multiplier, params.output_shift) +
 800b02a:	68e2      	ldr	r2, [r4, #12]
    output_data[i] = static_cast<T>(clamped_output);
 800b02c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            raw_sum, params.output_multiplier, params.output_shift) +
 800b02e:	4410      	add	r0, r2
    output_data[i] = static_cast<T>(clamped_output);
 800b030:	4548      	cmp	r0, r9
 800b032:	bfb8      	it	lt
 800b034:	4648      	movlt	r0, r9
 800b036:	4540      	cmp	r0, r8
 800b038:	bfa8      	it	ge
 800b03a:	4640      	movge	r0, r8
 800b03c:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
  for (int i = 0; i < size; ++i) {
 800b040:	3501      	adds	r5, #1
 800b042:	e7d5      	b.n	800aff0 <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps+0x40>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
 800b044:	b003      	add	sp, #12
 800b046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04a:	bf00      	nop
 800b04c:	ffff8002 	.word	0xffff8002

0800b050 <_ZN6tflite13reference_ops12AddBroadcastIlEEvPKT_S4_PS2_jS2_S2_>:
template <>
inline void AddBroadcast<int32_t>(const int32_t* input_data,
                                  const int32_t* broadcast_data,
                                  int32_t* output_data, size_t size,
                                  int32_t activation_min,
                                  int32_t activation_max) {
 800b050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b052:	e9dd 7408 	ldrd	r7, r4, [sp, #32]
 800b056:	9401      	str	r4, [sp, #4]
  size_t c = 0;
 800b058:	2400      	movs	r4, #0
    vres = vmaxq_s32(vmin, vres);
    vres = vminq_s32(vmax, vres);
    vst1q_s32(&output_data[c], vres);
  }
#endif
  for (; c < size; ++c) {
 800b05a:	429c      	cmp	r4, r3
 800b05c:	d011      	beq.n	800b082 <_ZN6tflite13reference_ops12AddBroadcastIlEEvPKT_S4_PS2_jS2_S2_+0x32>
    output_data[c] = ActivationFunctionWithMinMax<int32_t>(
 800b05e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800b062:	462e      	mov	r6, r5
 800b064:	680d      	ldr	r5, [r1, #0]
 800b066:	442e      	add	r6, r5
 800b068:	42be      	cmp	r6, r7
 800b06a:	4635      	mov	r5, r6
 800b06c:	9e01      	ldr	r6, [sp, #4]
 800b06e:	bfb8      	it	lt
 800b070:	463d      	movlt	r5, r7
 800b072:	42b5      	cmp	r5, r6
 800b074:	bfd4      	ite	le
 800b076:	f842 5024 	strle.w	r5, [r2, r4, lsl #2]
 800b07a:	f842 6024 	strgt.w	r6, [r2, r4, lsl #2]
  for (; c < size; ++c) {
 800b07e:	3401      	adds	r4, #1
 800b080:	e7eb      	b.n	800b05a <_ZN6tflite13reference_ops12AddBroadcastIlEEvPKT_S4_PS2_jS2_S2_+0xa>
        input_data[c] + broadcast_data[0], activation_min, activation_max);
  }
}
 800b082:	b003      	add	sp, #12
 800b084:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b086 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
 800b086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08a:	680b      	ldr	r3, [r1, #0]
 800b08c:	b08e      	sub	sp, #56	; 0x38
 800b08e:	6804      	ldr	r4, [r0, #0]
 800b090:	460e      	mov	r6, r1
 800b092:	4615      	mov	r5, r2
 800b094:	429c      	cmp	r4, r3
 800b096:	bfb8      	it	lt
 800b098:	461c      	movlt	r4, r3
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 800b09a:	2304      	movs	r3, #4
    TFLITE_DCHECK_LE(shape_size, kMaxSmallSize);
 800b09c:	2c06      	cmp	r4, #6
 800b09e:	7013      	strb	r3, [r2, #0]
 800b0a0:	dd01      	ble.n	800b0a6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20>
 800b0a2:	f00b fe4f 	bl	8016d44 <abort>
    return RuntimeShape(new_shape_size, shape, 1);
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4668      	mov	r0, sp
 800b0ae:	f7fd f9fb 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	4632      	mov	r2, r6
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	a807      	add	r0, sp, #28
 800b0ba:	f7fd f9f5 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    return this->size_ == comp.size_ &&
 800b0be:	9a00      	ldr	r2, [sp, #0]
 800b0c0:	9b07      	ldr	r3, [sp, #28]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d10a      	bne.n	800b0dc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x56>
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
 800b0c6:	0092      	lsls	r2, r2, #2
 800b0c8:	a908      	add	r1, sp, #32
 800b0ca:	a801      	add	r0, sp, #4
 800b0cc:	f00b feb2 	bl	8016e34 <memcmp>
    return this->size_ == comp.size_ &&
 800b0d0:	b920      	cbnz	r0, 800b0dc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x56>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	702b      	strb	r3, [r5, #0]
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
  }
  return true;
}
 800b0d6:	b00e      	add	sp, #56	; 0x38
 800b0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = dims_count - 1; i >= 0; --i) {
 800b0dc:	3c01      	subs	r4, #1
 800b0de:	4626      	mov	r6, r4
 800b0e0:	2e00      	cmp	r6, #0
 800b0e2:	db10      	blt.n	800b106 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x80>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4668      	mov	r0, sp
 800b0e8:	f7fc fa23 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	a807      	add	r0, sp, #28
 800b0f2:	f7fc fa1e 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b0f6:	4287      	cmp	r7, r0
 800b0f8:	d101      	bne.n	800b0fe <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x78>
  for (int i = dims_count - 1; i >= 0; --i) {
 800b0fa:	3e01      	subs	r6, #1
 800b0fc:	e7f0      	b.n	800b0e0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x5a>
    } else if (extended_shape0.Dims(i) == 1) {
 800b0fe:	2f01      	cmp	r7, #1
 800b100:	d125      	bne.n	800b14e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xc8>
      params->broadcast_category =
 800b102:	2302      	movs	r3, #2
      params->broadcast_category =
 800b104:	702b      	strb	r3, [r5, #0]
  if (params->broadcast_category !=
 800b106:	782b      	ldrb	r3, [r5, #0]
 800b108:	1e9a      	subs	r2, r3, #2
 800b10a:	2a01      	cmp	r2, #1
 800b10c:	d8c9      	bhi.n	800b0a2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1c>
  const RuntimeShape* shape_a =
 800b10e:	2b03      	cmp	r3, #3
  params->broadcast_shape[0] = 1;
 800b110:	f04f 0301 	mov.w	r3, #1
  const RuntimeShape* shape_a =
 800b114:	bf19      	ittee	ne
 800b116:	466f      	movne	r7, sp
  const RuntimeShape* shape_b =
 800b118:	ae07      	addne	r6, sp, #28
  const RuntimeShape* shape_a =
 800b11a:	af07      	addeq	r7, sp, #28
  const RuntimeShape* shape_b =
 800b11c:	466e      	moveq	r6, sp
  params->broadcast_shape[4] = 1;
 800b11e:	666b      	str	r3, [r5, #100]	; 0x64
  params->broadcast_shape[1] = 1;
 800b120:	e9c5 3315 	strd	r3, r3, [r5, #84]	; 0x54
  params->broadcast_shape[3] = 1;
 800b124:	e9c5 3317 	strd	r3, r3, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800b128:	2c00      	cmp	r4, #0
 800b12a:	db16      	blt.n	800b15a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd4>
 800b12c:	4621      	mov	r1, r4
 800b12e:	4638      	mov	r0, r7
 800b130:	f7fc f9ff 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b134:	4680      	mov	r8, r0
 800b136:	4621      	mov	r1, r4
 800b138:	4630      	mov	r0, r6
 800b13a:	f7fc f9fa 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b13e:	4580      	cmp	r8, r0
 800b140:	d10d      	bne.n	800b15e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd8>
    params->broadcast_shape[4] *= shape_b->Dims(i);
 800b142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    --i;
 800b144:	3c01      	subs	r4, #1
    params->broadcast_shape[4] *= shape_b->Dims(i);
 800b146:	fb08 f303 	mul.w	r3, r8, r3
 800b14a:	666b      	str	r3, [r5, #100]	; 0x64
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800b14c:	e7ec      	b.n	800b128 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xa2>
    } else if (extended_shape1.Dims(i) == 1) {
 800b14e:	2801      	cmp	r0, #1
 800b150:	d101      	bne.n	800b156 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd0>
      params->broadcast_category =
 800b152:	2303      	movs	r3, #3
 800b154:	e7d6      	b.n	800b104 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x7e>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 800b156:	2304      	movs	r3, #4
 800b158:	702b      	strb	r3, [r5, #0]
  return true;
 800b15a:	2001      	movs	r0, #1
 800b15c:	e7bb      	b.n	800b0d6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x50>
  while (i >= 0 && shape_a->Dims(i) == 1) {
 800b15e:	4621      	mov	r1, r4
 800b160:	4638      	mov	r0, r7
 800b162:	f7fc f9e6 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b166:	2801      	cmp	r0, #1
 800b168:	d10b      	bne.n	800b182 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xfc>
    params->broadcast_shape[3] *= shape_b->Dims(i);
 800b16a:	4621      	mov	r1, r4
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7fc f9e0 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b172:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  while (i >= 0 && shape_a->Dims(i) == 1) {
 800b174:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    params->broadcast_shape[3] *= shape_b->Dims(i);
 800b178:	fb00 f003 	mul.w	r0, r0, r3
 800b17c:	6628      	str	r0, [r5, #96]	; 0x60
  while (i >= 0 && shape_a->Dims(i) == 1) {
 800b17e:	d2ee      	bcs.n	800b15e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd8>
 800b180:	e7eb      	b.n	800b15a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd4>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800b182:	4621      	mov	r1, r4
 800b184:	4638      	mov	r0, r7
 800b186:	f7fc f9d4 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b18a:	4680      	mov	r8, r0
 800b18c:	4621      	mov	r1, r4
 800b18e:	4630      	mov	r0, r6
 800b190:	f7fc f9cf 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b194:	4580      	cmp	r8, r0
 800b196:	d107      	bne.n	800b1a8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x122>
    params->broadcast_shape[2] *= shape_a->Dims(i);
 800b198:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800b19a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    params->broadcast_shape[2] *= shape_a->Dims(i);
 800b19e:	fb08 f303 	mul.w	r3, r8, r3
 800b1a2:	65eb      	str	r3, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800b1a4:	d2ed      	bcs.n	800b182 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xfc>
 800b1a6:	e7d8      	b.n	800b15a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd4>
  while (i >= 0 && shape_b->Dims(i) == 1) {
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7fc f9c1 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b1b0:	2801      	cmp	r0, #1
 800b1b2:	d10b      	bne.n	800b1cc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x146>
    params->broadcast_shape[1] *= shape_a->Dims(i);
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	f7fc f9bb 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b1bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
  while (i >= 0 && shape_b->Dims(i) == 1) {
 800b1be:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    params->broadcast_shape[1] *= shape_a->Dims(i);
 800b1c2:	fb00 f003 	mul.w	r0, r0, r3
 800b1c6:	65a8      	str	r0, [r5, #88]	; 0x58
  while (i >= 0 && shape_b->Dims(i) == 1) {
 800b1c8:	d2ee      	bcs.n	800b1a8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x122>
 800b1ca:	e7c6      	b.n	800b15a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd4>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	f7fc f9af 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7fc f9aa 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b1de:	4580      	cmp	r8, r0
 800b1e0:	d1b9      	bne.n	800b156 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd0>
    params->broadcast_shape[0] *= shape_b->Dims(i);
 800b1e2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800b1e4:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    params->broadcast_shape[0] *= shape_b->Dims(i);
 800b1e8:	fb08 f303 	mul.w	r3, r8, r3
 800b1ec:	656b      	str	r3, [r5, #84]	; 0x54
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800b1ee:	d2ed      	bcs.n	800b1cc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x146>
 800b1f0:	e7b3      	b.n	800b15a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd4>
	...

0800b1f4 <_ZN6tflite12Register_ADDEv>:

  return kTfLiteOk;
}

TFLMRegistration Register_ADD() {
  return tflite::micro::RegisterOp(AddInit, AddPrepare, AddEval);
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	4a06      	ldr	r2, [pc, #24]	; (800b210 <_ZN6tflite12Register_ADDEv+0x1c>)
TFLMRegistration Register_ADD() {
 800b1f8:	b513      	push	{r0, r1, r4, lr}
 800b1fa:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(AddInit, AddPrepare, AddEval);
 800b1fc:	4905      	ldr	r1, [pc, #20]	; (800b214 <_ZN6tflite12Register_ADDEv+0x20>)
 800b1fe:	e9cd 3300 	strd	r3, r3, [sp]
 800b202:	4b05      	ldr	r3, [pc, #20]	; (800b218 <_ZN6tflite12Register_ADDEv+0x24>)
 800b204:	f004 fd36 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800b208:	4620      	mov	r0, r4
 800b20a:	b002      	add	sp, #8
 800b20c:	bd10      	pop	{r4, pc}
 800b20e:	bf00      	nop
 800b210:	0800c01d 	.word	0x0800c01d
 800b214:	0800ae7f 	.word	0x0800ae7f
 800b218:	0800bdfd 	.word	0x0800bdfd

0800b21c <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_>:
bool ReduceDimensionsForBroadcast(const RuntimeShape& input1_shape,
 800b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b220:	b093      	sub	sp, #76	; 0x4c
 800b222:	4698      	mov	r8, r3
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
 800b224:	2301      	movs	r3, #1
 800b226:	9204      	str	r2, [sp, #16]
 800b228:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  std::fill(compressed_output_shape, compressed_output_shape + MAX_DIM, 1);
 800b22a:	f102 0518 	add.w	r5, r2, #24
 800b22e:	4614      	mov	r4, r2
 800b230:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800b234:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800b238:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800b23c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800b240:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800b244:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
      for (; __first != __last; ++__first)
 800b248:	42a5      	cmp	r5, r4
 800b24a:	d002      	beq.n	800b252 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x36>
	*__first = __tmp;
 800b24c:	f844 3b04 	str.w	r3, [r4], #4
 800b250:	e7fa      	b.n	800b248 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x2c>
  const size_t num_input2_dims = input2_shape.DimensionsCount();
 800b252:	460b      	mov	r3, r1
  const size_t num_input1_dims = input1_shape.DimensionsCount();
 800b254:	f850 5b04 	ldr.w	r5, [r0], #4
  bool broadcast_input2 = false;
 800b258:	2700      	movs	r7, #0
  for (size_t i = 1; i <= num_common_dims; i++) {
 800b25a:	2601      	movs	r6, #1
  const size_t num_input2_dims = input2_shape.DimensionsCount();
 800b25c:	f853 4b04 	ldr.w	r4, [r3], #4
      compressed_output_shape[num_compressed_dims - 1] *= input1_dim;
 800b260:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
  bool first_nonunit = true;
 800b264:	46b2      	mov	sl, r6
  bool broadcast_input1 = false;
 800b266:	46bb      	mov	fp, r7
 800b268:	42a5      	cmp	r5, r4
  const size_t num_input2_dims = input2_shape.DimensionsCount();
 800b26a:	9301      	str	r3, [sp, #4]
 800b26c:	462b      	mov	r3, r5
 800b26e:	bf28      	it	cs
 800b270:	4623      	movcs	r3, r4
 800b272:	9305      	str	r3, [sp, #20]
 800b274:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 800b278:	9303      	str	r3, [sp, #12]
 800b27a:	9b01      	ldr	r3, [sp, #4]
 800b27c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b280:	9302      	str	r3, [sp, #8]
  size_t num_compressed_dims = 0;
 800b282:	463b      	mov	r3, r7
  for (size_t i = 1; i <= num_common_dims; i++) {
 800b284:	9905      	ldr	r1, [sp, #20]
 800b286:	428e      	cmp	r6, r1
 800b288:	d832      	bhi.n	800b2f0 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0xd4>
    const size_t input1_dim = input1_dims[num_input1_dims - i];
 800b28a:	9903      	ldr	r1, [sp, #12]
 800b28c:	f851 ed04 	ldr.w	lr, [r1, #-4]!
 800b290:	9103      	str	r1, [sp, #12]
    const size_t input2_dim = input2_dims[num_input2_dims - i];
 800b292:	9902      	ldr	r1, [sp, #8]
 800b294:	f851 9d04 	ldr.w	r9, [r1, #-4]!
 800b298:	9102      	str	r1, [sp, #8]
    if (input1_dim == 0 || input2_dim == 0) {
 800b29a:	f1be 0f00 	cmp.w	lr, #0
 800b29e:	f000 8091 	beq.w	800b3c4 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1a8>
 800b2a2:	f1b9 0f00 	cmp.w	r9, #0
 800b2a6:	f000 808d 	beq.w	800b3c4 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1a8>
    if (input1_dim == 1 && input2_dim == 1) {
 800b2aa:	f1be 0f01 	cmp.w	lr, #1
 800b2ae:	f040 809a 	bne.w	800b3e6 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1ca>
 800b2b2:	f1b9 0f01 	cmp.w	r9, #1
 800b2b6:	f040 8089 	bne.w	800b3cc <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1b0>
  for (size_t i = 1; i <= num_common_dims; i++) {
 800b2ba:	3601      	adds	r6, #1
 800b2bc:	e7e2      	b.n	800b284 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x68>
        num_compressed_dims++;
 800b2be:	3301      	adds	r3, #1
      compressed_input2_shape[num_compressed_dims - 1] *= input2_dim;
 800b2c0:	a912      	add	r1, sp, #72	; 0x48
 800b2c2:	1e5f      	subs	r7, r3, #1
    first_nonunit = false;
 800b2c4:	f04f 0a00 	mov.w	sl, #0
 800b2c8:	f04f 0b01 	mov.w	fp, #1
      compressed_input2_shape[num_compressed_dims - 1] *= input2_dim;
 800b2cc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b2d0:	f857 1c18 	ldr.w	r1, [r7, #-24]
 800b2d4:	fb09 fe01 	mul.w	lr, r9, r1
 800b2d8:	f847 ec18 	str.w	lr, [r7, #-24]
      compressed_output_shape[num_compressed_dims - 1] *= input2_dim;
 800b2dc:	eb03 0e0c 	add.w	lr, r3, ip
 800b2e0:	f852 702e 	ldr.w	r7, [r2, lr, lsl #2]
 800b2e4:	fb09 f707 	mul.w	r7, r9, r7
 800b2e8:	f842 702e 	str.w	r7, [r2, lr, lsl #2]
 800b2ec:	4657      	mov	r7, sl
 800b2ee:	e7e4      	b.n	800b2ba <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x9e>
  if (num_input1_dims > num_input2_dims) {
 800b2f0:	42a5      	cmp	r5, r4
 800b2f2:	d91c      	bls.n	800b32e <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x112>
    if (!broadcast_input2) {
 800b2f4:	b907      	cbnz	r7, 800b2f8 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0xdc>
      num_compressed_dims++;
 800b2f6:	3301      	adds	r3, #1
      compressed_output_shape[num_compressed_dims - 1] *= input1_dim;
 800b2f8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b2fc:	3b01      	subs	r3, #1
    for (size_t i = 0; i < num_input1_dims - num_input2_dims; i++) {
 800b2fe:	2600      	movs	r6, #0
 800b300:	1b2c      	subs	r4, r5, r4
      compressed_output_shape[num_compressed_dims - 1] *= input1_dim;
 800b302:	3901      	subs	r1, #1
 800b304:	eb02 0281 	add.w	r2, r2, r1, lsl #2
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b308:	a912      	add	r1, sp, #72	; 0x48
 800b30a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (size_t i = 0; i < num_input1_dims - num_input2_dims; i++) {
 800b30e:	42b4      	cmp	r4, r6
 800b310:	d92d      	bls.n	800b36e <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x152>
      const size_t input1_dim = input1_dims[i];
 800b312:	f850 1026 	ldr.w	r1, [r0, r6, lsl #2]
      if (input1_dim == 0) {
 800b316:	2900      	cmp	r1, #0
 800b318:	d054      	beq.n	800b3c4 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1a8>
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b31a:	f853 7c30 	ldr.w	r7, [r3, #-48]
    for (size_t i = 0; i < num_input1_dims - num_input2_dims; i++) {
 800b31e:	3601      	adds	r6, #1
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b320:	434f      	muls	r7, r1
 800b322:	f843 7c30 	str.w	r7, [r3, #-48]
      compressed_output_shape[num_compressed_dims - 1] *= input1_dim;
 800b326:	6817      	ldr	r7, [r2, #0]
 800b328:	4379      	muls	r1, r7
 800b32a:	6011      	str	r1, [r2, #0]
    for (size_t i = 0; i < num_input1_dims - num_input2_dims; i++) {
 800b32c:	e7ef      	b.n	800b30e <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0xf2>
  } else if (num_input2_dims > num_input1_dims) {
 800b32e:	d21e      	bcs.n	800b36e <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x152>
    if (!broadcast_input1) {
 800b330:	f1bb 0f00 	cmp.w	fp, #0
 800b334:	d100      	bne.n	800b338 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x11c>
      num_compressed_dims++;
 800b336:	3301      	adds	r3, #1
      compressed_output_shape[num_compressed_dims - 1] *= input2_dim;
 800b338:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
      compressed_input2_shape[num_compressed_dims - 1] *= input2_dim;
 800b33c:	a912      	add	r1, sp, #72	; 0x48
 800b33e:	3b01      	subs	r3, #1
    for (size_t i = 0; i < num_input2_dims - num_input1_dims; i++) {
 800b340:	2700      	movs	r7, #0
      compressed_output_shape[num_compressed_dims - 1] *= input2_dim;
 800b342:	3801      	subs	r0, #1
    for (size_t i = 0; i < num_input2_dims - num_input1_dims; i++) {
 800b344:	1b64      	subs	r4, r4, r5
      compressed_input2_shape[num_compressed_dims - 1] *= input2_dim;
 800b346:	eb01 0383 	add.w	r3, r1, r3, lsl #2
      compressed_output_shape[num_compressed_dims - 1] *= input2_dim;
 800b34a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (size_t i = 0; i < num_input2_dims - num_input1_dims; i++) {
 800b34e:	42bc      	cmp	r4, r7
 800b350:	d90d      	bls.n	800b36e <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x152>
      const size_t input2_dim = input2_dims[i];
 800b352:	9901      	ldr	r1, [sp, #4]
 800b354:	f851 0027 	ldr.w	r0, [r1, r7, lsl #2]
      if (input2_dim == 0) {
 800b358:	b3a0      	cbz	r0, 800b3c4 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1a8>
      compressed_input2_shape[num_compressed_dims - 1] *= input2_dim;
 800b35a:	f853 6c18 	ldr.w	r6, [r3, #-24]
    for (size_t i = 0; i < num_input2_dims - num_input1_dims; i++) {
 800b35e:	3701      	adds	r7, #1
      compressed_input2_shape[num_compressed_dims - 1] *= input2_dim;
 800b360:	4346      	muls	r6, r0
 800b362:	f843 6c18 	str.w	r6, [r3, #-24]
      compressed_output_shape[num_compressed_dims - 1] *= input2_dim;
 800b366:	6816      	ldr	r6, [r2, #0]
 800b368:	4370      	muls	r0, r6
 800b36a:	6010      	str	r0, [r2, #0]
    for (size_t i = 0; i < num_input2_dims - num_input1_dims; i++) {
 800b36c:	e7ef      	b.n	800b34e <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x132>
 800b36e:	2201      	movs	r2, #1
 800b370:	2300      	movs	r3, #0
    input2_stride *= compressed_input2_shape[i];
 800b372:	a80c      	add	r0, sp, #48	; 0x30
    for (size_t i = 0; i < num_input2_dims - num_input1_dims; i++) {
 800b374:	4611      	mov	r1, r2
    compressed_input1_stride[i] = input1_stride;
 800b376:	9c04      	ldr	r4, [sp, #16]
 800b378:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    input1_stride *= compressed_input1_shape[i];
 800b37c:	ac06      	add	r4, sp, #24
    compressed_input2_stride[i] = input2_stride;
 800b37e:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    input1_stride *= compressed_input1_shape[i];
 800b382:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800b386:	4361      	muls	r1, r4
    input2_stride *= compressed_input2_shape[i];
 800b388:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  for (int i = 0; i < MAX_DIM; ++i) {
 800b38c:	3301      	adds	r3, #1
    input2_stride *= compressed_input2_shape[i];
 800b38e:	4362      	muls	r2, r4
  for (int i = 0; i < MAX_DIM; ++i) {
 800b390:	2b06      	cmp	r3, #6
 800b392:	d1f0      	bne.n	800b376 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x15a>
  for (int i = 0; i < MAX_DIM; ++i) {
 800b394:	2300      	movs	r3, #0
 800b396:	461a      	mov	r2, r3
    if (compressed_input1_shape[i] != compressed_input2_shape[i]) {
 800b398:	a906      	add	r1, sp, #24
 800b39a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800b39e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800b3a2:	428c      	cmp	r4, r1
 800b3a4:	d004      	beq.n	800b3b0 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x194>
      if (compressed_input1_shape[i] == 1) {
 800b3a6:	2c01      	cmp	r4, #1
 800b3a8:	d107      	bne.n	800b3ba <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x19e>
        compressed_input1_stride[i] = 0;
 800b3aa:	9904      	ldr	r1, [sp, #16]
 800b3ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < MAX_DIM; ++i) {
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	2b06      	cmp	r3, #6
 800b3b4:	d1f0      	bne.n	800b398 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x17c>
  return true;
 800b3b6:	2001      	movs	r0, #1
 800b3b8:	e005      	b.n	800b3c6 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1aa>
        TFLITE_DCHECK_EQ(compressed_input2_shape[i], 1);
 800b3ba:	2901      	cmp	r1, #1
 800b3bc:	d139      	bne.n	800b432 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x216>
        compressed_input2_stride[i] = 0;
 800b3be:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
 800b3c2:	e7f5      	b.n	800b3b0 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x194>
      return false;
 800b3c4:	2000      	movs	r0, #0
}
 800b3c6:	b013      	add	sp, #76	; 0x4c
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(!broadcast_input1 || !broadcast_input2);
 800b3cc:	f1bb 0f00 	cmp.w	fp, #0
 800b3d0:	f43f af75 	beq.w	800b2be <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0xa2>
 800b3d4:	2f00      	cmp	r7, #0
 800b3d6:	f43f af73 	beq.w	800b2c0 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0xa4>
 800b3da:	4b28      	ldr	r3, [pc, #160]	; (800b47c <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x260>)
 800b3dc:	214a      	movs	r1, #74	; 0x4a
 800b3de:	4a28      	ldr	r2, [pc, #160]	; (800b480 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x264>)
 800b3e0:	4828      	ldr	r0, [pc, #160]	; (800b484 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x268>)
 800b3e2:	f00b fcb7 	bl	8016d54 <__assert_func>
 800b3e6:	f1bb 0f00 	cmp.w	fp, #0
 800b3ea:	d11b      	bne.n	800b424 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x208>
    } else if (input2_dim == 1) {
 800b3ec:	f1b9 0f01 	cmp.w	r9, #1
 800b3f0:	d121      	bne.n	800b436 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x21a>
      if (!broadcast_input2) {
 800b3f2:	b907      	cbnz	r7, 800b3f6 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1da>
        num_compressed_dims++;
 800b3f4:	3301      	adds	r3, #1
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b3f6:	a912      	add	r1, sp, #72	; 0x48
 800b3f8:	1e5f      	subs	r7, r3, #1
    first_nonunit = false;
 800b3fa:	f04f 0a00 	mov.w	sl, #0
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b3fe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b402:	f857 1c30 	ldr.w	r1, [r7, #-48]
 800b406:	fb0e f901 	mul.w	r9, lr, r1
 800b40a:	f847 9c30 	str.w	r9, [r7, #-48]
      compressed_output_shape[num_compressed_dims - 1] *= input1_dim;
 800b40e:	eb03 090c 	add.w	r9, r3, ip
 800b412:	f852 7029 	ldr.w	r7, [r2, r9, lsl #2]
 800b416:	fb0e f707 	mul.w	r7, lr, r7
 800b41a:	f842 7029 	str.w	r7, [r2, r9, lsl #2]
 800b41e:	2701      	movs	r7, #1
      compressed_output_shape[num_compressed_dims - 1] *= input1_dim;
 800b420:	46d3      	mov	fp, sl
 800b422:	e74a      	b.n	800b2ba <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x9e>
    assert(!broadcast_input1 || !broadcast_input2);
 800b424:	2f00      	cmp	r7, #0
 800b426:	d1d8      	bne.n	800b3da <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1be>
    } else if (input2_dim == 1) {
 800b428:	f1b9 0f01 	cmp.w	r9, #1
 800b42c:	d0e2      	beq.n	800b3f4 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x1d8>
      TFLITE_DCHECK(input1_dim == input2_dim);
 800b42e:	45ce      	cmp	lr, r9
 800b430:	d007      	beq.n	800b442 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x226>
 800b432:	f00b fc87 	bl	8016d44 <abort>
 800b436:	45ce      	cmp	lr, r9
 800b438:	d1fb      	bne.n	800b432 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x216>
      if (broadcast_input1 || broadcast_input2 || first_nonunit) {
 800b43a:	b917      	cbnz	r7, 800b442 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x226>
 800b43c:	f1ba 0f00 	cmp.w	sl, #0
 800b440:	d000      	beq.n	800b444 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x228>
        num_compressed_dims++;
 800b442:	3301      	adds	r3, #1
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b444:	a912      	add	r1, sp, #72	; 0x48
 800b446:	1e5f      	subs	r7, r3, #1
    first_nonunit = false;
 800b448:	f04f 0a00 	mov.w	sl, #0
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b44c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b450:	f857 1c30 	ldr.w	r1, [r7, #-48]
 800b454:	fb0e f901 	mul.w	r9, lr, r1
      compressed_input2_shape[num_compressed_dims - 1] *= input1_dim;
 800b458:	f857 1c18 	ldr.w	r1, [r7, #-24]
      compressed_input1_shape[num_compressed_dims - 1] *= input1_dim;
 800b45c:	f847 9c30 	str.w	r9, [r7, #-48]
      compressed_input2_shape[num_compressed_dims - 1] *= input1_dim;
 800b460:	fb0e f901 	mul.w	r9, lr, r1
 800b464:	f847 9c18 	str.w	r9, [r7, #-24]
      compressed_output_shape[num_compressed_dims - 1] *= input1_dim;
 800b468:	eb03 090c 	add.w	r9, r3, ip
 800b46c:	f852 7029 	ldr.w	r7, [r2, r9, lsl #2]
 800b470:	fb0e f707 	mul.w	r7, lr, r7
 800b474:	f842 7029 	str.w	r7, [r2, r9, lsl #2]
 800b478:	4657      	mov	r7, sl
 800b47a:	e7d1      	b.n	800b420 <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_+0x204>
 800b47c:	080fbb36 	.word	0x080fbb36
 800b480:	080fbb95 	.word	0x080fbb95
 800b484:	080fbb5d 	.word	0x080fbb5d

0800b488 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E>:
inline void BroadcastAddRecursiveDimensions(
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (dimension > 0) {
 800b48c:	f1b1 0b00 	subs.w	fp, r1, #0
inline void BroadcastAddRecursiveDimensions(
 800b490:	b08f      	sub	sp, #60	; 0x3c
 800b492:	4607      	mov	r7, r0
 800b494:	4616      	mov	r6, r2
 800b496:	461d      	mov	r5, r3
 800b498:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  if (dimension > 0) {
 800b49a:	dd39      	ble.n	800b510 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x88>
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b49c:	ea4f 088b 	mov.w	r8, fp, lsl #2
 800b4a0:	f04f 0900 	mov.w	r9, #0
      BroadcastAddRecursiveDimensions(
 800b4a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b4a8:	eb04 0308 	add.w	r3, r4, r8
 800b4ac:	930b      	str	r3, [sp, #44]	; 0x2c
      *input1_offset_p += compressed_input1_stride[dimension];
 800b4ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b4b0:	eb03 0a08 	add.w	sl, r3, r8
      *input2_offset_p += compressed_input2_stride[dimension];
 800b4b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b4b6:	4498      	add	r8, r3
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	454b      	cmp	r3, r9
 800b4be:	d96f      	bls.n	800b5a0 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x118>
      size_t input1_offset_c = *input1_offset_p;
 800b4c0:	6833      	ldr	r3, [r6, #0]
      BroadcastAddRecursiveDimensions(
 800b4c2:	aa0c      	add	r2, sp, #48	; 0x30
 800b4c4:	4659      	mov	r1, fp
 800b4c6:	4638      	mov	r0, r7
      size_t input1_offset_c = *input1_offset_p;
 800b4c8:	930c      	str	r3, [sp, #48]	; 0x30
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b4ca:	f109 0901 	add.w	r9, r9, #1
      size_t input2_offset_c = *input2_offset_p;
 800b4ce:	682b      	ldr	r3, [r5, #0]
 800b4d0:	930d      	str	r3, [sp, #52]	; 0x34
      BroadcastAddRecursiveDimensions(
 800b4d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b4d4:	9308      	str	r3, [sp, #32]
 800b4d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4d8:	9307      	str	r3, [sp, #28]
 800b4da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b4dc:	9306      	str	r3, [sp, #24]
 800b4de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4e0:	9305      	str	r3, [sp, #20]
 800b4e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b4e4:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800b4e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b4ea:	9302      	str	r3, [sp, #8]
 800b4ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	ab0d      	add	r3, sp, #52	; 0x34
 800b4f6:	f7ff ffc7 	bl	800b488 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E>
      *input1_offset_p += compressed_input1_stride[dimension];
 800b4fa:	f8da 2000 	ldr.w	r2, [sl]
 800b4fe:	6833      	ldr	r3, [r6, #0]
 800b500:	4413      	add	r3, r2
 800b502:	6033      	str	r3, [r6, #0]
      *input2_offset_p += compressed_input2_stride[dimension];
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	f8d8 2000 	ldr.w	r2, [r8]
 800b50a:	4413      	add	r3, r2
 800b50c:	602b      	str	r3, [r5, #0]
 800b50e:	e7d3      	b.n	800b4b8 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x30>
    TFLITE_DCHECK(dimension == 0);
 800b510:	d001      	beq.n	800b516 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x8e>
 800b512:	f00b fc17 	bl	8016d44 <abort>
    bool input1_is_broadcast = compressed_input1_stride[dimension] == 0;
 800b516:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b518:	6819      	ldr	r1, [r3, #0]
    bool input2_is_broadcast = compressed_input2_stride[dimension] == 0;
 800b51a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b51c:	681a      	ldr	r2, [r3, #0]
    TFLITE_DCHECK(!(input1_is_broadcast && input2_is_broadcast));
 800b51e:	b909      	cbnz	r1, 800b524 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x9c>
 800b520:	2a00      	cmp	r2, #0
 800b522:	d0f6      	beq.n	800b512 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x8a>
    const T* input1_data_ptr = input1_data + *input1_offset_p;
 800b524:	6830      	ldr	r0, [r6, #0]
 800b526:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b528:	eb03 0900 	add.w	r9, r3, r0
    const T* input2_data_ptr = input2_data + *input2_offset_p;
 800b52c:	6828      	ldr	r0, [r5, #0]
 800b52e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b530:	eb03 0a00 	add.w	sl, r3, r0
    T* output_data_ptr = output_data + *output_offset;
 800b534:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b536:	6818      	ldr	r0, [r3, #0]
 800b538:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b53a:	eb03 0800 	add.w	r8, r3, r0
 800b53e:	6823      	ldr	r3, [r4, #0]
  CheckArithmeticParams(params);
 800b540:	4638      	mov	r0, r7
 800b542:	930b      	str	r3, [sp, #44]	; 0x2c
    if (input1_is_broadcast) {
 800b544:	b981      	cbnz	r1, 800b568 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0xe0>
  CheckArithmeticParams(params);
 800b546:	f7ff fc89 	bl	800ae5c <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE>
  for (int i = 0; i < size; ++i) {
 800b54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b54c:	455b      	cmp	r3, fp
 800b54e:	dd3f      	ble.n	800b5d0 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x148>
    output_data[i] = binary_func(input1_data[0], input2_data[i], params);
 800b550:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 800b554:	463a      	mov	r2, r7
 800b556:	f999 0000 	ldrsb.w	r0, [r9]
 800b55a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b55c:	4798      	blx	r3
 800b55e:	f808 000b 	strb.w	r0, [r8, fp]
  for (int i = 0; i < size; ++i) {
 800b562:	f10b 0b01 	add.w	fp, fp, #1
 800b566:	e7f0      	b.n	800b54a <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0xc2>
    } else if (input2_is_broadcast) {
 800b568:	b9ea      	cbnz	r2, 800b5a6 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x11e>
  CheckArithmeticParams(params);
 800b56a:	f7ff fc77 	bl	800ae5c <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE>
  for (int i = 0; i < size; ++i) {
 800b56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b570:	455b      	cmp	r3, fp
 800b572:	dd0b      	ble.n	800b58c <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x104>
    output_data[i] = binary_func(input1_data[i], input2_data[0], params);
 800b574:	f919 000b 	ldrsb.w	r0, [r9, fp]
 800b578:	463a      	mov	r2, r7
 800b57a:	f99a 1000 	ldrsb.w	r1, [sl]
 800b57e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b580:	4798      	blx	r3
 800b582:	f808 000b 	strb.w	r0, [r8, fp]
  for (int i = 0; i < size; ++i) {
 800b586:	f10b 0b01 	add.w	fp, fp, #1
 800b58a:	e7f0      	b.n	800b56e <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0xe6>
      *input1_offset_p += compressed_output_shape[dimension];
 800b58c:	6833      	ldr	r3, [r6, #0]
 800b58e:	6822      	ldr	r2, [r4, #0]
 800b590:	4413      	add	r3, r2
 800b592:	6033      	str	r3, [r6, #0]
    *output_offset += compressed_output_shape[dimension];
 800b594:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b596:	6822      	ldr	r2, [r4, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4413      	add	r3, r2
 800b59c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b59e:	6013      	str	r3, [r2, #0]
}
 800b5a0:	b00f      	add	sp, #60	; 0x3c
 800b5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CheckArithmeticParams(params);
 800b5a6:	f7ff fc59 	bl	800ae5c <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE>
  for (int i = 0; i < size; ++i) {
 800b5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ac:	455b      	cmp	r3, fp
 800b5ae:	dd0b      	ble.n	800b5c8 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x140>
    output_data[i] = binary_func(input1_data[i], input2_data[i], params);
 800b5b0:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 800b5b4:	463a      	mov	r2, r7
 800b5b6:	f919 000b 	ldrsb.w	r0, [r9, fp]
 800b5ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b5bc:	4798      	blx	r3
 800b5be:	f808 000b 	strb.w	r0, [r8, fp]
  for (int i = 0; i < size; ++i) {
 800b5c2:	f10b 0b01 	add.w	fp, fp, #1
 800b5c6:	e7f0      	b.n	800b5aa <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x122>
      *input1_offset_p += compressed_output_shape[dimension];
 800b5c8:	6833      	ldr	r3, [r6, #0]
 800b5ca:	6822      	ldr	r2, [r4, #0]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	6033      	str	r3, [r6, #0]
      *input2_offset_p += compressed_output_shape[dimension];
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	6822      	ldr	r2, [r4, #0]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	e7dc      	b.n	800b594 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E+0x10c>

0800b5da <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_>:
        input1_data[c] + input2_data[c], activation_min, activation_max);
  }
}

template <typename T>
inline void BroadcastAddRecursiveDimensions(
 800b5da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int dimension, size_t* input1_offset_p, size_t* input2_offset_p,
    size_t* output_offset, size_t* compressed_input1_stride,
    size_t* compressed_input2_stride, size_t* compressed_output_shape,
    T activation_min, T activation_max, const T* input1_data,
    const T* input2_data, T* output_data) {
  if (dimension > 0) {
 800b5de:	2800      	cmp	r0, #0
inline void BroadcastAddRecursiveDimensions(
 800b5e0:	b08d      	sub	sp, #52	; 0x34
 800b5e2:	460e      	mov	r6, r1
 800b5e4:	4614      	mov	r4, r2
 800b5e6:	4698      	mov	r8, r3
 800b5e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
  if (dimension > 0) {
 800b5ea:	dd34      	ble.n	800b656 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x7c>
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b5ec:	0087      	lsls	r7, r0, #2
      BroadcastAddRecursiveDimensions(
          dimension - 1, &input1_offset_c, &input2_offset_c, output_offset,
          compressed_input1_stride, compressed_input2_stride,
          compressed_output_shape, activation_min, activation_max, input1_data,
          input2_data, output_data);
      *input1_offset_p += compressed_input1_stride[dimension];
 800b5ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b5f0:	f04f 0900 	mov.w	r9, #0
      *input1_offset_p += compressed_input1_stride[dimension];
 800b5f4:	eb03 0a07 	add.w	sl, r3, r7
      *input2_offset_p += compressed_input2_stride[dimension];
 800b5f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b5fa:	eb05 0b07 	add.w	fp, r5, r7
      *input2_offset_p += compressed_input2_stride[dimension];
 800b5fe:	441f      	add	r7, r3
      BroadcastAddRecursiveDimensions(
 800b600:	1e43      	subs	r3, r0, #1
 800b602:	9309      	str	r3, [sp, #36]	; 0x24
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b604:	f8db 3000 	ldr.w	r3, [fp]
 800b608:	454b      	cmp	r3, r9
 800b60a:	d95d      	bls.n	800b6c8 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xee>
      size_t input1_offset_c = *input1_offset_p;
 800b60c:	6833      	ldr	r3, [r6, #0]
      BroadcastAddRecursiveDimensions(
 800b60e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b610:	a90a      	add	r1, sp, #40	; 0x28
 800b612:	9809      	ldr	r0, [sp, #36]	; 0x24
      size_t input1_offset_c = *input1_offset_p;
 800b614:	930a      	str	r3, [sp, #40]	; 0x28
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b616:	f109 0901 	add.w	r9, r9, #1
      size_t input2_offset_c = *input2_offset_p;
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	930b      	str	r3, [sp, #44]	; 0x2c
      BroadcastAddRecursiveDimensions(
 800b61e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b620:	9307      	str	r3, [sp, #28]
 800b622:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b624:	9306      	str	r3, [sp, #24]
 800b626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b628:	9305      	str	r3, [sp, #20]
 800b62a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b62c:	9304      	str	r3, [sp, #16]
 800b62e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b630:	e9cd 5302 	strd	r5, r3, [sp, #8]
 800b634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b636:	9301      	str	r3, [sp, #4]
 800b638:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	4643      	mov	r3, r8
 800b63e:	f7ff ffcc 	bl	800b5da <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_>
      *input1_offset_p += compressed_input1_stride[dimension];
 800b642:	f8da 2000 	ldr.w	r2, [sl]
 800b646:	6833      	ldr	r3, [r6, #0]
 800b648:	4413      	add	r3, r2
 800b64a:	6033      	str	r3, [r6, #0]
      *input2_offset_p += compressed_input2_stride[dimension];
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	4413      	add	r3, r2
 800b652:	6023      	str	r3, [r4, #0]
 800b654:	e7d6      	b.n	800b604 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x2a>
    }
  } else {
    TFLITE_DCHECK(dimension == 0);
 800b656:	d001      	beq.n	800b65c <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x82>
 800b658:	f00b fb74 	bl	8016d44 <abort>
    bool input1_is_broadcast = compressed_input1_stride[dimension] == 0;
 800b65c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b65e:	681f      	ldr	r7, [r3, #0]
    bool input2_is_broadcast = compressed_input2_stride[dimension] == 0;
 800b660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b662:	6819      	ldr	r1, [r3, #0]
    TFLITE_DCHECK(!(input1_is_broadcast && input2_is_broadcast));
 800b664:	b90f      	cbnz	r7, 800b66a <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x90>
 800b666:	2900      	cmp	r1, #0
 800b668:	d0f6      	beq.n	800b658 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x7e>
    const T* input1_data_ptr = input1_data + *input1_offset_p;
 800b66a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b66c:	f8d6 e000 	ldr.w	lr, [r6]
    const T* input2_data_ptr = input2_data + *input2_offset_p;
 800b670:	6820      	ldr	r0, [r4, #0]
    const T* input1_data_ptr = input1_data + *input1_offset_p;
 800b672:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
    const T* input2_data_ptr = input2_data + *input2_offset_p;
 800b676:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    T* output_data_ptr = output_data + *output_offset;
 800b678:	f8d8 2000 	ldr.w	r2, [r8]
    const T* input2_data_ptr = input2_data + *input2_offset_p;
 800b67c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    T* output_data_ptr = output_data + *output_offset;
 800b680:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b682:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b686:	682b      	ldr	r3, [r5, #0]
    if (input1_is_broadcast) {
 800b688:	b95f      	cbnz	r7, 800b6a2 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xc8>
      // input1 is broadcast.
      AddBroadcast<T>(input2_data_ptr, input1_data_ptr, output_data_ptr,
 800b68a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b68c:	9101      	str	r1, [sp, #4]
 800b68e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b690:	9100      	str	r1, [sp, #0]
 800b692:	4661      	mov	r1, ip
 800b694:	f7ff fcdc 	bl	800b050 <_ZN6tflite13reference_ops12AddBroadcastIlEEvPKT_S4_PS2_jS2_S2_>
      // Add element-wise.
      AddElementwise<T>(input1_data_ptr, input2_data_ptr, output_data_ptr,
                        compressed_output_shape[dimension], activation_min,
                        activation_max);
      *input1_offset_p += compressed_output_shape[dimension];
      *input2_offset_p += compressed_output_shape[dimension];
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	682a      	ldr	r2, [r5, #0]
 800b69c:	4413      	add	r3, r2
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	e00c      	b.n	800b6bc <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xe2>
    } else if (input2_is_broadcast) {
 800b6a2:	b9a1      	cbnz	r1, 800b6ce <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xf4>
      AddBroadcast<T>(input1_data_ptr, input2_data_ptr, output_data_ptr,
 800b6a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b6a6:	9101      	str	r1, [sp, #4]
 800b6a8:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b6aa:	9100      	str	r1, [sp, #0]
 800b6ac:	4601      	mov	r1, r0
 800b6ae:	4660      	mov	r0, ip
 800b6b0:	f7ff fcce 	bl	800b050 <_ZN6tflite13reference_ops12AddBroadcastIlEEvPKT_S4_PS2_jS2_S2_>
      *input1_offset_p += compressed_output_shape[dimension];
 800b6b4:	6833      	ldr	r3, [r6, #0]
 800b6b6:	682a      	ldr	r2, [r5, #0]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	6033      	str	r3, [r6, #0]
    }
    *output_offset += compressed_output_shape[dimension];
 800b6bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b6c0:	682a      	ldr	r2, [r5, #0]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f8c8 3000 	str.w	r3, [r8]
  }
}
 800b6c8:	b00d      	add	sp, #52	; 0x34
 800b6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t c = 0;
 800b6ce:	f04f 0900 	mov.w	r9, #0
  for (; c < size; ++c) {
 800b6d2:	454b      	cmp	r3, r9
 800b6d4:	d012      	beq.n	800b6fc <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x122>
    output_data[c] = ActivationFunctionWithMinMax<int32_t>(
 800b6d6:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
 800b6da:	f85c 1029 	ldr.w	r1, [ip, r9, lsl #2]
 800b6de:	4439      	add	r1, r7
 800b6e0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b6e2:	42b9      	cmp	r1, r7
 800b6e4:	bfb8      	it	lt
 800b6e6:	4639      	movlt	r1, r7
 800b6e8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b6ea:	42b9      	cmp	r1, r7
 800b6ec:	bfd4      	ite	le
 800b6ee:	f842 1029 	strle.w	r1, [r2, r9, lsl #2]
 800b6f2:	f842 7029 	strgt.w	r7, [r2, r9, lsl #2]
  for (; c < size; ++c) {
 800b6f6:	f109 0901 	add.w	r9, r9, #1
 800b6fa:	e7ea      	b.n	800b6d2 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xf8>
      *input1_offset_p += compressed_output_shape[dimension];
 800b6fc:	4473      	add	r3, lr
 800b6fe:	6033      	str	r3, [r6, #0]
 800b700:	e7ca      	b.n	800b698 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xbe>

0800b702 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_>:

// This function is used for 8-bit as well as for 16-bit, but the accumulator
// is 32-bit for both cases. The overflow does not happen due to the
// choice of the shift (20 or 15, accordingly - see add.cc for more comments).
template <typename T>
inline void BroadcastAddRecursiveDimensions(
 800b702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b706:	b08f      	sub	sp, #60	; 0x3c
 800b708:	4617      	mov	r7, r2
 800b70a:	461e      	mov	r6, r3
    const ArithmeticParams& params, int dimension, size_t* input1_offset_p,
    size_t* input2_offset_p, size_t* output_offset,
    size_t* compressed_input1_stride, size_t* compressed_input2_stride,
    size_t* compressed_output_shape, const T* input1_data, const T* input2_data,
    T* output_data) {
  for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b70c:	008b      	lsls	r3, r1, #2
 800b70e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
inline void BroadcastAddRecursiveDimensions(
 800b710:	4604      	mov	r4, r0
 800b712:	4689      	mov	r9, r1
  for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b714:	f04f 0800 	mov.w	r8, #0
 800b718:	eb02 0b03 	add.w	fp, r2, r3
          std::min(params.quantized_activation_max,
                   std::max(params.quantized_activation_min, raw_output));
      output_data[*output_offset] = static_cast<T>(clamped_output);
      ++(*output_offset);
    }
    *input1_offset_p += compressed_input1_stride[dimension];
 800b71c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b71e:	eb02 0a03 	add.w	sl, r2, r3
    *input2_offset_p += compressed_input2_stride[dimension];
 800b722:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b724:	18d3      	adds	r3, r2, r3
 800b726:	9309      	str	r3, [sp, #36]	; 0x24
      BroadcastAddRecursiveDimensions(
 800b728:	1e4b      	subs	r3, r1, #1
 800b72a:	930a      	str	r3, [sp, #40]	; 0x28
  for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b72c:	f8db 3000 	ldr.w	r3, [fp]
 800b730:	4543      	cmp	r3, r8
 800b732:	d95d      	bls.n	800b7f0 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_+0xee>
    if (dimension > 0) {
 800b734:	f1b9 0f00 	cmp.w	r9, #0
 800b738:	dd24      	ble.n	800b784 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_+0x82>
      size_t input1_offset_c = *input1_offset_p;
 800b73a:	683b      	ldr	r3, [r7, #0]
      BroadcastAddRecursiveDimensions(
 800b73c:	aa0c      	add	r2, sp, #48	; 0x30
 800b73e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b740:	4620      	mov	r0, r4
      size_t input1_offset_c = *input1_offset_p;
 800b742:	930c      	str	r3, [sp, #48]	; 0x30
      size_t input2_offset_c = *input2_offset_p;
 800b744:	6833      	ldr	r3, [r6, #0]
 800b746:	930d      	str	r3, [sp, #52]	; 0x34
      BroadcastAddRecursiveDimensions(
 800b748:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b74a:	9306      	str	r3, [sp, #24]
 800b74c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b74e:	9305      	str	r3, [sp, #20]
 800b750:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b756:	9303      	str	r3, [sp, #12]
 800b758:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	ab0d      	add	r3, sp, #52	; 0x34
 800b766:	f7ff ffcc 	bl	800b702 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_>
    *input1_offset_p += compressed_input1_stride[dimension];
 800b76a:	f8da 2000 	ldr.w	r2, [sl]
  for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b76e:	f108 0801 	add.w	r8, r8, #1
    *input1_offset_p += compressed_input1_stride[dimension];
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	4413      	add	r3, r2
    *input2_offset_p += compressed_input2_stride[dimension];
 800b776:	9a09      	ldr	r2, [sp, #36]	; 0x24
    *input1_offset_p += compressed_input1_stride[dimension];
 800b778:	603b      	str	r3, [r7, #0]
    *input2_offset_p += compressed_input2_stride[dimension];
 800b77a:	6833      	ldr	r3, [r6, #0]
 800b77c:	6812      	ldr	r2, [r2, #0]
 800b77e:	4413      	add	r3, r2
 800b780:	6033      	str	r3, [r6, #0]
  for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b782:	e7d3      	b.n	800b72c <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_+0x2a>
      TFLITE_DCHECK(dimension == 0);
 800b784:	d001      	beq.n	800b78a <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_+0x88>
 800b786:	f00b fadd 	bl	8016d44 <abort>
          params.input2_offset + input2_data[*input2_offset_p];
 800b78a:	6833      	ldr	r3, [r6, #0]
 800b78c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
      const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
 800b78e:	69a0      	ldr	r0, [r4, #24]
          params.input2_offset + input2_data[*input2_offset_p];
 800b790:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
      const int32_t input2_val =
 800b794:	68a3      	ldr	r3, [r4, #8]
          params.input1_offset + input1_data[*input1_offset_p];
 800b796:	9a1c      	ldr	r2, [sp, #112]	; 0x70
      const int32_t input2_val =
 800b798:	441d      	add	r5, r3
          params.input1_offset + input1_data[*input1_offset_p];
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
 800b7a0:	4085      	lsls	r5, r0
      const int32_t input1_val =
 800b7a2:	6862      	ldr	r2, [r4, #4]
 800b7a4:	4413      	add	r3, r2
      const int32_t scaled_input1_val =
 800b7a6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 800b7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b7ae:	f7ff fb83 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800b7b2:	900b      	str	r0, [sp, #44]	; 0x2c
      const int32_t scaled_input2_val =
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 800b7ba:	f7ff fb7d 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800b7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7c0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800b7c4:	4418      	add	r0, r3
 800b7c6:	f7ff fb77 	bl	800aeb8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
      output_data[*output_offset] = static_cast<T>(clamped_output);
 800b7ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b7cc:	681a      	ldr	r2, [r3, #0]
              raw_sum, params.output_multiplier, params.output_shift) +
 800b7ce:	68e3      	ldr	r3, [r4, #12]
 800b7d0:	4418      	add	r0, r3
      output_data[*output_offset] = static_cast<T>(clamped_output);
 800b7d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b7d4:	4298      	cmp	r0, r3
 800b7d6:	bfb8      	it	lt
 800b7d8:	4618      	movlt	r0, r3
 800b7da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b7dc:	4298      	cmp	r0, r3
 800b7de:	bfa8      	it	ge
 800b7e0:	4618      	movge	r0, r3
 800b7e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b7e4:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
      ++(*output_offset);
 800b7e8:	3201      	adds	r2, #1
 800b7ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	e7bc      	b.n	800b76a <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_+0x68>
  }
}
 800b7f0:	b00f      	add	sp, #60	; 0x3c
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b7f8 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_>:
                              TfLiteEvalTensor* output) {
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  op_params.left_shift = data->left_shift;
 800b7fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                              TfLiteEvalTensor* output) {
 800b7fe:	b0e9      	sub	sp, #420	; 0x1a4
  op_params.left_shift = data->left_shift;
 800b800:	9254      	str	r2, [sp, #336]	; 0x150
                              TfLiteEvalTensor* output) {
 800b802:	ad72      	add	r5, sp, #456	; 0x1c8
  op_params.input1_offset = data->input1_offset;
 800b804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      tflite::micro::GetTensorShape(input1),
 800b806:	ac40      	add	r4, sp, #256	; 0x100
      tflite::micro::GetTensorShape(input2), &op_params);
 800b808:	f50d 798e 	add.w	r9, sp, #284	; 0x11c
  op_params.input1_offset = data->input1_offset;
 800b80c:	924f      	str	r2, [sp, #316]	; 0x13c
      tflite::micro::GetTensorShape(input1),
 800b80e:	4620      	mov	r0, r4
  op_params.input1_multiplier = data->input1_multiplier;
 800b810:	695a      	ldr	r2, [r3, #20]
 800b812:	9255      	str	r2, [sp, #340]	; 0x154
  op_params.input1_shift = data->input1_shift;
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	9256      	str	r2, [sp, #344]	; 0x158
  op_params.input2_offset = data->input2_offset;
 800b818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81a:	9250      	str	r2, [sp, #320]	; 0x140
  op_params.input2_multiplier = data->input2_multiplier;
 800b81c:	699a      	ldr	r2, [r3, #24]
 800b81e:	9257      	str	r2, [sp, #348]	; 0x15c
  op_params.input2_shift = data->input2_shift;
 800b820:	689a      	ldr	r2, [r3, #8]
 800b822:	9258      	str	r2, [sp, #352]	; 0x160
  op_params.output_offset = data->output_offset;
 800b824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b826:	9251      	str	r2, [sp, #324]	; 0x144
  op_params.output_multiplier = data->output_multiplier;
 800b828:	69da      	ldr	r2, [r3, #28]
 800b82a:	9252      	str	r2, [sp, #328]	; 0x148
  op_params.output_shift = data->output_shift;
 800b82c:	6a1a      	ldr	r2, [r3, #32]
                              TfLiteEvalTensor* output) {
 800b82e:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
  op_params.output_shift = data->output_shift;
 800b832:	9253      	str	r2, [sp, #332]	; 0x14c
      tflite::micro::GetTensorShape(input1),
 800b834:	4629      	mov	r1, r5
  params->float_activation_max = max;
}

template <typename P>
inline void SetActivationParams(int32_t min, int32_t max, P* params) {
  params->quantized_activation_min = min;
 800b836:	e9d3 3203 	ldrd	r3, r2, [r3, #12]
 800b83a:	9359      	str	r3, [sp, #356]	; 0x164
  params->quantized_activation_max = max;
 800b83c:	925a      	str	r2, [sp, #360]	; 0x168
 800b83e:	f004 fa50 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
 800b842:	4639      	mov	r1, r7
 800b844:	4648      	mov	r0, r9
 800b846:	f004 fa4c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b84a:	aa4e      	add	r2, sp, #312	; 0x138
 800b84c:	4649      	mov	r1, r9
 800b84e:	4620      	mov	r0, r4
 800b850:	f7ff fc19 	bl	800b086 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
 800b854:	4606      	mov	r6, r0
  switch (output->type) {
 800b856:	f898 0008 	ldrb.w	r0, [r8, #8]
 800b85a:	2807      	cmp	r0, #7
 800b85c:	d07a      	beq.n	800b954 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x15c>
 800b85e:	2809      	cmp	r0, #9
 800b860:	f040 80cf 	bne.w	800ba02 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x20a>
            op_params, tflite::micro::GetTensorShape(input1),
 800b864:	4629      	mov	r1, r5
      if (need_broadcast) {
 800b866:	2e00      	cmp	r6, #0
 800b868:	d04b      	beq.n	800b902 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x10a>
            op_params, tflite::micro::GetTensorShape(input1),
 800b86a:	a80f      	add	r0, sp, #60	; 0x3c
 800b86c:	f004 fa39 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
 800b870:	b90d      	cbnz	r5, 800b876 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x7e>
 800b872:	f00b fa67 	bl	8016d44 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b876:	682b      	ldr	r3, [r5, #0]
            tflite::micro::GetTensorShape(input2),
 800b878:	4639      	mov	r1, r7
 800b87a:	a816      	add	r0, sp, #88	; 0x58
 800b87c:	930d      	str	r3, [sp, #52]	; 0x34
 800b87e:	f004 fa30 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b882:	2f00      	cmp	r7, #0
 800b884:	d0f5      	beq.n	800b872 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b886:	683b      	ldr	r3, [r7, #0]
            tflite::micro::GetTensorShape(output),
 800b888:	4641      	mov	r1, r8
 800b88a:	4648      	mov	r0, r9
  bool broadcastable_shape = ReduceDimensionsForBroadcast<kMaxBroadcastDim>(
 800b88c:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 800b890:	930c      	str	r3, [sp, #48]	; 0x30
 800b892:	f004 fa26 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 800b896:	f8d8 3000 	ldr.w	r3, [r8]
 800b89a:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b89e:	9400      	str	r4, [sp, #0]
 800b8a0:	a916      	add	r1, sp, #88	; 0x58
 800b8a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	a80f      	add	r0, sp, #60	; 0x3c
 800b8aa:	f7ff fcb7 	bl	800b21c <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_>
  if (!broadcastable_shape) {
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	f000 8084 	beq.w	800b9bc <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1c4>
  size_t output_offset = 0;
 800b8b4:	2500      	movs	r5, #0
      BroadcastAddRecursiveDimensions(
 800b8b6:	f8df b164 	ldr.w	fp, [pc, #356]	; 800ba1c <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x224>
 800b8ba:	f8df a164 	ldr.w	sl, [pc, #356]	; 800ba20 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x228>
  size_t input1_offset = 0;
 800b8be:	462f      	mov	r7, r5
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b8c0:	462e      	mov	r6, r5
  size_t output_offset = 0;
 800b8c2:	951d      	str	r5, [sp, #116]	; 0x74
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b8c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b8c6:	42b3      	cmp	r3, r6
 800b8c8:	d978      	bls.n	800b9bc <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1c4>
      size_t input2_offset_c = *input2_offset_p;
 800b8ca:	ab68      	add	r3, sp, #416	; 0x1a0
      BroadcastAddRecursiveDimensions(
 800b8cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8ce:	2104      	movs	r1, #4
 800b8d0:	a84e      	add	r0, sp, #312	; 0x138
      size_t input2_offset_c = *input2_offset_p;
 800b8d2:	f843 5df4 	str.w	r5, [r3, #-244]!
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800b8d6:	3601      	adds	r6, #1
      BroadcastAddRecursiveDimensions(
 800b8d8:	9206      	str	r2, [sp, #24]
 800b8da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      size_t input1_offset_c = *input1_offset_p;
 800b8dc:	9724      	str	r7, [sp, #144]	; 0x90
      BroadcastAddRecursiveDimensions(
 800b8de:	9205      	str	r2, [sp, #20]
 800b8e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8e2:	e9cd 4203 	strd	r4, r2, [sp, #12]
 800b8e6:	aa1d      	add	r2, sp, #116	; 0x74
 800b8e8:	e9cd ab07 	strd	sl, fp, [sp, #28]
 800b8ec:	9200      	str	r2, [sp, #0]
 800b8ee:	aa24      	add	r2, sp, #144	; 0x90
 800b8f0:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800b8f4:	f7ff fdc8 	bl	800b488 <_ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E>
      *input1_offset_p += compressed_input1_stride[dimension];
 800b8f8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b8fa:	441f      	add	r7, r3
      *input2_offset_p += compressed_input2_stride[dimension];
 800b8fc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800b8fe:	441d      	add	r5, r3
 800b900:	e7e0      	b.n	800b8c4 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0xcc>
            op_params, tflite::micro::GetTensorShape(input1),
 800b902:	a81d      	add	r0, sp, #116	; 0x74
 800b904:	f004 f9ed 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b908:	2d00      	cmp	r5, #0
 800b90a:	d0b2      	beq.n	800b872 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x7a>
            tflite::micro::GetTensorShape(input2),
 800b90c:	4639      	mov	r1, r7
 800b90e:	a824      	add	r0, sp, #144	; 0x90
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b910:	682c      	ldr	r4, [r5, #0]
 800b912:	f004 f9e6 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b916:	2f00      	cmp	r7, #0
 800b918:	d0ab      	beq.n	800b872 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x7a>
            tflite::micro::GetTensorShape(output),
 800b91a:	4641      	mov	r1, r8
 800b91c:	4648      	mov	r0, r9
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b91e:	683f      	ldr	r7, [r7, #0]
 800b920:	f004 f9df 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
  CheckArithmeticParams(params);
 800b924:	a84e      	add	r0, sp, #312	; 0x138
  return reinterpret_cast<T*>(tensor->data.raw);
 800b926:	f8d8 5000 	ldr.w	r5, [r8]
 800b92a:	f7ff fa97 	bl	800ae5c <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE>

  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800b92e:	464a      	mov	r2, r9
 800b930:	a924      	add	r1, sp, #144	; 0x90
 800b932:	a81d      	add	r0, sp, #116	; 0x74
 800b934:	f7ff faac 	bl	800ae90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800b938:	4680      	mov	r8, r0
  CheckArithmeticParams(params);
 800b93a:	a84e      	add	r0, sp, #312	; 0x138
 800b93c:	f7ff fa8e 	bl	800ae5c <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE>
  for (int i = 0; i < size; ++i) {
 800b940:	45b0      	cmp	r8, r6
 800b942:	dd3b      	ble.n	800b9bc <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1c4>
    output_data[i] = binary_func(input1_data[i], input2_data[i], params);
 800b944:	57b9      	ldrsb	r1, [r7, r6]
 800b946:	aa4e      	add	r2, sp, #312	; 0x138
 800b948:	57a0      	ldrsb	r0, [r4, r6]
 800b94a:	f7ff fb0b 	bl	800af64 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
 800b94e:	55a8      	strb	r0, [r5, r6]
  for (int i = 0; i < size; ++i) {
 800b950:	3601      	adds	r6, #1
 800b952:	e7f5      	b.n	800b940 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x148>
 800b954:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
            op_params, tflite::micro::GetTensorShape(input1),
 800b958:	4629      	mov	r1, r5
      if (need_broadcast) {
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	d032      	beq.n	800b9c4 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1cc>
            op_params, tflite::micro::GetTensorShape(input1),
 800b95e:	a82b      	add	r0, sp, #172	; 0xac
 800b960:	f004 f9bf 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b964:	2d00      	cmp	r5, #0
 800b966:	d084      	beq.n	800b872 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x7a>
            tflite::micro::GetTensorShape(input2),
 800b968:	4639      	mov	r1, r7
 800b96a:	a832      	add	r0, sp, #200	; 0xc8
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b96c:	682d      	ldr	r5, [r5, #0]
 800b96e:	f004 f9b8 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b972:	2f00      	cmp	r7, #0
 800b974:	f43f af7d 	beq.w	800b872 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b978:	683e      	ldr	r6, [r7, #0]
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  size_t compressed_input1_stride[kMaxBroadcastDim];
  size_t compressed_input2_stride[kMaxBroadcastDim];
  size_t compressed_output_shape[kMaxBroadcastDim];
  bool broadcastable_shape = ReduceDimensionsForBroadcast<kMaxBroadcastDim>(
 800b97a:	af24      	add	r7, sp, #144	; 0x90
            tflite::micro::GetTensorShape(output),
 800b97c:	4641      	mov	r1, r8
 800b97e:	4648      	mov	r0, r9
 800b980:	f004 f9af 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 800b984:	f8d8 8000 	ldr.w	r8, [r8]
 800b988:	4653      	mov	r3, sl
 800b98a:	9400      	str	r4, [sp, #0]
 800b98c:	463a      	mov	r2, r7
 800b98e:	a932      	add	r1, sp, #200	; 0xc8
 800b990:	a82b      	add	r0, sp, #172	; 0xac
 800b992:	f7ff fc43 	bl	800b21c <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_>
      input1_shape, input2_shape, compressed_input1_stride,
      compressed_input2_stride, compressed_output_shape);
  // Skip broadcasting for degenerate shapes.
  if (!broadcastable_shape) {
 800b996:	b188      	cbz	r0, 800b9bc <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1c4>
    return;
  }

  size_t input1_offset = 0;
 800b998:	2300      	movs	r3, #0
  size_t input2_offset = 0;
  size_t output_offset = 0;
 800b99a:	aa1d      	add	r2, sp, #116	; 0x74
  BroadcastAddRecursiveDimensions(
 800b99c:	2105      	movs	r1, #5
 800b99e:	a84e      	add	r0, sp, #312	; 0x138
  size_t input1_offset = 0;
 800b9a0:	930f      	str	r3, [sp, #60]	; 0x3c
  size_t input2_offset = 0;
 800b9a2:	9316      	str	r3, [sp, #88]	; 0x58
  size_t output_offset = 0;
 800b9a4:	931d      	str	r3, [sp, #116]	; 0x74
  BroadcastAddRecursiveDimensions(
 800b9a6:	ab16      	add	r3, sp, #88	; 0x58
 800b9a8:	9200      	str	r2, [sp, #0]
 800b9aa:	aa0f      	add	r2, sp, #60	; 0x3c
 800b9ac:	e9cd 6805 	strd	r6, r8, [sp, #20]
 800b9b0:	e9cd 4503 	strd	r4, r5, [sp, #12]
 800b9b4:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 800b9b8:	f7ff fea3 	bl	800b702 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_>
  return kTfLiteOk;
 800b9bc:	2000      	movs	r0, #0
}
 800b9be:	b069      	add	sp, #420	; 0x1a4
 800b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
 800b9c4:	4650      	mov	r0, sl
 800b9c6:	f004 f98c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b9ca:	2d00      	cmp	r5, #0
 800b9cc:	f43f af51 	beq.w	800b872 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x7a>
                           tflite::micro::GetTensorShape(input2),
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b9d4:	682d      	ldr	r5, [r5, #0]
 800b9d6:	f004 f984 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b9da:	2f00      	cmp	r7, #0
 800b9dc:	f43f af49 	beq.w	800b872 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x7a>
                           tflite::micro::GetTensorShape(output),
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	4648      	mov	r0, r9
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b9e4:	683f      	ldr	r7, [r7, #0]
 800b9e6:	f004 f97c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    AddGeneralParamScale(params, input1_shape, input1_data, input2_shape,
 800b9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ee:	462a      	mov	r2, r5
 800b9f0:	9700      	str	r7, [sp, #0]
 800b9f2:	4651      	mov	r1, sl
 800b9f4:	a84e      	add	r0, sp, #312	; 0x138
 800b9f6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b9fa:	4623      	mov	r3, r4
 800b9fc:	f7ff fad8 	bl	800afb0 <_ZN6tflite13reference_ops20AddGeneralParamScaleERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKsS6_S8_S6_Ps>
 800ba00:	e7dc      	b.n	800b9bc <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1c4>
      MicroPrintf("Type %s (%d) not supported.",
 800ba02:	f7fc fb55 	bl	80080b0 <TfLiteTypeGetName>
 800ba06:	f898 2008 	ldrb.w	r2, [r8, #8]
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	4802      	ldr	r0, [pc, #8]	; (800ba18 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x220>)
 800ba0e:	f7ff f953 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800ba12:	2001      	movs	r0, #1
 800ba14:	e7d3      	b.n	800b9be <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1c6>
 800ba16:	bf00      	nop
 800ba18:	080fbb1a 	.word	0x080fbb1a
 800ba1c:	0800af65 	.word	0x0800af65
 800ba20:	0800ae5d 	.word	0x0800ae5d

0800ba24 <_ZN6tflite13reference_ops12AddBroadcastIfEEvPKT_S4_PS2_jS2_S2_>:
inline void AddBroadcast(const T* input_data, const T* broadcast_data,
 800ba24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  for (size_t c = 0; c < size; ++c) {
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d016      	beq.n	800ba5a <_ZN6tflite13reference_ops12AddBroadcastIfEEvPKT_S4_PS2_jS2_S2_+0x36>
        input_data[c] + broadcast_data[0], activation_min, activation_max);
 800ba2c:	ecf0 7a01 	vldmia	r0!, {s15}
    output_data[c] = ActivationFunctionWithMinMax<T>(
 800ba30:	ed91 7a00 	vldr	s14, [r1]
 800ba34:	ee77 7a87 	vadd.f32	s15, s15, s14
	return __b;
 800ba38:	eef4 7a40 	vcmp.f32	s15, s0
 800ba3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba40:	bf48      	it	mi
 800ba42:	eef0 7a40 	vmovmi.f32	s15, s0
	return __b;
 800ba46:	eef4 0a67 	vcmp.f32	s1, s15
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	bf48      	it	mi
 800ba50:	eef0 7a60 	vmovmi.f32	s15, s1
 800ba54:	ece2 7a01 	vstmia	r2!, {s15}
  for (size_t c = 0; c < size; ++c) {
 800ba58:	e7e6      	b.n	800ba28 <_ZN6tflite13reference_ops12AddBroadcastIfEEvPKT_S4_PS2_jS2_S2_+0x4>
}
 800ba5a:	4770      	bx	lr

0800ba5c <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_>:
inline void BroadcastAddRecursiveDimensions(
 800ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (dimension > 0) {
 800ba60:	2800      	cmp	r0, #0
inline void BroadcastAddRecursiveDimensions(
 800ba62:	460e      	mov	r6, r1
 800ba64:	4614      	mov	r4, r2
 800ba66:	4698      	mov	r8, r3
 800ba68:	ed2d 8b02 	vpush	{d8}
 800ba6c:	b08b      	sub	sp, #44	; 0x2c
 800ba6e:	eef0 8a40 	vmov.f32	s17, s0
 800ba72:	eeb0 8a60 	vmov.f32	s16, s1
 800ba76:	9d18      	ldr	r5, [sp, #96]	; 0x60
  if (dimension > 0) {
 800ba78:	dd34      	ble.n	800bae4 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x88>
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800ba7a:	0087      	lsls	r7, r0, #2
      *input1_offset_p += compressed_input1_stride[dimension];
 800ba7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800ba7e:	f04f 0900 	mov.w	r9, #0
      *input1_offset_p += compressed_input1_stride[dimension];
 800ba82:	eb03 0a07 	add.w	sl, r3, r7
      *input2_offset_p += compressed_input2_stride[dimension];
 800ba86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800ba88:	eb05 0b07 	add.w	fp, r5, r7
      *input2_offset_p += compressed_input2_stride[dimension];
 800ba8c:	441f      	add	r7, r3
      BroadcastAddRecursiveDimensions(
 800ba8e:	1e43      	subs	r3, r0, #1
 800ba90:	9307      	str	r3, [sp, #28]
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800ba92:	f8db 3000 	ldr.w	r3, [fp]
 800ba96:	454b      	cmp	r3, r9
 800ba98:	d97f      	bls.n	800bb9a <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x13e>
      size_t input1_offset_c = *input1_offset_p;
 800ba9a:	6833      	ldr	r3, [r6, #0]
      BroadcastAddRecursiveDimensions(
 800ba9c:	aa09      	add	r2, sp, #36	; 0x24
 800ba9e:	eef0 0a48 	vmov.f32	s1, s16
 800baa2:	a908      	add	r1, sp, #32
      size_t input1_offset_c = *input1_offset_p;
 800baa4:	9308      	str	r3, [sp, #32]
      BroadcastAddRecursiveDimensions(
 800baa6:	eeb0 0a68 	vmov.f32	s0, s17
      size_t input2_offset_c = *input2_offset_p;
 800baaa:	6823      	ldr	r3, [r4, #0]
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800baac:	f109 0901 	add.w	r9, r9, #1
      BroadcastAddRecursiveDimensions(
 800bab0:	9807      	ldr	r0, [sp, #28]
      size_t input2_offset_c = *input2_offset_p;
 800bab2:	9309      	str	r3, [sp, #36]	; 0x24
      BroadcastAddRecursiveDimensions(
 800bab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bab6:	9305      	str	r3, [sp, #20]
 800bab8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800baba:	9304      	str	r3, [sp, #16]
 800babc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800babe:	e9cd 5302 	strd	r5, r3, [sp, #8]
 800bac2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	4643      	mov	r3, r8
 800bacc:	f7ff ffc6 	bl	800ba5c <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_>
      *input1_offset_p += compressed_input1_stride[dimension];
 800bad0:	f8da 2000 	ldr.w	r2, [sl]
 800bad4:	6833      	ldr	r3, [r6, #0]
 800bad6:	4413      	add	r3, r2
 800bad8:	6033      	str	r3, [r6, #0]
      *input2_offset_p += compressed_input2_stride[dimension];
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	4413      	add	r3, r2
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	e7d6      	b.n	800ba92 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x36>
    TFLITE_DCHECK(dimension == 0);
 800bae4:	d001      	beq.n	800baea <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x8e>
 800bae6:	f00b f92d 	bl	8016d44 <abort>
    bool input1_is_broadcast = compressed_input1_stride[dimension] == 0;
 800baea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800baec:	f8d3 c000 	ldr.w	ip, [r3]
    bool input2_is_broadcast = compressed_input2_stride[dimension] == 0;
 800baf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800baf2:	f8d3 e000 	ldr.w	lr, [r3]
    TFLITE_DCHECK(!(input1_is_broadcast && input2_is_broadcast));
 800baf6:	f1bc 0f00 	cmp.w	ip, #0
 800bafa:	d102      	bne.n	800bb02 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xa6>
 800bafc:	f1be 0f00 	cmp.w	lr, #0
 800bb00:	d0f1      	beq.n	800bae6 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x8a>
    const T* input1_data_ptr = input1_data + *input1_offset_p;
 800bb02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb04:	6831      	ldr	r1, [r6, #0]
    const T* input2_data_ptr = input2_data + *input2_offset_p;
 800bb06:	6827      	ldr	r7, [r4, #0]
    const T* input1_data_ptr = input1_data + *input1_offset_p;
 800bb08:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    const T* input2_data_ptr = input2_data + *input2_offset_p;
 800bb0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    T* output_data_ptr = output_data + *output_offset;
 800bb0e:	f8d8 2000 	ldr.w	r2, [r8]
    const T* input2_data_ptr = input2_data + *input2_offset_p;
 800bb12:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    T* output_data_ptr = output_data + *output_offset;
 800bb16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb18:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800bb1c:	682b      	ldr	r3, [r5, #0]
    if (input1_is_broadcast) {
 800bb1e:	f1bc 0f00 	cmp.w	ip, #0
 800bb22:	d10c      	bne.n	800bb3e <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xe2>
      AddBroadcast<T>(input2_data_ptr, input1_data_ptr, output_data_ptr,
 800bb24:	4601      	mov	r1, r0
 800bb26:	eef0 0a48 	vmov.f32	s1, s16
 800bb2a:	eeb0 0a68 	vmov.f32	s0, s17
 800bb2e:	4638      	mov	r0, r7
 800bb30:	f7ff ff78 	bl	800ba24 <_ZN6tflite13reference_ops12AddBroadcastIfEEvPKT_S4_PS2_jS2_S2_>
      *input2_offset_p += compressed_output_shape[dimension];
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	682a      	ldr	r2, [r5, #0]
 800bb38:	4413      	add	r3, r2
 800bb3a:	6023      	str	r3, [r4, #0]
 800bb3c:	e027      	b.n	800bb8e <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x132>
    } else if (input2_is_broadcast) {
 800bb3e:	f1be 0f00 	cmp.w	lr, #0
 800bb42:	d019      	beq.n	800bb78 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x11c>
 800bb44:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
  for (size_t c = 0; c < size; ++c) {
 800bb48:	4594      	cmp	ip, r2
 800bb4a:	d02b      	beq.n	800bba4 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0x148>
        input1_data[c] + input2_data[c], activation_min, activation_max);
 800bb4c:	ecf0 7a01 	vldmia	r0!, {s15}
 800bb50:	ecb7 7a01 	vldmia	r7!, {s14}
    output_data[c] = ActivationFunctionWithMinMax<T>(
 800bb54:	ee77 7a87 	vadd.f32	s15, s15, s14
	return __b;
 800bb58:	eef4 8a67 	vcmp.f32	s17, s15
 800bb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb60:	fe78 7aa7 	vselgt.f32	s15, s17, s15
	return __b;
 800bb64:	eeb4 8a67 	vcmp.f32	s16, s15
 800bb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6c:	bf48      	it	mi
 800bb6e:	eef0 7a48 	vmovmi.f32	s15, s16
 800bb72:	ece2 7a01 	vstmia	r2!, {s15}
 800bb76:	e7e7      	b.n	800bb48 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xec>
      AddBroadcast<T>(input1_data_ptr, input2_data_ptr, output_data_ptr,
 800bb78:	eef0 0a48 	vmov.f32	s1, s16
 800bb7c:	4639      	mov	r1, r7
 800bb7e:	eeb0 0a68 	vmov.f32	s0, s17
 800bb82:	f7ff ff4f 	bl	800ba24 <_ZN6tflite13reference_ops12AddBroadcastIfEEvPKT_S4_PS2_jS2_S2_>
      *input1_offset_p += compressed_output_shape[dimension];
 800bb86:	6833      	ldr	r3, [r6, #0]
 800bb88:	682a      	ldr	r2, [r5, #0]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	6033      	str	r3, [r6, #0]
    *output_offset += compressed_output_shape[dimension];
 800bb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb92:	682a      	ldr	r2, [r5, #0]
 800bb94:	4413      	add	r3, r2
 800bb96:	f8c8 3000 	str.w	r3, [r8]
}
 800bb9a:	b00b      	add	sp, #44	; 0x2c
 800bb9c:	ecbd 8b02 	vpop	{d8}
 800bba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      *input1_offset_p += compressed_output_shape[dimension];
 800bba4:	440b      	add	r3, r1
 800bba6:	6033      	str	r3, [r6, #0]
 800bba8:	e7c4      	b.n	800bb34 <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_+0xd8>
	...

0800bbac <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_>:
                     const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {
 800bbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb0:	ed2d 8b02 	vpush	{d8}
 800bbb4:	b0cb      	sub	sp, #300	; 0x12c
 800bbb6:	9f58      	ldr	r7, [sp, #352]	; 0x160
 800bbb8:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
  switch (output->type) {
 800bbbc:	7a38      	ldrb	r0, [r7, #8]
                     const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {
 800bbbe:	9c57      	ldr	r4, [sp, #348]	; 0x15c
  switch (output->type) {
 800bbc0:	2801      	cmp	r0, #1
 800bbc2:	d00b      	beq.n	800bbdc <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x30>
 800bbc4:	2802      	cmp	r0, #2
 800bbc6:	f000 8095 	beq.w	800bcf4 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x148>
      MicroPrintf("Type %s (%d) not supported.",
 800bbca:	f7fc fa71 	bl	80080b0 <TfLiteTypeGetName>
 800bbce:	7a3a      	ldrb	r2, [r7, #8]
 800bbd0:	4601      	mov	r1, r0
 800bbd2:	4889      	ldr	r0, [pc, #548]	; (800bdf8 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x24c>)
 800bbd4:	f7ff f870 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800bbd8:	2001      	movs	r0, #1
 800bbda:	e108      	b.n	800bdee <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x242>
      if (data->requires_broadcast) {
 800bbdc:	781d      	ldrb	r5, [r3, #0]
            op_params, tflite::micro::GetTensorShape(input1),
 800bbde:	4641      	mov	r1, r8
      SetActivationParams(data->output_activation_min_f32,
 800bbe0:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
                          data->output_activation_max_f32, &op_params);
 800bbe4:	ed93 8a0e 	vldr	s16, [r3, #56]	; 0x38
      if (data->requires_broadcast) {
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	d04d      	beq.n	800bc88 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0xdc>
            op_params, tflite::micro::GetTensorShape(input1),
 800bbec:	a80b      	add	r0, sp, #44	; 0x2c
 800bbee:	f004 f878 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800bbf2:	f1b8 0f00 	cmp.w	r8, #0
 800bbf6:	d101      	bne.n	800bbfc <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x50>
 800bbf8:	f00b f8a4 	bl	8016d44 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bbfc:	f8d8 3000 	ldr.w	r3, [r8]
            tflite::micro::GetTensorShape(input2),
 800bc00:	4621      	mov	r1, r4
 800bc02:	a812      	add	r0, sp, #72	; 0x48
 800bc04:	9309      	str	r3, [sp, #36]	; 0x24
 800bc06:	f004 f86c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800bc0a:	2c00      	cmp	r4, #0
 800bc0c:	d0f4      	beq.n	800bbf8 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x4c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bc0e:	6823      	ldr	r3, [r4, #0]
            tflite::micro::GetTensorShape(output),
 800bc10:	4639      	mov	r1, r7
 800bc12:	a843      	add	r0, sp, #268	; 0x10c
  bool broadcastable_shape = ReduceDimensionsForBroadcast<kMaxBroadcastDim>(
 800bc14:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
 800bc18:	9308      	str	r3, [sp, #32]
 800bc1a:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800bc1e:	f004 f860 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 800bc22:	f8d7 b000 	ldr.w	fp, [r7]
 800bc26:	af3c      	add	r7, sp, #240	; 0xf0
 800bc28:	4653      	mov	r3, sl
 800bc2a:	464a      	mov	r2, r9
 800bc2c:	a912      	add	r1, sp, #72	; 0x48
 800bc2e:	9700      	str	r7, [sp, #0]
 800bc30:	a80b      	add	r0, sp, #44	; 0x2c
 800bc32:	f7ff faf3 	bl	800b21c <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_>
  if (!broadcastable_shape) {
 800bc36:	2800      	cmp	r0, #0
 800bc38:	f000 80d8 	beq.w	800bdec <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x240>
  size_t output_offset = 0;
 800bc3c:	2400      	movs	r4, #0
 800bc3e:	f50d 7894 	add.w	r8, sp, #296	; 0x128
  size_t input1_offset = 0;
 800bc42:	4626      	mov	r6, r4
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800bc44:	4625      	mov	r5, r4
  size_t output_offset = 0;
 800bc46:	f848 4dc4 	str.w	r4, [r8, #-196]!
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800bc4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc4c:	42ab      	cmp	r3, r5
 800bc4e:	f240 80cd 	bls.w	800bdec <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x240>
      BroadcastAddRecursiveDimensions(
 800bc52:	9b08      	ldr	r3, [sp, #32]
 800bc54:	eef0 0a48 	vmov.f32	s1, s16
 800bc58:	f8cd b014 	str.w	fp, [sp, #20]
 800bc5c:	eeb0 0a68 	vmov.f32	s0, s17
 800bc60:	9304      	str	r3, [sp, #16]
 800bc62:	aa27      	add	r2, sp, #156	; 0x9c
 800bc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc66:	a920      	add	r1, sp, #128	; 0x80
 800bc68:	2004      	movs	r0, #4
      size_t input1_offset_c = *input1_offset_p;
 800bc6a:	9620      	str	r6, [sp, #128]	; 0x80
      size_t input2_offset_c = *input2_offset_p;
 800bc6c:	9427      	str	r4, [sp, #156]	; 0x9c
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800bc6e:	3501      	adds	r5, #1
      BroadcastAddRecursiveDimensions(
 800bc70:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800bc74:	e9cd 9a00 	strd	r9, sl, [sp]
 800bc78:	4643      	mov	r3, r8
 800bc7a:	f7ff feef 	bl	800ba5c <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_>
      *input1_offset_p += compressed_input1_stride[dimension];
 800bc7e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800bc80:	441e      	add	r6, r3
      *input2_offset_p += compressed_input2_stride[dimension];
 800bc82:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bc84:	441c      	add	r4, r3
 800bc86:	e7e0      	b.n	800bc4a <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x9e>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
 800bc88:	a819      	add	r0, sp, #100	; 0x64
 800bc8a:	f004 f82a 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800bc8e:	f1b8 0f00 	cmp.w	r8, #0
 800bc92:	d0b1      	beq.n	800bbf8 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x4c>
                           tflite::micro::GetTensorShape(input2),
 800bc94:	4621      	mov	r1, r4
 800bc96:	a820      	add	r0, sp, #128	; 0x80
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bc98:	f8d8 6000 	ldr.w	r6, [r8]
 800bc9c:	f004 f821 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800bca0:	2c00      	cmp	r4, #0
 800bca2:	d0a9      	beq.n	800bbf8 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x4c>
                           tflite::micro::GetTensorShape(output),
 800bca4:	4639      	mov	r1, r7
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bca6:	6824      	ldr	r4, [r4, #0]
 800bca8:	a843      	add	r0, sp, #268	; 0x10c
 800bcaa:	f004 f81a 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int flat_size =
 800bcae:	aa43      	add	r2, sp, #268	; 0x10c
 800bcb0:	a920      	add	r1, sp, #128	; 0x80
 800bcb2:	a819      	add	r0, sp, #100	; 0x64
 800bcb4:	f7ff f8ec 	bl	800ae90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800bcb8:	683f      	ldr	r7, [r7, #0]
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4622      	mov	r2, r4
  for (int i = 0; i < flat_size; ++i) {
 800bcbe:	462b      	mov	r3, r5
 800bcc0:	4298      	cmp	r0, r3
 800bcc2:	f340 8093 	ble.w	800bdec <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x240>
        input1_data[i] + input2_data[i], activation_min, activation_max);
 800bcc6:	ecf1 7a01 	vldmia	r1!, {s15}
  for (int i = 0; i < flat_size; ++i) {
 800bcca:	3301      	adds	r3, #1
        input1_data[i] + input2_data[i], activation_min, activation_max);
 800bccc:	ecb2 7a01 	vldmia	r2!, {s14}
    output_data[i] = ActivationFunctionWithMinMax(
 800bcd0:	ee77 7a87 	vadd.f32	s15, s15, s14
	return __b;
 800bcd4:	eef4 8a67 	vcmp.f32	s17, s15
 800bcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcdc:	fe78 7aa7 	vselgt.f32	s15, s17, s15
	return __b;
 800bce0:	eeb4 8a67 	vcmp.f32	s16, s15
 800bce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce8:	bf48      	it	mi
 800bcea:	eef0 7a48 	vmovmi.f32	s15, s16
 800bcee:	ece7 7a01 	vstmia	r7!, {s15}
 800bcf2:	e7e5      	b.n	800bcc0 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x114>
      if (data->requires_broadcast) {
 800bcf4:	f893 9000 	ldrb.w	r9, [r3]
 800bcf8:	ad35      	add	r5, sp, #212	; 0xd4
 800bcfa:	ae3c      	add	r6, sp, #240	; 0xf0
            op_params, tflite::micro::GetTensorShape(input1),
 800bcfc:	4641      	mov	r1, r8
      if (data->requires_broadcast) {
 800bcfe:	f1b9 0f00 	cmp.w	r9, #0
 800bd02:	d04c      	beq.n	800bd9e <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1f2>
            op_params, tflite::micro::GetTensorShape(input1),
 800bd04:	a827      	add	r0, sp, #156	; 0x9c
 800bd06:	f003 ffec 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800bd0a:	f1b8 0f00 	cmp.w	r8, #0
 800bd0e:	f43f af73 	beq.w	800bbf8 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x4c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bd12:	f8d8 3000 	ldr.w	r3, [r8]
            tflite::micro::GetTensorShape(input2),
 800bd16:	4621      	mov	r1, r4
 800bd18:	a82e      	add	r0, sp, #184	; 0xb8
 800bd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd1c:	f003 ffe1 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800bd20:	2c00      	cmp	r4, #0
 800bd22:	f43f af69 	beq.w	800bbf8 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x4c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bd26:	6823      	ldr	r3, [r4, #0]
  bool broadcastable_shape = ReduceDimensionsForBroadcast<kMaxBroadcastDim>(
 800bd28:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
            tflite::micro::GetTensorShape(output),
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	a843      	add	r0, sp, #268	; 0x10c
 800bd30:	9308      	str	r3, [sp, #32]
 800bd32:	f003 ffd6 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 800bd36:	f8d7 b000 	ldr.w	fp, [r7]
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	9600      	str	r6, [sp, #0]
 800bd3e:	4652      	mov	r2, sl
 800bd40:	a92e      	add	r1, sp, #184	; 0xb8
 800bd42:	a827      	add	r0, sp, #156	; 0x9c
 800bd44:	f7ff fa6a 	bl	800b21c <_ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_>
  if (!broadcastable_shape) {
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d04f      	beq.n	800bdec <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x240>
  size_t output_offset = 0;
 800bd4c:	2400      	movs	r4, #0
 800bd4e:	f50d 7994 	add.w	r9, sp, #296	; 0x128
  size_t input1_offset = 0;
 800bd52:	46a0      	mov	r8, r4
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800bd54:	4627      	mov	r7, r4
  size_t output_offset = 0;
 800bd56:	f849 4dfc 	str.w	r4, [r9, #-252]!
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800bd5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd5c:	42bb      	cmp	r3, r7
 800bd5e:	d945      	bls.n	800bdec <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x240>
      BroadcastAddRecursiveDimensions(
 800bd60:	9b08      	ldr	r3, [sp, #32]
 800bd62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bd66:	f8cd b01c 	str.w	fp, [sp, #28]
 800bd6a:	a912      	add	r1, sp, #72	; 0x48
 800bd6c:	9306      	str	r3, [sp, #24]
 800bd6e:	2004      	movs	r0, #4
 800bd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (size_t c = 0; c < compressed_output_shape[dimension]; ++c) {
 800bd72:	3701      	adds	r7, #1
      BroadcastAddRecursiveDimensions(
 800bd74:	f8cd a000 	str.w	sl, [sp]
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      size_t input1_offset_c = *input1_offset_p;
 800bd7e:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      size_t input2_offset_c = *input2_offset_p;
 800bd82:	9419      	str	r4, [sp, #100]	; 0x64
      BroadcastAddRecursiveDimensions(
 800bd84:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800bd88:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800bd8c:	464b      	mov	r3, r9
 800bd8e:	aa19      	add	r2, sp, #100	; 0x64
 800bd90:	f7ff fc23 	bl	800b5da <_ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_>
      *input1_offset_p += compressed_input1_stride[dimension];
 800bd94:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bd96:	4498      	add	r8, r3
      *input2_offset_p += compressed_input2_stride[dimension];
 800bd98:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bd9a:	441c      	add	r4, r3
 800bd9c:	e7dd      	b.n	800bd5a <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x1ae>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f003 ff9f 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800bda4:	f1b8 0f00 	cmp.w	r8, #0
 800bda8:	f43f af26 	beq.w	800bbf8 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x4c>
                           tflite::micro::GetTensorShape(input2),
 800bdac:	4621      	mov	r1, r4
 800bdae:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bdb0:	f8d8 8000 	ldr.w	r8, [r8]
 800bdb4:	f003 ff95 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800bdb8:	2c00      	cmp	r4, #0
 800bdba:	f43f af1d 	beq.w	800bbf8 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x4c>
                           tflite::micro::GetTensorShape(output),
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	a843      	add	r0, sp, #268	; 0x10c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bdc2:	6824      	ldr	r4, [r4, #0]
 800bdc4:	f003 ff8d 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int flat_size =
 800bdc8:	aa43      	add	r2, sp, #268	; 0x10c
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
  return reinterpret_cast<T*>(tensor->data.raw);
 800bdce:	683f      	ldr	r7, [r7, #0]
 800bdd0:	f7ff f85e 	bl	800ae90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; ++i) {
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	4298      	cmp	r0, r3
 800bdd8:	dd08      	ble.n	800bdec <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x240>
    output_data[i] = ActivationFunctionWithMinMax(
 800bdda:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 800bdde:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800bde2:	440a      	add	r2, r1
 800bde4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
  for (int i = 0; i < flat_size; ++i) {
 800bde8:	3301      	adds	r3, #1
 800bdea:	e7f4      	b.n	800bdd6 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_+0x22a>
  return kTfLiteOk;
 800bdec:	2000      	movs	r0, #0
}
 800bdee:	b04b      	add	sp, #300	; 0x12c
 800bdf0:	ecbd 8b02 	vpop	{d8}
 800bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	080fbb1a 	.word	0x080fbb1a

0800bdfc <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AddEval(TfLiteContext* context, TfLiteNode* node) {
 800bdfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800be00:	e9d1 7804 	ldrd	r7, r8, [r1, #16]
TfLiteStatus AddEval(TfLiteContext* context, TfLiteNode* node) {
 800be04:	4606      	mov	r6, r0
 800be06:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 800be08:	b90f      	cbnz	r7, 800be0e <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x12>
 800be0a:	f00a ff9b 	bl	8016d44 <abort>
      tflite::micro::GetEvalInput(context, node, kAddInputTensor1);
 800be0e:	4b1e      	ldr	r3, [pc, #120]	; (800be88 <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x8c>)
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	f003 ff56 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kAddInputTensor2);
 800be16:	4b1d      	ldr	r3, [pc, #116]	; (800be8c <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x90>)
 800be18:	4621      	mov	r1, r4
      tflite::micro::GetEvalInput(context, node, kAddInputTensor1);
 800be1a:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kAddInputTensor2);
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	4630      	mov	r0, r6
 800be20:	f003 ff4f 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kAddOutputTensor);
 800be24:	4b1a      	ldr	r3, [pc, #104]	; (800be90 <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x94>)
      tflite::micro::GetEvalInput(context, node, kAddInputTensor2);
 800be26:	4682      	mov	sl, r0
      tflite::micro::GetEvalOutput(context, node, kAddOutputTensor);
 800be28:	4621      	mov	r1, r4
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	4630      	mov	r0, r6
 800be2e:	f003 ff4a 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800be32:	4605      	mov	r5, r0
  if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {
 800be34:	7a00      	ldrb	r0, [r0, #8]
 800be36:	1e43      	subs	r3, r0, #1
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d80c      	bhi.n	800be56 <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x5a>
    TF_LITE_ENSURE_OK(
 800be3c:	f8cd 9000 	str.w	r9, [sp]
 800be40:	463b      	mov	r3, r7
 800be42:	4642      	mov	r2, r8
 800be44:	4621      	mov	r1, r4
 800be46:	4630      	mov	r0, r6
 800be48:	e9cd a501 	strd	sl, r5, [sp, #4]
 800be4c:	f7ff feae 	bl	800bbac <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_>
}
 800be50:	b004      	add	sp, #16
 800be52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
 800be56:	2809      	cmp	r0, #9
 800be58:	d001      	beq.n	800be5e <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x62>
 800be5a:	2807      	cmp	r0, #7
 800be5c:	d10a      	bne.n	800be74 <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x78>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
 800be5e:	f8cd 9000 	str.w	r9, [sp]
 800be62:	463b      	mov	r3, r7
 800be64:	4642      	mov	r2, r8
 800be66:	4621      	mov	r1, r4
 800be68:	4630      	mov	r0, r6
 800be6a:	e9cd a501 	strd	sl, r5, [sp, #4]
 800be6e:	f7ff fcc3 	bl	800b7f8 <_ZN6tflite16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS_9OpDataAddEPK16TfLiteEvalTensorSB_PS9_>
 800be72:	e7ed      	b.n	800be50 <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x54>
    MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(output->type),
 800be74:	f7fc f91c 	bl	80080b0 <TfLiteTypeGetName>
 800be78:	7a2a      	ldrb	r2, [r5, #8]
 800be7a:	4601      	mov	r1, r0
 800be7c:	4805      	ldr	r0, [pc, #20]	; (800be94 <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x98>)
 800be7e:	f7fe ff1b 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800be82:	2001      	movs	r0, #1
 800be84:	e7e4      	b.n	800be50 <_ZN6tflite7AddEvalEP13TfLiteContextP10TfLiteNode+0x54>
 800be86:	bf00      	nop
 800be88:	080fbd58 	.word	0x080fbd58
 800be8c:	080fbd5c 	.word	0x080fbd5c
 800be90:	080fbd60 	.word	0x080fbd60
 800be94:	080fbb1a 	.word	0x080fbb1a

0800be98 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE>:
const int kAddOutputTensor = 0;

TfLiteStatus CalculateOpDataAdd(TfLiteContext* context, TfLiteAddParams* params,
                                const TfLiteTensor* input1,
                                const TfLiteTensor* input2,
                                TfLiteTensor* output, OpDataAdd* data) {
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	ed2d 8b06 	vpush	{d8-d10}
 800bea0:	b081      	sub	sp, #4
 800bea2:	4683      	mov	fp, r0
 800bea4:	468a      	mov	sl, r1
  data->requires_broadcast = !HaveSameShapes(input1, input2);
 800bea6:	4610      	mov	r0, r2
 800bea8:	4619      	mov	r1, r3
                                TfLiteTensor* output, OpDataAdd* data) {
 800beaa:	4617      	mov	r7, r2
 800beac:	461e      	mov	r6, r3
 800beae:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
  data->requires_broadcast = !HaveSameShapes(input1, input2);
 800beb2:	f7fc fddd 	bl	8008a70 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
 800beb6:	f080 0001 	eor.w	r0, r0, #1

  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
 800beba:	7829      	ldrb	r1, [r5, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
 800bebc:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
 800bebe:	2909      	cmp	r1, #9
 800bec0:	d002      	beq.n	800bec8 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x30>
 800bec2:	2907      	cmp	r1, #7
 800bec4:	f040 8083 	bne.w	800bfce <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x136>
    TFLITE_CHECK_NE(output->quantization.type, kTfLiteNoQuantization);
 800bec8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800becc:	b90b      	cbnz	r3, 800bed2 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x3a>
 800bece:	f00a ff39 	bl	8016d44 <abort>

    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
 800bed2:	693b      	ldr	r3, [r7, #16]
    data->input2_offset = -input2->params.zero_point;
    data->output_offset = output->params.zero_point;
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
 800bed4:	2907      	cmp	r1, #7
      if (__a < __b)
 800bed6:	ed97 8a03 	vldr	s16, [r7, #12]
 800beda:	edd6 8a03 	vldr	s17, [r6, #12]
    data->input1_offset = -input1->params.zero_point;
 800bede:	f1c3 0300 	rsb	r3, r3, #0
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
 800bee2:	bf0c      	ite	eq
 800bee4:	f04f 080f 	moveq.w	r8, #15
 800bee8:	f04f 0814 	movne.w	r8, #20
    const double twice_max_input_scale =
        2 * static_cast<double>(
                std::max(input1->params.scale, input2->params.scale));
 800beec:	eeb4 8ae8 	vcmpe.f32	s16, s17
    data->input1_offset = -input1->params.zero_point;
 800bef0:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
 800bef2:	6933      	ldr	r3, [r6, #16]
 800bef4:	425b      	negs	r3, r3
                std::max(input1->params.scale, input2->params.scale));
 800bef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    data->input2_offset = -input2->params.zero_point;
 800befa:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
 800befc:	692b      	ldr	r3, [r5, #16]
        2 * static_cast<double>(
 800befe:	bf54      	ite	pl
 800bf00:	ee18 0a10 	vmovpl	r0, s16
 800bf04:	ee18 0a90 	vmovmi	r0, s17
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
 800bf08:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    data->output_offset = output->params.zero_point;
 800bf0c:	6323      	str	r3, [r4, #48]	; 0x30
        2 * static_cast<double>(
 800bf0e:	f7f4 fb3d 	bl	800058c <__aeabi_f2d>
                std::max(input1->params.scale, input2->params.scale));
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	f7f4 f9db 	bl	80002d0 <__adddf3>
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
 800bf1e:	ee18 0a90 	vmov	r0, s17
 800bf22:	f7f4 fb33 	bl	800058c <__aeabi_f2d>
    const double real_input2_multiplier =
 800bf26:	4632      	mov	r2, r6
 800bf28:	463b      	mov	r3, r7
 800bf2a:	f7f4 fcb1 	bl	8000890 <__aeabi_ddiv>
 800bf2e:	ec41 0b1a 	vmov	d10, r0, r1
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
 800bf32:	2001      	movs	r0, #1
 800bf34:	fa00 f008 	lsl.w	r0, r0, r8
 800bf38:	f7f4 fb16 	bl	8000568 <__aeabi_i2d>
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	4689      	mov	r9, r1
 800bf40:	68e8      	ldr	r0, [r5, #12]
 800bf42:	f7f4 fb23 	bl	800058c <__aeabi_f2d>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9

    QuantizeMultiplierSmallerThanOneExp(
 800bf4e:	f104 0814 	add.w	r8, r4, #20
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
 800bf52:	f7f4 fb73 	bl	800063c <__aeabi_dmul>
    const double real_output_multiplier =
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4639      	mov	r1, r7
    QuantizeMultiplierSmallerThanOneExp(
 800bf5e:	f104 0904 	add.w	r9, r4, #4
    const double real_output_multiplier =
 800bf62:	f7f4 fc95 	bl	8000890 <__aeabi_ddiv>
 800bf66:	ec41 0b19 	vmov	d9, r0, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
 800bf6a:	ee18 0a10 	vmov	r0, s16
 800bf6e:	f7f4 fb0d 	bl	800058c <__aeabi_f2d>
    const double real_input1_multiplier =
 800bf72:	4632      	mov	r2, r6
 800bf74:	463b      	mov	r3, r7
 800bf76:	f7f4 fc8b 	bl	8000890 <__aeabi_ddiv>
 800bf7a:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
 800bf7e:	4649      	mov	r1, r9
 800bf80:	4640      	mov	r0, r8
 800bf82:	f7fc f9db 	bl	800833c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
 800bf86:	f104 0108 	add.w	r1, r4, #8
 800bf8a:	f104 0018 	add.w	r0, r4, #24
 800bf8e:	eeb0 0a4a 	vmov.f32	s0, s20
 800bf92:	eef0 0a6a 	vmov.f32	s1, s21
 800bf96:	f7fc f9d1 	bl	800833c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
 800bf9a:	f104 0120 	add.w	r1, r4, #32
 800bf9e:	f104 001c 	add.w	r0, r4, #28
 800bfa2:	eeb0 0a49 	vmov.f32	s0, s18
 800bfa6:	eef0 0a69 	vmov.f32	s1, s19
 800bfaa:	f7fc f9c7 	bl	800833c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800bfae:	f104 0310 	add.w	r3, r4, #16
 800bfb2:	f89a 1000 	ldrb.w	r1, [sl]
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	9310      	str	r3, [sp, #64]	; 0x40
 800bfba:	4658      	mov	r0, fp
 800bfbc:	f104 030c 	add.w	r3, r4, #12
                             &data->output_activation_min_f32,
                             &data->output_activation_max_f32);
  }

  return kTfLiteOk;
}
 800bfc0:	b001      	add	sp, #4
 800bfc2:	ecbd 8b06 	vpop	{d8-d10}
 800bfc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800bfca:	f7fc bbb7 	b.w	800873c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  } else if (output->type == kTfLiteFloat32) {
 800bfce:	2901      	cmp	r1, #1
 800bfd0:	d10d      	bne.n	800bfee <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x156>
    CalculateActivationRange(params->activation,
 800bfd2:	f89a 3000 	ldrb.w	r3, [sl]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d103      	bne.n	800bfe2 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x14a>
    *activation_min = 0;
 800bfda:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
 800bfdc:	6363      	str	r3, [r4, #52]	; 0x34
    *activation_max = std::numeric_limits<T>::max();
 800bfde:	4b0c      	ldr	r3, [pc, #48]	; (800c010 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x178>)
 800bfe0:	e004      	b.n	800bfec <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x154>
  } else if (activation == kTfLiteActRelu6) {
 800bfe2:	2b03      	cmp	r3, #3
 800bfe4:	d109      	bne.n	800bffa <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x162>
    *activation_min = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	6363      	str	r3, [r4, #52]	; 0x34
    *activation_max = 6;
 800bfea:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x17c>)
    *activation_max = std::numeric_limits<T>::max();
 800bfec:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800bfee:	2000      	movs	r0, #0
 800bff0:	b001      	add	sp, #4
 800bff2:	ecbd 8b06 	vpop	{d8-d10}
 800bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (activation == kTfLiteActReluN1To1) {
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	d104      	bne.n	800c008 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x170>
    *activation_min = -1;
 800bffe:	4b06      	ldr	r3, [pc, #24]	; (800c018 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x180>)
 800c000:	6363      	str	r3, [r4, #52]	; 0x34
    *activation_max = 1;
 800c002:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c006:	e7f1      	b.n	800bfec <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x154>
    *activation_min = std::numeric_limits<T>::lowest();
 800c008:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800c00c:	e7e6      	b.n	800bfdc <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE+0x144>
 800c00e:	bf00      	nop
 800c010:	7f7fffff 	.word	0x7f7fffff
 800c014:	40c00000 	.word	0x40c00000
 800c018:	bf800000 	.word	0xbf800000

0800c01c <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AddPrepare(TfLiteContext* context, TfLiteNode* node) {
  TFLITE_DCHECK(node->user_data != nullptr);
 800c01c:	690b      	ldr	r3, [r1, #16]
TfLiteStatus AddPrepare(TfLiteContext* context, TfLiteNode* node) {
 800c01e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c022:	4604      	mov	r4, r0
 800c024:	b085      	sub	sp, #20
 800c026:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 800c028:	b90b      	cbnz	r3, 800c02e <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x12>
 800c02a:	f00a fe8b 	bl	8016d44 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800c02e:	694b      	ldr	r3, [r1, #20]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0fa      	beq.n	800c02a <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xe>

  MicroContext* micro_context = GetMicroContext(context);
 800c034:	68c5      	ldr	r5, [r0, #12]
  TfLiteTensor* input1 =
      micro_context->AllocateTempInputTensor(node, kAddInputTensor1);
 800c036:	2200      	movs	r2, #0
 800c038:	4628      	mov	r0, r5
 800c03a:	f7fe f81b 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input1 != nullptr);
 800c03e:	4681      	mov	r9, r0
 800c040:	b958      	cbnz	r0, 800c05a <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
 800c042:	4b2f      	ldr	r3, [pc, #188]	; (800c100 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800c044:	6965      	ldr	r5, [r4, #20]
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	2358      	movs	r3, #88	; 0x58
  TfLiteTensor* input2 =
      micro_context->AllocateTempInputTensor(node, kAddInputTensor2);
  TF_LITE_ENSURE(context, input2 != nullptr);
 800c04a:	4a2e      	ldr	r2, [pc, #184]	; (800c104 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800c04c:	4620      	mov	r0, r4
 800c04e:	492e      	ldr	r1, [pc, #184]	; (800c108 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800c050:	47a8      	blx	r5
 800c052:	2001      	movs	r0, #1

  micro_context->DeallocateTempTfLiteTensor(input1);
  micro_context->DeallocateTempTfLiteTensor(input2);
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 800c054:	b005      	add	sp, #20
 800c056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      micro_context->AllocateTempInputTensor(node, kAddInputTensor2);
 800c05a:	2201      	movs	r2, #1
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	f7fe f808 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input2 != nullptr);
 800c064:	4680      	mov	r8, r0
 800c066:	b920      	cbnz	r0, 800c072 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 800c068:	4b28      	ldr	r3, [pc, #160]	; (800c10c <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800c06a:	6965      	ldr	r5, [r4, #20]
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	235b      	movs	r3, #91	; 0x5b
 800c070:	e7eb      	b.n	800c04a <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      micro_context->AllocateTempOutputTensor(node, kAddOutputTensor);
 800c072:	2200      	movs	r2, #0
 800c074:	4631      	mov	r1, r6
 800c076:	4628      	mov	r0, r5
 800c078:	f7fe f811 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800c07c:	4607      	mov	r7, r0
 800c07e:	b920      	cbnz	r0, 800c08a <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
 800c080:	4b23      	ldr	r3, [pc, #140]	; (800c110 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800c082:	6965      	ldr	r5, [r4, #20]
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	235e      	movs	r3, #94	; 0x5e
 800c088:	e7df      	b.n	800c04a <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE_STATUS(
 800c08a:	6933      	ldr	r3, [r6, #16]
 800c08c:	464a      	mov	r2, r9
 800c08e:	6971      	ldr	r1, [r6, #20]
 800c090:	e9cd 0300 	strd	r0, r3, [sp]
 800c094:	4643      	mov	r3, r8
 800c096:	4620      	mov	r0, r4
 800c098:	f7ff fefe 	bl	800be98 <_ZN6tflite18CalculateOpDataAddEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS6_PS4_PNS_9OpDataAddE>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d1d9      	bne.n	800c054 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x38>
  if (output->type == kTfLiteInt32) {
 800c0a0:	783b      	ldrb	r3, [r7, #0]
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d11b      	bne.n	800c0de <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xc2>
    TF_LITE_ENSURE_EQ(context, input1->quantization.type,
 800c0a6:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 800c0aa:	b163      	cbz	r3, 800c0c6 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xaa>
 800c0ac:	6965      	ldr	r5, [r4, #20]
 800c0ae:	e9cd 3002 	strd	r3, r0, [sp, #8]
 800c0b2:	4b18      	ldr	r3, [pc, #96]	; (800c114 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	4b18      	ldr	r3, [pc, #96]	; (800c118 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	2369      	movs	r3, #105	; 0x69
    TF_LITE_ENSURE_EQ(context, input2->quantization.type,
 800c0bc:	4a11      	ldr	r2, [pc, #68]	; (800c104 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800c0be:	4620      	mov	r0, r4
 800c0c0:	4916      	ldr	r1, [pc, #88]	; (800c11c <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x100>)
 800c0c2:	47a8      	blx	r5
 800c0c4:	e7c5      	b.n	800c052 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x36>
 800c0c6:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 800c0ca:	b143      	cbz	r3, 800c0de <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 800c0cc:	6965      	ldr	r5, [r4, #20]
 800c0ce:	e9cd 3002 	strd	r3, r0, [sp, #8]
 800c0d2:	4b10      	ldr	r3, [pc, #64]	; (800c114 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 800c0d4:	9301      	str	r3, [sp, #4]
 800c0d6:	4b12      	ldr	r3, [pc, #72]	; (800c120 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x104>)
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	236b      	movs	r3, #107	; 0x6b
 800c0dc:	e7ee      	b.n	800c0bc <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
  micro_context->DeallocateTempTfLiteTensor(input1);
 800c0de:	682b      	ldr	r3, [r5, #0]
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input2);
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	4641      	mov	r1, r8
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	4639      	mov	r1, r7
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	4798      	blx	r3
  return kTfLiteOk;
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	e7a9      	b.n	800c054 <_ZN6tflite10AddPrepareEP13TfLiteContextP10TfLiteNode+0x38>
 800c100:	080fbcd6 	.word	0x080fbcd6
 800c104:	080fbc9c 	.word	0x080fbc9c
 800c108:	080f93a5 	.word	0x080f93a5
 800c10c:	080fbce8 	.word	0x080fbce8
 800c110:	080fbcfa 	.word	0x080fbcfa
 800c114:	080fbd0c 	.word	0x080fbd0c
 800c118:	080fbd22 	.word	0x080fbd22
 800c11c:	080f982c 	.word	0x080f982c
 800c120:	080fbd3c 	.word	0x080fbd3c

0800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
// Since tensors with '0' in their shape are valid in TF, these offset functions
// allow that as long as the corresponding index is also 0. It is upto the
// calling ops to ensure that they perform verification checks on tensor shapes
// if they don't support a particular behavior.

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800c124:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800c126:	6804      	ldr	r4, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800c128:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800c12a:	2c04      	cmp	r4, #4
 800c12c:	d001      	beq.n	800c132 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
 800c12e:	f00a fe09 	bl	8016d44 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsData());
  TFLITE_DCHECK((dims_data[0] == 0 && i0 == 0) ||
 800c132:	6844      	ldr	r4, [r0, #4]
 800c134:	b9a4      	cbnz	r4, 800c160 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3c>
 800c136:	2900      	cmp	r1, #0
 800c138:	d1f9      	bne.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
                (i0 >= 0 && i0 < dims_data[0]));
  TFLITE_DCHECK((dims_data[1] == 0 && i1 == 0) ||
 800c13a:	6884      	ldr	r4, [r0, #8]
 800c13c:	b9ac      	cbnz	r4, 800c16a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x46>
 800c13e:	2a00      	cmp	r2, #0
 800c140:	d1f5      	bne.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
                (i1 >= 0 && i1 < dims_data[1]));
  TFLITE_DCHECK((dims_data[2] == 0 && i2 == 0) ||
 800c142:	68c6      	ldr	r6, [r0, #12]
 800c144:	b9b6      	cbnz	r6, 800c174 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1f1      	bne.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
                (i2 >= 0 && i2 < dims_data[2]));
  TFLITE_DCHECK((dims_data[3] == 0 && i3 == 0) ||
 800c14a:	6900      	ldr	r0, [r0, #16]
 800c14c:	b9b8      	cbnz	r0, 800c17e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5a>
 800c14e:	2d00      	cmp	r5, #0
 800c150:	d1ed      	bne.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
                (i3 >= 0 && i3 < dims_data[3]));
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800c152:	fb01 2404 	mla	r4, r1, r4, r2
 800c156:	fb06 3304 	mla	r3, r6, r4, r3
}
 800c15a:	fb00 5003 	mla	r0, r0, r3, r5
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK((dims_data[0] == 0 && i0 == 0) ||
 800c160:	2900      	cmp	r1, #0
 800c162:	dbe4      	blt.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 800c164:	428c      	cmp	r4, r1
 800c166:	dce8      	bgt.n	800c13a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x16>
 800c168:	e7e1      	b.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK((dims_data[1] == 0 && i1 == 0) ||
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	dbdf      	blt.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 800c16e:	4294      	cmp	r4, r2
 800c170:	dce7      	bgt.n	800c142 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800c172:	e7dc      	b.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK((dims_data[2] == 0 && i2 == 0) ||
 800c174:	2b00      	cmp	r3, #0
 800c176:	dbda      	blt.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 800c178:	429e      	cmp	r6, r3
 800c17a:	dce6      	bgt.n	800c14a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x26>
 800c17c:	e7d7      	b.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK((dims_data[3] == 0 && i3 == 0) ||
 800c17e:	2d00      	cmp	r5, #0
 800c180:	dbd5      	blt.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 800c182:	42a8      	cmp	r0, r5
 800c184:	dce5      	bgt.n	800c152 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x2e>
 800c186:	e7d2      	b.n	800c12e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>

0800c188 <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_>:
  }
}

// Get shape pointers from a list of shapes.
inline void GetShapesPointers(const RuntimeShape* shapes, size_t num,
                              const RuntimeShape* pointers[]) {
 800c188:	b530      	push	{r4, r5, lr}
  for (size_t i = 0; i < num; ++i) {
 800c18a:	2300      	movs	r3, #0
    pointers[i] = &shapes[i];
 800c18c:	251c      	movs	r5, #28
  for (size_t i = 0; i < num; ++i) {
 800c18e:	428b      	cmp	r3, r1
 800c190:	d005      	beq.n	800c19e <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_+0x16>
    pointers[i] = &shapes[i];
 800c192:	fb05 0403 	mla	r4, r5, r3, r0
 800c196:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  for (size_t i = 0; i < num; ++i) {
 800c19a:	3301      	adds	r3, #1
 800c19c:	e7f7      	b.n	800c18e <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_+0x6>
  }
}
 800c19e:	bd30      	pop	{r4, r5, pc}

0800c1a0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
                               tflite::micro::GetTensorShape(output),
                               tflite::micro::GetTensorData<data_type>(output));
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c1a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800c1a2:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c1a4:	b90b      	cbnz	r3, 800c1aa <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 800c1a6:	f00a fdcd 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800c1aa:	2118      	movs	r1, #24
}
 800c1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800c1b0:	4718      	bx	r3

0800c1b2 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE>:
                                    RuntimeShape all_shapes[kMaxInputNum]) {
 800c1b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1b4:	460e      	mov	r6, r1
 800c1b6:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(context != nullptr);
 800c1b8:	4607      	mov	r7, r0
 800c1ba:	b908      	cbnz	r0, 800c1c0 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE+0xe>
 800c1bc:	f00a fdc2 	bl	8016d44 <abort>
  TFLITE_DCHECK(node != nullptr);
 800c1c0:	2900      	cmp	r1, #0
 800c1c2:	d0fb      	beq.n	800c1bc <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE+0xa>
 800c1c4:	1d14      	adds	r4, r2, #4
  for (int i = 0; i < node->inputs->size; ++i) {
 800c1c6:	2500      	movs	r5, #0
 800c1c8:	6833      	ldr	r3, [r6, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	42ab      	cmp	r3, r5
 800c1ce:	dd15      	ble.n	800c1fc <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE+0x4a>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 800c1d0:	462a      	mov	r2, r5
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4638      	mov	r0, r7
 800c1d6:	f003 fd74 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    RuntimeShape shape = tflite::micro::GetTensorShape(t);
 800c1da:	4601      	mov	r1, r0
 800c1dc:	a801      	add	r0, sp, #4
 800c1de:	f003 fd80 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    all_shapes[i].ReplaceWith(shape.DimensionsCount(), shape.DimsData());
 800c1e2:	9a01      	ldr	r2, [sp, #4]
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800c1e4:	2a06      	cmp	r2, #6
 800c1e6:	dce9      	bgt.n	800c1bc <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE+0xa>
    size_ = dimensions_count;
 800c1e8:	f844 2c04 	str.w	r2, [r4, #-4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	0092      	lsls	r2, r2, #2
 800c1f0:	a902      	add	r1, sp, #8
 800c1f2:	f00a fe2e 	bl	8016e52 <memcpy>
  for (int i = 0; i < node->inputs->size; ++i) {
 800c1f6:	3501      	adds	r5, #1
 800c1f8:	341c      	adds	r4, #28
 800c1fa:	e7e5      	b.n	800c1c8 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE+0x16>
}
 800c1fc:	b009      	add	sp, #36	; 0x24
 800c1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c200 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // This function only checks the types. Additional shape validations are
  // performed in the reference implementation called during Eval().
  const TfLiteConcatenationParams* params =
      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 800c204:	68c6      	ldr	r6, [r0, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800c206:	b087      	sub	sp, #28
 800c208:	4604      	mov	r4, r0

  TfLiteTensor* input_tensor = micro_context->AllocateTempInputTensor(node, 0);
 800c20a:	2200      	movs	r2, #0
 800c20c:	4630      	mov	r0, r6
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800c20e:	460f      	mov	r7, r1
  const TfLiteConcatenationParams* params =
 800c210:	f8d1 9014 	ldr.w	r9, [r1, #20]
  TfLiteTensor* input_tensor = micro_context->AllocateTempInputTensor(node, 0);
 800c214:	f7fd ff2e 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input_tensor != nullptr);
 800c218:	4683      	mov	fp, r0
 800c21a:	b958      	cbnz	r0, 800c234 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34>
 800c21c:	4b7c      	ldr	r3, [pc, #496]	; (800c410 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 800c21e:	6965      	ldr	r5, [r4, #20]
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	2378      	movs	r3, #120	; 0x78
  TfLiteType input_type = input_tensor->type;
  TfLiteTensor* output_tensor =
      micro_context->AllocateTempOutputTensor(node, kOutputTensor);
  TF_LITE_ENSURE(context, output_tensor != nullptr);
 800c224:	4a7b      	ldr	r2, [pc, #492]	; (800c414 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 800c226:	4620      	mov	r0, r4
 800c228:	497b      	ldr	r1, [pc, #492]	; (800c418 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800c22a:	47a8      	blx	r5
 800c22c:	2001      	movs	r0, #1
  }

  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
 800c22e:	b007      	add	sp, #28
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TfLiteType input_type = input_tensor->type;
 800c234:	f890 a000 	ldrb.w	sl, [r0]
      micro_context->AllocateTempOutputTensor(node, kOutputTensor);
 800c238:	2200      	movs	r2, #0
 800c23a:	4639      	mov	r1, r7
 800c23c:	4630      	mov	r0, r6
 800c23e:	f7fd ff2e 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output_tensor != nullptr);
 800c242:	4605      	mov	r5, r0
 800c244:	b920      	cbnz	r0, 800c250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 800c246:	4b75      	ldr	r3, [pc, #468]	; (800c41c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800c248:	6965      	ldr	r5, [r4, #20]
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	237c      	movs	r3, #124	; 0x7c
 800c24e:	e7e9      	b.n	800c224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  micro_context->DeallocateTempTfLiteTensor(input_tensor);
 800c250:	6833      	ldr	r3, [r6, #0]
 800c252:	4659      	mov	r1, fp
  TfLiteType output_type = output_tensor->type;
 800c254:	f890 8000 	ldrb.w	r8, [r0]
  micro_context->DeallocateTempTfLiteTensor(input_tensor);
 800c258:	4630      	mov	r0, r6
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output_tensor);
 800c25e:	6833      	ldr	r3, [r6, #0]
 800c260:	4629      	mov	r1, r5
 800c262:	4630      	mov	r0, r6
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	4798      	blx	r3
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
 800c268:	f899 3004 	ldrb.w	r3, [r9, #4]
 800c26c:	b16b      	cbz	r3, 800c28a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 800c26e:	2200      	movs	r2, #0
 800c270:	6965      	ldr	r5, [r4, #20]
 800c272:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c276:	4b6a      	ldr	r3, [pc, #424]	; (800c420 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800c278:	9301      	str	r3, [sp, #4]
 800c27a:	4b6a      	ldr	r3, [pc, #424]	; (800c424 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	2383      	movs	r3, #131	; 0x83
  TF_LITE_ENSURE_EQ(context, output_type, input_type);
 800c280:	4a64      	ldr	r2, [pc, #400]	; (800c414 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 800c282:	4620      	mov	r0, r4
 800c284:	4968      	ldr	r1, [pc, #416]	; (800c428 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800c286:	47a8      	blx	r5
 800c288:	e7d0      	b.n	800c22c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
  TF_LITE_ENSURE(context,
 800c28a:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
 800c28e:	b2eb      	uxtb	r3, r5
 800c290:	2b08      	cmp	r3, #8
 800c292:	d806      	bhi.n	800c2a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 800c294:	f240 156b 	movw	r5, #363	; 0x16b
 800c298:	40dd      	lsrs	r5, r3
 800c29a:	43ed      	mvns	r5, r5
 800c29c:	f015 0501 	ands.w	r5, r5, #1
 800c2a0:	d004      	beq.n	800c2ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 800c2a2:	4b62      	ldr	r3, [pc, #392]	; (800c42c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800c2a4:	6965      	ldr	r5, [r4, #20]
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	2387      	movs	r3, #135	; 0x87
 800c2aa:	e7bb      	b.n	800c224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TF_LITE_ENSURE_EQ(context, output_type, input_type);
 800c2ac:	45c2      	cmp	sl, r8
 800c2ae:	d008      	beq.n	800c2c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 800c2b0:	4b5f      	ldr	r3, [pc, #380]	; (800c430 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800c2b2:	6965      	ldr	r5, [r4, #20]
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	4b5f      	ldr	r3, [pc, #380]	; (800c434 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800c2b8:	e9cd 8a02 	strd	r8, sl, [sp, #8]
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	238a      	movs	r3, #138	; 0x8a
 800c2c0:	e7de      	b.n	800c280 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  const int num_inputs = NumInputs(node);
 800c2c2:	683b      	ldr	r3, [r7, #0]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800c2c4:	b333      	cbz	r3, 800c314 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>
 800c2c6:	f8d3 a000 	ldr.w	sl, [r3]
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
 800c2ca:	f1ba 0f0a 	cmp.w	sl, #10
 800c2ce:	dd12      	ble.n	800c2f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf6>
 800c2d0:	4b59      	ldr	r3, [pc, #356]	; (800c438 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800c2d2:	6965      	ldr	r5, [r4, #20]
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	238e      	movs	r3, #142	; 0x8e
 800c2d8:	e7a4      	b.n	800c224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800c2da:	6883      	ldr	r3, [r0, #8]
 800c2dc:	681a      	ldr	r2, [r3, #0]
    if (num_dimensions > RuntimeShape::kMaxSmallSize) {
 800c2de:	2a06      	cmp	r2, #6
 800c2e0:	dd04      	ble.n	800c2ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xec>
      MicroPrintf(
 800c2e2:	2106      	movs	r1, #6
 800c2e4:	4855      	ldr	r0, [pc, #340]	; (800c43c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800c2e6:	f7fe fce7 	bl	800acb8 <_Z11MicroPrintfPKcz>
 800c2ea:	e79f      	b.n	800c22c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
    micro_context->DeallocateTempTfLiteTensor(input);
 800c2ec:	6833      	ldr	r3, [r6, #0]
  for (int i = 0; i < num_inputs; ++i) {
 800c2ee:	3501      	adds	r5, #1
    micro_context->DeallocateTempTfLiteTensor(input);
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	4798      	blx	r3
  for (int i = 0; i < num_inputs; ++i) {
 800c2f6:	4555      	cmp	r5, sl
 800c2f8:	da0c      	bge.n	800c314 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>
    TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, i);
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	462a      	mov	r2, r5
 800c2fe:	4630      	mov	r0, r6
 800c300:	f7fd feb8 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
    TF_LITE_ENSURE(context, input != nullptr);
 800c304:	4601      	mov	r1, r0
 800c306:	2800      	cmp	r0, #0
 800c308:	d1e7      	bne.n	800c2da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
 800c30a:	4b4d      	ldr	r3, [pc, #308]	; (800c440 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800c30c:	6965      	ldr	r5, [r4, #20]
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	2393      	movs	r3, #147	; 0x93
 800c312:	e787      	b.n	800c224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TFLITE_DCHECK(node->user_data != nullptr);
 800c314:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800c318:	f1ba 0f00 	cmp.w	sl, #0
 800c31c:	d101      	bne.n	800c322 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x122>
 800c31e:	f00a fd11 	bl	8016d44 <abort>
      micro_context->AllocateTempOutputTensor(node, kOutputTensor);
 800c322:	2200      	movs	r2, #0
 800c324:	4639      	mov	r1, r7
 800c326:	4630      	mov	r0, r6
 800c328:	f7fd feb9 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800c32c:	4683      	mov	fp, r0
 800c32e:	b920      	cbnz	r0, 800c33a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13a>
 800c330:	4b44      	ldr	r3, [pc, #272]	; (800c444 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800c332:	6965      	ldr	r5, [r4, #20]
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	23a6      	movs	r3, #166	; 0xa6
 800c338:	e774      	b.n	800c224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 800c33a:	2501      	movs	r5, #1
 800c33c:	fa05 f308 	lsl.w	r3, r5, r8
 800c340:	f013 0fd6 	tst.w	r3, #214	; 0xd6
 800c344:	d109      	bne.n	800c35a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15a>
 800c346:	059b      	lsls	r3, r3, #22
 800c348:	d41b      	bmi.n	800c382 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x182>
      MicroPrintf("Op Concatenation does not currently support Type '%s'.",
 800c34a:	4640      	mov	r0, r8
 800c34c:	f7fb feb0 	bl	80080b0 <TfLiteTypeGetName>
 800c350:	4601      	mov	r1, r0
 800c352:	483d      	ldr	r0, [pc, #244]	; (800c448 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800c354:	f7fe fcb0 	bl	800acb8 <_Z11MicroPrintfPKcz>
 800c358:	e768      	b.n	800c22c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
      data->params.axis = CalculatePositiveAxis(params->axis, output);
 800c35a:	f8d9 3000 	ldr.w	r3, [r9]
  if (axis >= 0) {
 800c35e:	2b00      	cmp	r3, #0
 800c360:	bfbe      	ittt	lt
 800c362:	6882      	ldrlt	r2, [r0, #8]
    return NumDimensions(output_tensor) + axis;
 800c364:	6812      	ldrlt	r2, [r2, #0]
 800c366:	189b      	addlt	r3, r3, r2
      data->params.axis = CalculatePositiveAxis(params->axis, output);
 800c368:	f88a 3000 	strb.w	r3, [sl]
      data->params.inputs_count = node->inputs->size;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f8aa 300c 	strh.w	r3, [sl, #12]
  micro_context->DeallocateTempTfLiteTensor(output);
 800c374:	6833      	ldr	r3, [r6, #0]
 800c376:	4630      	mov	r0, r6
 800c378:	4659      	mov	r1, fp
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	4798      	blx	r3
  return kTfLiteOk;
 800c37e:	2000      	movs	r0, #0
 800c380:	e755      	b.n	800c22e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      data->params.axis = CalculatePositiveAxis(params->axis, output);
 800c382:	f8d9 3000 	ldr.w	r3, [r9]
      for (int i = 0; i < node->inputs->size; ++i) {
 800c386:	f04f 0800 	mov.w	r8, #0
  if (axis >= 0) {
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	bfb8      	it	lt
 800c38e:	6882      	ldrlt	r2, [r0, #8]
              context, node->inputs->size * sizeof(float)));
 800c390:	4620      	mov	r0, r4
    return NumDimensions(output_tensor) + axis;
 800c392:	bfbc      	itt	lt
 800c394:	6812      	ldrlt	r2, [r2, #0]
 800c396:	189b      	addlt	r3, r3, r2
      data->params.axis = CalculatePositiveAxis(params->axis, output);
 800c398:	f88a 3000 	strb.w	r3, [sl]
      data->params.inputs_count = node->inputs->size;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	6819      	ldr	r1, [r3, #0]
              context, node->inputs->size * sizeof(float)));
 800c3a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      data->params.inputs_count = node->inputs->size;
 800c3a2:	f8aa 100c 	strh.w	r1, [sl, #12]
              context, node->inputs->size * sizeof(float)));
 800c3a6:	0089      	lsls	r1, r1, #2
 800c3a8:	4798      	blx	r3
              context, node->inputs->size * sizeof(int32_t)));
 800c3aa:	683b      	ldr	r3, [r7, #0]
              context, node->inputs->size * sizeof(float)));
 800c3ac:	9005      	str	r0, [sp, #20]
              context, node->inputs->size * sizeof(int32_t)));
 800c3ae:	4620      	mov	r0, r4
          reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c3b0:	6819      	ldr	r1, [r3, #0]
              context, node->inputs->size * sizeof(int32_t)));
 800c3b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c3b4:	0089      	lsls	r1, r1, #2
 800c3b6:	4798      	blx	r3
 800c3b8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c3bc:	4605      	mov	r5, r0
      for (int i = 0; i < node->inputs->size; ++i) {
 800c3be:	683a      	ldr	r2, [r7, #0]
 800c3c0:	6812      	ldr	r2, [r2, #0]
 800c3c2:	4542      	cmp	r2, r8
 800c3c4:	dd18      	ble.n	800c3f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
        TfLiteTensor* t = micro_context->AllocateTempInputTensor(node, i);
 800c3c6:	4639      	mov	r1, r7
 800c3c8:	4642      	mov	r2, r8
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f7fd fe52 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
        TF_LITE_ENSURE(context, t != nullptr);
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	b920      	cbnz	r0, 800c3de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1de>
 800c3d4:	4b1d      	ldr	r3, [pc, #116]	; (800c44c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800c3d6:	6965      	ldr	r5, [r4, #20]
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	23c2      	movs	r3, #194	; 0xc2
 800c3dc:	e722      	b.n	800c224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
        input_scales[i] = t->params.scale;
 800c3de:	68c2      	ldr	r2, [r0, #12]
 800c3e0:	f849 2b04 	str.w	r2, [r9], #4
        input_zero_points[i] = t->params.zero_point;
 800c3e4:	6902      	ldr	r2, [r0, #16]
        micro_context->DeallocateTempTfLiteTensor(t);
 800c3e6:	4630      	mov	r0, r6
        input_zero_points[i] = t->params.zero_point;
 800c3e8:	f845 2028 	str.w	r2, [r5, r8, lsl #2]
      for (int i = 0; i < node->inputs->size; ++i) {
 800c3ec:	f108 0801 	add.w	r8, r8, #1
        micro_context->DeallocateTempTfLiteTensor(t);
 800c3f0:	6832      	ldr	r2, [r6, #0]
 800c3f2:	6992      	ldr	r2, [r2, #24]
 800c3f4:	4790      	blx	r2
      for (int i = 0; i < node->inputs->size; ++i) {
 800c3f6:	e7e2      	b.n	800c3be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1be>
      data->params.input_scale = input_scales;
 800c3f8:	9b05      	ldr	r3, [sp, #20]
      data->params.input_zeropoint = input_zero_points;
 800c3fa:	e9ca 5301 	strd	r5, r3, [sl, #4]
      data->params.output_zeropoint = output->params.zero_point;
 800c3fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c402:	f8ca 3010 	str.w	r3, [sl, #16]
      data->params.output_scale = output->params.scale;
 800c406:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c40a:	f8ca 3014 	str.w	r3, [sl, #20]
      break;
 800c40e:	e7b1      	b.n	800c374 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>
 800c410:	080fbda1 	.word	0x080fbda1
 800c414:	080fbd64 	.word	0x080fbd64
 800c418:	080f93a5 	.word	0x080f93a5
 800c41c:	080fbdb9 	.word	0x080fbdb9
 800c420:	080fbdd2 	.word	0x080fbdd2
 800c424:	080fbde1 	.word	0x080fbde1
 800c428:	080f982c 	.word	0x080f982c
 800c42c:	080fbdf4 	.word	0x080fbdf4
 800c430:	080fbea5 	.word	0x080fbea5
 800c434:	080fbeb0 	.word	0x080fbeb0
 800c438:	080fbebc 	.word	0x080fbebc
 800c43c:	080fbee8 	.word	0x080fbee8
 800c440:	080fbed7 	.word	0x080fbed7
 800c444:	080fbcfa 	.word	0x080fbcfa
 800c448:	080fbf42 	.word	0x080fbf42
 800c44c:	080fcf3e 	.word	0x080fcf3e

0800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	4615      	mov	r5, r2
 800c454:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c456:	f7fb f86c 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c45a:	4604      	mov	r4, r0
 800c45c:	4631      	mov	r1, r6
 800c45e:	4628      	mov	r0, r5
 800c460:	f7fb f867 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c464:	4284      	cmp	r4, r0
 800c466:	d001      	beq.n	800c46c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
 800c468:	f00a fc6c 	bl	8016d44 <abort>
}
 800c46c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c470 <_ZN6tflite22Register_CONCATENATIONEv>:
}

}  // namespace

TFLMRegistration Register_CONCATENATION() {
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 800c470:	2300      	movs	r3, #0
 800c472:	4a06      	ldr	r2, [pc, #24]	; (800c48c <_ZN6tflite22Register_CONCATENATIONEv+0x1c>)
TFLMRegistration Register_CONCATENATION() {
 800c474:	b513      	push	{r0, r1, r4, lr}
 800c476:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 800c478:	4905      	ldr	r1, [pc, #20]	; (800c490 <_ZN6tflite22Register_CONCATENATIONEv+0x20>)
 800c47a:	e9cd 3300 	strd	r3, r3, [sp]
 800c47e:	4b05      	ldr	r3, [pc, #20]	; (800c494 <_ZN6tflite22Register_CONCATENATIONEv+0x24>)
 800c480:	f003 fbf8 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800c484:	4620      	mov	r0, r4
 800c486:	b002      	add	sp, #8
 800c488:	bd10      	pop	{r4, pc}
 800c48a:	bf00      	nop
 800c48c:	0800c201 	.word	0x0800c201
 800c490:	0800c1a1 	.word	0x0800c1a1
 800c494:	0800cfb1 	.word	0x0800cfb1

0800c498 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:

namespace tflite {
namespace reference_ops {

template <typename Scalar>
inline void Concatenation(const ConcatenationParams& params,
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                          const Scalar* const* input_data,
                          const RuntimeShape& output_shape,
                          Scalar* output_data) {
  int axis = params.axis;
  int inputs_count = params.inputs_count;
  const int concat_dimensions = output_shape.DimensionsCount();
 800c49c:	681f      	ldr	r7, [r3, #0]
inline void Concatenation(const ConcatenationParams& params,
 800c49e:	b087      	sub	sp, #28
  int axis = params.axis;
 800c4a0:	f990 4000 	ldrsb.w	r4, [r0]
inline void Concatenation(const ConcatenationParams& params,
 800c4a4:	468b      	mov	fp, r1
 800c4a6:	9204      	str	r2, [sp, #16]
 800c4a8:	461e      	mov	r6, r3
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800c4aa:	42bc      	cmp	r4, r7
  int inputs_count = params.inputs_count;
 800c4ac:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800c4b0:	db01      	blt.n	800c4b6 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1e>
 800c4b2:	f00a fc47 	bl	8016d44 <abort>

  int64_t concat_size = 0;
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	2300      	movs	r3, #0
  for (int i = 0; i < inputs_count; i++) {
 800c4ba:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
 800c4be:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800c4c2:	45d0      	cmp	r8, sl
 800c4c4:	da20      	bge.n	800c508 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x70>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800c4c6:	f85b 9028 	ldr.w	r9, [fp, r8, lsl #2]
 800c4ca:	f8d9 3000 	ldr.w	r3, [r9]
 800c4ce:	429f      	cmp	r7, r3
 800c4d0:	d1ef      	bne.n	800c4b2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
    for (int j = 0; j < concat_dimensions; j++) {
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	42bd      	cmp	r5, r7
 800c4d6:	da09      	bge.n	800c4ec <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x54>
      if (j != axis) {
 800c4d8:	42ac      	cmp	r4, r5
 800c4da:	d005      	beq.n	800c4e8 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800c4dc:	462b      	mov	r3, r5
 800c4de:	4632      	mov	r2, r6
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	4648      	mov	r0, r9
 800c4e4:	f7ff ffb4 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800c4e8:	3501      	adds	r5, #1
 800c4ea:	e7f3      	b.n	800c4d4 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
      }
    }
    concat_size += input_shapes[i]->Dims(axis);
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4648      	mov	r0, r9
 800c4f0:	f7fb f81f 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < inputs_count; i++) {
 800c4f4:	f108 0801 	add.w	r8, r8, #1
    concat_size += input_shapes[i]->Dims(axis);
 800c4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4fc:	1812      	adds	r2, r2, r0
 800c4fe:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800c502:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800c506:	e7dc      	b.n	800c4c2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x2a>
  }
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800c508:	4621      	mov	r1, r4
 800c50a:	4630      	mov	r0, r6
 800c50c:	f7fb f811 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c510:	17c1      	asrs	r1, r0, #31
 800c512:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c516:	4299      	cmp	r1, r3
 800c518:	bf08      	it	eq
 800c51a:	4290      	cmpeq	r0, r2
 800c51c:	d1c9      	bne.n	800c4b2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
  int64_t outer_size = 1;
 800c51e:	2201      	movs	r2, #1
 800c520:	2300      	movs	r3, #0
  for (int i = 0; i < axis; ++i) {
 800c522:	2500      	movs	r5, #0
  int64_t outer_size = 1;
 800c524:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < axis; ++i) {
 800c528:	42ac      	cmp	r4, r5
 800c52a:	dd12      	ble.n	800c552 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xba>
    outer_size *= output_shape.Dims(i);
 800c52c:	4629      	mov	r1, r5
 800c52e:	4630      	mov	r0, r6
 800c530:	f7fa ffff 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c534:	9900      	ldr	r1, [sp, #0]
 800c536:	17c3      	asrs	r3, r0, #31
 800c538:	9a01      	ldr	r2, [sp, #4]
  for (int i = 0; i < axis; ++i) {
 800c53a:	3501      	adds	r5, #1
    outer_size *= output_shape.Dims(i);
 800c53c:	434b      	muls	r3, r1
 800c53e:	fb00 3302 	mla	r3, r0, r2, r3
 800c542:	fba1 1200 	umull	r1, r2, r1, r0
 800c546:	e9cd 1200 	strd	r1, r2, [sp]
 800c54a:	9a01      	ldr	r2, [sp, #4]
 800c54c:	4413      	add	r3, r2
 800c54e:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < axis; ++i) {
 800c550:	e7ea      	b.n	800c528 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x90>
  }
  // For all input arrays,
  // FlatSize() = outer_size * Dims(axis) * base_inner_size;
  int64_t base_inner_size = 1;
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c552:	1c65      	adds	r5, r4, #1
  int64_t base_inner_size = 1;
 800c554:	f04f 0801 	mov.w	r8, #1
 800c558:	f04f 0900 	mov.w	r9, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c55c:	42bd      	cmp	r5, r7
 800c55e:	d12d      	bne.n	800c5bc <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x124>
 800c560:	f1ab 0304 	sub.w	r3, fp, #4
 800c564:	2200      	movs	r2, #0
 800c566:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800c56a:	2300      	movs	r3, #0
 800c56c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    base_inner_size *= output_shape.Dims(i);
  }

  Scalar* output_ptr = output_data;
  for (int k = 0; k < outer_size; k++) {
 800c570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c574:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c578:	9f02      	ldr	r7, [sp, #8]
 800c57a:	4282      	cmp	r2, r0
 800c57c:	418b      	sbcs	r3, r1
 800c57e:	da31      	bge.n	800c5e4 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x14c>
 800c580:	9b04      	ldr	r3, [sp, #16]
 800c582:	f1ab 0504 	sub.w	r5, fp, #4
 800c586:	1f1e      	subs	r6, r3, #4
    for (int i = 0; i < inputs_count; ++i) {
 800c588:	4555      	cmp	r5, sl
 800c58a:	d025      	beq.n	800c5d8 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x140>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800c58c:	4621      	mov	r1, r4
 800c58e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c592:	f7fa ffce 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c596:	fb00 f008 	mul.w	r0, r0, r8
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800c59a:	f856 1f04 	ldr.w	r1, [r6, #4]!
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800c59e:	0083      	lsls	r3, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800c5a0:	4378      	muls	r0, r7
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800c5a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c5aa:	9305      	str	r3, [sp, #20]
 800c5ac:	f00a fc51 	bl	8016e52 <memcpy>
      output_ptr += copy_size;
 800c5b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	9b05      	ldr	r3, [sp, #20]
 800c5b6:	441a      	add	r2, r3
 800c5b8:	9210      	str	r2, [sp, #64]	; 0x40
    for (int i = 0; i < inputs_count; ++i) {
 800c5ba:	e7e5      	b.n	800c588 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xf0>
    base_inner_size *= output_shape.Dims(i);
 800c5bc:	4629      	mov	r1, r5
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f7fa ffb7 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c5c4:	3501      	adds	r5, #1
    base_inner_size *= output_shape.Dims(i);
 800c5c6:	17c3      	asrs	r3, r0, #31
 800c5c8:	fb08 f303 	mul.w	r3, r8, r3
 800c5cc:	fb00 3309 	mla	r3, r0, r9, r3
 800c5d0:	fba8 8900 	umull	r8, r9, r8, r0
 800c5d4:	4499      	add	r9, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c5d6:	e7c1      	b.n	800c55c <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc4>
 800c5d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5dc:	3201      	adds	r2, #1
 800c5de:	f143 0300 	adc.w	r3, r3, #0
 800c5e2:	e7c3      	b.n	800c56c <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xd4>
    }
  }
}
 800c5e4:	b007      	add	sp, #28
 800c5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5ea <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800c5ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ec:	b0e5      	sub	sp, #404	; 0x194
  RuntimeShape() : size_(0) {}
 800c5ee:	2400      	movs	r4, #0
 800c5f0:	460d      	mov	r5, r1
 800c5f2:	4606      	mov	r6, r0
  GetAllInputTensorShapes(context, node, inputs_shape);
 800c5f4:	aa1e      	add	r2, sp, #120	; 0x78
 800c5f6:	941e      	str	r4, [sp, #120]	; 0x78
 800c5f8:	9425      	str	r4, [sp, #148]	; 0x94
 800c5fa:	942c      	str	r4, [sp, #176]	; 0xb0
 800c5fc:	9433      	str	r4, [sp, #204]	; 0xcc
 800c5fe:	943a      	str	r4, [sp, #232]	; 0xe8
 800c600:	9441      	str	r4, [sp, #260]	; 0x104
 800c602:	9448      	str	r4, [sp, #288]	; 0x120
 800c604:	944f      	str	r4, [sp, #316]	; 0x13c
 800c606:	9456      	str	r4, [sp, #344]	; 0x158
 800c608:	945d      	str	r4, [sp, #372]	; 0x174
 800c60a:	f7ff fdd2 	bl	800c1b2 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800c60e:	682b      	ldr	r3, [r5, #0]
 800c610:	aa0a      	add	r2, sp, #40	; 0x28
 800c612:	a81e      	add	r0, sp, #120	; 0x78
 800c614:	6819      	ldr	r1, [r3, #0]
 800c616:	f7ff fdb7 	bl	800c188 <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_>
  TFLITE_DCHECK(context != nullptr);
 800c61a:	b90e      	cbnz	r6, 800c620 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x36>
 800c61c:	f00a fb92 	bl	8016d44 <abort>
 800c620:	af14      	add	r7, sp, #80	; 0x50
  for (int i = 0; i < node->inputs->size; ++i) {
 800c622:	682b      	ldr	r3, [r5, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	42a3      	cmp	r3, r4
 800c628:	dd0b      	ble.n	800c642 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x58>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 800c62a:	4622      	mov	r2, r4
 800c62c:	4629      	mov	r1, r5
 800c62e:	4630      	mov	r0, r6
 800c630:	f003 fb47 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 800c634:	2800      	cmp	r0, #0
 800c636:	d0f1      	beq.n	800c61c <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x32>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c638:	6803      	ldr	r3, [r0, #0]
    all_data[i] = tflite::micro::GetTensorData<T>(t);
 800c63a:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
  for (int i = 0; i < node->inputs->size; ++i) {
 800c63e:	3401      	adds	r4, #1
 800c640:	e7ef      	b.n	800c622 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x38>
  TfLiteEvalTensor* output =
 800c642:	4629      	mov	r1, r5
 800c644:	2200      	movs	r2, #0
 800c646:	4630      	mov	r0, r6
 800c648:	f003 fb3d 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800c64c:	692d      	ldr	r5, [r5, #16]
  TfLiteEvalTensor* output =
 800c64e:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 800c650:	2d00      	cmp	r5, #0
 800c652:	d0e3      	beq.n	800c61c <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x32>
  reference_ops::Concatenation(data->params, inputs_shape_ptr, inputs_data,
 800c654:	4601      	mov	r1, r0
 800c656:	a803      	add	r0, sp, #12
 800c658:	f003 fb43 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800c65c:	2c00      	cmp	r4, #0
 800c65e:	d0dd      	beq.n	800c61c <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x32>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	463a      	mov	r2, r7
 800c664:	a90a      	add	r1, sp, #40	; 0x28
 800c666:	4628      	mov	r0, r5
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	ab03      	add	r3, sp, #12
 800c66c:	f7ff ff14 	bl	800c498 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
}
 800c670:	b065      	add	sp, #404	; 0x194
 800c672:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c674 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int concat_dimensions = output_shape.DimensionsCount();
 800c678:	681f      	ldr	r7, [r3, #0]
inline void Concatenation(const ConcatenationParams& params,
 800c67a:	b087      	sub	sp, #28
  int axis = params.axis;
 800c67c:	f990 4000 	ldrsb.w	r4, [r0]
inline void Concatenation(const ConcatenationParams& params,
 800c680:	468b      	mov	fp, r1
 800c682:	9204      	str	r2, [sp, #16]
 800c684:	461e      	mov	r6, r3
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800c686:	42bc      	cmp	r4, r7
  int inputs_count = params.inputs_count;
 800c688:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800c68c:	db01      	blt.n	800c692 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1e>
 800c68e:	f00a fb59 	bl	8016d44 <abort>
  int64_t concat_size = 0;
 800c692:	2200      	movs	r2, #0
 800c694:	2300      	movs	r3, #0
  for (int i = 0; i < inputs_count; i++) {
 800c696:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
 800c69a:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800c69e:	45d0      	cmp	r8, sl
 800c6a0:	da20      	bge.n	800c6e4 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x70>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800c6a2:	f85b 9028 	ldr.w	r9, [fp, r8, lsl #2]
 800c6a6:	f8d9 3000 	ldr.w	r3, [r9]
 800c6aa:	429f      	cmp	r7, r3
 800c6ac:	d1ef      	bne.n	800c68e <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
    for (int j = 0; j < concat_dimensions; j++) {
 800c6ae:	2500      	movs	r5, #0
 800c6b0:	42bd      	cmp	r5, r7
 800c6b2:	da09      	bge.n	800c6c8 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x54>
      if (j != axis) {
 800c6b4:	42ac      	cmp	r4, r5
 800c6b6:	d005      	beq.n	800c6c4 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800c6b8:	462b      	mov	r3, r5
 800c6ba:	4632      	mov	r2, r6
 800c6bc:	4629      	mov	r1, r5
 800c6be:	4648      	mov	r0, r9
 800c6c0:	f7ff fec6 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800c6c4:	3501      	adds	r5, #1
 800c6c6:	e7f3      	b.n	800c6b0 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4648      	mov	r0, r9
 800c6cc:	f7fa ff31 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < inputs_count; i++) {
 800c6d0:	f108 0801 	add.w	r8, r8, #1
    concat_size += input_shapes[i]->Dims(axis);
 800c6d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6d8:	1812      	adds	r2, r2, r0
 800c6da:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800c6de:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800c6e2:	e7dc      	b.n	800c69e <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x2a>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7fa ff23 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c6ec:	17c1      	asrs	r1, r0, #31
 800c6ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	bf08      	it	eq
 800c6f6:	4290      	cmpeq	r0, r2
 800c6f8:	d1c9      	bne.n	800c68e <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
  int64_t outer_size = 1;
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	2300      	movs	r3, #0
  for (int i = 0; i < axis; ++i) {
 800c6fe:	2500      	movs	r5, #0
  int64_t outer_size = 1;
 800c700:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < axis; ++i) {
 800c704:	42ac      	cmp	r4, r5
 800c706:	dd12      	ble.n	800c72e <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xba>
    outer_size *= output_shape.Dims(i);
 800c708:	4629      	mov	r1, r5
 800c70a:	4630      	mov	r0, r6
 800c70c:	f7fa ff11 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c710:	9900      	ldr	r1, [sp, #0]
 800c712:	17c3      	asrs	r3, r0, #31
 800c714:	9a01      	ldr	r2, [sp, #4]
  for (int i = 0; i < axis; ++i) {
 800c716:	3501      	adds	r5, #1
    outer_size *= output_shape.Dims(i);
 800c718:	434b      	muls	r3, r1
 800c71a:	fb00 3302 	mla	r3, r0, r2, r3
 800c71e:	fba1 1200 	umull	r1, r2, r1, r0
 800c722:	e9cd 1200 	strd	r1, r2, [sp]
 800c726:	9a01      	ldr	r2, [sp, #4]
 800c728:	4413      	add	r3, r2
 800c72a:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < axis; ++i) {
 800c72c:	e7ea      	b.n	800c704 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x90>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c72e:	1c65      	adds	r5, r4, #1
  int64_t base_inner_size = 1;
 800c730:	f04f 0801 	mov.w	r8, #1
 800c734:	f04f 0900 	mov.w	r9, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c738:	42bd      	cmp	r5, r7
 800c73a:	d12d      	bne.n	800c798 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x124>
 800c73c:	f1ab 0304 	sub.w	r3, fp, #4
 800c740:	2200      	movs	r2, #0
 800c742:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800c746:	2300      	movs	r3, #0
 800c748:	e9cd 2302 	strd	r2, r3, [sp, #8]
  for (int k = 0; k < outer_size; k++) {
 800c74c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c750:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c754:	9f02      	ldr	r7, [sp, #8]
 800c756:	4282      	cmp	r2, r0
 800c758:	418b      	sbcs	r3, r1
 800c75a:	da31      	bge.n	800c7c0 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x14c>
 800c75c:	9b04      	ldr	r3, [sp, #16]
 800c75e:	f1ab 0504 	sub.w	r5, fp, #4
 800c762:	1f1e      	subs	r6, r3, #4
    for (int i = 0; i < inputs_count; ++i) {
 800c764:	4555      	cmp	r5, sl
 800c766:	d025      	beq.n	800c7b4 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x140>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800c768:	4621      	mov	r1, r4
 800c76a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c76e:	f7fa fee0 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c772:	fb00 f008 	mul.w	r0, r0, r8
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800c776:	f856 1f04 	ldr.w	r1, [r6, #4]!
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800c77a:	0083      	lsls	r3, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800c77c:	4378      	muls	r0, r7
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800c77e:	461a      	mov	r2, r3
 800c780:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800c784:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c786:	9305      	str	r3, [sp, #20]
 800c788:	f00a fb63 	bl	8016e52 <memcpy>
      output_ptr += copy_size;
 800c78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c78e:	461a      	mov	r2, r3
 800c790:	9b05      	ldr	r3, [sp, #20]
 800c792:	441a      	add	r2, r3
 800c794:	9210      	str	r2, [sp, #64]	; 0x40
    for (int i = 0; i < inputs_count; ++i) {
 800c796:	e7e5      	b.n	800c764 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xf0>
    base_inner_size *= output_shape.Dims(i);
 800c798:	4629      	mov	r1, r5
 800c79a:	4630      	mov	r0, r6
 800c79c:	f7fa fec9 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c7a0:	3501      	adds	r5, #1
    base_inner_size *= output_shape.Dims(i);
 800c7a2:	17c3      	asrs	r3, r0, #31
 800c7a4:	fb08 f303 	mul.w	r3, r8, r3
 800c7a8:	fb00 3309 	mla	r3, r0, r9, r3
 800c7ac:	fba8 8900 	umull	r8, r9, r8, r0
 800c7b0:	4499      	add	r9, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c7b2:	e7c1      	b.n	800c738 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc4>
 800c7b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7b8:	3201      	adds	r2, #1
 800c7ba:	f143 0300 	adc.w	r3, r3, #0
 800c7be:	e7c3      	b.n	800c748 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xd4>
}
 800c7c0:	b007      	add	sp, #28
 800c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7c6 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800c7c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7c8:	b0e5      	sub	sp, #404	; 0x194
 800c7ca:	2400      	movs	r4, #0
 800c7cc:	460d      	mov	r5, r1
 800c7ce:	4606      	mov	r6, r0
  GetAllInputTensorShapes(context, node, inputs_shape);
 800c7d0:	aa1e      	add	r2, sp, #120	; 0x78
 800c7d2:	941e      	str	r4, [sp, #120]	; 0x78
 800c7d4:	9425      	str	r4, [sp, #148]	; 0x94
 800c7d6:	942c      	str	r4, [sp, #176]	; 0xb0
 800c7d8:	9433      	str	r4, [sp, #204]	; 0xcc
 800c7da:	943a      	str	r4, [sp, #232]	; 0xe8
 800c7dc:	9441      	str	r4, [sp, #260]	; 0x104
 800c7de:	9448      	str	r4, [sp, #288]	; 0x120
 800c7e0:	944f      	str	r4, [sp, #316]	; 0x13c
 800c7e2:	9456      	str	r4, [sp, #344]	; 0x158
 800c7e4:	945d      	str	r4, [sp, #372]	; 0x174
 800c7e6:	f7ff fce4 	bl	800c1b2 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800c7ea:	682b      	ldr	r3, [r5, #0]
 800c7ec:	aa0a      	add	r2, sp, #40	; 0x28
 800c7ee:	a81e      	add	r0, sp, #120	; 0x78
 800c7f0:	6819      	ldr	r1, [r3, #0]
 800c7f2:	f7ff fcc9 	bl	800c188 <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_>
  TFLITE_DCHECK(context != nullptr);
 800c7f6:	b90e      	cbnz	r6, 800c7fc <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x36>
 800c7f8:	f00a faa4 	bl	8016d44 <abort>
 800c7fc:	af14      	add	r7, sp, #80	; 0x50
  for (int i = 0; i < node->inputs->size; ++i) {
 800c7fe:	682b      	ldr	r3, [r5, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	42a3      	cmp	r3, r4
 800c804:	dd0b      	ble.n	800c81e <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x58>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 800c806:	4622      	mov	r2, r4
 800c808:	4629      	mov	r1, r5
 800c80a:	4630      	mov	r0, r6
 800c80c:	f003 fa59 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 800c810:	2800      	cmp	r0, #0
 800c812:	d0f1      	beq.n	800c7f8 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x32>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c814:	6803      	ldr	r3, [r0, #0]
    all_data[i] = tflite::micro::GetTensorData<T>(t);
 800c816:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
  for (int i = 0; i < node->inputs->size; ++i) {
 800c81a:	3401      	adds	r4, #1
 800c81c:	e7ef      	b.n	800c7fe <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x38>
  TfLiteEvalTensor* output =
 800c81e:	4629      	mov	r1, r5
 800c820:	2200      	movs	r2, #0
 800c822:	4630      	mov	r0, r6
 800c824:	f003 fa4f 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800c828:	692d      	ldr	r5, [r5, #16]
  TfLiteEvalTensor* output =
 800c82a:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	d0e3      	beq.n	800c7f8 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x32>
  reference_ops::Concatenation(data->params, inputs_shape_ptr, inputs_data,
 800c830:	4601      	mov	r1, r0
 800c832:	a803      	add	r0, sp, #12
 800c834:	f003 fa55 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800c838:	2c00      	cmp	r4, #0
 800c83a:	d0dd      	beq.n	800c7f8 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x32>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	463a      	mov	r2, r7
 800c840:	a90a      	add	r1, sp, #40	; 0x28
 800c842:	4628      	mov	r0, r5
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	ab03      	add	r3, sp, #12
 800c848:	f7ff ff14 	bl	800c674 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
}
 800c84c:	b065      	add	sp, #404	; 0x194
 800c84e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c850 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int concat_dimensions = output_shape.DimensionsCount();
 800c854:	681f      	ldr	r7, [r3, #0]
inline void Concatenation(const ConcatenationParams& params,
 800c856:	b089      	sub	sp, #36	; 0x24
  int axis = params.axis;
 800c858:	f990 4000 	ldrsb.w	r4, [r0]
inline void Concatenation(const ConcatenationParams& params,
 800c85c:	468b      	mov	fp, r1
 800c85e:	9205      	str	r2, [sp, #20]
 800c860:	461e      	mov	r6, r3
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800c862:	42bc      	cmp	r4, r7
  int inputs_count = params.inputs_count;
 800c864:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800c868:	db01      	blt.n	800c86e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1e>
 800c86a:	f00a fa6b 	bl	8016d44 <abort>
  int64_t concat_size = 0;
 800c86e:	2200      	movs	r2, #0
 800c870:	2300      	movs	r3, #0
  for (int i = 0; i < inputs_count; i++) {
 800c872:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
 800c876:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800c87a:	45d0      	cmp	r8, sl
 800c87c:	da20      	bge.n	800c8c0 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x70>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800c87e:	f85b 9028 	ldr.w	r9, [fp, r8, lsl #2]
 800c882:	f8d9 3000 	ldr.w	r3, [r9]
 800c886:	429f      	cmp	r7, r3
 800c888:	d1ef      	bne.n	800c86a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
    for (int j = 0; j < concat_dimensions; j++) {
 800c88a:	2500      	movs	r5, #0
 800c88c:	42bd      	cmp	r5, r7
 800c88e:	da09      	bge.n	800c8a4 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x54>
      if (j != axis) {
 800c890:	42ac      	cmp	r4, r5
 800c892:	d005      	beq.n	800c8a0 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800c894:	462b      	mov	r3, r5
 800c896:	4632      	mov	r2, r6
 800c898:	4629      	mov	r1, r5
 800c89a:	4648      	mov	r0, r9
 800c89c:	f7ff fdd8 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800c8a0:	3501      	adds	r5, #1
 800c8a2:	e7f3      	b.n	800c88c <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	4648      	mov	r0, r9
 800c8a8:	f7fa fe43 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < inputs_count; i++) {
 800c8ac:	f108 0801 	add.w	r8, r8, #1
    concat_size += input_shapes[i]->Dims(axis);
 800c8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8b4:	1812      	adds	r2, r2, r0
 800c8b6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800c8ba:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800c8be:	e7dc      	b.n	800c87a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x2a>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7fa fe35 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c8c8:	17c1      	asrs	r1, r0, #31
 800c8ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ce:	4299      	cmp	r1, r3
 800c8d0:	bf08      	it	eq
 800c8d2:	4290      	cmpeq	r0, r2
 800c8d4:	d1c9      	bne.n	800c86a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
  for (int i = 0; i < axis; ++i) {
 800c8d6:	2500      	movs	r5, #0
  int64_t outer_size = 1;
 800c8d8:	f04f 0801 	mov.w	r8, #1
 800c8dc:	f04f 0900 	mov.w	r9, #0
  for (int i = 0; i < axis; ++i) {
 800c8e0:	42ac      	cmp	r4, r5
 800c8e2:	dd0d      	ble.n	800c900 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xb0>
    outer_size *= output_shape.Dims(i);
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7fa fe23 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
 800c8ec:	3501      	adds	r5, #1
    outer_size *= output_shape.Dims(i);
 800c8ee:	17c3      	asrs	r3, r0, #31
 800c8f0:	fb08 f303 	mul.w	r3, r8, r3
 800c8f4:	fb00 3309 	mla	r3, r0, r9, r3
 800c8f8:	fba8 8900 	umull	r8, r9, r8, r0
 800c8fc:	4499      	add	r9, r3
  for (int i = 0; i < axis; ++i) {
 800c8fe:	e7ef      	b.n	800c8e0 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x90>
  int64_t base_inner_size = 1;
 800c900:	2201      	movs	r2, #1
 800c902:	2300      	movs	r3, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c904:	1c65      	adds	r5, r4, #1
  int64_t base_inner_size = 1;
 800c906:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c90a:	42bd      	cmp	r5, r7
 800c90c:	d12b      	bne.n	800c966 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
 800c90e:	f1ab 0304 	sub.w	r3, fp, #4
 800c912:	2600      	movs	r6, #0
 800c914:	2700      	movs	r7, #0
 800c916:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c91a:	9304      	str	r3, [sp, #16]
  for (int k = 0; k < outer_size; k++) {
 800c91c:	4546      	cmp	r6, r8
 800c91e:	9603      	str	r6, [sp, #12]
 800c920:	eb77 0309 	sbcs.w	r3, r7, r9
 800c924:	da36      	bge.n	800c994 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x144>
 800c926:	9a05      	ldr	r2, [sp, #20]
 800c928:	f1ab 0304 	sub.w	r3, fp, #4
 800c92c:	f1a2 0a04 	sub.w	sl, r2, #4
    for (int i = 0; i < inputs_count; ++i) {
 800c930:	9a04      	ldr	r2, [sp, #16]
 800c932:	4293      	cmp	r3, r2
 800c934:	d02a      	beq.n	800c98c <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x13c>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800c936:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800c93a:	4621      	mov	r1, r4
 800c93c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800c940:	f7fa fdf7 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c944:	9b00      	ldr	r3, [sp, #0]
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800c946:	f85a 1f04 	ldr.w	r1, [sl, #4]!
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800c94a:	fb00 f503 	mul.w	r5, r0, r3
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800c94e:	9b03      	ldr	r3, [sp, #12]
 800c950:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c952:	fb03 1105 	mla	r1, r3, r5, r1
 800c956:	462a      	mov	r2, r5
 800c958:	f00a fa7b 	bl	8016e52 <memcpy>
      output_ptr += copy_size;
 800c95c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c95e:	442b      	add	r3, r5
 800c960:	9312      	str	r3, [sp, #72]	; 0x48
    for (int i = 0; i < inputs_count; ++i) {
 800c962:	9b06      	ldr	r3, [sp, #24]
 800c964:	e7e4      	b.n	800c930 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xe0>
    base_inner_size *= output_shape.Dims(i);
 800c966:	4629      	mov	r1, r5
 800c968:	4630      	mov	r0, r6
 800c96a:	f7fa fde2 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c96e:	9900      	ldr	r1, [sp, #0]
 800c970:	17c3      	asrs	r3, r0, #31
 800c972:	9a01      	ldr	r2, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c974:	3501      	adds	r5, #1
    base_inner_size *= output_shape.Dims(i);
 800c976:	434b      	muls	r3, r1
 800c978:	fb00 3302 	mla	r3, r0, r2, r3
 800c97c:	fba1 1200 	umull	r1, r2, r1, r0
 800c980:	e9cd 1200 	strd	r1, r2, [sp]
 800c984:	9a01      	ldr	r2, [sp, #4]
 800c986:	4413      	add	r3, r2
 800c988:	9301      	str	r3, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800c98a:	e7be      	b.n	800c90a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xba>
 800c98c:	3601      	adds	r6, #1
 800c98e:	f147 0700 	adc.w	r7, r7, #0
  for (int k = 0; k < outer_size; k++) {
 800c992:	e7c3      	b.n	800c91c <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xcc>
}
 800c994:	b009      	add	sp, #36	; 0x24
 800c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c99a <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800c99a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c99c:	b0e5      	sub	sp, #404	; 0x194
 800c99e:	2400      	movs	r4, #0
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	4606      	mov	r6, r0
  GetAllInputTensorShapes(context, node, inputs_shape);
 800c9a4:	aa1e      	add	r2, sp, #120	; 0x78
 800c9a6:	941e      	str	r4, [sp, #120]	; 0x78
 800c9a8:	9425      	str	r4, [sp, #148]	; 0x94
 800c9aa:	942c      	str	r4, [sp, #176]	; 0xb0
 800c9ac:	9433      	str	r4, [sp, #204]	; 0xcc
 800c9ae:	943a      	str	r4, [sp, #232]	; 0xe8
 800c9b0:	9441      	str	r4, [sp, #260]	; 0x104
 800c9b2:	9448      	str	r4, [sp, #288]	; 0x120
 800c9b4:	944f      	str	r4, [sp, #316]	; 0x13c
 800c9b6:	9456      	str	r4, [sp, #344]	; 0x158
 800c9b8:	945d      	str	r4, [sp, #372]	; 0x174
 800c9ba:	f7ff fbfa 	bl	800c1b2 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800c9be:	682b      	ldr	r3, [r5, #0]
 800c9c0:	aa0a      	add	r2, sp, #40	; 0x28
 800c9c2:	a81e      	add	r0, sp, #120	; 0x78
 800c9c4:	6819      	ldr	r1, [r3, #0]
 800c9c6:	f7ff fbdf 	bl	800c188 <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_>
  TFLITE_DCHECK(context != nullptr);
 800c9ca:	b90e      	cbnz	r6, 800c9d0 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x36>
 800c9cc:	f00a f9ba 	bl	8016d44 <abort>
 800c9d0:	af14      	add	r7, sp, #80	; 0x50
  for (int i = 0; i < node->inputs->size; ++i) {
 800c9d2:	682b      	ldr	r3, [r5, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	42a3      	cmp	r3, r4
 800c9d8:	dd0b      	ble.n	800c9f2 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x58>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 800c9da:	4622      	mov	r2, r4
 800c9dc:	4629      	mov	r1, r5
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f003 f96f 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d0f1      	beq.n	800c9cc <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x32>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c9e8:	6803      	ldr	r3, [r0, #0]
    all_data[i] = tflite::micro::GetTensorData<T>(t);
 800c9ea:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
  for (int i = 0; i < node->inputs->size; ++i) {
 800c9ee:	3401      	adds	r4, #1
 800c9f0:	e7ef      	b.n	800c9d2 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x38>
  TfLiteEvalTensor* output =
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f003 f965 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800c9fc:	692d      	ldr	r5, [r5, #16]
  TfLiteEvalTensor* output =
 800c9fe:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 800ca00:	2d00      	cmp	r5, #0
 800ca02:	d0e3      	beq.n	800c9cc <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x32>
  reference_ops::Concatenation(data->params, inputs_shape_ptr, inputs_data,
 800ca04:	4601      	mov	r1, r0
 800ca06:	a803      	add	r0, sp, #12
 800ca08:	f003 f96b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800ca0c:	2c00      	cmp	r4, #0
 800ca0e:	d0dd      	beq.n	800c9cc <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x32>
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	463a      	mov	r2, r7
 800ca14:	a90a      	add	r1, sp, #40	; 0x28
 800ca16:	4628      	mov	r0, r5
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	ab03      	add	r3, sp, #12
 800ca1c:	f7ff ff18 	bl	800c850 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
}
 800ca20:	b065      	add	sp, #404	; 0x194
 800ca22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca24 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800ca24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int concat_dimensions = output_shape.DimensionsCount();
 800ca28:	681f      	ldr	r7, [r3, #0]
inline void Concatenation(const ConcatenationParams& params,
 800ca2a:	b087      	sub	sp, #28
  int axis = params.axis;
 800ca2c:	f990 4000 	ldrsb.w	r4, [r0]
inline void Concatenation(const ConcatenationParams& params,
 800ca30:	468b      	mov	fp, r1
 800ca32:	9204      	str	r2, [sp, #16]
 800ca34:	461e      	mov	r6, r3
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800ca36:	42bc      	cmp	r4, r7
  int inputs_count = params.inputs_count;
 800ca38:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800ca3c:	db01      	blt.n	800ca42 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1e>
 800ca3e:	f00a f981 	bl	8016d44 <abort>
  int64_t concat_size = 0;
 800ca42:	2200      	movs	r2, #0
 800ca44:	2300      	movs	r3, #0
  for (int i = 0; i < inputs_count; i++) {
 800ca46:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
 800ca4a:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800ca4e:	45d0      	cmp	r8, sl
 800ca50:	da20      	bge.n	800ca94 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x70>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800ca52:	f85b 9028 	ldr.w	r9, [fp, r8, lsl #2]
 800ca56:	f8d9 3000 	ldr.w	r3, [r9]
 800ca5a:	429f      	cmp	r7, r3
 800ca5c:	d1ef      	bne.n	800ca3e <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
    for (int j = 0; j < concat_dimensions; j++) {
 800ca5e:	2500      	movs	r5, #0
 800ca60:	42bd      	cmp	r5, r7
 800ca62:	da09      	bge.n	800ca78 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x54>
      if (j != axis) {
 800ca64:	42ac      	cmp	r4, r5
 800ca66:	d005      	beq.n	800ca74 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800ca68:	462b      	mov	r3, r5
 800ca6a:	4632      	mov	r2, r6
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	4648      	mov	r0, r9
 800ca70:	f7ff fcee 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800ca74:	3501      	adds	r5, #1
 800ca76:	e7f3      	b.n	800ca60 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4648      	mov	r0, r9
 800ca7c:	f7fa fd59 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < inputs_count; i++) {
 800ca80:	f108 0801 	add.w	r8, r8, #1
    concat_size += input_shapes[i]->Dims(axis);
 800ca84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca88:	1812      	adds	r2, r2, r0
 800ca8a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800ca8e:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800ca92:	e7dc      	b.n	800ca4e <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x2a>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800ca94:	4621      	mov	r1, r4
 800ca96:	4630      	mov	r0, r6
 800ca98:	f7fa fd4b 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ca9c:	17c1      	asrs	r1, r0, #31
 800ca9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caa2:	4299      	cmp	r1, r3
 800caa4:	bf08      	it	eq
 800caa6:	4290      	cmpeq	r0, r2
 800caa8:	d1c9      	bne.n	800ca3e <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
  int64_t outer_size = 1;
 800caaa:	2201      	movs	r2, #1
 800caac:	2300      	movs	r3, #0
  for (int i = 0; i < axis; ++i) {
 800caae:	2500      	movs	r5, #0
  int64_t outer_size = 1;
 800cab0:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < axis; ++i) {
 800cab4:	42ac      	cmp	r4, r5
 800cab6:	dd12      	ble.n	800cade <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xba>
    outer_size *= output_shape.Dims(i);
 800cab8:	4629      	mov	r1, r5
 800caba:	4630      	mov	r0, r6
 800cabc:	f7fa fd39 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cac0:	9900      	ldr	r1, [sp, #0]
 800cac2:	17c3      	asrs	r3, r0, #31
 800cac4:	9a01      	ldr	r2, [sp, #4]
  for (int i = 0; i < axis; ++i) {
 800cac6:	3501      	adds	r5, #1
    outer_size *= output_shape.Dims(i);
 800cac8:	434b      	muls	r3, r1
 800caca:	fb00 3302 	mla	r3, r0, r2, r3
 800cace:	fba1 1200 	umull	r1, r2, r1, r0
 800cad2:	e9cd 1200 	strd	r1, r2, [sp]
 800cad6:	9a01      	ldr	r2, [sp, #4]
 800cad8:	4413      	add	r3, r2
 800cada:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < axis; ++i) {
 800cadc:	e7ea      	b.n	800cab4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x90>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800cade:	1c65      	adds	r5, r4, #1
  int64_t base_inner_size = 1;
 800cae0:	f04f 0801 	mov.w	r8, #1
 800cae4:	f04f 0900 	mov.w	r9, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800cae8:	42bd      	cmp	r5, r7
 800caea:	d12d      	bne.n	800cb48 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x124>
 800caec:	f1ab 0304 	sub.w	r3, fp, #4
 800caf0:	2200      	movs	r2, #0
 800caf2:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800caf6:	2300      	movs	r3, #0
 800caf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  for (int k = 0; k < outer_size; k++) {
 800cafc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb04:	9f02      	ldr	r7, [sp, #8]
 800cb06:	4282      	cmp	r2, r0
 800cb08:	418b      	sbcs	r3, r1
 800cb0a:	da31      	bge.n	800cb70 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x14c>
 800cb0c:	9b04      	ldr	r3, [sp, #16]
 800cb0e:	f1ab 0504 	sub.w	r5, fp, #4
 800cb12:	1f1e      	subs	r6, r3, #4
    for (int i = 0; i < inputs_count; ++i) {
 800cb14:	4555      	cmp	r5, sl
 800cb16:	d025      	beq.n	800cb64 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x140>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800cb18:	4621      	mov	r1, r4
 800cb1a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800cb1e:	f7fa fd08 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cb22:	fb00 f008 	mul.w	r0, r0, r8
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800cb26:	f856 1f04 	ldr.w	r1, [r6, #4]!
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800cb2a:	00c3      	lsls	r3, r0, #3
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800cb2c:	4378      	muls	r0, r7
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800cb2e:	461a      	mov	r2, r3
 800cb30:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cb34:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb36:	9305      	str	r3, [sp, #20]
 800cb38:	f00a f98b 	bl	8016e52 <memcpy>
      output_ptr += copy_size;
 800cb3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb3e:	461a      	mov	r2, r3
 800cb40:	9b05      	ldr	r3, [sp, #20]
 800cb42:	441a      	add	r2, r3
 800cb44:	9210      	str	r2, [sp, #64]	; 0x40
    for (int i = 0; i < inputs_count; ++i) {
 800cb46:	e7e5      	b.n	800cb14 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xf0>
    base_inner_size *= output_shape.Dims(i);
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f7fa fcf1 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800cb50:	3501      	adds	r5, #1
    base_inner_size *= output_shape.Dims(i);
 800cb52:	17c3      	asrs	r3, r0, #31
 800cb54:	fb08 f303 	mul.w	r3, r8, r3
 800cb58:	fb00 3309 	mla	r3, r0, r9, r3
 800cb5c:	fba8 8900 	umull	r8, r9, r8, r0
 800cb60:	4499      	add	r9, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800cb62:	e7c1      	b.n	800cae8 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc4>
 800cb64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb68:	3201      	adds	r2, #1
 800cb6a:	f143 0300 	adc.w	r3, r3, #0
 800cb6e:	e7c3      	b.n	800caf8 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xd4>
}
 800cb70:	b007      	add	sp, #28
 800cb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb76 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800cb76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb78:	b0e5      	sub	sp, #404	; 0x194
 800cb7a:	2400      	movs	r4, #0
 800cb7c:	460d      	mov	r5, r1
 800cb7e:	4606      	mov	r6, r0
  GetAllInputTensorShapes(context, node, inputs_shape);
 800cb80:	aa1e      	add	r2, sp, #120	; 0x78
 800cb82:	941e      	str	r4, [sp, #120]	; 0x78
 800cb84:	9425      	str	r4, [sp, #148]	; 0x94
 800cb86:	942c      	str	r4, [sp, #176]	; 0xb0
 800cb88:	9433      	str	r4, [sp, #204]	; 0xcc
 800cb8a:	943a      	str	r4, [sp, #232]	; 0xe8
 800cb8c:	9441      	str	r4, [sp, #260]	; 0x104
 800cb8e:	9448      	str	r4, [sp, #288]	; 0x120
 800cb90:	944f      	str	r4, [sp, #316]	; 0x13c
 800cb92:	9456      	str	r4, [sp, #344]	; 0x158
 800cb94:	945d      	str	r4, [sp, #372]	; 0x174
 800cb96:	f7ff fb0c 	bl	800c1b2 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800cb9a:	682b      	ldr	r3, [r5, #0]
 800cb9c:	aa0a      	add	r2, sp, #40	; 0x28
 800cb9e:	a81e      	add	r0, sp, #120	; 0x78
 800cba0:	6819      	ldr	r1, [r3, #0]
 800cba2:	f7ff faf1 	bl	800c188 <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_>
  TFLITE_DCHECK(context != nullptr);
 800cba6:	b90e      	cbnz	r6, 800cbac <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x36>
 800cba8:	f00a f8cc 	bl	8016d44 <abort>
 800cbac:	af14      	add	r7, sp, #80	; 0x50
  for (int i = 0; i < node->inputs->size; ++i) {
 800cbae:	682b      	ldr	r3, [r5, #0]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	42a3      	cmp	r3, r4
 800cbb4:	dd0b      	ble.n	800cbce <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x58>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f003 f881 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d0f1      	beq.n	800cba8 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x32>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800cbc4:	6803      	ldr	r3, [r0, #0]
    all_data[i] = tflite::micro::GetTensorData<T>(t);
 800cbc6:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
  for (int i = 0; i < node->inputs->size; ++i) {
 800cbca:	3401      	adds	r4, #1
 800cbcc:	e7ef      	b.n	800cbae <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x38>
  TfLiteEvalTensor* output =
 800cbce:	4629      	mov	r1, r5
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f003 f877 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800cbd8:	692d      	ldr	r5, [r5, #16]
  TfLiteEvalTensor* output =
 800cbda:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 800cbdc:	2d00      	cmp	r5, #0
 800cbde:	d0e3      	beq.n	800cba8 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x32>
  reference_ops::Concatenation(data->params, inputs_shape_ptr, inputs_data,
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	a803      	add	r0, sp, #12
 800cbe4:	f003 f87d 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800cbe8:	2c00      	cmp	r4, #0
 800cbea:	d0dd      	beq.n	800cba8 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x32>
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	463a      	mov	r2, r7
 800cbf0:	a90a      	add	r1, sp, #40	; 0x28
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	ab03      	add	r3, sp, #12
 800cbf8:	f7ff ff14 	bl	800ca24 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
}
 800cbfc:	b065      	add	sp, #404	; 0x194
 800cbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc00 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800cc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int concat_dimensions = output_shape.DimensionsCount();
 800cc04:	681f      	ldr	r7, [r3, #0]
inline void Concatenation(const ConcatenationParams& params,
 800cc06:	b087      	sub	sp, #28
  int axis = params.axis;
 800cc08:	f990 4000 	ldrsb.w	r4, [r0]
inline void Concatenation(const ConcatenationParams& params,
 800cc0c:	468b      	mov	fp, r1
 800cc0e:	9204      	str	r2, [sp, #16]
 800cc10:	461e      	mov	r6, r3
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800cc12:	42bc      	cmp	r4, r7
  int inputs_count = params.inputs_count;
 800cc14:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800cc18:	db01      	blt.n	800cc1e <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1e>
 800cc1a:	f00a f893 	bl	8016d44 <abort>
  int64_t concat_size = 0;
 800cc1e:	2200      	movs	r2, #0
 800cc20:	2300      	movs	r3, #0
  for (int i = 0; i < inputs_count; i++) {
 800cc22:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
 800cc26:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800cc2a:	45d0      	cmp	r8, sl
 800cc2c:	da20      	bge.n	800cc70 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x70>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800cc2e:	f85b 9028 	ldr.w	r9, [fp, r8, lsl #2]
 800cc32:	f8d9 3000 	ldr.w	r3, [r9]
 800cc36:	429f      	cmp	r7, r3
 800cc38:	d1ef      	bne.n	800cc1a <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
    for (int j = 0; j < concat_dimensions; j++) {
 800cc3a:	2500      	movs	r5, #0
 800cc3c:	42bd      	cmp	r5, r7
 800cc3e:	da09      	bge.n	800cc54 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x54>
      if (j != axis) {
 800cc40:	42ac      	cmp	r4, r5
 800cc42:	d005      	beq.n	800cc50 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800cc44:	462b      	mov	r3, r5
 800cc46:	4632      	mov	r2, r6
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4648      	mov	r0, r9
 800cc4c:	f7ff fc00 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800cc50:	3501      	adds	r5, #1
 800cc52:	e7f3      	b.n	800cc3c <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
 800cc54:	4621      	mov	r1, r4
 800cc56:	4648      	mov	r0, r9
 800cc58:	f7fa fc6b 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < inputs_count; i++) {
 800cc5c:	f108 0801 	add.w	r8, r8, #1
    concat_size += input_shapes[i]->Dims(axis);
 800cc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc64:	1812      	adds	r2, r2, r0
 800cc66:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800cc6a:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800cc6e:	e7dc      	b.n	800cc2a <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x2a>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800cc70:	4621      	mov	r1, r4
 800cc72:	4630      	mov	r0, r6
 800cc74:	f7fa fc5d 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cc78:	17c1      	asrs	r1, r0, #31
 800cc7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc7e:	4299      	cmp	r1, r3
 800cc80:	bf08      	it	eq
 800cc82:	4290      	cmpeq	r0, r2
 800cc84:	d1c9      	bne.n	800cc1a <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
  int64_t outer_size = 1;
 800cc86:	2201      	movs	r2, #1
 800cc88:	2300      	movs	r3, #0
  for (int i = 0; i < axis; ++i) {
 800cc8a:	2500      	movs	r5, #0
  int64_t outer_size = 1;
 800cc8c:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < axis; ++i) {
 800cc90:	42ac      	cmp	r4, r5
 800cc92:	dd12      	ble.n	800ccba <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xba>
    outer_size *= output_shape.Dims(i);
 800cc94:	4629      	mov	r1, r5
 800cc96:	4630      	mov	r0, r6
 800cc98:	f7fa fc4b 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cc9c:	9900      	ldr	r1, [sp, #0]
 800cc9e:	17c3      	asrs	r3, r0, #31
 800cca0:	9a01      	ldr	r2, [sp, #4]
  for (int i = 0; i < axis; ++i) {
 800cca2:	3501      	adds	r5, #1
    outer_size *= output_shape.Dims(i);
 800cca4:	434b      	muls	r3, r1
 800cca6:	fb00 3302 	mla	r3, r0, r2, r3
 800ccaa:	fba1 1200 	umull	r1, r2, r1, r0
 800ccae:	e9cd 1200 	strd	r1, r2, [sp]
 800ccb2:	9a01      	ldr	r2, [sp, #4]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < axis; ++i) {
 800ccb8:	e7ea      	b.n	800cc90 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x90>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800ccba:	1c65      	adds	r5, r4, #1
  int64_t base_inner_size = 1;
 800ccbc:	f04f 0801 	mov.w	r8, #1
 800ccc0:	f04f 0900 	mov.w	r9, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800ccc4:	42bd      	cmp	r5, r7
 800ccc6:	d12d      	bne.n	800cd24 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x124>
 800ccc8:	f1ab 0304 	sub.w	r3, fp, #4
 800cccc:	2200      	movs	r2, #0
 800ccce:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  for (int k = 0; k < outer_size; k++) {
 800ccd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cce0:	9f02      	ldr	r7, [sp, #8]
 800cce2:	4282      	cmp	r2, r0
 800cce4:	418b      	sbcs	r3, r1
 800cce6:	da31      	bge.n	800cd4c <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x14c>
 800cce8:	9b04      	ldr	r3, [sp, #16]
 800ccea:	f1ab 0504 	sub.w	r5, fp, #4
 800ccee:	1f1e      	subs	r6, r3, #4
    for (int i = 0; i < inputs_count; ++i) {
 800ccf0:	4555      	cmp	r5, sl
 800ccf2:	d025      	beq.n	800cd40 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x140>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800ccfa:	f7fa fc1a 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ccfe:	fb00 f008 	mul.w	r0, r0, r8
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800cd02:	f856 1f04 	ldr.w	r1, [r6, #4]!
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800cd06:	0043      	lsls	r3, r0, #1
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800cd08:	4378      	muls	r0, r7
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800cd10:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cd12:	9305      	str	r3, [sp, #20]
 800cd14:	f00a f89d 	bl	8016e52 <memcpy>
      output_ptr += copy_size;
 800cd18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	9b05      	ldr	r3, [sp, #20]
 800cd1e:	441a      	add	r2, r3
 800cd20:	9210      	str	r2, [sp, #64]	; 0x40
    for (int i = 0; i < inputs_count; ++i) {
 800cd22:	e7e5      	b.n	800ccf0 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xf0>
    base_inner_size *= output_shape.Dims(i);
 800cd24:	4629      	mov	r1, r5
 800cd26:	4630      	mov	r0, r6
 800cd28:	f7fa fc03 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800cd2c:	3501      	adds	r5, #1
    base_inner_size *= output_shape.Dims(i);
 800cd2e:	17c3      	asrs	r3, r0, #31
 800cd30:	fb08 f303 	mul.w	r3, r8, r3
 800cd34:	fb00 3309 	mla	r3, r0, r9, r3
 800cd38:	fba8 8900 	umull	r8, r9, r8, r0
 800cd3c:	4499      	add	r9, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800cd3e:	e7c1      	b.n	800ccc4 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc4>
 800cd40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd44:	3201      	adds	r2, #1
 800cd46:	f143 0300 	adc.w	r3, r3, #0
 800cd4a:	e7c3      	b.n	800ccd4 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xd4>
}
 800cd4c:	b007      	add	sp, #28
 800cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd52 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800cd52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd54:	b0e5      	sub	sp, #404	; 0x194
 800cd56:	2400      	movs	r4, #0
 800cd58:	460d      	mov	r5, r1
 800cd5a:	4606      	mov	r6, r0
  GetAllInputTensorShapes(context, node, inputs_shape);
 800cd5c:	aa1e      	add	r2, sp, #120	; 0x78
 800cd5e:	941e      	str	r4, [sp, #120]	; 0x78
 800cd60:	9425      	str	r4, [sp, #148]	; 0x94
 800cd62:	942c      	str	r4, [sp, #176]	; 0xb0
 800cd64:	9433      	str	r4, [sp, #204]	; 0xcc
 800cd66:	943a      	str	r4, [sp, #232]	; 0xe8
 800cd68:	9441      	str	r4, [sp, #260]	; 0x104
 800cd6a:	9448      	str	r4, [sp, #288]	; 0x120
 800cd6c:	944f      	str	r4, [sp, #316]	; 0x13c
 800cd6e:	9456      	str	r4, [sp, #344]	; 0x158
 800cd70:	945d      	str	r4, [sp, #372]	; 0x174
 800cd72:	f7ff fa1e 	bl	800c1b2 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800cd76:	682b      	ldr	r3, [r5, #0]
 800cd78:	aa0a      	add	r2, sp, #40	; 0x28
 800cd7a:	a81e      	add	r0, sp, #120	; 0x78
 800cd7c:	6819      	ldr	r1, [r3, #0]
 800cd7e:	f7ff fa03 	bl	800c188 <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_>
  TFLITE_DCHECK(context != nullptr);
 800cd82:	b90e      	cbnz	r6, 800cd88 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode+0x36>
 800cd84:	f009 ffde 	bl	8016d44 <abort>
 800cd88:	af14      	add	r7, sp, #80	; 0x50
  for (int i = 0; i < node->inputs->size; ++i) {
 800cd8a:	682b      	ldr	r3, [r5, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	42a3      	cmp	r3, r4
 800cd90:	dd0b      	ble.n	800cdaa <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode+0x58>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 800cd92:	4622      	mov	r2, r4
 800cd94:	4629      	mov	r1, r5
 800cd96:	4630      	mov	r0, r6
 800cd98:	f002 ff93 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d0f1      	beq.n	800cd84 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode+0x32>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800cda0:	6803      	ldr	r3, [r0, #0]
    all_data[i] = tflite::micro::GetTensorData<T>(t);
 800cda2:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
  for (int i = 0; i < node->inputs->size; ++i) {
 800cda6:	3401      	adds	r4, #1
 800cda8:	e7ef      	b.n	800cd8a <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode+0x38>
  TfLiteEvalTensor* output =
 800cdaa:	4629      	mov	r1, r5
 800cdac:	2200      	movs	r2, #0
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f002 ff89 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800cdb4:	692d      	ldr	r5, [r5, #16]
  TfLiteEvalTensor* output =
 800cdb6:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 800cdb8:	2d00      	cmp	r5, #0
 800cdba:	d0e3      	beq.n	800cd84 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode+0x32>
  reference_ops::Concatenation(data->params, inputs_shape_ptr, inputs_data,
 800cdbc:	4601      	mov	r1, r0
 800cdbe:	a803      	add	r0, sp, #12
 800cdc0:	f002 ff8f 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800cdc4:	2c00      	cmp	r4, #0
 800cdc6:	d0dd      	beq.n	800cd84 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode+0x32>
 800cdc8:	6823      	ldr	r3, [r4, #0]
 800cdca:	463a      	mov	r2, r7
 800cdcc:	a90a      	add	r1, sp, #40	; 0x28
 800cdce:	4628      	mov	r0, r5
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	ab03      	add	r3, sp, #12
 800cdd4:	f7ff ff14 	bl	800cc00 <_ZN6tflite13reference_ops13ConcatenationIsEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
}
 800cdd8:	b065      	add	sp, #404	; 0x194
 800cdda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cddc <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int concat_dimensions = output_shape.DimensionsCount();
 800cde0:	681f      	ldr	r7, [r3, #0]
inline void Concatenation(const ConcatenationParams& params,
 800cde2:	b089      	sub	sp, #36	; 0x24
  int axis = params.axis;
 800cde4:	f990 4000 	ldrsb.w	r4, [r0]
inline void Concatenation(const ConcatenationParams& params,
 800cde8:	468b      	mov	fp, r1
 800cdea:	9205      	str	r2, [sp, #20]
 800cdec:	461e      	mov	r6, r3
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800cdee:	42bc      	cmp	r4, r7
  int inputs_count = params.inputs_count;
 800cdf0:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800cdf4:	db01      	blt.n	800cdfa <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1e>
 800cdf6:	f009 ffa5 	bl	8016d44 <abort>
  int64_t concat_size = 0;
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	2300      	movs	r3, #0
  for (int i = 0; i < inputs_count; i++) {
 800cdfe:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
 800ce02:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800ce06:	45d0      	cmp	r8, sl
 800ce08:	da20      	bge.n	800ce4c <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x70>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800ce0a:	f85b 9028 	ldr.w	r9, [fp, r8, lsl #2]
 800ce0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ce12:	429f      	cmp	r7, r3
 800ce14:	d1ef      	bne.n	800cdf6 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
    for (int j = 0; j < concat_dimensions; j++) {
 800ce16:	2500      	movs	r5, #0
 800ce18:	42bd      	cmp	r5, r7
 800ce1a:	da09      	bge.n	800ce30 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x54>
      if (j != axis) {
 800ce1c:	42ac      	cmp	r4, r5
 800ce1e:	d005      	beq.n	800ce2c <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800ce20:	462b      	mov	r3, r5
 800ce22:	4632      	mov	r2, r6
 800ce24:	4629      	mov	r1, r5
 800ce26:	4648      	mov	r0, r9
 800ce28:	f7ff fb12 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800ce2c:	3501      	adds	r5, #1
 800ce2e:	e7f3      	b.n	800ce18 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
 800ce30:	4621      	mov	r1, r4
 800ce32:	4648      	mov	r0, r9
 800ce34:	f7fa fb7d 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < inputs_count; i++) {
 800ce38:	f108 0801 	add.w	r8, r8, #1
    concat_size += input_shapes[i]->Dims(axis);
 800ce3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce40:	1812      	adds	r2, r2, r0
 800ce42:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800ce46:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = 0; i < inputs_count; i++) {
 800ce4a:	e7dc      	b.n	800ce06 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x2a>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f7fa fb6f 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ce54:	17c1      	asrs	r1, r0, #31
 800ce56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce5a:	4299      	cmp	r1, r3
 800ce5c:	bf08      	it	eq
 800ce5e:	4290      	cmpeq	r0, r2
 800ce60:	d1c9      	bne.n	800cdf6 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1a>
  for (int i = 0; i < axis; ++i) {
 800ce62:	2500      	movs	r5, #0
  int64_t outer_size = 1;
 800ce64:	f04f 0801 	mov.w	r8, #1
 800ce68:	f04f 0900 	mov.w	r9, #0
  for (int i = 0; i < axis; ++i) {
 800ce6c:	42ac      	cmp	r4, r5
 800ce6e:	dd0d      	ble.n	800ce8c <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xb0>
    outer_size *= output_shape.Dims(i);
 800ce70:	4629      	mov	r1, r5
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7fa fb5d 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = 0; i < axis; ++i) {
 800ce78:	3501      	adds	r5, #1
    outer_size *= output_shape.Dims(i);
 800ce7a:	17c3      	asrs	r3, r0, #31
 800ce7c:	fb08 f303 	mul.w	r3, r8, r3
 800ce80:	fb00 3309 	mla	r3, r0, r9, r3
 800ce84:	fba8 8900 	umull	r8, r9, r8, r0
 800ce88:	4499      	add	r9, r3
  for (int i = 0; i < axis; ++i) {
 800ce8a:	e7ef      	b.n	800ce6c <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x90>
  int64_t base_inner_size = 1;
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	2300      	movs	r3, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800ce90:	1c65      	adds	r5, r4, #1
  int64_t base_inner_size = 1;
 800ce92:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800ce96:	42bd      	cmp	r5, r7
 800ce98:	d12b      	bne.n	800cef2 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
 800ce9a:	f1ab 0304 	sub.w	r3, fp, #4
 800ce9e:	2600      	movs	r6, #0
 800cea0:	2700      	movs	r7, #0
 800cea2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800cea6:	9304      	str	r3, [sp, #16]
  for (int k = 0; k < outer_size; k++) {
 800cea8:	4546      	cmp	r6, r8
 800ceaa:	9603      	str	r6, [sp, #12]
 800ceac:	eb77 0309 	sbcs.w	r3, r7, r9
 800ceb0:	da36      	bge.n	800cf20 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x144>
 800ceb2:	9a05      	ldr	r2, [sp, #20]
 800ceb4:	f1ab 0304 	sub.w	r3, fp, #4
 800ceb8:	f1a2 0a04 	sub.w	sl, r2, #4
    for (int i = 0; i < inputs_count; ++i) {
 800cebc:	9a04      	ldr	r2, [sp, #16]
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d02a      	beq.n	800cf18 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x13c>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800cec2:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800cec6:	4621      	mov	r1, r4
 800cec8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800cecc:	f7fa fb31 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ced0:	9b00      	ldr	r3, [sp, #0]
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800ced2:	f85a 1f04 	ldr.w	r1, [sl, #4]!
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800ced6:	fb00 f503 	mul.w	r5, r0, r3
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800ceda:	9b03      	ldr	r3, [sp, #12]
 800cedc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cede:	fb03 1105 	mla	r1, r3, r5, r1
 800cee2:	462a      	mov	r2, r5
 800cee4:	f009 ffb5 	bl	8016e52 <memcpy>
      output_ptr += copy_size;
 800cee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceea:	442b      	add	r3, r5
 800ceec:	9312      	str	r3, [sp, #72]	; 0x48
    for (int i = 0; i < inputs_count; ++i) {
 800ceee:	9b06      	ldr	r3, [sp, #24]
 800cef0:	e7e4      	b.n	800cebc <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xe0>
    base_inner_size *= output_shape.Dims(i);
 800cef2:	4629      	mov	r1, r5
 800cef4:	4630      	mov	r0, r6
 800cef6:	f7fa fb1c 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cefa:	9900      	ldr	r1, [sp, #0]
 800cefc:	17c3      	asrs	r3, r0, #31
 800cefe:	9a01      	ldr	r2, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800cf00:	3501      	adds	r5, #1
    base_inner_size *= output_shape.Dims(i);
 800cf02:	434b      	muls	r3, r1
 800cf04:	fb00 3302 	mla	r3, r0, r2, r3
 800cf08:	fba1 1200 	umull	r1, r2, r1, r0
 800cf0c:	e9cd 1200 	strd	r1, r2, [sp]
 800cf10:	9a01      	ldr	r2, [sp, #4]
 800cf12:	4413      	add	r3, r2
 800cf14:	9301      	str	r3, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800cf16:	e7be      	b.n	800ce96 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xba>
 800cf18:	3601      	adds	r6, #1
 800cf1a:	f147 0700 	adc.w	r7, r7, #0
  for (int k = 0; k < outer_size; k++) {
 800cf1e:	e7c3      	b.n	800cea8 <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xcc>
}
 800cf20:	b009      	add	sp, #36	; 0x24
 800cf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf26 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800cf26:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf28:	b0e5      	sub	sp, #404	; 0x194
 800cf2a:	2400      	movs	r4, #0
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	4606      	mov	r6, r0
  GetAllInputTensorShapes(context, node, inputs_shape);
 800cf30:	aa1e      	add	r2, sp, #120	; 0x78
 800cf32:	941e      	str	r4, [sp, #120]	; 0x78
 800cf34:	9425      	str	r4, [sp, #148]	; 0x94
 800cf36:	942c      	str	r4, [sp, #176]	; 0xb0
 800cf38:	9433      	str	r4, [sp, #204]	; 0xcc
 800cf3a:	943a      	str	r4, [sp, #232]	; 0xe8
 800cf3c:	9441      	str	r4, [sp, #260]	; 0x104
 800cf3e:	9448      	str	r4, [sp, #288]	; 0x120
 800cf40:	944f      	str	r4, [sp, #316]	; 0x13c
 800cf42:	9456      	str	r4, [sp, #344]	; 0x158
 800cf44:	945d      	str	r4, [sp, #372]	; 0x174
 800cf46:	f7ff f934 	bl	800c1b2 <_ZN6tflite12_GLOBAL__N_123GetAllInputTensorShapesEPK13TfLiteContextPK10TfLiteNodePNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800cf4a:	682b      	ldr	r3, [r5, #0]
 800cf4c:	aa0a      	add	r2, sp, #40	; 0x28
 800cf4e:	a81e      	add	r0, sp, #120	; 0x78
 800cf50:	6819      	ldr	r1, [r3, #0]
 800cf52:	f7ff f919 	bl	800c188 <_ZN6tflite12_GLOBAL__N_117GetShapesPointersEPKNS_12RuntimeShapeEjPS3_>
  TFLITE_DCHECK(context != nullptr);
 800cf56:	b90e      	cbnz	r6, 800cf5c <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode+0x36>
 800cf58:	f009 fef4 	bl	8016d44 <abort>
 800cf5c:	af14      	add	r7, sp, #80	; 0x50
  for (int i = 0; i < node->inputs->size; ++i) {
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	42a3      	cmp	r3, r4
 800cf64:	dd0b      	ble.n	800cf7e <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode+0x58>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 800cf66:	4622      	mov	r2, r4
 800cf68:	4629      	mov	r1, r5
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f002 fea9 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d0f1      	beq.n	800cf58 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode+0x32>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800cf74:	6803      	ldr	r3, [r0, #0]
    all_data[i] = tflite::micro::GetTensorData<T>(t);
 800cf76:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
  for (int i = 0; i < node->inputs->size; ++i) {
 800cf7a:	3401      	adds	r4, #1
 800cf7c:	e7ef      	b.n	800cf5e <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode+0x38>
  TfLiteEvalTensor* output =
 800cf7e:	4629      	mov	r1, r5
 800cf80:	2200      	movs	r2, #0
 800cf82:	4630      	mov	r0, r6
 800cf84:	f002 fe9f 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800cf88:	692d      	ldr	r5, [r5, #16]
  TfLiteEvalTensor* output =
 800cf8a:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	d0e3      	beq.n	800cf58 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode+0x32>
  reference_ops::Concatenation(data->params, inputs_shape_ptr, inputs_data,
 800cf90:	4601      	mov	r1, r0
 800cf92:	a803      	add	r0, sp, #12
 800cf94:	f002 fea5 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800cf98:	2c00      	cmp	r4, #0
 800cf9a:	d0dd      	beq.n	800cf58 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode+0x32>
 800cf9c:	6823      	ldr	r3, [r4, #0]
 800cf9e:	463a      	mov	r2, r7
 800cfa0:	a90a      	add	r1, sp, #40	; 0x28
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	ab03      	add	r3, sp, #12
 800cfa8:	f7ff ff18 	bl	800cddc <_ZN6tflite13reference_ops13ConcatenationIbEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
}
 800cfac:	b065      	add	sp, #404	; 0x194
 800cfae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800cfb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800cfb2:	2200      	movs	r2, #0
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	460d      	mov	r5, r1
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800cfb8:	f002 fe85 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output_tensor != nullptr);
 800cfbc:	b948      	cbnz	r0, 800cfd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 800cfbe:	4b1e      	ldr	r3, [pc, #120]	; (800d038 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>)
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	6965      	ldr	r5, [r4, #20]
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	23dc      	movs	r3, #220	; 0xdc
 800cfc8:	4a1c      	ldr	r2, [pc, #112]	; (800d03c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>)
 800cfca:	491d      	ldr	r1, [pc, #116]	; (800d040 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x90>)
 800cfcc:	47a8      	blx	r5
      return kTfLiteError;
 800cfce:	2001      	movs	r0, #1
 800cfd0:	e00f      	b.n	800cff2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42>
  TfLiteType output_type = output_tensor->type;
 800cfd2:	7a00      	ldrb	r0, [r0, #8]
  switch (output_type) {  // Already know in/outtypes are same.
 800cfd4:	1e43      	subs	r3, r0, #1
 800cfd6:	2b08      	cmp	r3, #8
 800cfd8:	d826      	bhi.n	800d028 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x78>
 800cfda:	e8df f003 	tbb	[pc, r3]
 800cfde:	0c05      	.short	0x0c05
 800cfe0:	20251625 	.word	0x20251625
 800cfe4:	251b      	.short	0x251b
 800cfe6:	11          	.byte	0x11
 800cfe7:	00          	.byte	0x00
      EvalUnquantized<float>(context, node);
 800cfe8:	4629      	mov	r1, r5
 800cfea:	4620      	mov	r0, r4
 800cfec:	f7ff fafd 	bl	800c5ea <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>
  return kTfLiteOk;
 800cff0:	2000      	movs	r0, #0
}
 800cff2:	b003      	add	sp, #12
 800cff4:	bd30      	pop	{r4, r5, pc}
      EvalUnquantized<int32_t>(context, node);
 800cff6:	4629      	mov	r1, r5
 800cff8:	4620      	mov	r0, r4
 800cffa:	f7ff fbe4 	bl	800c7c6 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode>
 800cffe:	e7f7      	b.n	800cff0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
      EvalUnquantized<int8_t>(context, node);
 800d000:	4629      	mov	r1, r5
 800d002:	4620      	mov	r0, r4
 800d004:	f7ff fcc9 	bl	800c99a <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>
 800d008:	e7f2      	b.n	800cff0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
      EvalUnquantized<int64_t>(context, node);
 800d00a:	4629      	mov	r1, r5
 800d00c:	4620      	mov	r0, r4
 800d00e:	f7ff fdb2 	bl	800cb76 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>
 800d012:	e7ed      	b.n	800cff0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
      EvalUnquantized<int16_t>(context, node);
 800d014:	4629      	mov	r1, r5
 800d016:	4620      	mov	r0, r4
 800d018:	f7ff fe9b 	bl	800cd52 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode>
 800d01c:	e7e8      	b.n	800cff0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
      EvalUnquantized<bool>(context, node);
 800d01e:	4629      	mov	r1, r5
 800d020:	4620      	mov	r0, r4
 800d022:	f7ff ff80 	bl	800cf26 <_ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode>
 800d026:	e7e3      	b.n	800cff0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
      MicroPrintf("Op Concatenation does not currently support Type '%s'.",
 800d028:	f7fb f842 	bl	80080b0 <TfLiteTypeGetName>
 800d02c:	4601      	mov	r1, r0
 800d02e:	4805      	ldr	r0, [pc, #20]	; (800d044 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>)
 800d030:	f7fd fe42 	bl	800acb8 <_Z11MicroPrintfPKcz>
 800d034:	e7cb      	b.n	800cfce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e>
 800d036:	bf00      	nop
 800d038:	080fbdb9 	.word	0x080fbdb9
 800d03c:	080fbd64 	.word	0x080fbd64
 800d040:	080f93a5 	.word	0x080f93a5
 800d044:	080fbf42 	.word	0x080fbf42

0800d048 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 800d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	461d      	mov	r5, r3
  const int stride_width = params.stride_width;
 800d04e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
                 float* im2col_data) {
 800d052:	4689      	mov	r9, r1
 800d054:	ed2d 8b04 	vpush	{d8-d9}
 800d058:	b09d      	sub	sp, #116	; 0x74
  const int stride_height = params.stride_height;
  const int dilation_width_factor = params.dilation_width_factor;
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const float output_activation_min = params.float_activation_min;
 800d05a:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
 800d05e:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  const int stride_width = params.stride_width;
 800d062:	930c      	str	r3, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
 800d064:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
                 float* im2col_data) {
 800d068:	921b      	str	r2, [sp, #108]	; 0x6c
  const int stride_height = params.stride_height;
 800d06a:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
 800d06c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
                 float* im2col_data) {
 800d070:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
  const int dilation_width_factor = params.dilation_width_factor;
 800d074:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
 800d076:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800d07a:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
 800d07c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d080:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
 800d082:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d086:	9312      	str	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800d088:	680b      	ldr	r3, [r1, #0]
 800d08a:	2b04      	cmp	r3, #4
 800d08c:	d001      	beq.n	800d092 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x4a>
 800d08e:	f009 fe59 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800d092:	682b      	ldr	r3, [r5, #0]
 800d094:	2b04      	cmp	r3, #4
 800d096:	d1fa      	bne.n	800d08e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800d098:	f8da 3000 	ldr.w	r3, [sl]
 800d09c:	2b04      	cmp	r3, #4
 800d09e:	d1f6      	bne.n	800d08e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4652      	mov	r2, sl
 800d0a4:	4648      	mov	r0, r9
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	f7ff f9d2 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = input_shape.Dims(3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d0ac:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d0ae:	9015      	str	r0, [sp, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d0b0:	4652      	mov	r2, sl
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	f7ff f9cb 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
 800d0ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    return dims_[i];
 800d0bc:	f8d9 4010 	ldr.w	r4, [r9, #16]
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d0c0:	9008      	str	r0, [sp, #32]
  if (bias_data) {
 800d0c2:	b12b      	cbz	r3, 800d0d0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x88>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800d0c4:	982b      	ldr	r0, [sp, #172]	; 0xac
 800d0c6:	f7fa fa40 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800d0ca:	9b08      	ldr	r3, [sp, #32]
 800d0cc:	4283      	cmp	r3, r0
 800d0ce:	d1de      	bne.n	800d08e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46>
 800d0d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d0d4:	9314      	str	r3, [sp, #80]	; 0x50
 800d0d6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d0da:	9316      	str	r3, [sp, #88]	; 0x58
 800d0dc:	68ab      	ldr	r3, [r5, #8]
 800d0de:	9317      	str	r3, [sp, #92]	; 0x5c
 800d0e0:	68eb      	ldr	r3, [r5, #12]
 800d0e2:	9318      	str	r3, [sp, #96]	; 0x60
 800d0e4:	692b      	ldr	r3, [r5, #16]
 800d0e6:	9307      	str	r3, [sp, #28]
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int filter_input_depth = filter_shape.Dims(3);
  const int groups = input_depth / filter_input_depth;
 800d0e8:	fb94 f3f3 	sdiv	r3, r4, r3
  TFLITE_DCHECK_NE(groups, 0);
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d0ce      	beq.n	800d08e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46>
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800d0f0:	9a07      	ldr	r2, [sp, #28]
 800d0f2:	fb02 4413 	mls	r4, r2, r3, r4
 800d0f6:	2c00      	cmp	r4, #0
 800d0f8:	d1c9      	bne.n	800d08e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46>
  const int filters_per_group = output_depth / groups;
 800d0fa:	9a08      	ldr	r2, [sp, #32]
 800d0fc:	fb92 f3f3 	sdiv	r3, r2, r3
 800d100:	930b      	str	r3, [sp, #44]	; 0x2c
  TFLITE_DCHECK_NE(filters_per_group, 0);
 800d102:	2b00      	cmp	r3, #0
 800d104:	d0c3      	beq.n	800d08e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46>
 800d106:	f8da 3008 	ldr.w	r3, [sl, #8]
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);

  for (int batch = 0; batch < batches; ++batch) {
 800d10a:	46a3      	mov	fp, r4
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
              }
            }
          }
          float bias_value = 0.0f;
 800d10c:	eddf 9a59 	vldr	s19, [pc, #356]	; 800d274 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22c>
 800d110:	9319      	str	r3, [sp, #100]	; 0x64
 800d112:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d116:	9313      	str	r3, [sp, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 800d118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d11a:	459b      	cmp	fp, r3
 800d11c:	f280 80a5 	bge.w	800d26a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x222>
 800d120:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d122:	425b      	negs	r3, r3
 800d124:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d126:	2300      	movs	r3, #0
 800d128:	9303      	str	r3, [sp, #12]
 800d12a:	9b03      	ldr	r3, [sp, #12]
 800d12c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d12e:	4293      	cmp	r3, r2
 800d130:	f280 8098 	bge.w	800d264 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x21c>
 800d134:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d136:	425b      	negs	r3, r3
 800d138:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d13a:	2300      	movs	r3, #0
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	9b04      	ldr	r3, [sp, #16]
 800d140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d142:	4293      	cmp	r3, r2
 800d144:	f280 8086 	bge.w	800d254 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x20c>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d148:	2400      	movs	r4, #0
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	42a3      	cmp	r3, r4
 800d14e:	dd79      	ble.n	800d244 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1fc>
          auto group = out_channel / filters_per_group;
 800d150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                                      in_channel + group * filter_input_depth)];
 800d152:	9a07      	ldr	r2, [sp, #28]
 800d154:	9e0a      	ldr	r6, [sp, #40]	; 0x28
          float total = 0.f;
 800d156:	ed9f 8a47 	vldr	s16, [pc, #284]	; 800d274 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22c>
          auto group = out_channel / filters_per_group;
 800d15a:	fb94 f3f3 	sdiv	r3, r4, r3
                                      in_channel + group * filter_input_depth)];
 800d15e:	4353      	muls	r3, r2
 800d160:	931a      	str	r3, [sp, #104]	; 0x68
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d162:	2300      	movs	r3, #0
 800d164:	9305      	str	r3, [sp, #20]
 800d166:	9b05      	ldr	r3, [sp, #20]
 800d168:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d16a:	4293      	cmp	r3, r2
 800d16c:	da43      	bge.n	800d1f6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ae>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d16e:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800d170:	9f09      	ldr	r7, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d172:	9306      	str	r3, [sp, #24]
 800d174:	9b06      	ldr	r3, [sp, #24]
 800d176:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d178:	4293      	cmp	r3, r2
 800d17a:	da36      	bge.n	800d1ea <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a2>
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800d17c:	2f00      	cmp	r7, #0
 800d17e:	db2e      	blt.n	800d1de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
 800d180:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d182:	42bb      	cmp	r3, r7
 800d184:	dd2b      	ble.n	800d1de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
 800d186:	2e00      	cmp	r6, #0
 800d188:	db29      	blt.n	800d1de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
 800d18a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d18c:	42b3      	cmp	r3, r6
 800d18e:	dd26      	ble.n	800d1de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d190:	f04f 0800 	mov.w	r8, #0
 800d194:	9b07      	ldr	r3, [sp, #28]
 800d196:	4598      	cmp	r8, r3
 800d198:	da21      	bge.n	800d1de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d19a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d19c:	4632      	mov	r2, r6
 800d19e:	4659      	mov	r1, fp
 800d1a0:	4648      	mov	r0, r9
 800d1a2:	4443      	add	r3, r8
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	463b      	mov	r3, r7
 800d1a8:	f7fe ffbc 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                float filter_value = filter_data[Offset(
 800d1ac:	f8cd 8000 	str.w	r8, [sp]
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d1b0:	9010      	str	r0, [sp, #64]	; 0x40
                float filter_value = filter_data[Offset(
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	4628      	mov	r0, r5
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d1b6:	f108 0801 	add.w	r8, r8, #1
                float filter_value = filter_data[Offset(
 800d1ba:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800d1be:	f7fe ffb1 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                      in_channel + group * filter_input_depth)];
 800d1c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800d1ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d1cc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                total += (input_value * filter_value);
 800d1d0:	ed93 7a00 	vldr	s14, [r3]
 800d1d4:	edd0 7a00 	vldr	s15, [r0]
 800d1d8:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d1dc:	e7da      	b.n	800d194 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x14c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d1de:	9b06      	ldr	r3, [sp, #24]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	9306      	str	r3, [sp, #24]
 800d1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1e6:	441f      	add	r7, r3
 800d1e8:	e7c4      	b.n	800d174 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d1ea:	9b05      	ldr	r3, [sp, #20]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	9305      	str	r3, [sp, #20]
 800d1f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1f2:	441e      	add	r6, r3
 800d1f4:	e7b7      	b.n	800d166 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x11e>
          if (bias_data) {
 800d1f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d1f8:	b30b      	cbz	r3, 800d23e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f6>
            bias_value = bias_data[out_channel];
 800d1fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d1fe:	edd3 7a00 	vldr	s15, [r3]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 800d202:	ee38 8a27 	vadd.f32	s16, s16, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d206:	9400      	str	r4, [sp, #0]
 800d208:	4659      	mov	r1, fp
 800d20a:	4650      	mov	r0, sl
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d20c:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d20e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800d212:	f7fe ff87 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
 800d216:	eeb4 8a68 	vcmp.f32	s16, s17
 800d21a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d220:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d224:	bf48      	it	mi
 800d226:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
 800d22a:	eeb4 9a48 	vcmp.f32	s18, s16
 800d22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d232:	bf48      	it	mi
 800d234:	eeb0 8a49 	vmovmi.f32	s16, s18
 800d238:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d23c:	e785      	b.n	800d14a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
          float bias_value = 0.0f;
 800d23e:	eef0 7a69 	vmov.f32	s15, s19
 800d242:	e7de      	b.n	800d202 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ba>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d244:	9b04      	ldr	r3, [sp, #16]
 800d246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d248:	3301      	adds	r3, #1
 800d24a:	9304      	str	r3, [sp, #16]
 800d24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d24e:	4413      	add	r3, r2
 800d250:	9309      	str	r3, [sp, #36]	; 0x24
 800d252:	e774      	b.n	800d13e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xf6>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d258:	3301      	adds	r3, #1
 800d25a:	9303      	str	r3, [sp, #12]
 800d25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d25e:	4413      	add	r3, r2
 800d260:	930a      	str	r3, [sp, #40]	; 0x28
 800d262:	e762      	b.n	800d12a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe2>
  for (int batch = 0; batch < batches; ++batch) {
 800d264:	f10b 0b01 	add.w	fp, fp, #1
 800d268:	e756      	b.n	800d118 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd0>
                                           output_activation_max);
        }
      }
    }
  }
}
 800d26a:	b01d      	add	sp, #116	; 0x74
 800d26c:	ecbd 8b04 	vpop	{d8-d9}
 800d270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d274:	00000000 	.word	0x00000000

0800d278 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	469a      	mov	sl, r3
 800d27e:	b0a1      	sub	sp, #132	; 0x84
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 800d280:	6943      	ldr	r3, [r0, #20]
 800d282:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
 800d284:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d288:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
 800d28a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800d28e:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
 800d290:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800d294:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
 800d296:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800d29a:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
 800d29c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d2a0:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
 800d2a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d2a6:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
 800d2a8:	69c3      	ldr	r3, [r0, #28]
 800d2aa:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800d2ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d2ae:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
 800d2b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    int8_t* output_data) {
 800d2b2:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int32_t output_activation_max = params.quantized_activation_max;
 800d2b6:	930b      	str	r3, [sp, #44]	; 0x2c

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800d2b8:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	dd01      	ble.n	800d2c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
 800d2c0:	f009 fd40 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800d2c4:	f8da 3000 	ldr.w	r3, [sl]
 800d2c8:	2b04      	cmp	r3, #4
 800d2ca:	d1f9      	bne.n	800d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800d2cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b04      	cmp	r3, #4
 800d2d2:	d1f5      	bne.n	800d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800d2d4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b04      	cmp	r3, #4
 800d2da:	d1f1      	bne.n	800d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d2dc:	2300      	movs	r3, #0
 800d2de:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800d2e0:	4650      	mov	r0, sl
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	f7ff f8b4 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = input_shape.Dims(3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d2e8:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d2ea:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800d2f0:	982b      	ldr	r0, [sp, #172]	; 0xac
 800d2f2:	f7ff f8ad 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
 800d2f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d2f8:	f8da 4010 	ldr.w	r4, [sl, #16]
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d2fc:	9007      	str	r0, [sp, #28]
  if (bias_data) {
 800d2fe:	b12b      	cbz	r3, 800d30c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800d300:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800d302:	f7fa f922 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800d306:	9b07      	ldr	r3, [sp, #28]
 800d308:	4283      	cmp	r3, r0
 800d30a:	d1d9      	bne.n	800d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
 800d30c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d310:	9319      	str	r3, [sp, #100]	; 0x64
 800d312:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d316:	931a      	str	r3, [sp, #104]	; 0x68
 800d318:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d31e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	931c      	str	r3, [sp, #112]	; 0x70
 800d324:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d326:	691b      	ldr	r3, [r3, #16]
 800d328:	9306      	str	r3, [sp, #24]
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int filter_input_depth = filter_shape.Dims(3);
  const int groups = input_depth / filter_input_depth;
 800d32a:	fb94 f3f3 	sdiv	r3, r4, r3
  TFLITE_DCHECK_NE(groups, 0);
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0c6      	beq.n	800d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800d332:	9a06      	ldr	r2, [sp, #24]
 800d334:	fb02 4413 	mls	r4, r2, r3, r4
 800d338:	2c00      	cmp	r4, #0
 800d33a:	d1c1      	bne.n	800d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
  const int filters_per_group = output_depth / groups;
 800d33c:	9a07      	ldr	r2, [sp, #28]
 800d33e:	fb92 f3f3 	sdiv	r3, r2, r3
 800d342:	930c      	str	r3, [sp, #48]	; 0x30
  TFLITE_DCHECK_NE(filters_per_group, 0);
 800d344:	2b00      	cmp	r3, #0
 800d346:	d0bb      	beq.n	800d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x48>
 800d348:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
 800d34a:	46a3      	mov	fp, r4
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	9316      	str	r3, [sp, #88]	; 0x58
 800d350:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	9317      	str	r3, [sp, #92]	; 0x5c
 800d356:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d358:	459b      	cmp	fp, r3
 800d35a:	f280 8099 	bge.w	800d490 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
 800d35e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d360:	425b      	negs	r3, r3
 800d362:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d364:	2300      	movs	r3, #0
 800d366:	9303      	str	r3, [sp, #12]
 800d368:	9b03      	ldr	r3, [sp, #12]
 800d36a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d36c:	4293      	cmp	r3, r2
 800d36e:	f280 808c 	bge.w	800d48a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x212>
 800d372:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d374:	425b      	negs	r3, r3
 800d376:	9309      	str	r3, [sp, #36]	; 0x24
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d378:	2300      	movs	r3, #0
 800d37a:	9304      	str	r3, [sp, #16]
 800d37c:	9b04      	ldr	r3, [sp, #16]
 800d37e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d380:	4293      	cmp	r3, r2
 800d382:	da7a      	bge.n	800d47a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d384:	2400      	movs	r4, #0
 800d386:	9b07      	ldr	r3, [sp, #28]
 800d388:	42a3      	cmp	r3, r4
 800d38a:	dd6e      	ble.n	800d46a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f2>
          auto group = out_channel / filters_per_group;
 800d38c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
          int32_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d38e:	2700      	movs	r7, #0

              for (int in_channel = 0; in_channel < filter_input_depth;
                   ++in_channel) {
                int32_t input_val =
                    input_data[Offset(input_shape, batch, in_y, in_x,
                                      in_channel + group * filter_input_depth)];
 800d390:	9a06      	ldr	r2, [sp, #24]
 800d392:	9e08      	ldr	r6, [sp, #32]
          int32_t acc = 0;
 800d394:	463d      	mov	r5, r7
          auto group = out_channel / filters_per_group;
 800d396:	fb94 f3f3 	sdiv	r3, r4, r3
                                      in_channel + group * filter_input_depth)];
 800d39a:	4353      	muls	r3, r2
 800d39c:	931d      	str	r3, [sp, #116]	; 0x74
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d39e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3a0:	429f      	cmp	r7, r3
 800d3a2:	da3f      	bge.n	800d424 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d3a4:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800d3a6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d3aa:	9305      	str	r3, [sp, #20]
 800d3ac:	9b05      	ldr	r3, [sp, #20]
 800d3ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	da33      	bge.n	800d41c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a4>
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800d3b4:	f1b8 0f00 	cmp.w	r8, #0
 800d3b8:	db2a      	blt.n	800d410 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x198>
 800d3ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d3bc:	4543      	cmp	r3, r8
 800d3be:	dd27      	ble.n	800d410 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x198>
 800d3c0:	2e00      	cmp	r6, #0
 800d3c2:	db25      	blt.n	800d410 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x198>
 800d3c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3c6:	42b3      	cmp	r3, r6
 800d3c8:	dd22      	ble.n	800d410 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x198>
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d3ca:	f04f 0900 	mov.w	r9, #0
 800d3ce:	9b06      	ldr	r3, [sp, #24]
 800d3d0:	4599      	cmp	r9, r3
 800d3d2:	da1d      	bge.n	800d410 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x198>
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d3d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3d6:	4632      	mov	r2, r6
 800d3d8:	4659      	mov	r1, fp
 800d3da:	4650      	mov	r0, sl
 800d3dc:	444b      	add	r3, r9
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	4643      	mov	r3, r8
 800d3e2:	f7fe fe9f 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                int32_t filter_val = filter_data[Offset(
 800d3e6:	f8cd 9000 	str.w	r9, [sp]
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d3ea:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
 800d3ec:	463a      	mov	r2, r7
 800d3ee:	9b05      	ldr	r3, [sp, #20]
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	982b      	ldr	r0, [sp, #172]	; 0xac
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d3f4:	f109 0901 	add.w	r9, r9, #1
                int32_t filter_val = filter_data[Offset(
 800d3f8:	f7fe fe94 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                      in_channel + group * filter_input_depth)];
 800d3fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d400:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 800d402:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d404:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800d406:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d408:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
 800d40a:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d40e:	e7de      	b.n	800d3ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x156>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d410:	9b05      	ldr	r3, [sp, #20]
 800d412:	3301      	adds	r3, #1
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d418:	4498      	add	r8, r3
 800d41a:	e7c7      	b.n	800d3ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x134>
 800d41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d41e:	3701      	adds	r7, #1
 800d420:	441e      	add	r6, r3
 800d422:	e7bc      	b.n	800d39e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
              }
            }
          }

          if (bias_data) {
 800d424:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d426:	b113      	cbz	r3, 800d42e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
 800d428:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d42c:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(
 800d42e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d430:	4628      	mov	r0, r5
 800d432:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800d436:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d438:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800d43c:	f7fa fe44 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
 800d440:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d442:	9400      	str	r4, [sp, #0]
 800d444:	4659      	mov	r1, fp
          acc += output_offset;
 800d446:	18c5      	adds	r5, r0, r3
 800d448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d44a:	982f      	ldr	r0, [sp, #188]	; 0xbc
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d44c:	3401      	adds	r4, #1
 800d44e:	429d      	cmp	r5, r3
 800d450:	bfb8      	it	lt
 800d452:	461d      	movlt	r5, r3
 800d454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d456:	429d      	cmp	r5, r3
 800d458:	bfa8      	it	ge
 800d45a:	461d      	movge	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d45c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800d460:	f7fe fe60 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800d464:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800d466:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d468:	e78d      	b.n	800d386 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d46a:	9b04      	ldr	r3, [sp, #16]
 800d46c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d46e:	3301      	adds	r3, #1
 800d470:	9304      	str	r3, [sp, #16]
 800d472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d474:	4413      	add	r3, r2
 800d476:	9309      	str	r3, [sp, #36]	; 0x24
 800d478:	e780      	b.n	800d37c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x104>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d47a:	9b03      	ldr	r3, [sp, #12]
 800d47c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d47e:	3301      	adds	r3, #1
 800d480:	9303      	str	r3, [sp, #12]
 800d482:	9b08      	ldr	r3, [sp, #32]
 800d484:	4413      	add	r3, r2
 800d486:	9308      	str	r3, [sp, #32]
 800d488:	e76e      	b.n	800d368 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf0>
  for (int batch = 0; batch < batches; ++batch) {
 800d48a:	f10b 0b01 	add.w	fp, fp, #1
 800d48e:	e762      	b.n	800d356 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xde>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 800d490:	b021      	add	sp, #132	; 0x84
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d498 <_ZN6tflite16Register_CONV_2DEv>:
}

}  // namespace

TFLMRegistration Register_CONV_2D() {
  return tflite::micro::RegisterOp(ConvInit, ConvPrepare, Eval);
 800d498:	2300      	movs	r3, #0
 800d49a:	4a06      	ldr	r2, [pc, #24]	; (800d4b4 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
TFLMRegistration Register_CONV_2D() {
 800d49c:	b513      	push	{r0, r1, r4, lr}
 800d49e:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(ConvInit, ConvPrepare, Eval);
 800d4a0:	4905      	ldr	r1, [pc, #20]	; (800d4b8 <_ZN6tflite16Register_CONV_2DEv+0x20>)
 800d4a2:	e9cd 3300 	strd	r3, r3, [sp]
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <_ZN6tflite16Register_CONV_2DEv+0x24>)
 800d4a8:	f002 fbe4 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	b002      	add	sp, #8
 800d4b0:	bd10      	pop	{r4, pc}
 800d4b2:	bf00      	nop
 800d4b4:	0800deed 	.word	0x0800deed
 800d4b8:	0800dcff 	.word	0x0800dcff
 800d4bc:	0800d905 	.word	0x0800d905

0800d4c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps>:


// Fixed-point per-channel-quantization convolution reference kernel.
// 16-bit data and 8-bit filter
template <typename AccumScalar>
inline void ConvPerChannel(
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	469a      	mov	sl, r3
 800d4c6:	b09f      	sub	sp, #124	; 0x7c
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const AccumScalar* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
  // Get parameters.
  const int stride_width = params.stride_width;
 800d4c8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d4cc:	930c      	str	r3, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
 800d4ce:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800d4d2:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
 800d4d4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800d4d8:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
 800d4da:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800d4de:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
 800d4e0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d4e4:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
 800d4e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d4ea:	9313      	str	r3, [sp, #76]	; 0x4c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800d4ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d4ee:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
 800d4f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
inline void ConvPerChannel(
 800d4f2:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
  const int32_t output_activation_max = params.quantized_activation_max;
 800d4f6:	930b      	str	r3, [sp, #44]	; 0x2c

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800d4f8:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	dd01      	ble.n	800d504 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x44>
 800d500:	f009 fc20 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800d504:	f8da 3000 	ldr.w	r3, [sl]
 800d508:	2b04      	cmp	r3, #4
 800d50a:	d1f9      	bne.n	800d500 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x40>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800d50c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b04      	cmp	r3, #4
 800d512:	d1f5      	bne.n	800d500 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x40>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800d514:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2b04      	cmp	r3, #4
 800d51a:	d1f1      	bne.n	800d500 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x40>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d51c:	2300      	movs	r3, #0
 800d51e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800d520:	4650      	mov	r0, sl
 800d522:	4619      	mov	r1, r3
 800d524:	f7fe ff94 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = input_shape.Dims(3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d528:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d52a:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d52c:	2100      	movs	r1, #0
 800d52e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800d530:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800d532:	f7fe ff8d 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
 800d536:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d538:	f8da 4010 	ldr.w	r4, [sl, #16]
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d53c:	9007      	str	r0, [sp, #28]
  if (bias_data) {
 800d53e:	b12b      	cbz	r3, 800d54c <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x8c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800d540:	982b      	ldr	r0, [sp, #172]	; 0xac
 800d542:	f7fa f802 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800d546:	9b07      	ldr	r3, [sp, #28]
 800d548:	4283      	cmp	r3, r0
 800d54a:	d1d9      	bne.n	800d500 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x40>
 800d54c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d550:	9317      	str	r3, [sp, #92]	; 0x5c
 800d552:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d556:	9318      	str	r3, [sp, #96]	; 0x60
 800d558:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	9319      	str	r3, [sp, #100]	; 0x64
 800d55e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	931a      	str	r3, [sp, #104]	; 0x68
 800d564:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d566:	691b      	ldr	r3, [r3, #16]
 800d568:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int filter_input_depth = filter_shape.Dims(3);
  const int groups = input_depth / filter_input_depth;
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800d56a:	9a06      	ldr	r2, [sp, #24]
  const int groups = input_depth / filter_input_depth;
 800d56c:	fb94 f3f3 	sdiv	r3, r4, r3
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800d570:	fb02 4413 	mls	r4, r2, r3, r4
 800d574:	2c00      	cmp	r4, #0
 800d576:	d1c3      	bne.n	800d500 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x40>
  const int filters_per_group = output_depth / groups;
 800d578:	9a07      	ldr	r2, [sp, #28]
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
 800d57a:	46a3      	mov	fp, r4
  const int filters_per_group = output_depth / groups;
 800d57c:	fb92 f3f3 	sdiv	r3, r2, r3
 800d580:	931b      	str	r3, [sp, #108]	; 0x6c
 800d582:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	9314      	str	r3, [sp, #80]	; 0x50
 800d588:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	9315      	str	r3, [sp, #84]	; 0x54
  for (int batch = 0; batch < batches; ++batch) {
 800d58e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d590:	459b      	cmp	fp, r3
 800d592:	f280 8099 	bge.w	800d6c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x208>
 800d596:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d598:	425b      	negs	r3, r3
 800d59a:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d59c:	2300      	movs	r3, #0
 800d59e:	9303      	str	r3, [sp, #12]
 800d5a0:	9b03      	ldr	r3, [sp, #12]
 800d5a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	f280 808c 	bge.w	800d6c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x202>
 800d5aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5ac:	425b      	negs	r3, r3
 800d5ae:	9308      	str	r3, [sp, #32]
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	9304      	str	r3, [sp, #16]
 800d5b4:	9b04      	ldr	r3, [sp, #16]
 800d5b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	da7a      	bge.n	800d6b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1f2>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d5bc:	2400      	movs	r4, #0
 800d5be:	9b07      	ldr	r3, [sp, #28]
 800d5c0:	42a3      	cmp	r3, r4
 800d5c2:	dd6e      	ble.n	800d6a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1e2>
          auto group = out_channel / filters_per_group;
 800d5c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
          AccumScalar acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d5c6:	2700      	movs	r7, #0

              for (int in_channel = 0; in_channel < filter_input_depth;
                   ++in_channel) {
                int32_t input_val =
                    input_data[Offset(input_shape, batch, in_y, in_x,
                                      in_channel + group * filter_input_depth)];
 800d5c8:	9a06      	ldr	r2, [sp, #24]
 800d5ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
          AccumScalar acc = 0;
 800d5cc:	463d      	mov	r5, r7
          auto group = out_channel / filters_per_group;
 800d5ce:	fb94 f3f3 	sdiv	r3, r4, r3
                                      in_channel + group * filter_input_depth)];
 800d5d2:	4353      	muls	r3, r2
 800d5d4:	9311      	str	r3, [sp, #68]	; 0x44
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d5d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5d8:	429f      	cmp	r7, r3
 800d5da:	da3e      	bge.n	800d65a <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x19a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d5dc:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800d5de:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d5e2:	9305      	str	r3, [sp, #20]
 800d5e4:	9b05      	ldr	r3, [sp, #20]
 800d5e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	da32      	bge.n	800d652 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x192>
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800d5ec:	f1b8 0f00 	cmp.w	r8, #0
 800d5f0:	db29      	blt.n	800d646 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x186>
 800d5f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d5f4:	4543      	cmp	r3, r8
 800d5f6:	dd26      	ble.n	800d646 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x186>
 800d5f8:	2e00      	cmp	r6, #0
 800d5fa:	db24      	blt.n	800d646 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x186>
 800d5fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5fe:	42b3      	cmp	r3, r6
 800d600:	dd21      	ble.n	800d646 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x186>
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d602:	f04f 0900 	mov.w	r9, #0
 800d606:	9b06      	ldr	r3, [sp, #24]
 800d608:	4599      	cmp	r9, r3
 800d60a:	da1c      	bge.n	800d646 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x186>
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d60c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d60e:	4632      	mov	r2, r6
 800d610:	4659      	mov	r1, fp
 800d612:	4650      	mov	r0, sl
 800d614:	444b      	add	r3, r9
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	4643      	mov	r3, r8
 800d61a:	f7fe fd83 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                int32_t filter_val = filter_data[Offset(
 800d61e:	f8cd 9000 	str.w	r9, [sp]
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d622:	9010      	str	r0, [sp, #64]	; 0x40
                int32_t filter_val = filter_data[Offset(
 800d624:	463a      	mov	r2, r7
 800d626:	9b05      	ldr	r3, [sp, #20]
 800d628:	4621      	mov	r1, r4
 800d62a:	9829      	ldr	r0, [sp, #164]	; 0xa4
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d62c:	f109 0901 	add.w	r9, r9, #1
                int32_t filter_val = filter_data[Offset(
 800d630:	f7fe fd78 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
 800d634:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d636:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800d638:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d63a:	561b      	ldrsb	r3, [r3, r0]
 800d63c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800d640:	fb12 5503 	smlabb	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d644:	e7df      	b.n	800d606 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x146>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d646:	9b05      	ldr	r3, [sp, #20]
 800d648:	3301      	adds	r3, #1
 800d64a:	9305      	str	r3, [sp, #20]
 800d64c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d64e:	4498      	add	r8, r3
 800d650:	e7c8      	b.n	800d5e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x124>
 800d652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d654:	3701      	adds	r7, #1
 800d656:	441e      	add	r6, r3
 800d658:	e7bd      	b.n	800d5d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x116>
              }
            }
          }
          if (bias_data) {
 800d65a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d65c:	b113      	cbz	r3, 800d664 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1a4>
            acc += bias_data[out_channel];
 800d65e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d662:	441d      	add	r5, r3
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800d664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d666:	4628      	mov	r0, r5
 800d668:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800d66c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d66e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800d672:	f7fa fd29 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800d676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          scaled_acc = std::max(scaled_acc, output_activation_min);
          scaled_acc = std::min(scaled_acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d678:	9400      	str	r4, [sp, #0]
 800d67a:	4659      	mov	r1, fp
 800d67c:	4298      	cmp	r0, r3
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d67e:	f104 0401 	add.w	r4, r4, #1
 800d682:	bfb8      	it	lt
 800d684:	4618      	movlt	r0, r3
 800d686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d688:	4283      	cmp	r3, r0
 800d68a:	bfa8      	it	ge
 800d68c:	4603      	movge	r3, r0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d68e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800d690:	461d      	mov	r5, r3
 800d692:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800d696:	f7fe fd45 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800d69a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d69c:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d6a0:	e78d      	b.n	800d5be <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xfe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d6a2:	9b04      	ldr	r3, [sp, #16]
 800d6a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	9b08      	ldr	r3, [sp, #32]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	9308      	str	r3, [sp, #32]
 800d6b0:	e780      	b.n	800d5b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xf4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d6b2:	9b03      	ldr	r3, [sp, #12]
 800d6b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	9303      	str	r3, [sp, #12]
 800d6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6bc:	4413      	add	r3, r2
 800d6be:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c0:	e76e      	b.n	800d5a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xe0>
  for (int batch = 0; batch < batches; ++batch) {
 800d6c2:	f10b 0b01 	add.w	fp, fp, #1
 800d6c6:	e762      	b.n	800d58e <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xce>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
 800d6c8:	b01f      	add	sp, #124	; 0x7c
 800d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6ce <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps>:
inline void ConvPerChannel(
 800d6ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d2:	469b      	mov	fp, r3
 800d6d4:	b0a1      	sub	sp, #132	; 0x84
  const int stride_width = params.stride_width;
 800d6d6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
inline void ConvPerChannel(
 800d6da:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
  const int stride_width = params.stride_width;
 800d6de:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
 800d6e0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
inline void ConvPerChannel(
 800d6e4:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
  const int stride_height = params.stride_height;
 800d6e8:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
 800d6ea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800d6ee:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
 800d6f0:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800d6f4:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
 800d6f6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d6fa:	9314      	str	r3, [sp, #80]	; 0x50
  const int pad_height = params.padding_values.height;
 800d6fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d700:	9315      	str	r3, [sp, #84]	; 0x54
  const int32_t output_activation_min = params.quantized_activation_min;
 800d702:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d704:	930c      	str	r3, [sp, #48]	; 0x30
  const int32_t output_activation_max = params.quantized_activation_max;
 800d706:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
inline void ConvPerChannel(
 800d708:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int32_t output_activation_max = params.quantized_activation_max;
 800d70c:	930d      	str	r3, [sp, #52]	; 0x34
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800d70e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800d712:	4293      	cmp	r3, r2
 800d714:	dd01      	ble.n	800d71a <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x4c>
 800d716:	f009 fb15 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800d71a:	f8db 3000 	ldr.w	r3, [fp]
 800d71e:	2b04      	cmp	r3, #4
 800d720:	d1f9      	bne.n	800d716 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x48>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800d722:	f8d9 3000 	ldr.w	r3, [r9]
 800d726:	2b04      	cmp	r3, #4
 800d728:	d1f5      	bne.n	800d716 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x48>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800d72a:	f8da 3000 	ldr.w	r3, [sl]
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d1f1      	bne.n	800d716 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x48>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d732:	2300      	movs	r3, #0
 800d734:	4652      	mov	r2, sl
 800d736:	4658      	mov	r0, fp
 800d738:	4619      	mov	r1, r3
 800d73a:	f7fe fe89 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d73e:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d740:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d742:	4652      	mov	r2, sl
 800d744:	2100      	movs	r1, #0
 800d746:	4648      	mov	r0, r9
 800d748:	f7fe fe82 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
 800d74c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d74e:	f8db 4010 	ldr.w	r4, [fp, #16]
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d752:	9009      	str	r0, [sp, #36]	; 0x24
  if (bias_data) {
 800d754:	b12b      	cbz	r3, 800d762 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x94>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800d756:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800d758:	f7f9 fef7 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800d75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d75e:	4283      	cmp	r3, r0
 800d760:	d1d9      	bne.n	800d716 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x48>
 800d762:	f8db 3008 	ldr.w	r3, [fp, #8]
 800d766:	9319      	str	r3, [sp, #100]	; 0x64
 800d768:	f8db 300c 	ldr.w	r3, [fp, #12]
 800d76c:	931a      	str	r3, [sp, #104]	; 0x68
 800d76e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d772:	931b      	str	r3, [sp, #108]	; 0x6c
 800d774:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d778:	931c      	str	r3, [sp, #112]	; 0x70
 800d77a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d77e:	9308      	str	r3, [sp, #32]
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800d780:	9a08      	ldr	r2, [sp, #32]
  const int groups = input_depth / filter_input_depth;
 800d782:	fb94 f3f3 	sdiv	r3, r4, r3
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800d786:	fb02 4413 	mls	r4, r2, r3, r4
 800d78a:	2c00      	cmp	r4, #0
 800d78c:	d1c3      	bne.n	800d716 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x48>
  const int filters_per_group = output_depth / groups;
 800d78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d790:	fb92 f3f3 	sdiv	r3, r2, r3
 800d794:	931d      	str	r3, [sp, #116]	; 0x74
 800d796:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d79a:	9316      	str	r3, [sp, #88]	; 0x58
 800d79c:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d7a0:	9317      	str	r3, [sp, #92]	; 0x5c
  for (int batch = 0; batch < batches; ++batch) {
 800d7a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d7a4:	429c      	cmp	r4, r3
 800d7a6:	f280 80aa 	bge.w	800d8fe <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x230>
 800d7aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7ac:	425b      	negs	r3, r3
 800d7ae:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	9b04      	ldr	r3, [sp, #16]
 800d7b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	f280 809e 	bge.w	800d8fa <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x22c>
 800d7be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7c0:	425b      	negs	r3, r3
 800d7c2:	930b      	str	r3, [sp, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9305      	str	r3, [sp, #20]
 800d7c8:	9b05      	ldr	r3, [sp, #20]
 800d7ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	f280 808c 	bge.w	800d8ea <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x21c>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d7d2:	2500      	movs	r5, #0
 800d7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d6:	42ab      	cmp	r3, r5
 800d7d8:	dd7f      	ble.n	800d8da <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x20c>
          auto group = out_channel / filters_per_group;
 800d7da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
                                      in_channel + group * filter_input_depth)];
 800d7dc:	9a08      	ldr	r2, [sp, #32]
 800d7de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
          auto group = out_channel / filters_per_group;
 800d7e0:	fb95 f3f3 	sdiv	r3, r5, r3
                                      in_channel + group * filter_input_depth)];
 800d7e4:	4353      	muls	r3, r2
          AccumScalar acc = 0;
 800d7e6:	2200      	movs	r2, #0
                                      in_channel + group * filter_input_depth)];
 800d7e8:	9313      	str	r3, [sp, #76]	; 0x4c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9306      	str	r3, [sp, #24]
          AccumScalar acc = 0;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d7f4:	9b06      	ldr	r3, [sp, #24]
 800d7f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	da42      	bge.n	800d882 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1b4>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d7fc:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800d7fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d800:	9307      	str	r3, [sp, #28]
 800d802:	9b07      	ldr	r3, [sp, #28]
 800d804:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d806:	4293      	cmp	r3, r2
 800d808:	da35      	bge.n	800d876 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1a8>
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800d80a:	2f00      	cmp	r7, #0
 800d80c:	db2d      	blt.n	800d86a <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x19c>
 800d80e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d810:	42bb      	cmp	r3, r7
 800d812:	dd2a      	ble.n	800d86a <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x19c>
 800d814:	2e00      	cmp	r6, #0
 800d816:	db28      	blt.n	800d86a <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x19c>
 800d818:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d81a:	42b3      	cmp	r3, r6
 800d81c:	dd25      	ble.n	800d86a <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x19c>
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d81e:	f04f 0800 	mov.w	r8, #0
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	4598      	cmp	r8, r3
 800d826:	da20      	bge.n	800d86a <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x19c>
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d82a:	4632      	mov	r2, r6
 800d82c:	4621      	mov	r1, r4
 800d82e:	4658      	mov	r0, fp
 800d830:	4443      	add	r3, r8
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	463b      	mov	r3, r7
 800d836:	f7fe fc75 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                int32_t filter_val = filter_data[Offset(
 800d83a:	f8cd 8000 	str.w	r8, [sp]
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d83e:	9012      	str	r0, [sp, #72]	; 0x48
                int32_t filter_val = filter_data[Offset(
 800d840:	4629      	mov	r1, r5
 800d842:	4648      	mov	r0, r9
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d844:	f108 0801 	add.w	r8, r8, #1
                int32_t filter_val = filter_data[Offset(
 800d848:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d84c:	f7fe fc6a 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                acc += filter_val * input_val;
 800d850:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d852:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d854:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d856:	561b      	ldrsb	r3, [r3, r0]
 800d858:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800d85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d860:	fbc2 0183 	smlalbb	r0, r1, r2, r3
 800d864:	e9cd 0102 	strd	r0, r1, [sp, #8]
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d868:	e7db      	b.n	800d822 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x154>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d86a:	9b07      	ldr	r3, [sp, #28]
 800d86c:	3301      	adds	r3, #1
 800d86e:	9307      	str	r3, [sp, #28]
 800d870:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d872:	441f      	add	r7, r3
 800d874:	e7c5      	b.n	800d802 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x134>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d876:	9b06      	ldr	r3, [sp, #24]
 800d878:	3301      	adds	r3, #1
 800d87a:	9306      	str	r3, [sp, #24]
 800d87c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d87e:	441e      	add	r6, r3
 800d880:	e7b8      	b.n	800d7f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x126>
          if (bias_data) {
 800d882:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d884:	b14b      	cbz	r3, 800d89a <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1cc>
            acc += bias_data[out_channel];
 800d886:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d892:	1880      	adds	r0, r0, r2
 800d894:	4159      	adcs	r1, r3
 800d896:	e9cd 0102 	strd	r0, r1, [sp, #8]
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800d89a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d89c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d89e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d8a2:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800d8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8aa:	f7fa fc61 	bl	8008170 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 800d8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d8b0:	9500      	str	r5, [sp, #0]
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	4298      	cmp	r0, r3
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d8b6:	f105 0501 	add.w	r5, r5, #1
 800d8ba:	bfb8      	it	lt
 800d8bc:	4618      	movlt	r0, r3
 800d8be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8c0:	4283      	cmp	r3, r0
 800d8c2:	bfa8      	it	ge
 800d8c4:	4603      	movge	r3, r0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d8c6:	4650      	mov	r0, sl
 800d8c8:	461e      	mov	r6, r3
 800d8ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8ce:	f7fe fc29 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800d8d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800d8d4:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d8d8:	e77c      	b.n	800d7d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x106>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d8da:	9b05      	ldr	r3, [sp, #20]
 800d8dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8de:	3301      	adds	r3, #1
 800d8e0:	9305      	str	r3, [sp, #20]
 800d8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8e4:	4413      	add	r3, r2
 800d8e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8e8:	e76e      	b.n	800d7c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xfa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d8ea:	9b04      	ldr	r3, [sp, #16]
 800d8ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	9304      	str	r3, [sp, #16]
 800d8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8f4:	4413      	add	r3, r2
 800d8f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8f8:	e75c      	b.n	800d7b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xe6>
  for (int batch = 0; batch < batches; ++batch) {
 800d8fa:	3401      	adds	r4, #1
 800d8fc:	e751      	b.n	800d7a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xd4>
}
 800d8fe:	b021      	add	sp, #132	; 0x84
 800d900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d904 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800d904:	4bbf      	ldr	r3, [pc, #764]	; (800dc04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800d906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800d90a:	681a      	ldr	r2, [r3, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800d90c:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 800d910:	460e      	mov	r6, r1
 800d912:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800d914:	f002 f9d5 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 800d918:	4bbb      	ldr	r3, [pc, #748]	; (800dc08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>)
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800d91a:	4682      	mov	sl, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 800d91c:	4631      	mov	r1, r6
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	4648      	mov	r0, r9
 800d922:	f002 f9ce 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      (NumInputs(node) == 3)
 800d926:	6834      	ldr	r4, [r6, #0]
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 800d928:	4607      	mov	r7, r0
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800d92a:	b14c      	cbz	r4, 800d940 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	2b03      	cmp	r3, #3
 800d930:	d114      	bne.n	800d95c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x58>
 800d932:	4bb6      	ldr	r3, [pc, #728]	; (800dc0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>)
 800d934:	4631      	mov	r1, r6
 800d936:	4648      	mov	r0, r9
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	f002 f9c2 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d93e:	4604      	mov	r4, r0
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 800d940:	4bb3      	ldr	r3, [pc, #716]	; (800dc10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
 800d942:	4631      	mov	r1, r6
 800d944:	4648      	mov	r0, r9
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	f002 f9bd 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800d94c:	f8d6 8014 	ldr.w	r8, [r6, #20]
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 800d950:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800d952:	f1b8 0f00 	cmp.w	r8, #0
 800d956:	d103      	bne.n	800d960 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c>
 800d958:	f009 f9f4 	bl	8016d44 <abort>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 800d95c:	2400      	movs	r4, #0
 800d95e:	e7ef      	b.n	800d940 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  TFLITE_DCHECK(node->user_data != nullptr);
 800d960:	6936      	ldr	r6, [r6, #16]
 800d962:	2e00      	cmp	r6, #0
 800d964:	d0f8      	beq.n	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  switch (input->type) {  // Already know in/out types are same.
 800d966:	f89a 0008 	ldrb.w	r0, [sl, #8]
 800d96a:	2807      	cmp	r0, #7
 800d96c:	d042      	beq.n	800d9f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
 800d96e:	2809      	cmp	r0, #9
 800d970:	f000 80bc 	beq.w	800daec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>
 800d974:	2801      	cmp	r0, #1
 800d976:	f040 813e 	bne.w	800dbf6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f2>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
 800d97a:	4641      	mov	r1, r8
 800d97c:	4632      	mov	r2, r6
 800d97e:	a896      	add	r0, sp, #600	; 0x258
 800d980:	f000 f962 	bl	800dc48 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
 800d984:	4651      	mov	r1, sl
 800d986:	a80a      	add	r0, sp, #40	; 0x28
 800d988:	f002 f9ab 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
 800d98c:	4639      	mov	r1, r7
 800d98e:	a811      	add	r0, sp, #68	; 0x44
  return reinterpret_cast<const T*>(tensor->data.raw);
 800d990:	f8da 8000 	ldr.w	r8, [sl]
 800d994:	f002 f9a5 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800d998:	2f00      	cmp	r7, #0
 800d99a:	d0dd      	beq.n	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
          tflite::micro::GetTensorShape(bias),
 800d99c:	ae18      	add	r6, sp, #96	; 0x60
 800d99e:	4621      	mov	r1, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 800d9a0:	f8d7 9000 	ldr.w	r9, [r7]
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f002 f99c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
 800d9aa:	b104      	cbz	r4, 800d9ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 800d9ac:	6824      	ldr	r4, [r4, #0]
          tflite::micro::GetTensorShape(output),
 800d9ae:	af1f      	add	r7, sp, #124	; 0x7c
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	f002 f995 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800d9b8:	2d00      	cmp	r5, #0
 800d9ba:	d0cd      	beq.n	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 800d9bc:	f50d 7a4e 	add.w	sl, sp, #824	; 0x338
  return reinterpret_cast<T*>(tensor->data.raw);
 800d9c0:	f8d5 b000 	ldr.w	fp, [r5]
      tflite::reference_ops::Conv(
 800d9c4:	2500      	movs	r5, #0
          tflite::micro::GetTensorShape(nullptr), nullptr);
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	4650      	mov	r0, sl
 800d9ca:	f002 f98a 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800d9ce:	f8cd 9000 	str.w	r9, [sp]
 800d9d2:	ab11      	add	r3, sp, #68	; 0x44
 800d9d4:	4642      	mov	r2, r8
 800d9d6:	a90a      	add	r1, sp, #40	; 0x28
 800d9d8:	a896      	add	r0, sp, #600	; 0x258
 800d9da:	e9cd a505 	strd	sl, r5, [sp, #20]
 800d9de:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800d9e2:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800d9e6:	f7ff fb2f 	bl	800d048 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
  return kTfLiteOk;
 800d9ea:	2000      	movs	r0, #0
}
 800d9ec:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
 800d9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (bias == nullptr || bias->type == kTfLiteInt32) {
 800d9f4:	b114      	cbz	r4, 800d9fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>
 800d9f6:	7a20      	ldrb	r0, [r4, #8]
 800d9f8:	2802      	cmp	r0, #2
 800d9fa:	d135      	bne.n	800da68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x164>
            ConvParamsQuantized(params, data),
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	4641      	mov	r1, r8
 800da00:	a8a4      	add	r0, sp, #656	; 0x290
 800da02:	f000 f955 	bl	800dcb0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
            tflite::micro::GetTensorShape(input),
 800da06:	4651      	mov	r1, sl
 800da08:	a826      	add	r0, sp, #152	; 0x98
            data.per_channel_output_multiplier, data.per_channel_output_shift,
 800da0a:	e9d6 8909 	ldrd	r8, r9, [r6, #36]	; 0x24
            tflite::micro::GetTensorShape(filter),
 800da0e:	ae2d      	add	r6, sp, #180	; 0xb4
            tflite::micro::GetTensorShape(input),
 800da10:	f002 f967 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800da14:	f8da 3000 	ldr.w	r3, [sl]
            tflite::micro::GetTensorShape(filter),
 800da18:	4639      	mov	r1, r7
 800da1a:	4630      	mov	r0, r6
 800da1c:	9309      	str	r3, [sp, #36]	; 0x24
 800da1e:	f002 f960 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800da22:	2f00      	cmp	r7, #0
 800da24:	d098      	beq.n	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800da26:	f8d7 b000 	ldr.w	fp, [r7]
            tflite::micro::GetTensorShape(bias),
 800da2a:	af34      	add	r7, sp, #208	; 0xd0
 800da2c:	4621      	mov	r1, r4
 800da2e:	4638      	mov	r0, r7
 800da30:	f002 f957 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800da34:	b104      	cbz	r4, 800da38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x134>
 800da36:	6824      	ldr	r4, [r4, #0]
            tflite::micro::GetTensorShape(output),
 800da38:	f10d 0aec 	add.w	sl, sp, #236	; 0xec
 800da3c:	4629      	mov	r1, r5
 800da3e:	4650      	mov	r0, sl
 800da40:	f002 f94f 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800da44:	2d00      	cmp	r5, #0
 800da46:	d087      	beq.n	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
        reference_integer_ops::ConvPerChannel(
 800da48:	682a      	ldr	r2, [r5, #0]
 800da4a:	4641      	mov	r1, r8
 800da4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4e:	a8a4      	add	r0, sp, #656	; 0x290
 800da50:	e9cd a205 	strd	sl, r2, [sp, #20]
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	464a      	mov	r2, r9
 800da58:	ab26      	add	r3, sp, #152	; 0x98
 800da5a:	e9cd 7403 	strd	r7, r4, [sp, #12]
 800da5e:	e9cd 6b01 	strd	r6, fp, [sp, #4]
 800da62:	f7ff fd2d 	bl	800d4c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps>
 800da66:	e7c0      	b.n	800d9ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe6>
      } else if (bias->type == kTfLiteInt64) {
 800da68:	2804      	cmp	r0, #4
 800da6a:	d136      	bne.n	800dada <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d6>
            ConvParamsQuantized(params, data),
 800da6c:	4632      	mov	r2, r6
 800da6e:	4641      	mov	r1, r8
 800da70:	a8b2      	add	r0, sp, #712	; 0x2c8
 800da72:	f000 f91d 	bl	800dcb0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
            tflite::micro::GetTensorShape(input),
 800da76:	4651      	mov	r1, sl
 800da78:	a842      	add	r0, sp, #264	; 0x108
            data.per_channel_output_multiplier, data.per_channel_output_shift,
 800da7a:	e9d6 8909 	ldrd	r8, r9, [r6, #36]	; 0x24
            tflite::micro::GetTensorShape(filter),
 800da7e:	ae49      	add	r6, sp, #292	; 0x124
            tflite::micro::GetTensorShape(input),
 800da80:	f002 f92f 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(filter),
 800da84:	4639      	mov	r1, r7
  return reinterpret_cast<const T*>(tensor->data.raw);
 800da86:	f8da a000 	ldr.w	sl, [sl]
 800da8a:	4630      	mov	r0, r6
 800da8c:	f002 f929 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800da90:	2f00      	cmp	r7, #0
 800da92:	f43f af61 	beq.w	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800da96:	f8d7 b000 	ldr.w	fp, [r7]
            tflite::micro::GetTensorShape(bias),
 800da9a:	af50      	add	r7, sp, #320	; 0x140
 800da9c:	4621      	mov	r1, r4
 800da9e:	4638      	mov	r0, r7
 800daa0:	f002 f91f 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800daa4:	6823      	ldr	r3, [r4, #0]
            tflite::micro::GetTensorShape(output),
 800daa6:	ac57      	add	r4, sp, #348	; 0x15c
 800daa8:	4629      	mov	r1, r5
 800daaa:	9309      	str	r3, [sp, #36]	; 0x24
 800daac:	4620      	mov	r0, r4
 800daae:	f002 f918 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800dab2:	2d00      	cmp	r5, #0
 800dab4:	f43f af50 	beq.w	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
        reference_integer_ops::ConvPerChannel(
 800dab8:	682a      	ldr	r2, [r5, #0]
 800daba:	4641      	mov	r1, r8
 800dabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dabe:	a8b2      	add	r0, sp, #712	; 0x2c8
 800dac0:	f8cd a000 	str.w	sl, [sp]
 800dac4:	e9cd 4205 	strd	r4, r2, [sp, #20]
 800dac8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800dacc:	e9cd 6b01 	strd	r6, fp, [sp, #4]
 800dad0:	ab42      	add	r3, sp, #264	; 0x108
 800dad2:	464a      	mov	r2, r9
 800dad4:	f7ff fdfb 	bl	800d6ce <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps>
 800dad8:	e787      	b.n	800d9ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe6>
        MicroPrintf("Bias type %s (%d) not supported.",
 800dada:	f7fa fae9 	bl	80080b0 <TfLiteTypeGetName>
 800dade:	7a22      	ldrb	r2, [r4, #8]
 800dae0:	4601      	mov	r1, r0
 800dae2:	484c      	ldr	r0, [pc, #304]	; (800dc14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x310>)
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 800dae4:	f7fd f8e8 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800dae8:	2001      	movs	r0, #1
 800daea:	e77f      	b.n	800d9ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>
      switch (filter->type) {
 800daec:	7a38      	ldrb	r0, [r7, #8]
 800daee:	2809      	cmp	r0, #9
 800daf0:	d048      	beq.n	800db84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>
 800daf2:	2812      	cmp	r0, #18
 800daf4:	d179      	bne.n	800dbea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800daf6:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800dafa:	4648      	mov	r0, r9
 800dafc:	6b71      	ldr	r1, [r6, #52]	; 0x34
 800dafe:	4798      	blx	r3
  return reinterpret_cast<const T*>(tensor->data.raw);
 800db00:	f8d7 b000 	ldr.w	fp, [r7]
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800db04:	4639      	mov	r1, r7
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800db06:	4681      	mov	r9, r0
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800db08:	a8ce      	add	r0, sp, #824	; 0x338
 800db0a:	f002 f8ea 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800db0e:	a8ce      	add	r0, sp, #824	; 0x338
 800db10:	f7f9 fd1b 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800db14:	464a      	mov	r2, r9
 800db16:	4601      	mov	r1, r0
 800db18:	4658      	mov	r0, fp
 800db1a:	f7fa fb89 	bl	8008230 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
              ConvParamsQuantized(params, data),
 800db1e:	4632      	mov	r2, r6
 800db20:	4641      	mov	r1, r8
 800db22:	a8c0      	add	r0, sp, #768	; 0x300
 800db24:	f000 f8c4 	bl	800dcb0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
              tflite::micro::GetTensorShape(input),
 800db28:	4651      	mov	r1, sl
 800db2a:	a85e      	add	r0, sp, #376	; 0x178
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800db2c:	e9d6 8b09 	ldrd	r8, fp, [r6, #36]	; 0x24
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800db30:	ae65      	add	r6, sp, #404	; 0x194
              tflite::micro::GetTensorShape(input),
 800db32:	f002 f8d6 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800db36:	4639      	mov	r1, r7
 800db38:	f8da 3000 	ldr.w	r3, [sl]
              tflite::micro::GetTensorShape(bias),
 800db3c:	af6c      	add	r7, sp, #432	; 0x1b0
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800db3e:	4630      	mov	r0, r6
 800db40:	9309      	str	r3, [sp, #36]	; 0x24
 800db42:	f002 f8ce 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800db46:	4621      	mov	r1, r4
 800db48:	4638      	mov	r0, r7
 800db4a:	f002 f8ca 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800db4e:	b104      	cbz	r4, 800db52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24e>
 800db50:	6824      	ldr	r4, [r4, #0]
              tflite::micro::GetTensorShape(output),
 800db52:	f50d 7ae6 	add.w	sl, sp, #460	; 0x1cc
 800db56:	4629      	mov	r1, r5
 800db58:	4650      	mov	r0, sl
 800db5a:	f002 f8c2 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800db5e:	2d00      	cmp	r5, #0
 800db60:	f43f aefa 	beq.w	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
          reference_integer_ops::ConvPerChannel(
 800db64:	682a      	ldr	r2, [r5, #0]
 800db66:	4641      	mov	r1, r8
 800db68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db6a:	a8c0      	add	r0, sp, #768	; 0x300
 800db6c:	e9cd a205 	strd	sl, r2, [sp, #20]
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	465a      	mov	r2, fp
 800db74:	ab5e      	add	r3, sp, #376	; 0x178
 800db76:	e9cd 7403 	strd	r7, r4, [sp, #12]
 800db7a:	e9cd 6901 	strd	r6, r9, [sp, #4]
          reference_integer_ops::ConvPerChannel(
 800db7e:	f7ff fb7b 	bl	800d278 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
 800db82:	e732      	b.n	800d9ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe6>
              ConvParamsQuantized(params, data),
 800db84:	4632      	mov	r2, r6
 800db86:	4641      	mov	r1, r8
 800db88:	a8ce      	add	r0, sp, #824	; 0x338
 800db8a:	f000 f891 	bl	800dcb0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
              tflite::micro::GetTensorShape(input),
 800db8e:	4651      	mov	r1, sl
 800db90:	a87a      	add	r0, sp, #488	; 0x1e8
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800db92:	e9d6 8909 	ldrd	r8, r9, [r6, #36]	; 0x24
              tflite::micro::GetTensorShape(filter),
 800db96:	ae81      	add	r6, sp, #516	; 0x204
              tflite::micro::GetTensorShape(input),
 800db98:	f002 f8a3 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800db9c:	f8da 3000 	ldr.w	r3, [sl]
              tflite::micro::GetTensorShape(filter),
 800dba0:	4639      	mov	r1, r7
 800dba2:	4630      	mov	r0, r6
 800dba4:	9309      	str	r3, [sp, #36]	; 0x24
 800dba6:	f002 f89c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800dbaa:	f8d7 b000 	ldr.w	fp, [r7]
              tflite::micro::GetTensorShape(bias),
 800dbae:	af88      	add	r7, sp, #544	; 0x220
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	4638      	mov	r0, r7
 800dbb4:	f002 f895 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800dbb8:	b104      	cbz	r4, 800dbbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>
 800dbba:	6824      	ldr	r4, [r4, #0]
              tflite::micro::GetTensorShape(output),
 800dbbc:	f50d 7a0f 	add.w	sl, sp, #572	; 0x23c
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	4650      	mov	r0, sl
 800dbc4:	f002 f88d 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800dbc8:	2d00      	cmp	r5, #0
 800dbca:	f43f aec5 	beq.w	800d958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
          reference_integer_ops::ConvPerChannel(
 800dbce:	682a      	ldr	r2, [r5, #0]
 800dbd0:	4641      	mov	r1, r8
 800dbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd4:	a8ce      	add	r0, sp, #824	; 0x338
 800dbd6:	e9cd a205 	strd	sl, r2, [sp, #20]
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	464a      	mov	r2, r9
 800dbde:	ab7a      	add	r3, sp, #488	; 0x1e8
 800dbe0:	e9cd 7403 	strd	r7, r4, [sp, #12]
 800dbe4:	e9cd 6b01 	strd	r6, fp, [sp, #4]
 800dbe8:	e7c9      	b.n	800db7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27a>
          MicroPrintf("Weight type %s (%d) not supported.",
 800dbea:	f7fa fa61 	bl	80080b0 <TfLiteTypeGetName>
 800dbee:	7a3a      	ldrb	r2, [r7, #8]
 800dbf0:	4601      	mov	r1, r0
 800dbf2:	4809      	ldr	r0, [pc, #36]	; (800dc18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x314>)
 800dbf4:	e776      	b.n	800dae4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 800dbf6:	f7fa fa5b 	bl	80080b0 <TfLiteTypeGetName>
 800dbfa:	f89a 2008 	ldrb.w	r2, [sl, #8]
 800dbfe:	4601      	mov	r1, r0
 800dc00:	4806      	ldr	r0, [pc, #24]	; (800dc1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x318>)
 800dc02:	e76f      	b.n	800dae4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
 800dc04:	080fc0c0 	.word	0x080fc0c0
 800dc08:	080fc0c8 	.word	0x080fc0c8
 800dc0c:	080fc0bc 	.word	0x080fc0bc
 800dc10:	080fc0c4 	.word	0x080fc0c4
 800dc14:	080fbf79 	.word	0x080fbf79
 800dc18:	080fbf9a 	.word	0x080fbf9a
 800dc1c:	080fbb1a 	.word	0x080fbb1a

0800dc20 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 800dc20:	b14b      	cbz	r3, 800dc36 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>

  switch (padding) {
 800dc22:	2801      	cmp	r0, #1
 800dc24:	d003      	beq.n	800dc2e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xe>
 800dc26:	2802      	cmp	r0, #2
 800dc28:	d007      	beq.n	800dc3a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e003      	b.n	800dc36 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
      return (image_size + stride - 1) / stride;
 800dc2e:	4419      	add	r1, r3
 800dc30:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
 800dc32:	fb91 f3f3 	sdiv	r3, r1, r3
  }
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	4770      	bx	lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800dc3a:	3a01      	subs	r2, #1
 800dc3c:	9800      	ldr	r0, [sp, #0]
      return (image_size + stride - effective_filter_size) / stride;
 800dc3e:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800dc40:	4350      	muls	r0, r2
 800dc42:	3001      	adds	r0, #1
      return (image_size + stride - effective_filter_size) / stride;
 800dc44:	1a09      	subs	r1, r1, r0
 800dc46:	e7f4      	b.n	800dc32 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x12>

0800dc48 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800dc48:	7b0b      	ldrb	r3, [r1, #12]
  if (activation == kTfLiteActRelu) {
 800dc4a:	2b01      	cmp	r3, #1
                           const OpDataConv& data) {
 800dc4c:	b570      	push	{r4, r5, r6, lr}
 800dc4e:	4604      	mov	r4, r0
 800dc50:	460d      	mov	r5, r1
 800dc52:	4616      	mov	r6, r2
 800dc54:	d103      	bne.n	800dc5e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x16>
    *activation_min = 0;
 800dc56:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
 800dc58:	6323      	str	r3, [r4, #48]	; 0x30
    *activation_max = std::numeric_limits<T>::max();
 800dc5a:	4b12      	ldr	r3, [pc, #72]	; (800dca4 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x5c>)
 800dc5c:	e004      	b.n	800dc68 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
  } else if (activation == kTfLiteActRelu6) {
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	d115      	bne.n	800dc8e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x46>
    *activation_min = 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 6;
 800dc66:	4b10      	ldr	r3, [pc, #64]	; (800dca8 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x60>)
    *activation_max = std::numeric_limits<T>::max();
 800dc68:	6363      	str	r3, [r4, #52]	; 0x34
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800dc6a:	7828      	ldrb	r0, [r5, #0]
 800dc6c:	f002 f84e 	bl	800fd0c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
 800dc70:	6833      	ldr	r3, [r6, #0]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800dc72:	7020      	strb	r0, [r4, #0]
  op_params.stride_width = params.stride_width;
  op_params.stride_height = params.stride_height;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.dilation_height_factor = params.dilation_height_factor;
  return op_params;
}
 800dc74:	4620      	mov	r0, r4
  op_params.padding_values.width = data.padding.width;
 800dc76:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
 800dc78:	6873      	ldr	r3, [r6, #4]
 800dc7a:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
 800dc7c:	686b      	ldr	r3, [r5, #4]
 800dc7e:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
 800dc80:	68ab      	ldr	r3, [r5, #8]
 800dc82:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800dc84:	692b      	ldr	r3, [r5, #16]
 800dc86:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800dc88:	696b      	ldr	r3, [r5, #20]
 800dc8a:	8223      	strh	r3, [r4, #16]
}
 800dc8c:	bd70      	pop	{r4, r5, r6, pc}
  } else if (activation == kTfLiteActReluN1To1) {
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d104      	bne.n	800dc9c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x54>
    *activation_min = -1;
 800dc92:	4b06      	ldr	r3, [pc, #24]	; (800dcac <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x64>)
 800dc94:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 1;
 800dc96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dc9a:	e7e5      	b.n	800dc68 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
    *activation_min = std::numeric_limits<T>::lowest();
 800dc9c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800dca0:	e7da      	b.n	800dc58 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x10>
 800dca2:	bf00      	nop
 800dca4:	7f7fffff 	.word	0x7f7fffff
 800dca8:	40c00000 	.word	0x40c00000
 800dcac:	bf800000 	.word	0xbf800000

0800dcb0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800dcb0:	6913      	ldr	r3, [r2, #16]
 800dcb2:	425b      	negs	r3, r3
                               const OpDataConv& data) {
 800dcb4:	b570      	push	{r4, r5, r6, lr}
  op_params.input_offset = -data.input_zero_point;
 800dcb6:	6143      	str	r3, [r0, #20]
                               const OpDataConv& data) {
 800dcb8:	4615      	mov	r5, r2
  op_params.weights_offset = -data.filter_zero_point;
 800dcba:	6953      	ldr	r3, [r2, #20]
                               const OpDataConv& data) {
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	460e      	mov	r6, r1
  op_params.weights_offset = -data.filter_zero_point;
 800dcc0:	425b      	negs	r3, r3
 800dcc2:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
 800dcc4:	6993      	ldr	r3, [r2, #24]
 800dcc6:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
 800dcc8:	69d3      	ldr	r3, [r2, #28]
 800dcca:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
 800dccc:	6a13      	ldr	r3, [r2, #32]
 800dcce:	425b      	negs	r3, r3
 800dcd0:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800dcd2:	7808      	ldrb	r0, [r1, #0]
 800dcd4:	f002 f81a 	bl	800fd0c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
 800dcd8:	686b      	ldr	r3, [r5, #4]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800dcda:	7020      	strb	r0, [r4, #0]
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.quantized_activation_min = data.output_activation_min;
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
 800dcdc:	4620      	mov	r0, r4
  op_params.padding_values.height = data.padding.height;
 800dcde:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
 800dce4:	68b3      	ldr	r3, [r6, #8]
 800dce6:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
 800dce8:	6873      	ldr	r3, [r6, #4]
 800dcea:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800dcec:	6973      	ldr	r3, [r6, #20]
 800dcee:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800dcf0:	6933      	ldr	r3, [r6, #16]
 800dcf2:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 800dcf4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800dcf6:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800dcf8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800dcfa:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800dcfc:	bd70      	pop	{r4, r5, r6, pc}

0800dcfe <_ZN6tflite8ConvInitEP13TfLiteContextPKcj>:

void* ConvInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800dcfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* ConvInit(TfLiteContext* context, const char* buffer, size_t length) {
 800dd00:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800dd02:	b90b      	cbnz	r3, 800dd08 <_ZN6tflite8ConvInitEP13TfLiteContextPKcj+0xa>
 800dd04:	f009 f81e 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800dd08:	2138      	movs	r1, #56	; 0x38
}
 800dd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800dd0e:	4718      	bx	r3

0800dd10 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 800dd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd14:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
 800dd16:	680b      	ldr	r3, [r1, #0]
                                 OpDataConv* data) {
 800dd18:	b08f      	sub	sp, #60	; 0x3c
 800dd1a:	4606      	mov	r6, r0
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800dd1c:	681b      	ldr	r3, [r3, #0]
                                 OpDataConv* data) {
 800dd1e:	4688      	mov	r8, r1
 800dd20:	4617      	mov	r7, r2
 800dd22:	9c1e      	ldr	r4, [sp, #120]	; 0x78
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800dd24:	3b02      	subs	r3, #2
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d90a      	bls.n	800dd40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x30>
 800dd2a:	4b67      	ldr	r3, [pc, #412]	; (800dec8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b8>)
 800dd2c:	4a67      	ldr	r2, [pc, #412]	; (800decc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>)
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	2357      	movs	r3, #87	; 0x57
 800dd32:	6944      	ldr	r4, [r0, #20]
 800dd34:	4966      	ldr	r1, [pc, #408]	; (800ded0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c0>)
 800dd36:	47a0      	blx	r4
 800dd38:	2001      	movs	r0, #1
  if (bias != nullptr) {
    micro_context->DeallocateTempTfLiteTensor(bias);
  }

  return kTfLiteOk;
}
 800dd3a:	b00f      	add	sp, #60	; 0x3c
 800dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800dd40:	684b      	ldr	r3, [r1, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	930a      	str	r3, [sp, #40]	; 0x28
 800dd48:	d00c      	beq.n	800dd64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
 800dd4a:	2401      	movs	r4, #1
 800dd4c:	4a5f      	ldr	r2, [pc, #380]	; (800decc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>)
 800dd4e:	4961      	ldr	r1, [pc, #388]	; (800ded4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c4>)
 800dd50:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800dd54:	4b60      	ldr	r3, [pc, #384]	; (800ded8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c8>)
 800dd56:	9301      	str	r3, [sp, #4]
 800dd58:	4b60      	ldr	r3, [pc, #384]	; (800dedc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1cc>)
 800dd5a:	9300      	str	r3, [sp, #0]
 800dd5c:	2358      	movs	r3, #88	; 0x58
 800dd5e:	6945      	ldr	r5, [r0, #20]
 800dd60:	47a8      	blx	r5
 800dd62:	e7e9      	b.n	800dd38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800dd64:	6893      	ldr	r3, [r2, #8]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800dd66:	4649      	mov	r1, r9
  auto padding = params.padding;
 800dd68:	f892 a000 	ldrb.w	sl, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800dd6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd6e:	6853      	ldr	r3, [r2, #4]
 800dd70:	4650      	mov	r0, sl
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800dd72:	e9d2 5b04 	ldrd	r5, fp, [r2, #16]
 800dd76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd78:	9500      	str	r5, [sp, #0]
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800dd7a:	930c      	str	r3, [sp, #48]	; 0x30
 800dd7c:	f7ff ff50 	bl	800dc20 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800dd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd82:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd84:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800dd86:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800dd88:	4650      	mov	r0, sl
 800dd8a:	f8cd b000 	str.w	fp, [sp]
 800dd8e:	f7ff ff47 	bl	800dc20 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800dd92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800dd94:	3801      	subs	r0, #1
 800dd96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800dd98:	3b01      	subs	r3, #1
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800dd9a:	4641      	mov	r1, r8
 800dd9c:	fb0b fb03 	mul.w	fp, fp, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800dda0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800dda2:	f10b 0b01 	add.w	fp, fp, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800dda6:	fb03 b000 	mla	r0, r3, r0, fp
  int total_padding =
 800ddaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ddac:	1ac0      	subs	r0, r0, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ddae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddb0:	3b01      	subs	r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
 800ddb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ddb6:	436b      	muls	r3, r5
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ddb8:	1e55      	subs	r5, r2, #1
 800ddba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ddbc:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ddbe:	fb02 3505 	mla	r5, r2, r5, r3
 800ddc2:	2200      	movs	r2, #0
  int total_padding =
 800ddc4:	eba5 0909 	sub.w	r9, r5, r9
  total_padding = total_padding > 0 ? total_padding : 0;
 800ddc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
 800ddcc:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
 800ddd0:	f009 0501 	and.w	r5, r9, #1
  data->padding = ComputePaddingHeightWidth(
 800ddd4:	6023      	str	r3, [r4, #0]
  return total_padding / 2;
 800ddd6:	1043      	asrs	r3, r0, #1
  *offset = total_padding % 2;
 800ddd8:	f000 0001 	and.w	r0, r0, #1
 800dddc:	60a5      	str	r5, [r4, #8]
 800ddde:	6063      	str	r3, [r4, #4]
 800dde0:	60e0      	str	r0, [r4, #12]
  MicroContext* micro_context = GetMicroContext(context);
 800dde2:	68f5      	ldr	r5, [r6, #12]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800dde4:	4628      	mov	r0, r5
 800dde6:	f7fc f945 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800ddea:	4683      	mov	fp, r0
 800ddec:	b938      	cbnz	r0, 800ddfe <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xee>
 800ddee:	4b3c      	ldr	r3, [pc, #240]	; (800dee0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d0>)
 800ddf0:	6974      	ldr	r4, [r6, #20]
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	2365      	movs	r3, #101	; 0x65
  TF_LITE_ENSURE(context, output != nullptr);
 800ddf6:	4a35      	ldr	r2, [pc, #212]	; (800decc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>)
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	4935      	ldr	r1, [pc, #212]	; (800ded0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c0>)
 800ddfc:	e79b      	b.n	800dd36 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x26>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 800ddfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de00:	4641      	mov	r1, r8
 800de02:	4628      	mov	r0, r5
 800de04:	f7fc f936 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 800de08:	4681      	mov	r9, r0
 800de0a:	b920      	cbnz	r0, 800de16 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x106>
 800de0c:	4b35      	ldr	r3, [pc, #212]	; (800dee4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d4>)
 800de0e:	6974      	ldr	r4, [r6, #20]
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	2368      	movs	r3, #104	; 0x68
 800de14:	e7ef      	b.n	800ddf6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe6>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 800de16:	4641      	mov	r1, r8
 800de18:	2202      	movs	r2, #2
 800de1a:	4628      	mov	r0, r5
 800de1c:	f7fc f92a 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800de20:	4641      	mov	r1, r8
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 800de22:	4682      	mov	sl, r0
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800de24:	2200      	movs	r2, #0
 800de26:	4628      	mov	r0, r5
 800de28:	f7fc f939 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800de2c:	4680      	mov	r8, r0
 800de2e:	b920      	cbnz	r0, 800de3a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12a>
 800de30:	4b2d      	ldr	r3, [pc, #180]	; (800dee8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>)
 800de32:	6974      	ldr	r4, [r6, #20]
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	236d      	movs	r3, #109	; 0x6d
 800de38:	e7dd      	b.n	800ddf6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe6>
  if (data_type != kTfLiteFloat32) {
 800de3a:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d11c      	bne.n	800de7c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
  data->input_zero_point = input->params.zero_point;
 800de42:	f8db 3010 	ldr.w	r3, [fp, #16]
  micro_context->DeallocateTempTfLiteTensor(output);
 800de46:	4641      	mov	r1, r8
 800de48:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
 800de4a:	6123      	str	r3, [r4, #16]
  data->filter_zero_point = filter->params.zero_point;
 800de4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de50:	6163      	str	r3, [r4, #20]
  data->output_zero_point = output->params.zero_point;
 800de52:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800de56:	61a3      	str	r3, [r4, #24]
  micro_context->DeallocateTempTfLiteTensor(output);
 800de58:	682b      	ldr	r3, [r5, #0]
 800de5a:	699b      	ldr	r3, [r3, #24]
 800de5c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 800de5e:	682b      	ldr	r3, [r5, #0]
 800de60:	4659      	mov	r1, fp
 800de62:	4628      	mov	r0, r5
 800de64:	699b      	ldr	r3, [r3, #24]
 800de66:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800de68:	682b      	ldr	r3, [r5, #0]
 800de6a:	4649      	mov	r1, r9
 800de6c:	4628      	mov	r0, r5
 800de6e:	699b      	ldr	r3, [r3, #24]
 800de70:	4798      	blx	r3
  if (bias != nullptr) {
 800de72:	f1ba 0f00 	cmp.w	sl, #0
 800de76:	d121      	bne.n	800debc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>
  return kTfLiteOk;
 800de78:	2000      	movs	r0, #0
 800de7a:	e75e      	b.n	800dd3a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 800de7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800de80:	370c      	adds	r7, #12
 800de82:	464a      	mov	r2, r9
 800de84:	4659      	mov	r1, fp
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	9308      	str	r3, [sp, #32]
 800de8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800de8c:	9307      	str	r3, [sp, #28]
 800de8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de90:	9306      	str	r3, [sp, #24]
 800de92:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800de96:	9305      	str	r3, [sp, #20]
 800de98:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800de9c:	9304      	str	r3, [sp, #16]
 800de9e:	f104 0320 	add.w	r3, r4, #32
 800dea2:	9303      	str	r3, [sp, #12]
 800dea4:	f104 031c 	add.w	r3, r4, #28
 800dea8:	e9cd 0700 	strd	r0, r7, [sp]
 800deac:	9302      	str	r3, [sp, #8]
 800deae:	4630      	mov	r0, r6
 800deb0:	4653      	mov	r3, sl
 800deb2:	f7fa fcd5 	bl	8008860 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d0c3      	beq.n	800de42 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x132>
 800deba:	e73e      	b.n	800dd3a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    micro_context->DeallocateTempTfLiteTensor(bias);
 800debc:	682b      	ldr	r3, [r5, #0]
 800debe:	4651      	mov	r1, sl
 800dec0:	4628      	mov	r0, r5
 800dec2:	699b      	ldr	r3, [r3, #24]
 800dec4:	4798      	blx	r3
 800dec6:	e7d7      	b.n	800de78 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x168>
 800dec8:	080fc107 	.word	0x080fc107
 800decc:	080fc0cc 	.word	0x080fc0cc
 800ded0:	080f93a5 	.word	0x080f93a5
 800ded4:	080f982c 	.word	0x080f982c
 800ded8:	080fca44 	.word	0x080fca44
 800dedc:	080fc12b 	.word	0x080fc12b
 800dee0:	080fbed7 	.word	0x080fbed7
 800dee4:	080fc13f 	.word	0x080fc13f
 800dee8:	080fbcfa 	.word	0x080fbcfa

0800deec <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800deec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800def0:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800def4:	b099      	sub	sp, #100	; 0x64
 800def6:	4604      	mov	r4, r0
 800def8:	4689      	mov	r9, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 800defa:	f1b8 0f00 	cmp.w	r8, #0
 800defe:	d101      	bne.n	800df04 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18>
 800df00:	f008 ff20 	bl	8016d44 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800df04:	694b      	ldr	r3, [r1, #20]
 800df06:	9309      	str	r3, [sp, #36]	; 0x24
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d0f9      	beq.n	800df00 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  MicroContext* micro_context = GetMicroContext(context);
 800df0c:	68c6      	ldr	r6, [r0, #12]

  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800df0e:	2200      	movs	r2, #0
 800df10:	4630      	mov	r0, r6
 800df12:	f7fc f8c4 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800df16:	4682      	mov	sl, r0
 800df18:	b968      	cbnz	r0, 800df36 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 800df1a:	4b74      	ldr	r3, [pc, #464]	; (800e0ec <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 800df1c:	6965      	ldr	r5, [r4, #20]
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	2395      	movs	r3, #149	; 0x95
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
  TF_LITE_ENSURE(context, input != nullptr);
 800df22:	4a73      	ldr	r2, [pc, #460]	; (800e0f0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 800df24:	4620      	mov	r0, r4
 800df26:	4973      	ldr	r1, [pc, #460]	; (800e0f4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 800df28:	47a8      	blx	r5
 800df2a:	f04f 0b01 	mov.w	fp, #1

  micro_context->DeallocateTempTfLiteTensor(filter);
  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 800df2e:	4658      	mov	r0, fp
 800df30:	b019      	add	sp, #100	; 0x64
 800df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800df36:	2200      	movs	r2, #0
 800df38:	4649      	mov	r1, r9
 800df3a:	4630      	mov	r0, r6
 800df3c:	f7fc f89a 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800df40:	4607      	mov	r7, r0
 800df42:	b920      	cbnz	r0, 800df4e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x62>
 800df44:	4b6c      	ldr	r3, [pc, #432]	; (800e0f8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 800df46:	6965      	ldr	r5, [r4, #20]
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	2398      	movs	r3, #152	; 0x98
 800df4c:	e7e9      	b.n	800df22 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x36>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 800df4e:	2201      	movs	r2, #1
 800df50:	4649      	mov	r1, r9
 800df52:	4630      	mov	r0, r6
 800df54:	f7fc f88e 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 800df58:	4605      	mov	r5, r0
 800df5a:	b920      	cbnz	r0, 800df66 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x7a>
 800df5c:	4b67      	ldr	r3, [pc, #412]	; (800e0fc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 800df5e:	6965      	ldr	r5, [r4, #20]
 800df60:	9300      	str	r3, [sp, #0]
 800df62:	239b      	movs	r3, #155	; 0x9b
 800df64:	e7dd      	b.n	800df22 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800df66:	783b      	ldrb	r3, [r7, #0]
 800df68:	f89a 2000 	ldrb.w	r2, [sl]
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d00c      	beq.n	800df8a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x9e>
 800df70:	6965      	ldr	r5, [r4, #20]
 800df72:	4620      	mov	r0, r4
 800df74:	4962      	ldr	r1, [pc, #392]	; (800e100 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 800df76:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800df7a:	4b62      	ldr	r3, [pc, #392]	; (800e104 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800df7c:	4a5c      	ldr	r2, [pc, #368]	; (800e0f0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 800df7e:	9301      	str	r3, [sp, #4]
 800df80:	4b61      	ldr	r3, [pc, #388]	; (800e108 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	239d      	movs	r3, #157	; 0x9d
 800df86:	47a8      	blx	r5
 800df88:	e7cf      	b.n	800df2a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_MSG(
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d107      	bne.n	800df9e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
 800df8e:	7803      	ldrb	r3, [r0, #0]
 800df90:	2b01      	cmp	r3, #1
 800df92:	d00e      	beq.n	800dfb2 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
 800df94:	6963      	ldr	r3, [r4, #20]
 800df96:	4620      	mov	r0, r4
 800df98:	495c      	ldr	r1, [pc, #368]	; (800e10c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800df9a:	4798      	blx	r3
 800df9c:	e7c5      	b.n	800df2a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
 800df9e:	2b07      	cmp	r3, #7
 800dfa0:	d102      	bne.n	800dfa8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 800dfa2:	7803      	ldrb	r3, [r0, #0]
 800dfa4:	2b09      	cmp	r3, #9
 800dfa6:	e7f4      	b.n	800df92 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
 800dfa8:	2b09      	cmp	r3, #9
 800dfaa:	d1f3      	bne.n	800df94 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xa8>
 800dfac:	7803      	ldrb	r3, [r0, #0]
 800dfae:	2b12      	cmp	r3, #18
 800dfb0:	d1f8      	bne.n	800dfa4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  const int input_width = input->dims->data[2];
 800dfb2:	68bb      	ldr	r3, [r7, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800dfb4:	4620      	mov	r0, r4
  const int input_width = input->dims->data[2];
 800dfb6:	68da      	ldr	r2, [r3, #12]
  const int input_height = input->dims->data[1];
 800dfb8:	689b      	ldr	r3, [r3, #8]
  const int input_width = input->dims->data[2];
 800dfba:	920a      	str	r2, [sp, #40]	; 0x28
  const int input_height = input->dims->data[1];
 800dfbc:	930b      	str	r3, [sp, #44]	; 0x2c
  const int filter_width = filter->dims->data[2];
 800dfbe:	68ab      	ldr	r3, [r5, #8]
 800dfc0:	68da      	ldr	r2, [r3, #12]
 800dfc2:	920c      	str	r2, [sp, #48]	; 0x30
  const int filter_height = filter->dims->data[1];
 800dfc4:	689a      	ldr	r2, [r3, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800dfc6:	685b      	ldr	r3, [r3, #4]
  const int filter_height = filter->dims->data[1];
 800dfc8:	920d      	str	r2, [sp, #52]	; 0x34
  const int output_width = output->dims->data[2];
 800dfca:	f8da 2008 	ldr.w	r2, [sl, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800dfce:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800dfd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  const int output_width = output->dims->data[2];
 800dfd4:	68d1      	ldr	r1, [r2, #12]
  const int output_height = output->dims->data[1];
 800dfd6:	6892      	ldr	r2, [r2, #8]
  const int output_width = output->dims->data[2];
 800dfd8:	910e      	str	r1, [sp, #56]	; 0x38
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800dfda:	4659      	mov	r1, fp
  const int output_height = output->dims->data[1];
 800dfdc:	920f      	str	r2, [sp, #60]	; 0x3c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800dfde:	4798      	blx	r3
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800dfe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfe2:	4659      	mov	r1, fp
  data->per_channel_output_multiplier =
 800dfe4:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800dfe8:	4620      	mov	r0, r4
 800dfea:	4798      	blx	r3
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800dfec:	783b      	ldrb	r3, [r7, #0]
  data->per_channel_output_shift =
 800dfee:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800dff2:	2b09      	cmp	r3, #9
 800dff4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dff6:	d001      	beq.n	800dffc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x110>
 800dff8:	2b07      	cmp	r3, #7
 800dffa:	d12e      	bne.n	800e05a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x16e>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800dffc:	f895 b030 	ldrb.w	fp, [r5, #48]	; 0x30
 800e000:	f1bb 0f01 	cmp.w	fp, #1
 800e004:	d00d      	beq.n	800e022 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x136>
 800e006:	4b42      	ldr	r3, [pc, #264]	; (800e110 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800e008:	2501      	movs	r5, #1
 800e00a:	6966      	ldr	r6, [r4, #20]
 800e00c:	4620      	mov	r0, r4
 800e00e:	9301      	str	r3, [sp, #4]
 800e010:	4b40      	ldr	r3, [pc, #256]	; (800e114 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800e012:	4a37      	ldr	r2, [pc, #220]	; (800e0f0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	23b9      	movs	r3, #185	; 0xb9
 800e018:	4939      	ldr	r1, [pc, #228]	; (800e100 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 800e01a:	e9cd b502 	strd	fp, r5, [sp, #8]
 800e01e:	47b0      	blx	r6
 800e020:	e783      	b.n	800df2a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    const auto* affine_quantization =
 800e022:	6b69      	ldr	r1, [r5, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
 800e024:	2900      	cmp	r1, #0
 800e026:	f43f af6b 	beq.w	800df00 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
 800e02a:	6808      	ldr	r0, [r1, #0]
 800e02c:	2800      	cmp	r0, #0
 800e02e:	f43f af67 	beq.w	800df00 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
 800e032:	6849      	ldr	r1, [r1, #4]
 800e034:	2900      	cmp	r1, #0
 800e036:	f43f af63 	beq.w	800df00 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TF_LITE_ENSURE(context,
 800e03a:	6800      	ldr	r0, [r0, #0]
 800e03c:	2801      	cmp	r0, #1
 800e03e:	d00c      	beq.n	800e05a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x16e>
 800e040:	68a9      	ldr	r1, [r5, #8]
 800e042:	6849      	ldr	r1, [r1, #4]
 800e044:	4288      	cmp	r0, r1
 800e046:	d008      	beq.n	800e05a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x16e>
 800e048:	4b33      	ldr	r3, [pc, #204]	; (800e118 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e04a:	4620      	mov	r0, r4
 800e04c:	6965      	ldr	r5, [r4, #20]
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	23c4      	movs	r3, #196	; 0xc4
 800e052:	4a27      	ldr	r2, [pc, #156]	; (800e0f0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 800e054:	4927      	ldr	r1, [pc, #156]	; (800e0f4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 800e056:	47a8      	blx	r5
 800e058:	e769      	b.n	800df2e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 800e05a:	e9cd 3805 	strd	r3, r8, [sp, #20]
 800e05e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e060:	4649      	mov	r1, r9
 800e062:	9204      	str	r2, [sp, #16]
 800e064:	4620      	mov	r0, r4
 800e066:	9303      	str	r3, [sp, #12]
 800e068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e06a:	9302      	str	r3, [sp, #8]
 800e06c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e06e:	9301      	str	r3, [sp, #4]
 800e070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e078:	f7ff fe4a 	bl	800dd10 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800e07c:	4683      	mov	fp, r0
 800e07e:	2800      	cmp	r0, #0
 800e080:	f47f af55 	bne.w	800df2e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  if (filter->type == kTfLiteInt4) {
 800e084:	782b      	ldrb	r3, [r5, #0]
 800e086:	2b12      	cmp	r3, #18
 800e088:	d11d      	bne.n	800e0c6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1da>
        RuntimeShape(filter->dims->size,
 800e08a:	68a9      	ldr	r1, [r5, #8]
 800e08c:	f851 9b04 	ldr.w	r9, [r1], #4
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800e090:	f1b9 0f06 	cmp.w	r9, #6
      : size_(dimensions_count) {
 800e094:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800e098:	f73f af32 	bgt.w	800df00 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800e09c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800e0a0:	a812      	add	r0, sp, #72	; 0x48
 800e0a2:	f008 fed6 	bl	8016e52 <memcpy>
    int buffer_size = 1;
 800e0a6:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
 800e0a8:	a811      	add	r0, sp, #68	; 0x44
    for (int i = 0; i < size_; i++) {
 800e0aa:	45d9      	cmp	r9, fp
 800e0ac:	f10b 0301 	add.w	r3, fp, #1
 800e0b0:	dd04      	ble.n	800e0bc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1d0>
      buffer_size *= dims_data[i];
 800e0b2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800e0b6:	469b      	mov	fp, r3
 800e0b8:	4351      	muls	r1, r2
 800e0ba:	e7f6      	b.n	800e0aa <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1be>
    context->RequestScratchBufferInArena(context, filter_size,
 800e0bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0be:	f108 0234 	add.w	r2, r8, #52	; 0x34
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800e0c6:	6833      	ldr	r3, [r6, #0]
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	4630      	mov	r0, r6
  return kTfLiteOk;
 800e0cc:	f04f 0b00 	mov.w	fp, #0
  micro_context->DeallocateTempTfLiteTensor(filter);
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 800e0d4:	6833      	ldr	r3, [r6, #0]
 800e0d6:	4639      	mov	r1, r7
 800e0d8:	4630      	mov	r0, r6
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800e0de:	6833      	ldr	r3, [r6, #0]
 800e0e0:	4651      	mov	r1, sl
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	4798      	blx	r3
  return kTfLiteOk;
 800e0e8:	e721      	b.n	800df2e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800e0ea:	bf00      	nop
 800e0ec:	080fbcfa 	.word	0x080fbcfa
 800e0f0:	080fc0cc 	.word	0x080fc0cc
 800e0f4:	080f93a5 	.word	0x080f93a5
 800e0f8:	080fbed7 	.word	0x080fbed7
 800e0fc:	080fc13f 	.word	0x080fc13f
 800e100:	080f982c 	.word	0x080f982c
 800e104:	080fbfbd 	.word	0x080fbfbd
 800e108:	080fbfca 	.word	0x080fbfca
 800e10c:	080fbfd6 	.word	0x080fbfd6
 800e110:	080f9846 	.word	0x080f9846
 800e114:	080f9879 	.word	0x080f9879
 800e118:	080fc042 	.word	0x080fc042

0800e11c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800e11c:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800e11e:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800e120:	b90b      	cbnz	r3, 800e126 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 800e122:	f008 fe0f 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800e126:	2138      	movs	r1, #56	; 0x38
}
 800e128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800e12c:	4718      	bx	r3
	...

0800e130 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e134:	4698      	mov	r8, r3
  const int stride_width = params.stride_width;
 800e136:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    float* output_data) {
 800e13a:	460c      	mov	r4, r1
 800e13c:	ed2d 8b04 	vpush	{d8-d9}
 800e140:	b09d      	sub	sp, #116	; 0x74
  const int dilation_width_factor = params.dilation_width_factor;
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
  const float output_activation_min = params.float_activation_min;
 800e142:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
 800e146:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  const int stride_width = params.stride_width;
 800e14a:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
 800e14c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    float* output_data) {
 800e150:	921b      	str	r2, [sp, #108]	; 0x6c
  const int stride_height = params.stride_height;
 800e152:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
 800e154:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    float* output_data) {
 800e158:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
  const int dilation_width_factor = params.dilation_width_factor;
 800e15c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
 800e15e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800e162:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
 800e164:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800e168:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
 800e16a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e16e:	9312      	str	r3, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
 800e170:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 800e174:	9302      	str	r3, [sp, #8]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800e176:	680b      	ldr	r3, [r1, #0]
 800e178:	2b04      	cmp	r3, #4
 800e17a:	d001      	beq.n	800e180 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x50>
 800e17c:	f008 fde2 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800e180:	f8d8 3000 	ldr.w	r3, [r8]
 800e184:	2b04      	cmp	r3, #4
 800e186:	d1f9      	bne.n	800e17c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800e188:	f8d9 3000 	ldr.w	r3, [r9]
 800e18c:	2b04      	cmp	r3, #4
 800e18e:	d1f5      	bne.n	800e17c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4c>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800e190:	2300      	movs	r3, #0
 800e192:	464a      	mov	r2, r9
 800e194:	4620      	mov	r0, r4
 800e196:	4619      	mov	r1, r3
 800e198:	f7fe f95a 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e19c:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800e19e:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e1a0:	464a      	mov	r2, r9
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	f7fe f953 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    return dims_[i];
 800e1aa:	68a3      	ldr	r3, [r4, #8]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800e1ac:	9a02      	ldr	r2, [sp, #8]
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	9314      	str	r3, [sp, #80]	; 0x50
 800e1b2:	68e3      	ldr	r3, [r4, #12]
 800e1b4:	9315      	str	r3, [sp, #84]	; 0x54
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1be:	9317      	str	r3, [sp, #92]	; 0x5c
 800e1c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1c4:	9318      	str	r3, [sp, #96]	; 0x60
 800e1c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e1ca:	9319      	str	r3, [sp, #100]	; 0x64
 800e1cc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e1d0:	931a      	str	r3, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800e1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1d4:	4353      	muls	r3, r2
 800e1d6:	4298      	cmp	r0, r3
 800e1d8:	d1d0      	bne.n	800e17c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4c>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800e1da:	982b      	ldr	r0, [sp, #172]	; 0xac
 800e1dc:	f7f9 f9b5 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800e1e0:	4285      	cmp	r5, r0
 800e1e2:	d1cb      	bne.n	800e17c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4c>

  for (int b = 0; b < batches; ++b) {
 800e1e4:	f04f 0b00 	mov.w	fp, #0
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
 800e1e8:	eddf 9a5c 	vldr	s19, [pc, #368]	; 800e35c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22c>
  for (int b = 0; b < batches; ++b) {
 800e1ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e1ee:	459b      	cmp	fp, r3
 800e1f0:	f280 80ae 	bge.w	800e350 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x220>
 800e1f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e1f6:	425b      	negs	r3, r3
 800e1f8:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	9303      	str	r3, [sp, #12]
 800e1fe:	9b03      	ldr	r3, [sp, #12]
 800e200:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e202:	4293      	cmp	r3, r2
 800e204:	f280 80a1 	bge.w	800e34a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
 800e208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e20a:	425b      	negs	r3, r3
 800e20c:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e20e:	2300      	movs	r3, #0
 800e210:	9304      	str	r3, [sp, #16]
 800e212:	9b04      	ldr	r3, [sp, #16]
 800e214:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e216:	4293      	cmp	r3, r2
 800e218:	f280 808f 	bge.w	800e33a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20a>
 800e21c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800e21e:	9308      	str	r3, [sp, #32]
 800e220:	2300      	movs	r3, #0
 800e222:	9307      	str	r3, [sp, #28]
        for (int ic = 0; ic < input_depth; ++ic) {
 800e224:	9305      	str	r3, [sp, #20]
 800e226:	9b05      	ldr	r3, [sp, #20]
 800e228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e22a:	4293      	cmp	r3, r2
 800e22c:	da7d      	bge.n	800e32a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fa>
          for (int m = 0; m < depth_multiplier; m++) {
 800e22e:	2500      	movs	r5, #0
 800e230:	9b02      	ldr	r3, [sp, #8]
 800e232:	429d      	cmp	r5, r3
 800e234:	da6d      	bge.n	800e312 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e2>
 800e236:	9b07      	ldr	r3, [sp, #28]
 800e238:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e23a:	18eb      	adds	r3, r5, r3
            float total = 0.f;
 800e23c:	ed9f 8a47 	vldr	s16, [pc, #284]	; 800e35c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22c>
 800e240:	930c      	str	r3, [sp, #48]	; 0x30
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e242:	2300      	movs	r3, #0
 800e244:	9306      	str	r3, [sp, #24]
 800e246:	9b06      	ldr	r3, [sp, #24]
 800e248:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e24a:	4293      	cmp	r3, r2
 800e24c:	da38      	bge.n	800e2c0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x190>
 800e24e:	9f09      	ldr	r7, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e250:	f04f 0a00 	mov.w	sl, #0
 800e254:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e256:	459a      	cmp	sl, r3
 800e258:	da2c      	bge.n	800e2b4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x184>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800e25a:	2f00      	cmp	r7, #0
 800e25c:	db25      	blt.n	800e2aa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x17a>
 800e25e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e260:	42bb      	cmp	r3, r7
 800e262:	dd22      	ble.n	800e2aa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x17a>
 800e264:	2e00      	cmp	r6, #0
 800e266:	db20      	blt.n	800e2aa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x17a>
 800e268:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e26a:	42b3      	cmp	r3, r6
 800e26c:	dd1d      	ble.n	800e2aa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x17a>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 800e26e:	9b05      	ldr	r3, [sp, #20]
 800e270:	4632      	mov	r2, r6
 800e272:	4659      	mov	r1, fp
 800e274:	4620      	mov	r0, r4
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	463b      	mov	r3, r7
 800e27a:	f7fd ff53 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
 800e27e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 800e280:	9013      	str	r0, [sp, #76]	; 0x4c
                  float filter_value = filter_data[Offset(
 800e282:	2100      	movs	r1, #0
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	4640      	mov	r0, r8
 800e288:	4653      	mov	r3, sl
 800e28a:	9a06      	ldr	r2, [sp, #24]
 800e28c:	f7fd ff4a 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 800e290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e292:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e294:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                      filter_shape, 0, filter_y, filter_x, oc)];
 800e298:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e29a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
 800e29e:	ed93 7a00 	vldr	s14, [r3]
 800e2a2:	edd0 7a00 	vldr	s15, [r0]
 800e2a6:	eea7 8a27 	vfma.f32	s16, s14, s15
 800e2aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e2ac:	f10a 0a01 	add.w	sl, sl, #1
 800e2b0:	441f      	add	r7, r3
 800e2b2:	e7cf      	b.n	800e254 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e2b4:	9b06      	ldr	r3, [sp, #24]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	9306      	str	r3, [sp, #24]
 800e2ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2bc:	441e      	add	r6, r3
 800e2be:	e7c2      	b.n	800e246 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x116>
            if (bias_data) {
 800e2c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800e2c2:	b31b      	cbz	r3, 800e30c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1dc>
              bias_value = bias_data[oc];
 800e2c4:	9b08      	ldr	r3, [sp, #32]
 800e2c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800e2ca:	edd3 7a00 	vldr	s15, [r3]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 800e2ce:	ee38 8a27 	vadd.f32	s16, s16, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 800e2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2d4:	4659      	mov	r1, fp
 800e2d6:	4648      	mov	r0, r9
 800e2d8:	9300      	str	r3, [sp, #0]
          for (int m = 0; m < depth_multiplier; m++) {
 800e2da:	3501      	adds	r5, #1
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 800e2dc:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800e2e0:	f7fd ff20 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
 800e2e4:	eeb4 8a68 	vcmp.f32	s16, s17
 800e2e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e2f2:	bf48      	it	mi
 800e2f4:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
 800e2f8:	eeb4 9a48 	vcmp.f32	s18, s16
 800e2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e300:	bf48      	it	mi
 800e302:	eeb0 8a49 	vmovmi.f32	s16, s18
 800e306:	ed80 8a00 	vstr	s16, [r0]
          for (int m = 0; m < depth_multiplier; m++) {
 800e30a:	e791      	b.n	800e230 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
            float bias_value = 0.0f;
 800e30c:	eef0 7a69 	vmov.f32	s15, s19
 800e310:	e7dd      	b.n	800e2ce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19e>
        for (int ic = 0; ic < input_depth; ++ic) {
 800e312:	9b05      	ldr	r3, [sp, #20]
 800e314:	9a02      	ldr	r2, [sp, #8]
 800e316:	3301      	adds	r3, #1
 800e318:	9305      	str	r3, [sp, #20]
 800e31a:	9b08      	ldr	r3, [sp, #32]
 800e31c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e320:	9308      	str	r3, [sp, #32]
 800e322:	9b07      	ldr	r3, [sp, #28]
 800e324:	4413      	add	r3, r2
 800e326:	9307      	str	r3, [sp, #28]
 800e328:	e77d      	b.n	800e226 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xf6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e32a:	9b04      	ldr	r3, [sp, #16]
 800e32c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e32e:	3301      	adds	r3, #1
 800e330:	9304      	str	r3, [sp, #16]
 800e332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e334:	4413      	add	r3, r2
 800e336:	9309      	str	r3, [sp, #36]	; 0x24
 800e338:	e76b      	b.n	800e212 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xe2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e33a:	9b03      	ldr	r3, [sp, #12]
 800e33c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e33e:	3301      	adds	r3, #1
 800e340:	9303      	str	r3, [sp, #12]
 800e342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e344:	4413      	add	r3, r2
 800e346:	930a      	str	r3, [sp, #40]	; 0x28
 800e348:	e759      	b.n	800e1fe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xce>
  for (int b = 0; b < batches; ++b) {
 800e34a:	f10b 0b01 	add.w	fp, fp, #1
 800e34e:	e74d      	b.n	800e1ec <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xbc>
          }
        }
      }
    }
  }
}
 800e350:	b01d      	add	sp, #116	; 0x74
 800e352:	ecbd 8b04 	vpop	{d8-d9}
 800e356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35a:	bf00      	nop
 800e35c:	00000000 	.word	0x00000000

0800e360 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	4698      	mov	r8, r3
 800e366:	b0a5      	sub	sp, #148	; 0x94
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 800e368:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8_t* output_data) {
 800e36c:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  const int stride_width = params.stride_width;
 800e370:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_height = params.stride_height;
 800e372:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800e376:	9313      	str	r3, [sp, #76]	; 0x4c
  const int dilation_width_factor = params.dilation_width_factor;
 800e378:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800e37c:	9314      	str	r3, [sp, #80]	; 0x50
  const int dilation_height_factor = params.dilation_height_factor;
 800e37e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800e382:	9315      	str	r3, [sp, #84]	; 0x54
  const int pad_width = params.padding_values.width;
 800e384:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800e388:	9316      	str	r3, [sp, #88]	; 0x58
  const int pad_height = params.padding_values.height;
 800e38a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e38e:	9317      	str	r3, [sp, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 800e390:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 800e394:	9306      	str	r3, [sp, #24]
  const int32_t input_offset = params.input_offset;
 800e396:	6943      	ldr	r3, [r0, #20]
 800e398:	9319      	str	r3, [sp, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 800e39a:	69c3      	ldr	r3, [r0, #28]
 800e39c:	931a      	str	r3, [sp, #104]	; 0x68
  const int32_t output_activation_min = params.quantized_activation_min;
 800e39e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e3a0:	930e      	str	r3, [sp, #56]	; 0x38
  const int32_t output_activation_max = params.quantized_activation_max;
 800e3a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e3a4:	930f      	str	r3, [sp, #60]	; 0x3c

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800e3a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e3aa:	2b04      	cmp	r3, #4
    int8_t* output_data) {
 800e3ac:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800e3b0:	d001      	beq.n	800e3b6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56>
 800e3b2:	f008 fcc7 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800e3b6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2b04      	cmp	r3, #4
 800e3bc:	d1f9      	bne.n	800e3b2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800e3be:	f8d9 3000 	ldr.w	r3, [r9]
 800e3c2:	2b04      	cmp	r3, #4
 800e3c4:	d1f5      	bne.n	800e3b2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800e3c6:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	dcf1      	bgt.n	800e3b2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	464a      	mov	r2, r9
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	f7fe f83b 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e3da:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800e3dc:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e3de:	464a      	mov	r2, r9
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800e3e4:	f7fe f834 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e3e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800e3ec:	9a06      	ldr	r2, [sp, #24]
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	931b      	str	r3, [sp, #108]	; 0x6c
 800e3f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3f6:	931c      	str	r3, [sp, #112]	; 0x70
 800e3f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e3fc:	9310      	str	r3, [sp, #64]	; 0x40
 800e3fe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	931e      	str	r3, [sp, #120]	; 0x78
 800e404:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	931f      	str	r3, [sp, #124]	; 0x7c
 800e40a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e40e:	9320      	str	r3, [sp, #128]	; 0x80
 800e410:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e414:	9321      	str	r3, [sp, #132]	; 0x84
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800e416:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e418:	4353      	muls	r3, r2
 800e41a:	4298      	cmp	r0, r3
 800e41c:	d1c9      	bne.n	800e3b2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800e41e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800e420:	f7f9 f893 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800e424:	4284      	cmp	r4, r0
 800e426:	d1c4      	bne.n	800e3b2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
 800e428:	9b06      	ldr	r3, [sp, #24]

  for (int batch = 0; batch < batches; ++batch) {
 800e42a:	f04f 0b00 	mov.w	fp, #0
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	9308      	str	r3, [sp, #32]
 800e432:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e434:	459b      	cmp	fp, r3
 800e436:	f280 80ae 	bge.w	800e596 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x236>
 800e43a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e43c:	425b      	negs	r3, r3
 800e43e:	930d      	str	r3, [sp, #52]	; 0x34
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e440:	2300      	movs	r3, #0
 800e442:	9302      	str	r3, [sp, #8]
 800e444:	9b02      	ldr	r3, [sp, #8]
 800e446:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e448:	4293      	cmp	r3, r2
 800e44a:	f280 80a1 	bge.w	800e590 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x230>
 800e44e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e450:	425b      	negs	r3, r3
 800e452:	930c      	str	r3, [sp, #48]	; 0x30
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e454:	2300      	movs	r3, #0
 800e456:	9303      	str	r3, [sp, #12]
 800e458:	9b03      	ldr	r3, [sp, #12]
 800e45a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e45c:	4293      	cmp	r3, r2
 800e45e:	f280 808f 	bge.w	800e580 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
 800e462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e464:	9309      	str	r3, [sp, #36]	; 0x24
 800e466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e468:	930a      	str	r3, [sp, #40]	; 0x28
 800e46a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800e46c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e46e:	2300      	movs	r3, #0
 800e470:	9307      	str	r3, [sp, #28]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800e472:	9304      	str	r3, [sp, #16]
 800e474:	9b04      	ldr	r3, [sp, #16]
 800e476:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e478:	4293      	cmp	r3, r2
 800e47a:	da79      	bge.n	800e570 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
          for (int m = 0; m < depth_multiplier; ++m) {
 800e47c:	2400      	movs	r4, #0
 800e47e:	9b06      	ldr	r3, [sp, #24]
 800e480:	429c      	cmp	r4, r3
 800e482:	da63      	bge.n	800e54c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
 800e484:	9b07      	ldr	r3, [sp, #28]
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
 800e486:	2500      	movs	r5, #0
          for (int m = 0; m < depth_multiplier; ++m) {
 800e488:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e48a:	18e3      	adds	r3, r4, r3
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e48c:	9505      	str	r5, [sp, #20]
 800e48e:	9311      	str	r3, [sp, #68]	; 0x44
 800e490:	9b05      	ldr	r3, [sp, #20]
 800e492:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e494:	4293      	cmp	r3, r2
 800e496:	da34      	bge.n	800e502 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
 800e498:	9f0c      	ldr	r7, [sp, #48]	; 0x30
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e49a:	f04f 0a00 	mov.w	sl, #0
 800e49e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e4a0:	459a      	cmp	sl, r3
 800e4a2:	da28      	bge.n	800e4f6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x196>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800e4a4:	2f00      	cmp	r7, #0
 800e4a6:	db21      	blt.n	800e4ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
 800e4a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e4aa:	42bb      	cmp	r3, r7
 800e4ac:	dd1e      	ble.n	800e4ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
 800e4ae:	2e00      	cmp	r6, #0
 800e4b0:	db1c      	blt.n	800e4ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
 800e4b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4b4:	42b3      	cmp	r3, r6
 800e4b6:	dd19      	ble.n	800e4ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
 800e4b8:	9b04      	ldr	r3, [sp, #16]
 800e4ba:	4632      	mov	r2, r6
 800e4bc:	4659      	mov	r1, fp
 800e4be:	4640      	mov	r0, r8
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	463b      	mov	r3, r7
 800e4c4:	f7fd fe2e 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
                  int32_t filter_val = filter_data[Offset(
 800e4c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
                  int32_t input_val = input_data[Offset(
 800e4ca:	9018      	str	r0, [sp, #96]	; 0x60
                  int32_t filter_val = filter_data[Offset(
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	9300      	str	r3, [sp, #0]
 800e4d0:	4653      	mov	r3, sl
 800e4d2:	9a05      	ldr	r2, [sp, #20]
 800e4d4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800e4d6:	f7fd fe25 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
 800e4da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e4dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e4de:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 800e4e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e4e2:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 800e4e4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800e4e6:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
 800e4e8:	fb02 5503 	mla	r5, r2, r3, r5
 800e4ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e4ee:	f10a 0a01 	add.w	sl, sl, #1
 800e4f2:	441f      	add	r7, r3
 800e4f4:	e7d3      	b.n	800e49e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e4f6:	9b05      	ldr	r3, [sp, #20]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	9305      	str	r3, [sp, #20]
 800e4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4fe:	441e      	add	r6, r3
 800e500:	e7c6      	b.n	800e490 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x130>
                }
              }
            }
            if (bias_data) {
 800e502:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800e504:	b11b      	cbz	r3, 800e50e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
              acc += bias_data[output_channel];
 800e506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e508:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e50c:	441d      	add	r5, r3
            }
            acc = MultiplyByQuantizedMultiplier(
 800e50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e510:	4628      	mov	r0, r5
 800e512:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800e516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e518:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
          for (int m = 0; m < depth_multiplier; ++m) {
 800e51c:	3401      	adds	r4, #1
            acc = MultiplyByQuantizedMultiplier(
 800e51e:	f7f9 fdd3 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
 800e522:	9b1a      	ldr	r3, [sp, #104]	; 0x68
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
 800e524:	4659      	mov	r1, fp
            acc += output_offset;
 800e526:	18c5      	adds	r5, r0, r3
 800e528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            output_data[Offset(output_shape, batch, out_y, out_x,
 800e52a:	4648      	mov	r0, r9
 800e52c:	429d      	cmp	r5, r3
 800e52e:	bfb8      	it	lt
 800e530:	461d      	movlt	r5, r3
 800e532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e534:	429d      	cmp	r5, r3
 800e536:	bfa8      	it	ge
 800e538:	461d      	movge	r5, r3
 800e53a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e542:	f7fd fdef 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
 800e546:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800e548:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
 800e54a:	e798      	b.n	800e47e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11e>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	3301      	adds	r3, #1
 800e550:	9304      	str	r3, [sp, #16]
 800e552:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e556:	4413      	add	r3, r2
 800e558:	9309      	str	r3, [sp, #36]	; 0x24
 800e55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e55c:	4413      	add	r3, r2
 800e55e:	930a      	str	r3, [sp, #40]	; 0x28
 800e560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e562:	4413      	add	r3, r2
 800e564:	930b      	str	r3, [sp, #44]	; 0x2c
 800e566:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e56a:	4413      	add	r3, r2
 800e56c:	9307      	str	r3, [sp, #28]
 800e56e:	e781      	b.n	800e474 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x114>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e570:	9b03      	ldr	r3, [sp, #12]
 800e572:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e574:	3301      	adds	r3, #1
 800e576:	9303      	str	r3, [sp, #12]
 800e578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e57a:	4413      	add	r3, r2
 800e57c:	930c      	str	r3, [sp, #48]	; 0x30
 800e57e:	e76b      	b.n	800e458 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e580:	9b02      	ldr	r3, [sp, #8]
 800e582:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e584:	3301      	adds	r3, #1
 800e586:	9302      	str	r3, [sp, #8]
 800e588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e58a:	4413      	add	r3, r2
 800e58c:	930d      	str	r3, [sp, #52]	; 0x34
 800e58e:	e759      	b.n	800e444 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
  for (int batch = 0; batch < batches; ++batch) {
 800e590:	f10b 0b01 	add.w	fp, fp, #1
 800e594:	e74d      	b.n	800e432 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xd2>
          }
        }
      }
    }
  }
}
 800e596:	b025      	add	sp, #148	; 0x94
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e59c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 800e59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a0:	461f      	mov	r7, r3
 800e5a2:	b0a5      	sub	sp, #148	; 0x94
  // Get parameters.
  const int stride_width = params.stride_width;
 800e5a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int16_t* output_data) {
 800e5a8:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  const int stride_width = params.stride_width;
 800e5ac:	9314      	str	r3, [sp, #80]	; 0x50
  const int stride_height = params.stride_height;
 800e5ae:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  const int dilation_width_factor = params.dilation_width_factor;
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
 800e5b2:	f9b0 8012 	ldrsh.w	r8, [r0, #18]
  const int stride_height = params.stride_height;
 800e5b6:	9315      	str	r3, [sp, #84]	; 0x54
  const int dilation_width_factor = params.dilation_width_factor;
 800e5b8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800e5bc:	9316      	str	r3, [sp, #88]	; 0x58
  const int dilation_height_factor = params.dilation_height_factor;
 800e5be:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800e5c2:	9317      	str	r3, [sp, #92]	; 0x5c
  const int pad_width = params.padding_values.width;
 800e5c4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800e5c8:	9318      	str	r3, [sp, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800e5ca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e5ce:	9319      	str	r3, [sp, #100]	; 0x64
  const int32_t output_activation_min = params.quantized_activation_min;
 800e5d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e5d2:	930f      	str	r3, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
 800e5d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e5d6:	9310      	str	r3, [sp, #64]	; 0x40

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b04      	cmp	r3, #4
    int16_t* output_data) {
 800e5dc:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800e5e0:	d001      	beq.n	800e5e6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4a>
 800e5e2:	f008 fbaf 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800e5e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b04      	cmp	r3, #4
 800e5ec:	d1f9      	bne.n	800e5e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x46>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800e5ee:	f8d9 3000 	ldr.w	r3, [r9]
 800e5f2:	2b04      	cmp	r3, #4
 800e5f4:	d1f5      	bne.n	800e5e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x46>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800e5f6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	dcf1      	bgt.n	800e5e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x46>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800e5fe:	2300      	movs	r3, #0
 800e600:	464a      	mov	r2, r9
 800e602:	4638      	mov	r0, r7
 800e604:	4619      	mov	r1, r3
 800e606:	f7fd ff23 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e60a:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800e60c:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e60e:	464a      	mov	r2, r9
 800e610:	4619      	mov	r1, r3
 800e612:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800e614:	f7fd ff1c 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	4604      	mov	r4, r0
 800e61c:	931b      	str	r3, [sp, #108]	; 0x6c
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	931c      	str	r3, [sp, #112]	; 0x70
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	9311      	str	r3, [sp, #68]	; 0x44
 800e626:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	931e      	str	r3, [sp, #120]	; 0x78
 800e62c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	931f      	str	r3, [sp, #124]	; 0x7c
 800e632:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e636:	9320      	str	r3, [sp, #128]	; 0x80
 800e638:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e63c:	9321      	str	r3, [sp, #132]	; 0x84
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800e63e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e640:	fb03 f308 	mul.w	r3, r3, r8
 800e644:	4298      	cmp	r0, r3
 800e646:	d1cc      	bne.n	800e5e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x46>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800e648:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800e64a:	f7f8 ff7e 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800e64e:	4284      	cmp	r4, r0
 800e650:	d1c7      	bne.n	800e5e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x46>
 800e652:	ea4f 0388 	mov.w	r3, r8, lsl #2

  for (int batch = 0; batch < batches; ++batch) {
 800e656:	f04f 0b00 	mov.w	fp, #0
 800e65a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e65c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e65e:	459b      	cmp	fp, r3
 800e660:	f280 80bd 	bge.w	800e7de <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x242>
 800e664:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e666:	425b      	negs	r3, r3
 800e668:	930e      	str	r3, [sp, #56]	; 0x38
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e66a:	2300      	movs	r3, #0
 800e66c:	9305      	str	r3, [sp, #20]
 800e66e:	9b05      	ldr	r3, [sp, #20]
 800e670:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e672:	4293      	cmp	r3, r2
 800e674:	f280 80b0 	bge.w	800e7d8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x23c>
 800e678:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e67a:	425b      	negs	r3, r3
 800e67c:	930d      	str	r3, [sp, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e67e:	2300      	movs	r3, #0
 800e680:	9306      	str	r3, [sp, #24]
 800e682:	9b06      	ldr	r3, [sp, #24]
 800e684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e686:	4293      	cmp	r3, r2
 800e688:	f280 809e 	bge.w	800e7c8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x22c>
 800e68c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e68e:	930a      	str	r3, [sp, #40]	; 0x28
 800e690:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e692:	930b      	str	r3, [sp, #44]	; 0x2c
 800e694:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800e696:	930c      	str	r3, [sp, #48]	; 0x30
 800e698:	2300      	movs	r3, #0
 800e69a:	9309      	str	r3, [sp, #36]	; 0x24
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800e69c:	9307      	str	r3, [sp, #28]
 800e69e:	9b07      	ldr	r3, [sp, #28]
 800e6a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	f280 8088 	bge.w	800e7b8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x21c>
          for (int m = 0; m < depth_multiplier; ++m) {
 800e6a8:	2400      	movs	r4, #0
 800e6aa:	4544      	cmp	r4, r8
 800e6ac:	da72      	bge.n	800e794 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1f8>
 800e6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            std::int64_t acc = 0;
 800e6b0:	2200      	movs	r2, #0
          for (int m = 0; m < depth_multiplier; ++m) {
 800e6b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e6b4:	18e3      	adds	r3, r4, r3
 800e6b6:	9312      	str	r3, [sp, #72]	; 0x48
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	9308      	str	r3, [sp, #32]
            std::int64_t acc = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	e9cd 2302 	strd	r2, r3, [sp, #8]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e6c2:	9b08      	ldr	r3, [sp, #32]
 800e6c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	da37      	bge.n	800e73a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19e>
 800e6ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e6cc:	f04f 0a00 	mov.w	sl, #0
 800e6d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e6d2:	459a      	cmp	sl, r3
 800e6d4:	da2b      	bge.n	800e72e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x192>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800e6d6:	2e00      	cmp	r6, #0
 800e6d8:	db24      	blt.n	800e724 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
 800e6da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e6dc:	42b3      	cmp	r3, r6
 800e6de:	dd21      	ble.n	800e724 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
 800e6e0:	2d00      	cmp	r5, #0
 800e6e2:	db1f      	blt.n	800e724 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
 800e6e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6e6:	42ab      	cmp	r3, r5
 800e6e8:	dd1c      	ble.n	800e724 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
 800e6ea:	9b07      	ldr	r3, [sp, #28]
 800e6ec:	462a      	mov	r2, r5
 800e6ee:	4659      	mov	r1, fp
 800e6f0:	4638      	mov	r0, r7
 800e6f2:	9300      	str	r3, [sp, #0]
 800e6f4:	4633      	mov	r3, r6
 800e6f6:	f7fd fd15 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
                  int32_t filter_val = filter_data[Offset(
 800e6fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
                  int32_t input_val = input_data[Offset(
 800e6fc:	901a      	str	r0, [sp, #104]	; 0x68
                  int32_t filter_val = filter_data[Offset(
 800e6fe:	2100      	movs	r1, #0
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	4653      	mov	r3, sl
 800e704:	9a08      	ldr	r2, [sp, #32]
 800e706:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800e708:	f7fd fd0c 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_shape, 0, filter_y, filter_x, output_channel)];
                  // Accumulate with 64 bits accumulator.
                  // We assume maximum of 2^16 accumulations as with the 8-bit
                  // case so actually the value in the accumulator should not
                  // exceed 40 bits
                  acc += static_cast<int64_t>(filter_val) *
 800e70c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e70e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800e710:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e712:	561b      	ldrsb	r3, [r3, r0]
 800e714:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e71c:	fbc2 0183 	smlalbb	r0, r1, r2, r3
 800e720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e724:	9b16      	ldr	r3, [sp, #88]	; 0x58
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e726:	f10a 0a01 	add.w	sl, sl, #1
 800e72a:	441e      	add	r6, r3
 800e72c:	e7d0      	b.n	800e6d0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x134>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e72e:	9b08      	ldr	r3, [sp, #32]
 800e730:	3301      	adds	r3, #1
 800e732:	9308      	str	r3, [sp, #32]
 800e734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e736:	441d      	add	r5, r3
 800e738:	e7c3      	b.n	800e6c2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x126>
                         static_cast<int64_t>(input_val);
                }
              }
            }
            if (bias_data) {
 800e73a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800e73c:	b153      	cbz	r3, 800e754 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b8>
              acc += bias_data[output_channel];
 800e73e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e740:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	1880      	adds	r0, r0, r2
 800e74e:	4159      	adcs	r1, r3
 800e750:	e9cd 0102 	strd	r0, r1, [sp, #8]
            }
            int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800e754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e758:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e75c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
          for (int m = 0; m < depth_multiplier; ++m) {
 800e760:	3401      	adds	r4, #1
            int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800e762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e766:	f7f9 fd03 	bl	8008170 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 800e76a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            scaled_acc = std::max(scaled_acc, output_activation_min);
            scaled_acc = std::min(scaled_acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
 800e76c:	4659      	mov	r1, fp
 800e76e:	4298      	cmp	r0, r3
 800e770:	bfb8      	it	lt
 800e772:	4618      	movlt	r0, r3
 800e774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e776:	4283      	cmp	r3, r0
 800e778:	bfa8      	it	ge
 800e77a:	4603      	movge	r3, r0
 800e77c:	4648      	mov	r0, r9
 800e77e:	461d      	mov	r5, r3
 800e780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800e788:	f7fd fccc 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] =
 800e78c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800e78e:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
          for (int m = 0; m < depth_multiplier; ++m) {
 800e792:	e78a      	b.n	800e6aa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x10e>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800e794:	9b07      	ldr	r3, [sp, #28]
 800e796:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e798:	3301      	adds	r3, #1
 800e79a:	9307      	str	r3, [sp, #28]
 800e79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e79e:	4413      	add	r3, r2
 800e7a0:	930a      	str	r3, [sp, #40]	; 0x28
 800e7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7a4:	4413      	add	r3, r2
 800e7a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e7ae:	930c      	str	r3, [sp, #48]	; 0x30
 800e7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b2:	4443      	add	r3, r8
 800e7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7b6:	e772      	b.n	800e69e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x102>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e7b8:	9b06      	ldr	r3, [sp, #24]
 800e7ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e7bc:	3301      	adds	r3, #1
 800e7be:	9306      	str	r3, [sp, #24]
 800e7c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7c2:	4413      	add	r3, r2
 800e7c4:	930d      	str	r3, [sp, #52]	; 0x34
 800e7c6:	e75c      	b.n	800e682 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xe6>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e7c8:	9b05      	ldr	r3, [sp, #20]
 800e7ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	9305      	str	r3, [sp, #20]
 800e7d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7d2:	4413      	add	r3, r2
 800e7d4:	930e      	str	r3, [sp, #56]	; 0x38
 800e7d6:	e74a      	b.n	800e66e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xd2>
  for (int batch = 0; batch < batches; ++batch) {
 800e7d8:	f10b 0b01 	add.w	fp, fp, #1
 800e7dc:	e73e      	b.n	800e65c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xc0>
          }
        }
      }
    }
  }
}
 800e7de:	b025      	add	sp, #148	; 0x94
 800e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800e7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800e7e8:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800e7ec:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 800e7f0:	4683      	mov	fp, r0
 800e7f2:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 800e7f4:	f1b9 0f00 	cmp.w	r9, #0
 800e7f8:	d101      	bne.n	800e7fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a>
 800e7fa:	f008 faa3 	bl	8016d44 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800e7fe:	f8d1 a014 	ldr.w	sl, [r1, #20]
 800e802:	f1ba 0f00 	cmp.w	sl, #0
 800e806:	d0f8      	beq.n	800e7fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
  auto& params =
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpDataConv& data = *(static_cast<const OpDataConv*>(node->user_data));

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 800e808:	4b95      	ldr	r3, [pc, #596]	; (800ea60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27c>)
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	f001 fa5b 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 800e810:	4b94      	ldr	r3, [pc, #592]	; (800ea64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>)
 800e812:	4641      	mov	r1, r8
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 800e814:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	4658      	mov	r0, fp
 800e81a:	f001 fa52 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 800e81e:	4b92      	ldr	r3, [pc, #584]	; (800ea68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>)
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 800e820:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 800e822:	4641      	mov	r1, r8
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	4658      	mov	r0, fp
 800e828:	f001 fa4b 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 800e82c:	f8d8 4000 	ldr.w	r4, [r8]
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 800e830:	4607      	mov	r7, r0
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800e832:	b14c      	cbz	r4, 800e848 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 800e834:	6823      	ldr	r3, [r4, #0]
 800e836:	2b03      	cmp	r3, #3
 800e838:	d142      	bne.n	800e8c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdc>
 800e83a:	4b8c      	ldr	r3, [pc, #560]	; (800ea6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>)
 800e83c:	4641      	mov	r1, r8
 800e83e:	4658      	mov	r0, fp
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	f001 fa3e 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e846:	4604      	mov	r4, r0
          : nullptr;

  switch (input->type) {  // Already know in/out types are same.
 800e848:	7a30      	ldrb	r0, [r6, #8]
 800e84a:	2807      	cmp	r0, #7
 800e84c:	f000 80b9 	beq.w	800e9c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
 800e850:	2809      	cmp	r0, #9
 800e852:	d037      	beq.n	800e8c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>
 800e854:	2801      	cmp	r0, #1
 800e856:	f040 80fa 	bne.w	800ea4e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26a>
    case kTfLiteFloat32: {
      tflite::reference_ops::DepthwiseConv(
          DepthwiseConvParamsFloat(params, data),
 800e85a:	464a      	mov	r2, r9
 800e85c:	4651      	mov	r1, sl
 800e85e:	a87a      	add	r0, sp, #488	; 0x1e8
 800e860:	f000 f91e 	bl	800eaa0 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 800e864:	4631      	mov	r1, r6
 800e866:	a80a      	add	r0, sp, #40	; 0x28
 800e868:	f001 fa3b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800e86c:	4639      	mov	r1, r7
 800e86e:	a811      	add	r0, sp, #68	; 0x44
  return reinterpret_cast<const T*>(tensor->data.raw);
 800e870:	f8d6 8000 	ldr.w	r8, [r6]
 800e874:	f001 fa35 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800e878:	2f00      	cmp	r7, #0
 800e87a:	d0be      	beq.n	800e7fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800e87c:	ae18      	add	r6, sp, #96	; 0x60
 800e87e:	4621      	mov	r1, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 800e880:	f8d7 9000 	ldr.w	r9, [r7]
 800e884:	4630      	mov	r0, r6
 800e886:	f001 fa2c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800e88a:	b104      	cbz	r4, 800e88e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 800e88c:	6824      	ldr	r4, [r4, #0]
          tflite::micro::GetOptionalTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800e88e:	af1f      	add	r7, sp, #124	; 0x7c
 800e890:	4629      	mov	r1, r5
 800e892:	4638      	mov	r0, r7
 800e894:	f001 fa25 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800e898:	2d00      	cmp	r5, #0
 800e89a:	d0ae      	beq.n	800e7fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
      tflite::reference_ops::DepthwiseConv(
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	4642      	mov	r2, r8
 800e8a0:	f8cd 9000 	str.w	r9, [sp]
 800e8a4:	a90a      	add	r1, sp, #40	; 0x28
 800e8a6:	a87a      	add	r0, sp, #488	; 0x1e8
 800e8a8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800e8ac:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800e8b0:	ab11      	add	r3, sp, #68	; 0x44
 800e8b2:	f7ff fc3d 	bl	800e130 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
    default:
      MicroPrintf("Input type %s (%d) not supported.",
                  TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
 800e8b6:	2000      	movs	r0, #0
}
 800e8b8:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
 800e8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 800e8c0:	2400      	movs	r4, #0
 800e8c2:	e7c1      	b.n	800e848 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
      switch (filter->type) {
 800e8c4:	7a38      	ldrb	r0, [r7, #8]
 800e8c6:	2809      	cmp	r0, #9
 800e8c8:	d049      	beq.n	800e95e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
 800e8ca:	2812      	cmp	r0, #18
 800e8cc:	f040 80b0 	bne.w	800ea30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24c>
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800e8d0:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800e8d4:	4658      	mov	r0, fp
 800e8d6:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 800e8da:	4798      	blx	r3
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800e8dc:	4639      	mov	r1, r7
  return reinterpret_cast<const T*>(tensor->data.raw);
 800e8de:	f8d7 b000 	ldr.w	fp, [r7]
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800e8e2:	4680      	mov	r8, r0
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800e8e4:	a8aa      	add	r0, sp, #680	; 0x2a8
 800e8e6:	f001 f9fc 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800e8ea:	a8aa      	add	r0, sp, #680	; 0x2a8
 800e8ec:	f7f8 fe2d 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800e8f0:	4642      	mov	r2, r8
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	4658      	mov	r0, fp
 800e8f6:	f7f9 fc9b 	bl	8008230 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
              DepthwiseConvParamsQuantized(params, data),
 800e8fa:	464a      	mov	r2, r9
 800e8fc:	4651      	mov	r1, sl
 800e8fe:	a88a      	add	r0, sp, #552	; 0x228
 800e900:	f000 f904 	bl	800eb0c <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
              tflite::micro::GetTensorShape(input),
 800e904:	4631      	mov	r1, r6
 800e906:	a826      	add	r0, sp, #152	; 0x98
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800e908:	e9d9 a909 	ldrd	sl, r9, [r9, #36]	; 0x24
              tflite::micro::GetTensorShape(input),
 800e90c:	f001 f9e9 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800e910:	6833      	ldr	r3, [r6, #0]
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800e912:	ae2d      	add	r6, sp, #180	; 0xb4
 800e914:	4639      	mov	r1, r7
              tflite::micro::GetTensorShape(bias),
 800e916:	af34      	add	r7, sp, #208	; 0xd0
 800e918:	9309      	str	r3, [sp, #36]	; 0x24
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800e91a:	4630      	mov	r0, r6
 800e91c:	f001 f9e1 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800e920:	4621      	mov	r1, r4
 800e922:	4638      	mov	r0, r7
 800e924:	f001 f9dd 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800e928:	b104      	cbz	r4, 800e92c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
 800e92a:	6824      	ldr	r4, [r4, #0]
              tflite::micro::GetTensorShape(output),
 800e92c:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 800e930:	4629      	mov	r1, r5
 800e932:	4658      	mov	r0, fp
 800e934:	f001 f9d5 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800e938:	2d00      	cmp	r5, #0
 800e93a:	f43f af5e 	beq.w	800e7fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
          reference_integer_ops::DepthwiseConvPerChannel(
 800e93e:	682a      	ldr	r2, [r5, #0]
 800e940:	4651      	mov	r1, sl
 800e942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e944:	a88a      	add	r0, sp, #552	; 0x228
 800e946:	e9cd b205 	strd	fp, r2, [sp, #20]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	464a      	mov	r2, r9
 800e94e:	ab26      	add	r3, sp, #152	; 0x98
 800e950:	e9cd 7403 	strd	r7, r4, [sp, #12]
 800e954:	e9cd 6801 	strd	r6, r8, [sp, #4]
          reference_integer_ops::DepthwiseConvPerChannel(
 800e958:	f7ff fd02 	bl	800e360 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
 800e95c:	e7ab      	b.n	800e8b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
              DepthwiseConvParamsQuantized(params, data),
 800e95e:	464a      	mov	r2, r9
 800e960:	4651      	mov	r1, sl
 800e962:	a89a      	add	r0, sp, #616	; 0x268
 800e964:	f000 f8d2 	bl	800eb0c <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
              tflite::micro::GetTensorShape(input),
 800e968:	4631      	mov	r1, r6
 800e96a:	a842      	add	r0, sp, #264	; 0x108
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800e96c:	e9d9 8909 	ldrd	r8, r9, [r9, #36]	; 0x24
              tflite::micro::GetTensorShape(input),
 800e970:	f001 f9b7 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800e974:	6833      	ldr	r3, [r6, #0]
              tflite::micro::GetTensorShape(filter),
 800e976:	ae49      	add	r6, sp, #292	; 0x124
 800e978:	4639      	mov	r1, r7
 800e97a:	9309      	str	r3, [sp, #36]	; 0x24
 800e97c:	4630      	mov	r0, r6
 800e97e:	f001 f9b0 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800e982:	f8d7 b000 	ldr.w	fp, [r7]
              tflite::micro::GetTensorShape(bias),
 800e986:	af50      	add	r7, sp, #320	; 0x140
 800e988:	4621      	mov	r1, r4
 800e98a:	4638      	mov	r0, r7
 800e98c:	f001 f9a9 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800e990:	b104      	cbz	r4, 800e994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b0>
 800e992:	6824      	ldr	r4, [r4, #0]
              tflite::micro::GetTensorShape(output),
 800e994:	f50d 7aae 	add.w	sl, sp, #348	; 0x15c
 800e998:	4629      	mov	r1, r5
 800e99a:	4650      	mov	r0, sl
 800e99c:	f001 f9a1 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800e9a0:	2d00      	cmp	r5, #0
 800e9a2:	f43f af2a 	beq.w	800e7fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
          reference_integer_ops::DepthwiseConvPerChannel(
 800e9a6:	682a      	ldr	r2, [r5, #0]
 800e9a8:	4641      	mov	r1, r8
 800e9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ac:	a89a      	add	r0, sp, #616	; 0x268
 800e9ae:	e9cd a205 	strd	sl, r2, [sp, #20]
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	464a      	mov	r2, r9
 800e9b6:	ab42      	add	r3, sp, #264	; 0x108
 800e9b8:	e9cd 7403 	strd	r7, r4, [sp, #12]
 800e9bc:	e9cd 6b01 	strd	r6, fp, [sp, #4]
 800e9c0:	e7ca      	b.n	800e958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x174>
      switch (filter->type) {
 800e9c2:	7a38      	ldrb	r0, [r7, #8]
 800e9c4:	2809      	cmp	r0, #9
 800e9c6:	d133      	bne.n	800ea30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24c>
              DepthwiseConvParamsQuantized(params, data),
 800e9c8:	464a      	mov	r2, r9
 800e9ca:	4651      	mov	r1, sl
 800e9cc:	a8aa      	add	r0, sp, #680	; 0x2a8
 800e9ce:	f000 f89d 	bl	800eb0c <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
              tflite::micro::GetTensorShape(input),
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	a85e      	add	r0, sp, #376	; 0x178
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800e9d6:	e9d9 8909 	ldrd	r8, r9, [r9, #36]	; 0x24
              tflite::micro::GetTensorShape(input),
 800e9da:	f001 f982 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800e9de:	6833      	ldr	r3, [r6, #0]
              tflite::micro::GetTensorShape(filter),
 800e9e0:	ae65      	add	r6, sp, #404	; 0x194
 800e9e2:	4639      	mov	r1, r7
 800e9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f001 f97b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800e9ec:	f8d7 b000 	ldr.w	fp, [r7]
              tflite::micro::GetTensorShape(bias),
 800e9f0:	af6c      	add	r7, sp, #432	; 0x1b0
 800e9f2:	4621      	mov	r1, r4
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	f001 f974 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800e9fa:	b104      	cbz	r4, 800e9fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21a>
 800e9fc:	6824      	ldr	r4, [r4, #0]
              tflite::micro::GetTensorShape(output),
 800e9fe:	f50d 7ae6 	add.w	sl, sp, #460	; 0x1cc
 800ea02:	4629      	mov	r1, r5
 800ea04:	4650      	mov	r0, sl
 800ea06:	f001 f96c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800ea0a:	2d00      	cmp	r5, #0
 800ea0c:	f43f aef5 	beq.w	800e7fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
          reference_integer_ops::DepthwiseConvPerChannel(
 800ea10:	682a      	ldr	r2, [r5, #0]
 800ea12:	4641      	mov	r1, r8
 800ea14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea16:	a8aa      	add	r0, sp, #680	; 0x2a8
 800ea18:	e9cd a205 	strd	sl, r2, [sp, #20]
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	464a      	mov	r2, r9
 800ea20:	ab5e      	add	r3, sp, #376	; 0x178
 800ea22:	e9cd 7403 	strd	r7, r4, [sp, #12]
 800ea26:	e9cd 6b01 	strd	r6, fp, [sp, #4]
 800ea2a:	f7ff fdb7 	bl	800e59c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
 800ea2e:	e742      	b.n	800e8b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
 800ea30:	f7f9 fb3e 	bl	80080b0 <TfLiteTypeGetName>
 800ea34:	7a3d      	ldrb	r5, [r7, #8]
 800ea36:	4604      	mov	r4, r0
 800ea38:	7a30      	ldrb	r0, [r6, #8]
 800ea3a:	f7f9 fb39 	bl	80080b0 <TfLiteTypeGetName>
 800ea3e:	462a      	mov	r2, r5
 800ea40:	4603      	mov	r3, r0
 800ea42:	4621      	mov	r1, r4
 800ea44:	480a      	ldr	r0, [pc, #40]	; (800ea70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28c>)
 800ea46:	f7fc f937 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800ea4a:	2001      	movs	r0, #1
 800ea4c:	e734      	b.n	800e8b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4>
      MicroPrintf("Input type %s (%d) not supported.",
 800ea4e:	f7f9 fb2f 	bl	80080b0 <TfLiteTypeGetName>
 800ea52:	7a32      	ldrb	r2, [r6, #8]
 800ea54:	4601      	mov	r1, r0
 800ea56:	4807      	ldr	r0, [pc, #28]	; (800ea74 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>)
 800ea58:	f7fc f92e 	bl	800acb8 <_Z11MicroPrintfPKcz>
 800ea5c:	e7f5      	b.n	800ea4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x266>
 800ea5e:	bf00      	nop
 800ea60:	080fc2d0 	.word	0x080fc2d0
 800ea64:	080fc2cc 	.word	0x080fc2cc
 800ea68:	080fc2d4 	.word	0x080fc2d4
 800ea6c:	080fc2c8 	.word	0x080fc2c8
 800ea70:	080fc151 	.word	0x080fc151
 800ea74:	080fc186 	.word	0x080fc186

0800ea78 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TFLMRegistration Register_DEPTHWISE_CONV_2D() {
  return tflite::micro::RegisterOp(Init, DepthwiseConvPrepare, Eval);
 800ea78:	2300      	movs	r3, #0
 800ea7a:	4a06      	ldr	r2, [pc, #24]	; (800ea94 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
TFLMRegistration Register_DEPTHWISE_CONV_2D() {
 800ea7c:	b513      	push	{r0, r1, r4, lr}
 800ea7e:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, DepthwiseConvPrepare, Eval);
 800ea80:	4905      	ldr	r1, [pc, #20]	; (800ea98 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x20>)
 800ea82:	e9cd 3300 	strd	r3, r3, [sp]
 800ea86:	4b05      	ldr	r3, [pc, #20]	; (800ea9c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x24>)
 800ea88:	f001 f8f4 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	b002      	add	sp, #8
 800ea90:	bd10      	pop	{r4, pc}
 800ea92:	bf00      	nop
 800ea94:	0800ed4d 	.word	0x0800ed4d
 800ea98:	0800e11d 	.word	0x0800e11d
 800ea9c:	0800e7e5 	.word	0x0800e7e5

0800eaa0 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800eaa0:	7c0b      	ldrb	r3, [r1, #16]
  if (activation == kTfLiteActRelu) {
 800eaa2:	2b01      	cmp	r3, #1
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800eaa4:	b570      	push	{r4, r5, r6, lr}
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	460d      	mov	r5, r1
 800eaaa:	4616      	mov	r6, r2
 800eaac:	d103      	bne.n	800eab6 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x16>
    *activation_min = 0;
 800eaae:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
 800eab0:	6323      	str	r3, [r4, #48]	; 0x30
    *activation_max = std::numeric_limits<T>::max();
 800eab2:	4b13      	ldr	r3, [pc, #76]	; (800eb00 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x60>)
 800eab4:	e004      	b.n	800eac0 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x20>
  } else if (activation == kTfLiteActRelu6) {
 800eab6:	2b03      	cmp	r3, #3
 800eab8:	d117      	bne.n	800eaea <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x4a>
    *activation_min = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 6;
 800eabe:	4b11      	ldr	r3, [pc, #68]	; (800eb04 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x64>)
    *activation_max = std::numeric_limits<T>::max();
 800eac0:	6363      	str	r3, [r4, #52]	; 0x34
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800eac2:	7828      	ldrb	r0, [r5, #0]
 800eac4:	f001 f922 	bl	800fd0c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
 800eac8:	6833      	ldr	r3, [r6, #0]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800eaca:	7020      	strb	r0, [r4, #0]
  op_params.stride_height = params.stride_height;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.depth_multiplier = params.depth_multiplier;
  return op_params;
}
 800eacc:	4620      	mov	r0, r4
  op_params.padding_values.width = data.padding.width;
 800eace:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
 800ead0:	6873      	ldr	r3, [r6, #4]
 800ead2:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
 800ead4:	686b      	ldr	r3, [r5, #4]
 800ead6:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
 800ead8:	68ab      	ldr	r3, [r5, #8]
 800eada:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800eadc:	696b      	ldr	r3, [r5, #20]
 800eade:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800eae0:	69ab      	ldr	r3, [r5, #24]
 800eae2:	8223      	strh	r3, [r4, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 800eae4:	68eb      	ldr	r3, [r5, #12]
 800eae6:	8263      	strh	r3, [r4, #18]
}
 800eae8:	bd70      	pop	{r4, r5, r6, pc}
  } else if (activation == kTfLiteActReluN1To1) {
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	d104      	bne.n	800eaf8 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x58>
    *activation_min = -1;
 800eaee:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x68>)
 800eaf0:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 1;
 800eaf2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800eaf6:	e7e3      	b.n	800eac0 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x20>
    *activation_min = std::numeric_limits<T>::lowest();
 800eaf8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800eafc:	e7d8      	b.n	800eab0 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x10>
 800eafe:	bf00      	nop
 800eb00:	7f7fffff 	.word	0x7f7fffff
 800eb04:	40c00000 	.word	0x40c00000
 800eb08:	bf800000 	.word	0xbf800000

0800eb0c <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800eb0c:	6913      	ldr	r3, [r2, #16]
 800eb0e:	425b      	negs	r3, r3
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800eb10:	b570      	push	{r4, r5, r6, lr}
  op_params.input_offset = -data.input_zero_point;
 800eb12:	6143      	str	r3, [r0, #20]
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800eb14:	4615      	mov	r5, r2
  op_params.weights_offset = -data.filter_zero_point;
 800eb16:	6953      	ldr	r3, [r2, #20]
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800eb18:	4604      	mov	r4, r0
 800eb1a:	460e      	mov	r6, r1
  op_params.weights_offset = -data.filter_zero_point;
 800eb1c:	425b      	negs	r3, r3
 800eb1e:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
 800eb20:	6993      	ldr	r3, [r2, #24]
 800eb22:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
 800eb24:	69d3      	ldr	r3, [r2, #28]
 800eb26:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
 800eb28:	6a13      	ldr	r3, [r2, #32]
 800eb2a:	425b      	negs	r3, r3
 800eb2c:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800eb2e:	7808      	ldrb	r0, [r1, #0]
 800eb30:	f001 f8ec 	bl	800fd0c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
 800eb34:	686b      	ldr	r3, [r5, #4]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800eb36:	7020      	strb	r0, [r4, #0]
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.depth_multiplier = params.depth_multiplier;
  op_params.quantized_activation_min = data.output_activation_min;
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
 800eb38:	4620      	mov	r0, r4
  op_params.padding_values.height = data.padding.height;
 800eb3a:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
 800eb3c:	682b      	ldr	r3, [r5, #0]
 800eb3e:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
 800eb40:	68b3      	ldr	r3, [r6, #8]
 800eb42:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
 800eb44:	6873      	ldr	r3, [r6, #4]
 800eb46:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800eb48:	69b3      	ldr	r3, [r6, #24]
 800eb4a:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800eb4c:	6973      	ldr	r3, [r6, #20]
 800eb4e:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 800eb50:	68f3      	ldr	r3, [r6, #12]
 800eb52:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 800eb54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800eb56:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800eb58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800eb5a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800eb5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb60 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 800eb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb64:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
 800eb66:	680b      	ldr	r3, [r1, #0]
    const TfLiteType data_type, OpDataConv* data) {
 800eb68:	b08f      	sub	sp, #60	; 0x3c
 800eb6a:	4606      	mov	r6, r0
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800eb6c:	681b      	ldr	r3, [r3, #0]
    const TfLiteType data_type, OpDataConv* data) {
 800eb6e:	4688      	mov	r8, r1
 800eb70:	4617      	mov	r7, r2
 800eb72:	9c1e      	ldr	r4, [sp, #120]	; 0x78
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800eb74:	3b02      	subs	r3, #2
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d90a      	bls.n	800eb90 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x30>
 800eb7a:	4b67      	ldr	r3, [pc, #412]	; (800ed18 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b8>)
 800eb7c:	4a67      	ldr	r2, [pc, #412]	; (800ed1c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>)
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	2357      	movs	r3, #87	; 0x57
 800eb82:	6944      	ldr	r4, [r0, #20]
 800eb84:	4966      	ldr	r1, [pc, #408]	; (800ed20 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c0>)
 800eb86:	47a0      	blx	r4
 800eb88:	2001      	movs	r0, #1
  micro_context->DeallocateTempTfLiteTensor(filter);
  micro_context->DeallocateTempTfLiteTensor(bias);
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
 800eb8a:	b00f      	add	sp, #60	; 0x3c
 800eb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800eb90:	684b      	ldr	r3, [r1, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	930a      	str	r3, [sp, #40]	; 0x28
 800eb98:	d00c      	beq.n	800ebb4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
 800eb9a:	2401      	movs	r4, #1
 800eb9c:	4a5f      	ldr	r2, [pc, #380]	; (800ed1c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>)
 800eb9e:	4961      	ldr	r1, [pc, #388]	; (800ed24 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c4>)
 800eba0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800eba4:	4b60      	ldr	r3, [pc, #384]	; (800ed28 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c8>)
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	4b60      	ldr	r3, [pc, #384]	; (800ed2c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1cc>)
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	2358      	movs	r3, #88	; 0x58
 800ebae:	6945      	ldr	r5, [r0, #20]
 800ebb0:	47a8      	blx	r5
 800ebb2:	e7e9      	b.n	800eb88 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800ebb4:	6893      	ldr	r3, [r2, #8]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800ebb6:	4649      	mov	r1, r9
  auto padding = params.padding;
 800ebb8:	f892 a000 	ldrb.w	sl, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800ebbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebbe:	6853      	ldr	r3, [r2, #4]
 800ebc0:	4650      	mov	r0, sl
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800ebc2:	e9d2 5b05 	ldrd	r5, fp, [r2, #20]
 800ebc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ebc8:	9500      	str	r5, [sp, #0]
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800ebca:	930c      	str	r3, [sp, #48]	; 0x30
 800ebcc:	f7ff f828 	bl	800dc20 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800ebd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebd2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ebd4:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800ebd6:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800ebd8:	4650      	mov	r0, sl
 800ebda:	f8cd b000 	str.w	fp, [sp]
 800ebde:	f7ff f81f 	bl	800dc20 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ebe2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ebe4:	3801      	subs	r0, #1
 800ebe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ebe8:	3b01      	subs	r3, #1
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800ebea:	4641      	mov	r1, r8
 800ebec:	fb0b fb03 	mul.w	fp, fp, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ebf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ebf2:	f10b 0b01 	add.w	fp, fp, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ebf6:	fb03 b000 	mla	r0, r3, r0, fp
  int total_padding =
 800ebfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ebfc:	1ac0      	subs	r0, r0, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ebfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec00:	3b01      	subs	r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
 800ec02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ec06:	436b      	muls	r3, r5
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ec08:	1e55      	subs	r5, r2, #1
 800ec0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800ec0c:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ec0e:	fb02 3505 	mla	r5, r2, r5, r3
  int total_padding =
 800ec12:	eba5 0909 	sub.w	r9, r5, r9
  total_padding = total_padding > 0 ? total_padding : 0;
 800ec16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
 800ec1a:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
 800ec1e:	f009 0501 	and.w	r5, r9, #1
  data->padding = ComputePaddingHeightWidth(
 800ec22:	6023      	str	r3, [r4, #0]
  return total_padding / 2;
 800ec24:	1043      	asrs	r3, r0, #1
  *offset = total_padding % 2;
 800ec26:	f000 0001 	and.w	r0, r0, #1
 800ec2a:	60a5      	str	r5, [r4, #8]
 800ec2c:	6063      	str	r3, [r4, #4]
 800ec2e:	60e0      	str	r0, [r4, #12]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800ec30:	4b3f      	ldr	r3, [pc, #252]	; (800ed30 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d0>)
  MicroContext* micro_context = GetMicroContext(context);
 800ec32:	68f5      	ldr	r5, [r6, #12]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	4628      	mov	r0, r5
 800ec38:	f7fb fa1c 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800ec3c:	4682      	mov	sl, r0
 800ec3e:	b938      	cbnz	r0, 800ec50 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf0>
 800ec40:	4b3c      	ldr	r3, [pc, #240]	; (800ed34 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d4>)
 800ec42:	6974      	ldr	r4, [r6, #20]
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	2365      	movs	r3, #101	; 0x65
  TF_LITE_ENSURE(context, output != nullptr);
 800ec48:	4a34      	ldr	r2, [pc, #208]	; (800ed1c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>)
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	4934      	ldr	r1, [pc, #208]	; (800ed20 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c0>)
 800ec4e:	e79a      	b.n	800eb86 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x26>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 800ec50:	4b39      	ldr	r3, [pc, #228]	; (800ed38 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>)
 800ec52:	4641      	mov	r1, r8
 800ec54:	4628      	mov	r0, r5
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	f7fb fa0c 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 800ec5c:	4681      	mov	r9, r0
 800ec5e:	b920      	cbnz	r0, 800ec6a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
 800ec60:	4b36      	ldr	r3, [pc, #216]	; (800ed3c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1dc>)
 800ec62:	6974      	ldr	r4, [r6, #20]
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	2368      	movs	r3, #104	; 0x68
 800ec68:	e7ee      	b.n	800ec48 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 800ec6a:	4b35      	ldr	r3, [pc, #212]	; (800ed40 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 800ec6c:	4641      	mov	r1, r8
 800ec6e:	4628      	mov	r0, r5
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	f7fb f9ff 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800ec76:	4b33      	ldr	r3, [pc, #204]	; (800ed44 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800ec78:	4641      	mov	r1, r8
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 800ec7a:	4683      	mov	fp, r0
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f7fb fa0d 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800ec84:	4680      	mov	r8, r0
 800ec86:	b920      	cbnz	r0, 800ec92 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x132>
 800ec88:	4b2f      	ldr	r3, [pc, #188]	; (800ed48 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800ec8a:	6974      	ldr	r4, [r6, #20]
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	236d      	movs	r3, #109	; 0x6d
 800ec90:	e7da      	b.n	800ec48 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
 800ec92:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d11e      	bne.n	800ecd8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x178>
  data->input_zero_point = input->params.zero_point;
 800ec9a:	f8da 3010 	ldr.w	r3, [sl, #16]
  micro_context->DeallocateTempTfLiteTensor(input);
 800ec9e:	4651      	mov	r1, sl
 800eca0:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
 800eca2:	6123      	str	r3, [r4, #16]
  data->filter_zero_point = filter->params.zero_point;
 800eca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eca8:	6163      	str	r3, [r4, #20]
  data->output_zero_point = output->params.zero_point;
 800ecaa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ecae:	61a3      	str	r3, [r4, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
 800ecb0:	682b      	ldr	r3, [r5, #0]
 800ecb2:	699b      	ldr	r3, [r3, #24]
 800ecb4:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800ecb6:	682b      	ldr	r3, [r5, #0]
 800ecb8:	4649      	mov	r1, r9
 800ecba:	4628      	mov	r0, r5
 800ecbc:	699b      	ldr	r3, [r3, #24]
 800ecbe:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
 800ecc0:	682b      	ldr	r3, [r5, #0]
 800ecc2:	4659      	mov	r1, fp
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	699b      	ldr	r3, [r3, #24]
 800ecc8:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800ecca:	682b      	ldr	r3, [r5, #0]
 800eccc:	4628      	mov	r0, r5
 800ecce:	4641      	mov	r1, r8
 800ecd0:	699b      	ldr	r3, [r3, #24]
 800ecd2:	4798      	blx	r3
  return kTfLiteOk;
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	e758      	b.n	800eb8a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 800ecd8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800ecdc:	3710      	adds	r7, #16
 800ecde:	464a      	mov	r2, r9
 800ece0:	4651      	mov	r1, sl
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	9308      	str	r3, [sp, #32]
 800ece6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ece8:	9307      	str	r3, [sp, #28]
 800ecea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecec:	9306      	str	r3, [sp, #24]
 800ecee:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800ecf2:	9305      	str	r3, [sp, #20]
 800ecf4:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800ecf8:	9304      	str	r3, [sp, #16]
 800ecfa:	f104 0320 	add.w	r3, r4, #32
 800ecfe:	9303      	str	r3, [sp, #12]
 800ed00:	f104 031c 	add.w	r3, r4, #28
 800ed04:	e9cd 0700 	strd	r0, r7, [sp]
 800ed08:	9302      	str	r3, [sp, #8]
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	465b      	mov	r3, fp
 800ed0e:	f7f9 fda7 	bl	8008860 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 800ed12:	2800      	cmp	r0, #0
 800ed14:	d0c1      	beq.n	800ec9a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x13a>
 800ed16:	e738      	b.n	800eb8a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
 800ed18:	080fc107 	.word	0x080fc107
 800ed1c:	080fc2d8 	.word	0x080fc2d8
 800ed20:	080f93a5 	.word	0x080f93a5
 800ed24:	080f982c 	.word	0x080f982c
 800ed28:	080fca44 	.word	0x080fca44
 800ed2c:	080fc12b 	.word	0x080fc12b
 800ed30:	080fc0c0 	.word	0x080fc0c0
 800ed34:	080fbed7 	.word	0x080fbed7
 800ed38:	080fc0c8 	.word	0x080fc0c8
 800ed3c:	080fc13f 	.word	0x080fc13f
 800ed40:	080fc0bc 	.word	0x080fc0bc
 800ed44:	080fc0c4 	.word	0x080fc0c4
 800ed48:	080fbcfa 	.word	0x080fbcfa

0800ed4c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800ed50:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800ed54:	b099      	sub	sp, #100	; 0x64
 800ed56:	4604      	mov	r4, r0
 800ed58:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 800ed5a:	f1b9 0f00 	cmp.w	r9, #0
 800ed5e:	d101      	bne.n	800ed64 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18>
 800ed60:	f007 fff0 	bl	8016d44 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ed64:	f8d1 b014 	ldr.w	fp, [r1, #20]
 800ed68:	f1bb 0f00 	cmp.w	fp, #0
 800ed6c:	d0f8      	beq.n	800ed60 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));
  MicroContext* micro_context = GetMicroContext(context);
 800ed6e:	68c5      	ldr	r5, [r0, #12]

  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kDepthwiseConvOutputTensor);
 800ed70:	2200      	movs	r2, #0
 800ed72:	4628      	mov	r0, r5
 800ed74:	f7fb f993 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800ed78:	4682      	mov	sl, r0
 800ed7a:	b960      	cbnz	r0, 800ed96 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 800ed7c:	4b6c      	ldr	r3, [pc, #432]	; (800ef30 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1e4>)
 800ed7e:	9300      	str	r3, [sp, #0]
 800ed80:	2393      	movs	r3, #147	; 0x93
 800ed82:	6965      	ldr	r5, [r4, #20]
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvInputTensor);
  TF_LITE_ENSURE(context, input != nullptr);
 800ed84:	4a6b      	ldr	r2, [pc, #428]	; (800ef34 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1e8>)
 800ed86:	4620      	mov	r0, r4
 800ed88:	496b      	ldr	r1, [pc, #428]	; (800ef38 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 800ed8a:	47a8      	blx	r5
 800ed8c:	2401      	movs	r4, #1
  micro_context->DeallocateTempTfLiteTensor(output);
  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(filter);

  return kTfLiteOk;
}
 800ed8e:	4620      	mov	r0, r4
 800ed90:	b019      	add	sp, #100	; 0x64
 800ed92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvInputTensor);
 800ed96:	2200      	movs	r2, #0
 800ed98:	4641      	mov	r1, r8
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f7fb f96a 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800eda0:	4607      	mov	r7, r0
 800eda2:	b920      	cbnz	r0, 800edae <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x62>
 800eda4:	4b65      	ldr	r3, [pc, #404]	; (800ef3c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	2396      	movs	r3, #150	; 0x96
 800edaa:	6965      	ldr	r5, [r4, #20]
 800edac:	e7ea      	b.n	800ed84 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x38>
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvWeightsTensor);
 800edae:	2201      	movs	r2, #1
 800edb0:	4641      	mov	r1, r8
 800edb2:	4628      	mov	r0, r5
 800edb4:	f7fb f95e 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 800edb8:	4606      	mov	r6, r0
 800edba:	b920      	cbnz	r0, 800edc6 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x7a>
 800edbc:	4b60      	ldr	r3, [pc, #384]	; (800ef40 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	2399      	movs	r3, #153	; 0x99
 800edc2:	6965      	ldr	r5, [r4, #20]
 800edc4:	e7de      	b.n	800ed84 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x38>
  const int input_width = input->dims->data[2];
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	68da      	ldr	r2, [r3, #12]
  const int input_height = input->dims->data[1];
 800edca:	689b      	ldr	r3, [r3, #8]
  const int input_width = input->dims->data[2];
 800edcc:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
 800edce:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
 800edd0:	6883      	ldr	r3, [r0, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800edd2:	4620      	mov	r0, r4
  const int filter_width = filter->dims->data[2];
 800edd4:	68da      	ldr	r2, [r3, #12]
 800edd6:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
 800edd8:	689a      	ldr	r2, [r3, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800edda:	691b      	ldr	r3, [r3, #16]
  const int filter_height = filter->dims->data[1];
 800eddc:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
 800edde:	f8da 2008 	ldr.w	r2, [sl, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800ede2:	009b      	lsls	r3, r3, #2
  const int output_width = output->dims->data[2];
 800ede4:	68d1      	ldr	r1, [r2, #12]
  const int output_height = output->dims->data[1];
 800ede6:	6892      	ldr	r2, [r2, #8]
  const int output_width = output->dims->data[2];
 800ede8:	910d      	str	r1, [sp, #52]	; 0x34
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800edea:	4619      	mov	r1, r3
  const int output_height = output->dims->data[1];
 800edec:	920e      	str	r2, [sp, #56]	; 0x38
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800edee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800edf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800edf2:	4790      	blx	r2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800edf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  data->per_channel_output_multiplier =
 800edf6:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800edfa:	4620      	mov	r0, r4
 800edfc:	4619      	mov	r1, r3
 800edfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ee00:	4790      	blx	r2
  if (input->type == kTfLiteInt8) {
 800ee02:	783b      	ldrb	r3, [r7, #0]
  data->per_channel_output_shift =
 800ee04:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
  if (input->type == kTfLiteInt8) {
 800ee08:	2b09      	cmp	r3, #9
 800ee0a:	d136      	bne.n	800ee7a <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x12e>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800ee0c:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 800ee10:	2a01      	cmp	r2, #1
 800ee12:	d00d      	beq.n	800ee30 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xe4>
 800ee14:	4b4b      	ldr	r3, [pc, #300]	; (800ef44 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 800ee16:	2501      	movs	r5, #1
 800ee18:	494b      	ldr	r1, [pc, #300]	; (800ef48 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	9301      	str	r3, [sp, #4]
 800ee1e:	4b4b      	ldr	r3, [pc, #300]	; (800ef4c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 800ee20:	e9cd 2502 	strd	r2, r5, [sp, #8]
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	23ae      	movs	r3, #174	; 0xae
 800ee28:	6966      	ldr	r6, [r4, #20]
 800ee2a:	4a42      	ldr	r2, [pc, #264]	; (800ef34 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1e8>)
 800ee2c:	47b0      	blx	r6
 800ee2e:	e7ad      	b.n	800ed8c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x40>
    const auto* affine_quantization =
 800ee30:	6b72      	ldr	r2, [r6, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
 800ee32:	2a00      	cmp	r2, #0
 800ee34:	d094      	beq.n	800ed60 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
 800ee36:	6810      	ldr	r0, [r2, #0]
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d091      	beq.n	800ed60 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
 800ee3c:	6851      	ldr	r1, [r2, #4]
 800ee3e:	2900      	cmp	r1, #0
 800ee40:	d08e      	beq.n	800ed60 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TF_LITE_ENSURE(
 800ee42:	6802      	ldr	r2, [r0, #0]
 800ee44:	2a01      	cmp	r2, #1
 800ee46:	d008      	beq.n	800ee5a <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
 800ee48:	68b0      	ldr	r0, [r6, #8]
 800ee4a:	6900      	ldr	r0, [r0, #16]
 800ee4c:	4282      	cmp	r2, r0
 800ee4e:	d004      	beq.n	800ee5a <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
 800ee50:	4b3f      	ldr	r3, [pc, #252]	; (800ef50 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	23b9      	movs	r3, #185	; 0xb9
 800ee56:	6965      	ldr	r5, [r4, #20]
 800ee58:	e794      	b.n	800ed84 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x38>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 800ee5a:	6809      	ldr	r1, [r1, #0]
 800ee5c:	428a      	cmp	r2, r1
 800ee5e:	d00c      	beq.n	800ee7a <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x12e>
 800ee60:	4b3c      	ldr	r3, [pc, #240]	; (800ef54 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 800ee62:	4620      	mov	r0, r4
 800ee64:	9301      	str	r3, [sp, #4]
 800ee66:	4b3c      	ldr	r3, [pc, #240]	; (800ef58 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 800ee68:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	23bc      	movs	r3, #188	; 0xbc
 800ee70:	6965      	ldr	r5, [r4, #20]
 800ee72:	4a30      	ldr	r2, [pc, #192]	; (800ef34 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1e8>)
 800ee74:	4934      	ldr	r1, [pc, #208]	; (800ef48 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 800ee76:	47a8      	blx	r5
 800ee78:	e788      	b.n	800ed8c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x40>
  TF_LITE_ENSURE_MSG(
 800ee7a:	7832      	ldrb	r2, [r6, #0]
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d034      	beq.n	800eeea <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
 800ee80:	2b09      	cmp	r3, #9
 800ee82:	d12b      	bne.n	800eedc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>
 800ee84:	2a12      	cmp	r2, #18
 800ee86:	d032      	beq.n	800eeee <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
 800ee88:	2a09      	cmp	r2, #9
 800ee8a:	d129      	bne.n	800eee0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 800ee8c:	f8cd 9018 	str.w	r9, [sp, #24]
 800ee90:	4620      	mov	r0, r4
 800ee92:	783b      	ldrb	r3, [r7, #0]
 800ee94:	465a      	mov	r2, fp
 800ee96:	4641      	mov	r1, r8
 800ee98:	9305      	str	r3, [sp, #20]
 800ee9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee9c:	9304      	str	r3, [sp, #16]
 800ee9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eea0:	9303      	str	r3, [sp, #12]
 800eea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eea4:	9302      	str	r3, [sp, #8]
 800eea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eea8:	9301      	str	r3, [sp, #4]
 800eeaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeac:	9300      	str	r3, [sp, #0]
 800eeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb0:	f7ff fe56 	bl	800eb60 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	f47f af69 	bne.w	800ed8e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  micro_context->DeallocateTempTfLiteTensor(output);
 800eebc:	682b      	ldr	r3, [r5, #0]
 800eebe:	4651      	mov	r1, sl
 800eec0:	4628      	mov	r0, r5
 800eec2:	699b      	ldr	r3, [r3, #24]
 800eec4:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 800eec6:	682b      	ldr	r3, [r5, #0]
 800eec8:	4639      	mov	r1, r7
 800eeca:	4628      	mov	r0, r5
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	4631      	mov	r1, r6
 800eed4:	4628      	mov	r0, r5
 800eed6:	699b      	ldr	r3, [r3, #24]
 800eed8:	4798      	blx	r3
  return kTfLiteOk;
 800eeda:	e758      	b.n	800ed8e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  TF_LITE_ENSURE_MSG(
 800eedc:	2b07      	cmp	r3, #7
 800eede:	d0d3      	beq.n	800ee88 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
 800eee0:	6963      	ldr	r3, [r4, #20]
 800eee2:	4620      	mov	r0, r4
 800eee4:	491d      	ldr	r1, [pc, #116]	; (800ef5c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 800eee6:	4798      	blx	r3
 800eee8:	e750      	b.n	800ed8c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x40>
  if (filter->type == kTfLiteInt4) {
 800eeea:	2b12      	cmp	r3, #18
 800eeec:	d1ce      	bne.n	800ee8c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x140>
        RuntimeShape(filter->dims->size,
 800eeee:	68b1      	ldr	r1, [r6, #8]
 800eef0:	f851 3b04 	ldr.w	r3, [r1], #4
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800eef4:	2b06      	cmp	r3, #6
      : size_(dimensions_count) {
 800eef6:	9311      	str	r3, [sp, #68]	; 0x44
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800eef8:	f73f af32 	bgt.w	800ed60 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800eefc:	009a      	lsls	r2, r3, #2
 800eefe:	a812      	add	r0, sp, #72	; 0x48
 800ef00:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef02:	f007 ffa6 	bl	8016e52 <memcpy>
 800ef06:	2200      	movs	r2, #0
    int buffer_size = 1;
 800ef08:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
 800ef0a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ef0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    for (int i = 0; i < size_; i++) {
 800ef10:	4293      	cmp	r3, r2
 800ef12:	f102 0001 	add.w	r0, r2, #1
 800ef16:	dd04      	ble.n	800ef22 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
      buffer_size *= dims_data[i];
 800ef18:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 800ef1c:	4351      	muls	r1, r2
 800ef1e:	4602      	mov	r2, r0
 800ef20:	e7f6      	b.n	800ef10 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
    context->RequestScratchBufferInArena(context, filter_size,
 800ef22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef24:	f109 0234 	add.w	r2, r9, #52	; 0x34
 800ef28:	4620      	mov	r0, r4
 800ef2a:	4798      	blx	r3
 800ef2c:	e7ae      	b.n	800ee8c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x140>
 800ef2e:	bf00      	nop
 800ef30:	080fbcfa 	.word	0x080fbcfa
 800ef34:	080fc2d8 	.word	0x080fc2d8
 800ef38:	080f93a5 	.word	0x080f93a5
 800ef3c:	080fbed7 	.word	0x080fbed7
 800ef40:	080fc13f 	.word	0x080fc13f
 800ef44:	080f9846 	.word	0x080f9846
 800ef48:	080f982c 	.word	0x080f982c
 800ef4c:	080f9879 	.word	0x080f9879
 800ef50:	080fc1a8 	.word	0x080fc1a8
 800ef54:	080fc22a 	.word	0x080fc22a
 800ef58:	080f9944 	.word	0x080f9944
 800ef5c:	080fc250 	.word	0x080fc250

0800ef60 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
 800ef60:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800ef64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  std::int64_t sum = a64 + b64;
 800ef68:	1814      	adds	r4, r2, r0
 800ef6a:	f04f 0300 	mov.w	r3, #0
  return a ? BitNot(zero) : zero;
 800ef6e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800f094 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x134>
             : wide_shifted > max ? max
 800ef72:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  std::int64_t sum = a64 + b64;
 800ef76:	eb43 75e0 	adc.w	r5, r3, r0, asr #31
             : wide_shifted > max ? max
 800ef7a:	2700      	movs	r7, #0
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800ef7c:	1c6b      	adds	r3, r5, #1
 800ef7e:	bf05      	ittet	eq
 800ef80:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
 800ef84:	4622      	moveq	r2, r4
 800ef86:	2201      	movne	r2, #1
 800ef88:	462b      	moveq	r3, r5
 800ef8a:	bf18      	it	ne
 800ef8c:	2300      	movne	r3, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
 800ef8e:	18a4      	adds	r4, r4, r2
 800ef90:	415d      	adcs	r5, r3
 800ef92:	0feb      	lsrs	r3, r5, #31
 800ef94:	18e0      	adds	r0, r4, r3
 800ef96:	f145 0100 	adc.w	r1, r5, #0
  return a + b;
 800ef9a:	2503      	movs	r5, #3
  return static_cast<std::int32_t>((sum + sign) / 2);
 800ef9c:	104c      	asrs	r4, r1, #1
 800ef9e:	ea4f 0330 	mov.w	r3, r0, rrx
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800efa2:	493b      	ldr	r1, [pc, #236]	; (800f090 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x130>)
 800efa4:	4618      	mov	r0, r3
  return static_cast<std::int32_t>((sum + sign) / 2);
 800efa6:	4698      	mov	r8, r3
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800efa8:	f7f9 fa9c 	bl	80084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
  return a + b;
 800efac:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800efb0:	4621      	mov	r1, r4
 800efb2:	4640      	mov	r0, r8
 800efb4:	f7f9 fa96 	bl	80084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800efb8:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 800efbc:	4620      	mov	r0, r4
 800efbe:	f7f9 fa91 	bl	80084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
  return a ? BitNot(zero) : zero;
 800efc2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800efc6:	da55      	bge.n	800f074 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x114>
 800efc8:	4548      	cmp	r0, r9
 800efca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800efce:	f04f 0c00 	mov.w	ip, #0
 800efd2:	bfa8      	it	ge
 800efd4:	2100      	movge	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800efd6:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800efda:	0082      	lsls	r2, r0, #2
 800efdc:	ea4f 038b 	mov.w	r3, fp, lsl #2
             ? min
 800efe0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800efe4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
 800efe8:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
 800efec:	db46      	blt.n	800f07c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x11c>
             : wide_shifted > max ? max
 800efee:	4296      	cmp	r6, r2
 800eff0:	eb77 0003 	sbcs.w	r0, r7, r3
 800eff4:	bfb8      	it	lt
 800eff6:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
 800effa:	ea6f 030c 	mvn.w	r3, ip
  return a & b;
 800effe:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
 800f002:	3d01      	subs	r5, #1
  return a & b;
 800f004:	ea02 0203 	and.w	r2, r2, r3
  return ~a;
 800f008:	ea6f 0301 	mvn.w	r3, r1
  return a & b;
 800f00c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
 800f010:	ea82 020c 	eor.w	r2, r2, ip
  return a & b;
 800f014:	ea02 0203 	and.w	r2, r2, r3
  return a ^ b;
 800f018:	ea82 0201 	eor.w	r2, r2, r1
  return a + b;
 800f01c:	4414      	add	r4, r2
  for (int i = 0; i < 3; i++) {
 800f01e:	d1c7      	bne.n	800efb0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x50>
  return a ? BitNot(zero) : zero;
 800f020:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f024:	da2d      	bge.n	800f082 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x122>
 800f026:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
 800f02a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f02e:	4629      	mov	r1, r5
 800f030:	bfc8      	it	gt
 800f032:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800f034:	17e3      	asrs	r3, r4, #31
 800f036:	1926      	adds	r6, r4, r4
 800f038:	4622      	mov	r2, r4
 800f03a:	eb43 0703 	adc.w	r7, r3, r3
             ? min
 800f03e:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 800f042:	f177 33ff 	sbcs.w	r3, r7, #4294967295	; 0xffffffff
 800f046:	db20      	blt.n	800f08a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x12a>
             : wide_shifted > max ? max
 800f048:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800f04c:	2500      	movs	r5, #0
 800f04e:	42b4      	cmp	r4, r6
 800f050:	eb75 0307 	sbcs.w	r3, r5, r7
 800f054:	bfac      	ite	ge
 800f056:	4632      	movge	r2, r6
 800f058:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
 800f05c:	43cb      	mvns	r3, r1
  return a & b;
 800f05e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f062:	401a      	ands	r2, r3
  return ~a;
 800f064:	43c3      	mvns	r3, r0
  return a & b;
 800f066:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  return a ^ b;
 800f06a:	404a      	eors	r2, r1
  return a & b;
 800f06c:	401a      	ands	r2, r3
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
 800f06e:	4050      	eors	r0, r2
 800f070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return a ? BitNot(zero) : zero;
 800f074:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f078:	2100      	movs	r1, #0
 800f07a:	e7ac      	b.n	800efd6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x76>
             ? min
 800f07c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f080:	e7bb      	b.n	800effa <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x9a>
  return a ? BitNot(zero) : zero;
 800f082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f086:	4628      	mov	r0, r5
 800f088:	e7d4      	b.n	800f034 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xd4>
             ? min
 800f08a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f08e:	e7e5      	b.n	800f05c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xfc>
 800f090:	c3c3c3c4 	.word	0xc3c3c3c4
 800f094:	e0000001 	.word	0xe0000001

0800f098 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800f098:	b508      	push	{r3, lr}
    return __builtin_clz(integer_input);
 800f09a:	fab0 f380 	clz	r3, r0
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800f09e:	1ac9      	subs	r1, r1, r3
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800f0a0:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800f0a2:	6011      	str	r1, [r2, #0]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 800f0a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f0a8:	f7ff ff5a 	bl	800ef60 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
  return shifted_scale.raw();
}
 800f0ac:	bd08      	pop	{r3, pc}

0800f0ae <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800f0ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800f0b0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800f0b2:	b90b      	cbnz	r3, 800f0b8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 800f0b4:	f007 fe46 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
 800f0b8:	2124      	movs	r1, #36	; 0x24
}
 800f0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                                           sizeof(OpDataFullyConnected));
 800f0be:	4718      	bx	r3

0800f0c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);

  TFLITE_DCHECK(node->user_data != nullptr);
 800f0c4:	f8d1 a010 	ldr.w	sl, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800f0c8:	b08d      	sub	sp, #52	; 0x34
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	460f      	mov	r7, r1
  MicroContext* micro_context = GetMicroContext(context);
 800f0ce:	68c4      	ldr	r4, [r0, #12]
  TFLITE_DCHECK(node->user_data != nullptr);
 800f0d0:	f1ba 0f00 	cmp.w	sl, #0
 800f0d4:	d101      	bne.n	800f0da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a>
 800f0d6:	f007 fe35 	bl	8016d44 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800f0da:	f8d1 b014 	ldr.w	fp, [r1, #20]
 800f0de:	f1bb 0f00 	cmp.w	fp, #0
 800f0e2:	d0f8      	beq.n	800f0d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 800f0e4:	4b51      	ldr	r3, [pc, #324]	; (800f22c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	f7fa ffc3 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800f0ee:	4680      	mov	r8, r0
 800f0f0:	b958      	cbnz	r0, 800f10a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 800f0f2:	4b4f      	ldr	r3, [pc, #316]	; (800f230 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 800f0f4:	696c      	ldr	r4, [r5, #20]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	232f      	movs	r3, #47	; 0x2f
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 800f0fa:	4a4e      	ldr	r2, [pc, #312]	; (800f234 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	494e      	ldr	r1, [pc, #312]	; (800f238 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 800f100:	47a0      	blx	r4
 800f102:	2001      	movs	r0, #1
  if (bias != nullptr) {
    micro_context->DeallocateTempTfLiteTensor(bias);
  }
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 800f104:	b00d      	add	sp, #52	; 0x34
 800f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 800f10a:	4b4c      	ldr	r3, [pc, #304]	; (800f23c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
      node, kFullyConnectedWeightsTensor);
 800f10c:	4639      	mov	r1, r7
 800f10e:	4620      	mov	r0, r4
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	f7fa ffaf 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 800f116:	4606      	mov	r6, r0
 800f118:	b920      	cbnz	r0, 800f124 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>
 800f11a:	4b49      	ldr	r3, [pc, #292]	; (800f240 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
 800f11c:	696c      	ldr	r4, [r5, #20]
 800f11e:	9300      	str	r3, [sp, #0]
 800f120:	2332      	movs	r3, #50	; 0x32
 800f122:	e7ea      	b.n	800f0fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 800f124:	4b47      	ldr	r3, [pc, #284]	; (800f244 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
 800f126:	4639      	mov	r1, r7
 800f128:	4620      	mov	r0, r4
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	f7fa ffa2 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 800f130:	4b45      	ldr	r3, [pc, #276]	; (800f248 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
      node, kFullyConnectedOutputTensor);
 800f132:	4639      	mov	r1, r7
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 800f134:	4681      	mov	r9, r0
      node, kFullyConnectedOutputTensor);
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	4620      	mov	r0, r4
 800f13a:	f7fa ffb0 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800f13e:	4607      	mov	r7, r0
 800f140:	b920      	cbnz	r0, 800f14c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8c>
 800f142:	4b42      	ldr	r3, [pc, #264]	; (800f24c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
 800f144:	696c      	ldr	r4, [r5, #20]
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	2337      	movs	r3, #55	; 0x37
 800f14a:	e7d6      	b.n	800f0fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800f14c:	f898 0000 	ldrb.w	r0, [r8]
 800f150:	783b      	ldrb	r3, [r7, #0]
 800f152:	4283      	cmp	r3, r0
 800f154:	d012      	beq.n	800f17c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 800f156:	696c      	ldr	r4, [r5, #20]
 800f158:	f7f8 ffaa 	bl	80080b0 <TfLiteTypeGetName>
 800f15c:	4606      	mov	r6, r0
 800f15e:	7838      	ldrb	r0, [r7, #0]
 800f160:	f7f8 ffa6 	bl	80080b0 <TfLiteTypeGetName>
 800f164:	4b3a      	ldr	r3, [pc, #232]	; (800f250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
 800f166:	4a33      	ldr	r2, [pc, #204]	; (800f234 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800f168:	9301      	str	r3, [sp, #4]
 800f16a:	4b3a      	ldr	r3, [pc, #232]	; (800f254 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
 800f16c:	493a      	ldr	r1, [pc, #232]	; (800f258 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	2338      	movs	r3, #56	; 0x38
 800f172:	e9cd 6002 	strd	r6, r0, [sp, #8]
 800f176:	4628      	mov	r0, r5
 800f178:	47a0      	blx	r4
 800f17a:	e7c2      	b.n	800f102 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  if ((input->type == kTfLiteFloat32 && filter->type != kTfLiteFloat32) ||
 800f17c:	2801      	cmp	r0, #1
 800f17e:	7833      	ldrb	r3, [r6, #0]
 800f180:	d10d      	bne.n	800f19e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xde>
 800f182:	2b01      	cmp	r3, #1
      (input->type == kTfLiteInt16 && filter->type != kTfLiteInt8)) {
 800f184:	d02b      	beq.n	800f1de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
    MicroPrintf("Input type: %s with filter type : %s not supported.",
 800f186:	f7f8 ff93 	bl	80080b0 <TfLiteTypeGetName>
 800f18a:	4604      	mov	r4, r0
 800f18c:	7830      	ldrb	r0, [r6, #0]
 800f18e:	f7f8 ff8f 	bl	80080b0 <TfLiteTypeGetName>
 800f192:	4621      	mov	r1, r4
 800f194:	4602      	mov	r2, r0
 800f196:	4831      	ldr	r0, [pc, #196]	; (800f25c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
 800f198:	f7fb fd8e 	bl	800acb8 <_Z11MicroPrintfPKcz>
 800f19c:	e7b1      	b.n	800f102 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  if ((input->type == kTfLiteFloat32 && filter->type != kTfLiteFloat32) ||
 800f19e:	2809      	cmp	r0, #9
 800f1a0:	d117      	bne.n	800f1d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x112>
      (input->type == kTfLiteInt8 &&
 800f1a2:	2b09      	cmp	r3, #9
 800f1a4:	d01b      	beq.n	800f1de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
       (filter->type != kTfLiteInt8 && filter->type != kTfLiteInt4)) ||
 800f1a6:	2b12      	cmp	r3, #18
 800f1a8:	d1ed      	bne.n	800f186 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
        RuntimeShape(filter->dims->size,
 800f1aa:	68b1      	ldr	r1, [r6, #8]
 800f1ac:	f851 2b04 	ldr.w	r2, [r1], #4
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800f1b0:	2a06      	cmp	r2, #6
      : size_(dimensions_count) {
 800f1b2:	9205      	str	r2, [sp, #20]
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800f1b4:	dc8f      	bgt.n	800f0d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800f1b6:	0092      	lsls	r2, r2, #2
 800f1b8:	a806      	add	r0, sp, #24
 800f1ba:	f007 fe4a 	bl	8016e52 <memcpy>
            .FlatSize();
 800f1be:	a805      	add	r0, sp, #20
 800f1c0:	f7f8 f9c3 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    context->RequestScratchBufferInArena(context, filter_size,
 800f1c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	f10a 0220 	add.w	r2, sl, #32
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	4798      	blx	r3
 800f1d0:	e005      	b.n	800f1de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
       (filter->type != kTfLiteInt8 && filter->type != kTfLiteInt4)) ||
 800f1d2:	2807      	cmp	r0, #7
 800f1d4:	d101      	bne.n	800f1da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
      (input->type == kTfLiteInt16 && filter->type != kTfLiteInt8)) {
 800f1d6:	2b09      	cmp	r3, #9
 800f1d8:	e7d4      	b.n	800f184 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
  if (filter->type == kTfLiteInt4) {
 800f1da:	2b12      	cmp	r3, #18
 800f1dc:	d0e5      	beq.n	800f1aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xea>
  TF_LITE_ENSURE_OK(context, CalculateOpDataFullyConnected(
 800f1de:	f898 2000 	ldrb.w	r2, [r8]
 800f1e2:	4643      	mov	r3, r8
 800f1e4:	f89b 1000 	ldrb.w	r1, [fp]
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	e9cd 7a02 	strd	r7, sl, [sp, #8]
 800f1ee:	e9cd 6900 	strd	r6, r9, [sp]
 800f1f2:	f000 fb09 	bl	800f808 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	d184      	bne.n	800f104 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
  micro_context->DeallocateTempTfLiteTensor(input);
 800f1fa:	6823      	ldr	r3, [r4, #0]
 800f1fc:	4641      	mov	r1, r8
 800f1fe:	4620      	mov	r0, r4
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800f204:	6823      	ldr	r3, [r4, #0]
 800f206:	4631      	mov	r1, r6
 800f208:	4620      	mov	r0, r4
 800f20a:	699b      	ldr	r3, [r3, #24]
 800f20c:	4798      	blx	r3
  if (bias != nullptr) {
 800f20e:	f1b9 0f00 	cmp.w	r9, #0
 800f212:	d004      	beq.n	800f21e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15e>
    micro_context->DeallocateTempTfLiteTensor(bias);
 800f214:	6823      	ldr	r3, [r4, #0]
 800f216:	4649      	mov	r1, r9
 800f218:	4620      	mov	r0, r4
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800f21e:	6823      	ldr	r3, [r4, #0]
 800f220:	4620      	mov	r0, r4
 800f222:	4639      	mov	r1, r7
 800f224:	699b      	ldr	r3, [r3, #24]
 800f226:	4798      	blx	r3
  return kTfLiteOk;
 800f228:	2000      	movs	r0, #0
 800f22a:	e76b      	b.n	800f104 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 800f22c:	080fc3d4 	.word	0x080fc3d4
 800f230:	080fbed7 	.word	0x080fbed7
 800f234:	080fc340 	.word	0x080fc340
 800f238:	080f93a5 	.word	0x080f93a5
 800f23c:	080fc3dc 	.word	0x080fc3dc
 800f240:	080fc13f 	.word	0x080fc13f
 800f244:	080fc3d0 	.word	0x080fc3d0
 800f248:	080fc3d8 	.word	0x080fc3d8
 800f24c:	080fbcfa 	.word	0x080fbcfa
 800f250:	080fbfbd 	.word	0x080fbfbd
 800f254:	080fbfca 	.word	0x080fbfca
 800f258:	080fc37f 	.word	0x080fc37f
 800f25c:	080fc399 	.word	0x080fc399

0800f260 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800f260:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800f262:	b538      	push	{r3, r4, r5, lr}
  const int dims_count = shape.DimensionsCount();
 800f264:	6805      	ldr	r5, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800f266:	db01      	blt.n	800f26c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
 800f268:	42a9      	cmp	r1, r5
 800f26a:	db01      	blt.n	800f270 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
 800f26c:	f007 fd6a 	bl	8016d44 <abort>
  const int32_t* DimsData() const { return dims_; }
 800f270:	1d02      	adds	r2, r0, #4
  for (int i = 0; i < dims_count; ++i) {
 800f272:	2300      	movs	r3, #0
  int flat_size = 1;
 800f274:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
 800f276:	42ab      	cmp	r3, r5
 800f278:	da07      	bge.n	800f28a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x2a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800f27a:	428b      	cmp	r3, r1
 800f27c:	bf14      	ite	ne
 800f27e:	f852 4023 	ldrne.w	r4, [r2, r3, lsl #2]
 800f282:	2401      	moveq	r4, #1
  for (int i = 0; i < dims_count; ++i) {
 800f284:	3301      	adds	r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800f286:	4360      	muls	r0, r4
  for (int i = 0; i < dims_count; ++i) {
 800f288:	e7f5      	b.n	800f276 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x16>
}
 800f28a:	bd38      	pop	{r3, r4, r5, pc}

0800f28c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
}

}  // namespace

TFLMRegistration Register_FULLY_CONNECTED() {
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 800f28c:	2300      	movs	r3, #0
 800f28e:	4a06      	ldr	r2, [pc, #24]	; (800f2a8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
TFLMRegistration Register_FULLY_CONNECTED() {
 800f290:	b513      	push	{r0, r1, r4, lr}
 800f292:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 800f294:	4905      	ldr	r1, [pc, #20]	; (800f2ac <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x20>)
 800f296:	e9cd 3300 	strd	r3, r3, [sp]
 800f29a:	4b05      	ldr	r3, [pc, #20]	; (800f2b0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 800f29c:	f000 fcea 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	b002      	add	sp, #8
 800f2a4:	bd10      	pop	{r4, pc}
 800f2a6:	bf00      	nop
 800f2a8:	0800f0c1 	.word	0x0800f0c1
 800f2ac:	0800f0af 	.word	0x0800f0af
 800f2b0:	0800f4b1 	.word	0x0800f4b1

0800f2b4 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>:
  }
}

template <typename InputType, typename WeightType, typename OutputType,
          typename BiasType>
void FullyConnected(const FullyConnectedParams& params,
 800f2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b8:	461e      	mov	r6, r3
 800f2ba:	b08b      	sub	sp, #44	; 0x2c
                    const InputType* input_data,
                    const RuntimeShape& filter_shape,
                    const WeightType* filter_data,
                    const RuntimeShape& bias_shape, const BiasType* bias_data,
                    const RuntimeShape& output_shape, OutputType* output_data) {
  const int32_t input_offset = params.input_offset;
 800f2bc:	6803      	ldr	r3, [r0, #0]
void FullyConnected(const FullyConnectedParams& params,
 800f2be:	4614      	mov	r4, r2
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800f2c0:	6837      	ldr	r7, [r6, #0]
  const int32_t input_offset = params.input_offset;
 800f2c2:	9303      	str	r3, [sp, #12]
  const int32_t filter_offset = params.weights_offset;
 800f2c4:	6843      	ldr	r3, [r0, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800f2c6:	2f01      	cmp	r7, #1
void FullyConnected(const FullyConnectedParams& params,
 800f2c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
  const int32_t filter_offset = params.weights_offset;
 800f2cc:	9304      	str	r3, [sp, #16]
  const int32_t output_offset = params.output_offset;
 800f2ce:	6883      	ldr	r3, [r0, #8]
  const int32_t output_activation_max = params.quantized_activation_max;
 800f2d0:	f8d0 b018 	ldr.w	fp, [r0, #24]
  const int32_t output_offset = params.output_offset;
 800f2d4:	9305      	str	r3, [sp, #20]
  const int32_t output_multiplier = params.output_multiplier;
 800f2d6:	68c3      	ldr	r3, [r0, #12]
 800f2d8:	9306      	str	r3, [sp, #24]
  const int output_shift = params.output_shift;
 800f2da:	6903      	ldr	r3, [r0, #16]
 800f2dc:	9307      	str	r3, [sp, #28]
  const int32_t output_activation_min = params.quantized_activation_min;
 800f2de:	6943      	ldr	r3, [r0, #20]
 800f2e0:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800f2e2:	dc01      	bgt.n	800f2e8 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x34>
 800f2e4:	f007 fd2e 	bl	8016d44 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800f2e8:	f8d8 5000 	ldr.w	r5, [r8]
 800f2ec:	2d00      	cmp	r5, #0
 800f2ee:	ddf9      	ble.n	800f2e4 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x30>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800f2f0:	9b01      	ldr	r3, [sp, #4]
 800f2f2:	455b      	cmp	r3, fp
 800f2f4:	dcf6      	bgt.n	800f2e4 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x30>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int output_dim_count = output_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800f2f6:	3d01      	subs	r5, #1
 800f2f8:	4640      	mov	r0, r8
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	f7ff ffb0 	bl	800f260 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800f300:	4629      	mov	r1, r5
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800f302:	9008      	str	r0, [sp, #32]
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800f304:	4640      	mov	r0, r8
 800f306:	f7f8 f914 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f30a:	4681      	mov	r9, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800f30c:	1eb9      	subs	r1, r7, #2
 800f30e:	4630      	mov	r0, r6
 800f310:	f7f8 f90f 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f314:	4581      	cmp	r9, r0
 800f316:	dce5      	bgt.n	800f2e4 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x30>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800f318:	1e79      	subs	r1, r7, #1
 800f31a:	4630      	mov	r0, r6
 800f31c:	f7f8 f909 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f320:	4267      	negs	r7, r4
 800f322:	4606      	mov	r6, r0
 800f324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  for (int b = 0; b < batches; ++b) {
 800f328:	f04f 0a00 	mov.w	sl, #0
 800f32c:	9b08      	ldr	r3, [sp, #32]
 800f32e:	459a      	cmp	sl, r3
 800f330:	da39      	bge.n	800f3a6 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xf2>
 800f332:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800f334:	2500      	movs	r5, #0
 800f336:	45a9      	cmp	r9, r5
 800f338:	dd2f      	ble.n	800f39a <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xe6>
 800f33a:	469e      	mov	lr, r3
 800f33c:	46a4      	mov	ip, r4
      BiasType acc = 0;
 800f33e:	2000      	movs	r0, #0
      for (int d = 0; d < accum_depth; ++d) {
 800f340:	eb0c 0207 	add.w	r2, ip, r7
 800f344:	4296      	cmp	r6, r2
 800f346:	dd0f      	ble.n	800f368 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xb4>
        int32_t input_val = input_data[b * accum_depth + d];
 800f348:	f91c 2b01 	ldrsb.w	r2, [ip], #1
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800f34c:	9904      	ldr	r1, [sp, #16]
        int32_t input_val = input_data[b * accum_depth + d];
 800f34e:	9202      	str	r2, [sp, #8]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800f350:	f91e 2b01 	ldrsb.w	r2, [lr], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800f354:	440a      	add	r2, r1
 800f356:	9209      	str	r2, [sp, #36]	; 0x24
 800f358:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f35c:	440a      	add	r2, r1
 800f35e:	4611      	mov	r1, r2
 800f360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f362:	fb01 0002 	mla	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
 800f366:	e7eb      	b.n	800f340 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x8c>
      }
      if (bias_data) {
 800f368:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f36a:	b112      	cbz	r2, 800f372 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xbe>
        acc += bias_data[out_c];
 800f36c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800f370:	4410      	add	r0, r2
 800f372:	9302      	str	r3, [sp, #8]
      }
      int32_t acc_scaled =
          MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800f374:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f378:	f7f8 fea6 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
      acc_scaled += output_offset;
 800f37c:	9b05      	ldr	r3, [sp, #20]
 800f37e:	4418      	add	r0, r3
      acc_scaled = std::max(acc_scaled, output_activation_min);
      acc_scaled = std::min(acc_scaled, output_activation_max);
      output_data[out_c + output_depth * b] =
 800f380:	9b01      	ldr	r3, [sp, #4]
 800f382:	4298      	cmp	r0, r3
 800f384:	bfb8      	it	lt
 800f386:	4618      	movlt	r0, r3
 800f388:	9b02      	ldr	r3, [sp, #8]
 800f38a:	4558      	cmp	r0, fp
 800f38c:	4433      	add	r3, r6
 800f38e:	bfa8      	it	ge
 800f390:	4658      	movge	r0, fp
 800f392:	f808 0005 	strb.w	r0, [r8, r5]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800f396:	3501      	adds	r5, #1
 800f398:	e7cd      	b.n	800f336 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x82>
  for (int b = 0; b < batches; ++b) {
 800f39a:	f10a 0a01 	add.w	sl, sl, #1
 800f39e:	44c8      	add	r8, r9
 800f3a0:	4434      	add	r4, r6
 800f3a2:	1bbf      	subs	r7, r7, r6
 800f3a4:	e7c2      	b.n	800f32c <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x78>
          static_cast<OutputType>(acc_scaled);
    }
  }
}
 800f3a6:	b00b      	add	sp, #44	; 0x2c
 800f3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3ac <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>:
void FullyConnected(const FullyConnectedParams& params,
 800f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b0:	461e      	mov	r6, r3
 800f3b2:	b08b      	sub	sp, #44	; 0x2c
  const int32_t input_offset = params.input_offset;
 800f3b4:	6803      	ldr	r3, [r0, #0]
void FullyConnected(const FullyConnectedParams& params,
 800f3b6:	4614      	mov	r4, r2
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800f3b8:	6837      	ldr	r7, [r6, #0]
  const int32_t input_offset = params.input_offset;
 800f3ba:	9302      	str	r3, [sp, #8]
  const int32_t filter_offset = params.weights_offset;
 800f3bc:	6843      	ldr	r3, [r0, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800f3be:	2f01      	cmp	r7, #1
void FullyConnected(const FullyConnectedParams& params,
 800f3c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
  const int32_t filter_offset = params.weights_offset;
 800f3c4:	9303      	str	r3, [sp, #12]
  const int32_t output_offset = params.output_offset;
 800f3c6:	6883      	ldr	r3, [r0, #8]
  const int32_t output_activation_max = params.quantized_activation_max;
 800f3c8:	f8d0 b018 	ldr.w	fp, [r0, #24]
  const int32_t output_offset = params.output_offset;
 800f3cc:	9304      	str	r3, [sp, #16]
  const int32_t output_multiplier = params.output_multiplier;
 800f3ce:	68c3      	ldr	r3, [r0, #12]
 800f3d0:	9305      	str	r3, [sp, #20]
  const int output_shift = params.output_shift;
 800f3d2:	6903      	ldr	r3, [r0, #16]
 800f3d4:	9306      	str	r3, [sp, #24]
  const int32_t output_activation_min = params.quantized_activation_min;
 800f3d6:	6943      	ldr	r3, [r0, #20]
 800f3d8:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800f3da:	dc01      	bgt.n	800f3e0 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x34>
 800f3dc:	f007 fcb2 	bl	8016d44 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800f3e0:	f8d8 5000 	ldr.w	r5, [r8]
 800f3e4:	2d00      	cmp	r5, #0
 800f3e6:	ddf9      	ble.n	800f3dc <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x30>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800f3e8:	9b01      	ldr	r3, [sp, #4]
 800f3ea:	455b      	cmp	r3, fp
 800f3ec:	dcf6      	bgt.n	800f3dc <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x30>
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800f3ee:	3d01      	subs	r5, #1
 800f3f0:	4640      	mov	r0, r8
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	f7ff ff34 	bl	800f260 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800f3f8:	4629      	mov	r1, r5
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800f3fa:	9007      	str	r0, [sp, #28]
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	f7f8 f898 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f402:	4680      	mov	r8, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800f404:	1eb9      	subs	r1, r7, #2
 800f406:	4630      	mov	r0, r6
 800f408:	f7f8 f893 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f40c:	4580      	cmp	r8, r0
 800f40e:	dce5      	bgt.n	800f3dc <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x30>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800f410:	1e79      	subs	r1, r7, #1
 800f412:	4630      	mov	r0, r6
 800f414:	f7f8 f88d 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int b = 0; b < batches; ++b) {
 800f418:	2700      	movs	r7, #0
 800f41a:	ea4f 0348 	mov.w	r3, r8, lsl #1
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800f41e:	4681      	mov	r9, r0
 800f420:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f422:	9308      	str	r3, [sp, #32]
 800f424:	0043      	lsls	r3, r0, #1
 800f426:	9400      	str	r4, [sp, #0]
 800f428:	9309      	str	r3, [sp, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800f42a:	9b07      	ldr	r3, [sp, #28]
 800f42c:	429f      	cmp	r7, r3
 800f42e:	da3c      	bge.n	800f4aa <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xfe>
 800f430:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800f434:	2500      	movs	r5, #0
 800f436:	45a8      	cmp	r8, r5
 800f438:	dd2f      	ble.n	800f49a <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xee>
      for (int d = 0; d < accum_depth; ++d) {
 800f43a:	2300      	movs	r3, #0
      BiasType acc = 0;
 800f43c:	2000      	movs	r0, #0
 800f43e:	2100      	movs	r1, #0
      for (int d = 0; d < accum_depth; ++d) {
 800f440:	454b      	cmp	r3, r9
 800f442:	da10      	bge.n	800f466 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xba>
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800f444:	f91a 2003 	ldrsb.w	r2, [sl, r3]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800f448:	9c03      	ldr	r4, [sp, #12]
 800f44a:	eb02 0c04 	add.w	ip, r2, r4
        int32_t input_val = input_data[b * accum_depth + d];
 800f44e:	9a00      	ldr	r2, [sp, #0]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800f450:	9c02      	ldr	r4, [sp, #8]
        int32_t input_val = input_data[b * accum_depth + d];
 800f452:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
      for (int d = 0; d < accum_depth; ++d) {
 800f456:	3301      	adds	r3, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800f458:	4422      	add	r2, r4
 800f45a:	fb02 f20c 	mul.w	r2, r2, ip
 800f45e:	1880      	adds	r0, r0, r2
 800f460:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
      for (int d = 0; d < accum_depth; ++d) {
 800f464:	e7ec      	b.n	800f440 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x94>
      if (bias_data) {
 800f466:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f468:	b12b      	cbz	r3, 800f476 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xca>
        acc += bias_data[out_c];
 800f46a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f472:	1880      	adds	r0, r0, r2
 800f474:	4159      	adcs	r1, r3
 800f476:	44ca      	add	sl, r9
          MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800f478:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800f47c:	f7f8 fe78 	bl	8008170 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
      acc_scaled += output_offset;
 800f480:	9b04      	ldr	r3, [sp, #16]
 800f482:	4418      	add	r0, r3
      output_data[out_c + output_depth * b] =
 800f484:	9b01      	ldr	r3, [sp, #4]
 800f486:	4298      	cmp	r0, r3
 800f488:	bfb8      	it	lt
 800f48a:	4618      	movlt	r0, r3
 800f48c:	4558      	cmp	r0, fp
 800f48e:	bfa8      	it	ge
 800f490:	4658      	movge	r0, fp
 800f492:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800f496:	3501      	adds	r5, #1
 800f498:	e7cd      	b.n	800f436 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x8a>
 800f49a:	9b08      	ldr	r3, [sp, #32]
  for (int b = 0; b < batches; ++b) {
 800f49c:	3701      	adds	r7, #1
 800f49e:	9a00      	ldr	r2, [sp, #0]
 800f4a0:	441e      	add	r6, r3
 800f4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4a4:	441a      	add	r2, r3
 800f4a6:	9200      	str	r2, [sp, #0]
 800f4a8:	e7bf      	b.n	800f42a <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x7e>
}
 800f4aa:	b00b      	add	sp, #44	; 0x2c
 800f4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800f4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800f4b4:	f8d1 a014 	ldr.w	sl, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800f4b8:	4681      	mov	r9, r0
 800f4ba:	4688      	mov	r8, r1
 800f4bc:	ed2d 8b02 	vpush	{d8}
 800f4c0:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800f4c4:	f1ba 0f00 	cmp.w	sl, #0
 800f4c8:	d101      	bne.n	800f4ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e>
 800f4ca:	f007 fc3b 	bl	8016d44 <abort>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800f4ce:	4baf      	ldr	r3, [pc, #700]	; (800f78c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	f000 fbf6 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800f4d6:	4bae      	ldr	r3, [pc, #696]	; (800f790 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800f4d8:	4641      	mov	r1, r8
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800f4da:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	4648      	mov	r0, r9
 800f4e0:	f000 fbef 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800f4e4:	4bab      	ldr	r3, [pc, #684]	; (800f794 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
 800f4e6:	4641      	mov	r1, r8
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800f4e8:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	4648      	mov	r0, r9
 800f4ee:	f000 fbe8 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800f4f2:	4ba9      	ldr	r3, [pc, #676]	; (800f798 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
 800f4f4:	4641      	mov	r1, r8
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800f4f6:	4604      	mov	r4, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	4648      	mov	r0, r9
 800f4fc:	f000 fbe3 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800f500:	f8d8 8010 	ldr.w	r8, [r8, #16]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800f504:	4606      	mov	r6, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 800f506:	f1b8 0f00 	cmp.w	r8, #0
 800f50a:	d0de      	beq.n	800f4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a>
  switch (input->type) {
 800f50c:	7a28      	ldrb	r0, [r5, #8]
 800f50e:	2807      	cmp	r0, #7
 800f510:	f000 80fd 	beq.w	800f70e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25e>
 800f514:	2809      	cmp	r0, #9
 800f516:	f000 8083 	beq.w	800f620 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x170>
 800f51a:	2801      	cmp	r0, #1
 800f51c:	f040 8130 	bne.w	800f780 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d0>
          FullyConnectedParamsFloat(params->activation),
 800f520:	f89a 1000 	ldrb.w	r1, [sl]
 800f524:	a878      	add	r0, sp, #480	; 0x1e0
 800f526:	f000 f951 	bl	800f7cc <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800f52a:	4629      	mov	r1, r5
 800f52c:	a808      	add	r0, sp, #32
 800f52e:	f000 fbd8 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
 800f532:	4639      	mov	r1, r7
 800f534:	a80f      	add	r0, sp, #60	; 0x3c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800f536:	682d      	ldr	r5, [r5, #0]
 800f538:	f000 fbd3 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800f53c:	2f00      	cmp	r7, #0
 800f53e:	d0c4      	beq.n	800f4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800f540:	683b      	ldr	r3, [r7, #0]
          tflite::micro::GetTensorShape(bias),
 800f542:	4621      	mov	r1, r4
 800f544:	a816      	add	r0, sp, #88	; 0x58
 800f546:	9307      	str	r3, [sp, #28]
 800f548:	f000 fbcb 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800f54c:	b104      	cbz	r4, 800f550 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
 800f54e:	6824      	ldr	r4, [r4, #0]
          tflite::micro::GetTensorShape(output),
 800f550:	4631      	mov	r1, r6
 800f552:	a81d      	add	r0, sp, #116	; 0x74
 800f554:	f000 fbc5 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800f558:	2e00      	cmp	r6, #0
 800f55a:	d0b6      	beq.n	800f4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a>
  return reinterpret_cast<T*>(tensor->data.raw);
 800f55c:	6837      	ldr	r7, [r6, #0]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800f55e:	a81d      	add	r0, sp, #116	; 0x74
 800f560:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  const int weights_dims_count = weights_shape.DimensionsCount();
 800f562:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800f566:	3e01      	subs	r6, #1
  const float output_activation_min = params.float_activation_min;
 800f568:	ed9d 8a7f 	vldr	s16, [sp, #508]	; 0x1fc
  const float output_activation_max = params.float_activation_max;
 800f56c:	eddd 8a80 	vldr	s17, [sp, #512]	; 0x200
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800f570:	4631      	mov	r1, r6
 800f572:	f7ff fe75 	bl	800f260 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800f576:	f1a9 0102 	sub.w	r1, r9, #2
 800f57a:	4680      	mov	r8, r0
 800f57c:	a80f      	add	r0, sp, #60	; 0x3c
 800f57e:	f7f7 ffd8 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f582:	4682      	mov	sl, r0
 800f584:	4631      	mov	r1, r6
 800f586:	a81d      	add	r0, sp, #116	; 0x74
 800f588:	f7f7 ffd3 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f58c:	4582      	cmp	sl, r0
 800f58e:	4606      	mov	r6, r0
 800f590:	d19b      	bne.n	800f4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800f592:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 800f596:	a80f      	add	r0, sp, #60	; 0x3c
 800f598:	f7f7 ffcb 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f59c:	463a      	mov	r2, r7
 800f59e:	00b3      	lsls	r3, r6, #2
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
 800f5a0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800f79c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ec>
 800f5a4:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 800f5a8:	9306      	str	r3, [sp, #24]
 800f5aa:	462b      	mov	r3, r5
  for (int b = 0; b < batches; ++b) {
 800f5ac:	2500      	movs	r5, #0
 800f5ae:	45a8      	cmp	r8, r5
 800f5b0:	dd7b      	ble.n	800f6aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
 800f5b2:	9f07      	ldr	r7, [sp, #28]
 800f5b4:	4691      	mov	r9, r2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800f5b6:	2100      	movs	r1, #0
 800f5b8:	42b1      	cmp	r1, r6
 800f5ba:	da2c      	bge.n	800f616 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 800f5bc:	46ba      	mov	sl, r7
 800f5be:	469b      	mov	fp, r3
      for (int d = 0; d < accum_depth; ++d) {
 800f5c0:	f04f 0c00 	mov.w	ip, #0
      float total = 0.f;
 800f5c4:	eddf 7a75 	vldr	s15, [pc, #468]	; 800f79c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ec>
      for (int d = 0; d < accum_depth; ++d) {
 800f5c8:	4560      	cmp	r0, ip
 800f5ca:	dd08      	ble.n	800f5de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12e>
        total += input_data[b * accum_depth + d] *
 800f5cc:	ecbb 6a01 	vldmia	fp!, {s12}
      for (int d = 0; d < accum_depth; ++d) {
 800f5d0:	f10c 0c01 	add.w	ip, ip, #1
                 weights_data[out_c * accum_depth + d];
 800f5d4:	ecba 7a01 	vldmia	sl!, {s14}
        total += input_data[b * accum_depth + d] *
 800f5d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f5dc:	e7f4      	b.n	800f5c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x118>
      if (bias_data) {
 800f5de:	b1bc      	cbz	r4, 800f610 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
        bias_value = bias_data[out_c];
 800f5e0:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
 800f5e4:	ed9c 7a00 	vldr	s14, [ip]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800f5e8:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800f5ec:	3101      	adds	r1, #1
 800f5ee:	4477      	add	r7, lr
	return __b;
 800f5f0:	eeb4 8a67 	vcmp.f32	s16, s15
 800f5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f8:	fe78 7a27 	vselgt.f32	s15, s16, s15
	return __b;
 800f5fc:	eef4 8a67 	vcmp.f32	s17, s15
 800f600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f604:	bf48      	it	mi
 800f606:	eef0 7a68 	vmovmi.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800f60a:	ece9 7a01 	vstmia	r9!, {s15}
 800f60e:	e7d3      	b.n	800f5b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x108>
      float bias_value = 0.0f;
 800f610:	eeb0 7a66 	vmov.f32	s14, s13
 800f614:	e7e8      	b.n	800f5e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x138>
 800f616:	9906      	ldr	r1, [sp, #24]
  for (int b = 0; b < batches; ++b) {
 800f618:	3501      	adds	r5, #1
 800f61a:	4473      	add	r3, lr
 800f61c:	440a      	add	r2, r1
 800f61e:	e7c6      	b.n	800f5ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
      switch (filter->type) {
 800f620:	7a38      	ldrb	r0, [r7, #8]
 800f622:	2809      	cmp	r0, #9
 800f624:	d048      	beq.n	800f6b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
 800f626:	2812      	cmp	r0, #18
 800f628:	f040 80a1 	bne.w	800f76e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800f62c:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800f630:	4648      	mov	r0, r9
 800f632:	f8d8 1020 	ldr.w	r1, [r8, #32]
 800f636:	4798      	blx	r3
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800f638:	4639      	mov	r1, r7
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800f63a:	4681      	mov	r9, r0
  return reinterpret_cast<const T*>(tensor->data.raw);
 800f63c:	f8d7 a000 	ldr.w	sl, [r7]
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800f640:	a896      	add	r0, sp, #600	; 0x258
 800f642:	f000 fb4e 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800f646:	a896      	add	r0, sp, #600	; 0x258
 800f648:	f7f7 ff7f 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f64c:	464a      	mov	r2, r9
 800f64e:	4601      	mov	r1, r0
 800f650:	4650      	mov	r0, sl
 800f652:	f7f8 fded 	bl	8008230 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
              FullyConnectedParamsQuantized(data),
 800f656:	4641      	mov	r1, r8
 800f658:	a882      	add	r0, sp, #520	; 0x208
 800f65a:	f000 f8a5 	bl	800f7a8 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
              tflite::micro::GetTensorShape(input),
 800f65e:	4629      	mov	r1, r5
 800f660:	a824      	add	r0, sp, #144	; 0x90
 800f662:	f000 fb3e 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f666:	f8d5 8000 	ldr.w	r8, [r5]
              tflite::micro::GetTensorShape(bias),
 800f66a:	ad32      	add	r5, sp, #200	; 0xc8
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800f66c:	4639      	mov	r1, r7
 800f66e:	a82b      	add	r0, sp, #172	; 0xac
 800f670:	f000 fb37 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800f674:	4621      	mov	r1, r4
 800f676:	4628      	mov	r0, r5
 800f678:	f000 fb33 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800f67c:	b104      	cbz	r4, 800f680 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
 800f67e:	6824      	ldr	r4, [r4, #0]
              tflite::micro::GetTensorShape(output),
 800f680:	af39      	add	r7, sp, #228	; 0xe4
 800f682:	4631      	mov	r1, r6
 800f684:	4638      	mov	r0, r7
 800f686:	f000 fb2c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800f68a:	2e00      	cmp	r6, #0
 800f68c:	f43f af1d 	beq.w	800f4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a>
          tflite::reference_integer_ops::FullyConnected(
 800f690:	6833      	ldr	r3, [r6, #0]
 800f692:	4642      	mov	r2, r8
 800f694:	a924      	add	r1, sp, #144	; 0x90
 800f696:	a882      	add	r0, sp, #520	; 0x208
 800f698:	f8cd 9000 	str.w	r9, [sp]
 800f69c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800f6a0:	ab2b      	add	r3, sp, #172	; 0xac
 800f6a2:	e9cd 5401 	strd	r5, r4, [sp, #4]
          tflite::reference_integer_ops::FullyConnected(
 800f6a6:	f7ff fe05 	bl	800f2b4 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
  return kTfLiteOk;
 800f6aa:	2000      	movs	r0, #0
}
 800f6ac:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 800f6b0:	ecbd 8b02 	vpop	{d8}
 800f6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              FullyConnectedParamsQuantized(data),
 800f6b8:	4641      	mov	r1, r8
 800f6ba:	a88c      	add	r0, sp, #560	; 0x230
 800f6bc:	f000 f874 	bl	800f7a8 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
              tflite::micro::GetTensorShape(input),
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	a840      	add	r0, sp, #256	; 0x100
 800f6c4:	f000 fb0d 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800f6c8:	f8d5 8000 	ldr.w	r8, [r5]
              tflite::micro::GetTensorShape(bias),
 800f6cc:	ad4e      	add	r5, sp, #312	; 0x138
              tflite::micro::GetTensorShape(filter),
 800f6ce:	4639      	mov	r1, r7
 800f6d0:	a847      	add	r0, sp, #284	; 0x11c
 800f6d2:	f000 fb06 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	4628      	mov	r0, r5
 800f6da:	f8d7 9000 	ldr.w	r9, [r7]
 800f6de:	f000 fb00 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800f6e2:	b104      	cbz	r4, 800f6e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
 800f6e4:	6824      	ldr	r4, [r4, #0]
              tflite::micro::GetTensorShape(output),
 800f6e6:	af55      	add	r7, sp, #340	; 0x154
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4638      	mov	r0, r7
 800f6ec:	f000 faf9 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800f6f0:	2e00      	cmp	r6, #0
 800f6f2:	f43f aeea 	beq.w	800f4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a>
          tflite::reference_integer_ops::FullyConnected(
 800f6f6:	6833      	ldr	r3, [r6, #0]
 800f6f8:	4642      	mov	r2, r8
 800f6fa:	f8cd 9000 	str.w	r9, [sp]
 800f6fe:	a940      	add	r1, sp, #256	; 0x100
 800f700:	a88c      	add	r0, sp, #560	; 0x230
 800f702:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800f706:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800f70a:	ab47      	add	r3, sp, #284	; 0x11c
 800f70c:	e7cb      	b.n	800f6a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
      switch (filter->type) {
 800f70e:	7a38      	ldrb	r0, [r7, #8]
 800f710:	2809      	cmp	r0, #9
 800f712:	d12c      	bne.n	800f76e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
              FullyConnectedParamsQuantized(data),
 800f714:	4641      	mov	r1, r8
 800f716:	a896      	add	r0, sp, #600	; 0x258
 800f718:	f000 f846 	bl	800f7a8 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
              tflite::micro::GetTensorShape(input),
 800f71c:	4629      	mov	r1, r5
 800f71e:	a85c      	add	r0, sp, #368	; 0x170
 800f720:	f000 fadf 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800f724:	f8d5 8000 	ldr.w	r8, [r5]
              tflite::micro::GetTensorShape(bias),
 800f728:	ad6a      	add	r5, sp, #424	; 0x1a8
              tflite::micro::GetTensorShape(filter),
 800f72a:	4639      	mov	r1, r7
 800f72c:	a863      	add	r0, sp, #396	; 0x18c
 800f72e:	f000 fad8 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800f732:	4621      	mov	r1, r4
 800f734:	4628      	mov	r0, r5
 800f736:	f8d7 9000 	ldr.w	r9, [r7]
 800f73a:	f000 fad2 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor == nullptr ? nullptr
 800f73e:	b104      	cbz	r4, 800f742 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
 800f740:	6824      	ldr	r4, [r4, #0]
              tflite::micro::GetTensorShape(output),
 800f742:	af71      	add	r7, sp, #452	; 0x1c4
 800f744:	4631      	mov	r1, r6
 800f746:	4638      	mov	r0, r7
 800f748:	f000 facb 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800f74c:	2e00      	cmp	r6, #0
 800f74e:	f43f aebc 	beq.w	800f4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a>
          tflite::reference_integer_ops::FullyConnected(
 800f752:	6833      	ldr	r3, [r6, #0]
 800f754:	4642      	mov	r2, r8
 800f756:	f8cd 9000 	str.w	r9, [sp]
 800f75a:	a95c      	add	r1, sp, #368	; 0x170
 800f75c:	a896      	add	r0, sp, #600	; 0x258
 800f75e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800f762:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800f766:	ab63      	add	r3, sp, #396	; 0x18c
 800f768:	f7ff fe20 	bl	800f3ac <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
 800f76c:	e79d      	b.n	800f6aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
          MicroPrintf("Filter type %s (%d) not supported.",
 800f76e:	f7f8 fc9f 	bl	80080b0 <TfLiteTypeGetName>
 800f772:	7a2a      	ldrb	r2, [r5, #8]
 800f774:	4601      	mov	r1, r0
 800f776:	480a      	ldr	r0, [pc, #40]	; (800f7a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
      MicroPrintf("Input type %s (%d) not supported.",
 800f778:	f7fb fa9e 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800f77c:	2001      	movs	r0, #1
 800f77e:	e795      	b.n	800f6ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fc>
      MicroPrintf("Input type %s (%d) not supported.",
 800f780:	f7f8 fc96 	bl	80080b0 <TfLiteTypeGetName>
 800f784:	7a2a      	ldrb	r2, [r5, #8]
 800f786:	4601      	mov	r1, r0
 800f788:	4806      	ldr	r0, [pc, #24]	; (800f7a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
 800f78a:	e7f5      	b.n	800f778 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
 800f78c:	080fc3d4 	.word	0x080fc3d4
 800f790:	080fc3dc 	.word	0x080fc3dc
 800f794:	080fc3d0 	.word	0x080fc3d0
 800f798:	080fc3d8 	.word	0x080fc3d8
 800f79c:	00000000 	.word	0x00000000
 800f7a0:	080fc31d 	.word	0x080fc31d
 800f7a4:	080fc186 	.word	0x080fc186

0800f7a8 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 800f7a8:	694a      	ldr	r2, [r1, #20]
 800f7aa:	4252      	negs	r2, r2
 800f7ac:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 800f7ae:	698a      	ldr	r2, [r1, #24]
 800f7b0:	4252      	negs	r2, r2
 800f7b2:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
 800f7b4:	69ca      	ldr	r2, [r1, #28]
 800f7b6:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 800f7b8:	680a      	ldr	r2, [r1, #0]
 800f7ba:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
 800f7bc:	684a      	ldr	r2, [r1, #4]
 800f7be:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 800f7c0:	688a      	ldr	r2, [r1, #8]
 800f7c2:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 800f7c4:	68ca      	ldr	r2, [r1, #12]
 800f7c6:	6182      	str	r2, [r0, #24]
  return op_params;
}
 800f7c8:	4770      	bx	lr
	...

0800f7cc <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  if (activation == kTfLiteActRelu) {
 800f7cc:	2901      	cmp	r1, #1
 800f7ce:	d103      	bne.n	800f7d8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0xc>
    *activation_min = 0;
 800f7d0:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
 800f7d2:	61c3      	str	r3, [r0, #28]
    *activation_max = std::numeric_limits<T>::max();
 800f7d4:	4b09      	ldr	r3, [pc, #36]	; (800f7fc <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x30>)
 800f7d6:	e004      	b.n	800f7e2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
  } else if (activation == kTfLiteActRelu6) {
 800f7d8:	2903      	cmp	r1, #3
 800f7da:	d104      	bne.n	800f7e6 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1a>
    *activation_min = 0;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	61c3      	str	r3, [r0, #28]
    *activation_max = 6;
 800f7e0:	4b07      	ldr	r3, [pc, #28]	; (800f800 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x34>)
    *activation_max = std::numeric_limits<T>::max();
 800f7e2:	6203      	str	r3, [r0, #32]
    TfLiteFusedActivation activation) {
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
 800f7e4:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
 800f7e6:	2902      	cmp	r1, #2
 800f7e8:	d104      	bne.n	800f7f4 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x28>
    *activation_min = -1;
 800f7ea:	4b06      	ldr	r3, [pc, #24]	; (800f804 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x38>)
 800f7ec:	61c3      	str	r3, [r0, #28]
    *activation_max = 1;
 800f7ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f7f2:	e7f6      	b.n	800f7e2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
 800f7f4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800f7f8:	e7eb      	b.n	800f7d2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x6>
 800f7fa:	bf00      	nop
 800f7fc:	7f7fffff 	.word	0x7f7fffff
 800f800:	40c00000 	.word	0x40c00000
 800f804:	bf800000 	.word	0xbf800000

0800f808 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:
TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
  if (data_type != kTfLiteFloat32) {
 800f808:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
 800f80a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f80e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800f812:	4681      	mov	r9, r0
 800f814:	468a      	mov	sl, r1
 800f816:	461f      	mov	r7, r3
 800f818:	e9dd 640e 	ldrd	r6, r4, [sp, #56]	; 0x38
  if (data_type != kTfLiteFloat32) {
 800f81c:	d02c      	beq.n	800f878 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x70>
    double real_multiplier = 0.0;
 800f81e:	ab04      	add	r3, sp, #16
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800f820:	4642      	mov	r2, r8
 800f822:	4639      	mov	r1, r7
    double real_multiplier = 0.0;
 800f824:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f880 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x78>
 800f828:	ed23 7b02 	vstmdb	r3!, {d7}
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800f82c:	e9cd 6300 	strd	r6, r3, [sp]
 800f830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f832:	f7f8 ff25 	bl	8008680 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800f836:	4605      	mov	r5, r0
 800f838:	b9d0      	cbnz	r0, 800f870 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800f83a:	1d21      	adds	r1, r4, #4
 800f83c:	4620      	mov	r0, r4
 800f83e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f842:	f7f8 fd11 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>

    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800f846:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f84a:	b10b      	cbz	r3, 800f850 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 800f84c:	f007 fa7a 	bl	8016d44 <abort>

    data->input_zero_point = input->params.zero_point;
 800f850:	693b      	ldr	r3, [r7, #16]
    data->filter_zero_point = filter->params.zero_point;
    data->output_zero_point = output->params.zero_point;

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 800f852:	4632      	mov	r2, r6
 800f854:	4651      	mov	r1, sl
 800f856:	4648      	mov	r0, r9
    data->filter_zero_point = filter->params.zero_point;
 800f858:	e9c4 3505 	strd	r3, r5, [r4, #20]
    data->output_zero_point = output->params.zero_point;
 800f85c:	6933      	ldr	r3, [r6, #16]
 800f85e:	61e3      	str	r3, [r4, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
 800f860:	f104 030c 	add.w	r3, r4, #12
                                             &data->output_activation_max);
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	f104 0308 	add.w	r3, r4, #8
 800f86a:	f7f8 ff67 	bl	800873c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800f86e:	4605      	mov	r5, r0
  }
  return kTfLiteOk;
}
 800f870:	4628      	mov	r0, r5
 800f872:	b004      	add	sp, #16
 800f874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return kTfLiteOk;
 800f878:	2500      	movs	r5, #0
 800f87a:	e7f9      	b.n	800f870 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
 800f87c:	f3af 8000 	nop.w
	...

0800f888 <_ZN6tflite12_GLOBAL__N_113HardSwishInitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {
namespace {
void* HardSwishInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800f888:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* HardSwishInit(TfLiteContext* context, const char* buffer, size_t length) {
 800f88a:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800f88c:	b90b      	cbnz	r3, 800f892 <_ZN6tflite12_GLOBAL__N_113HardSwishInitEP13TfLiteContextPKcj+0xa>
 800f88e:	f007 fa59 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(HardSwishParams));
 800f892:	2114      	movs	r1, #20
}
 800f894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(HardSwishParams));
 800f898:	4718      	bx	r3
	...

0800f89c <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>:

namespace tflite {
namespace reference_ops {

inline int16_t SaturatingLeftShift(int16_t value, int amount) {
  int64_t result = static_cast<int64_t>(value) * (1 << amount);
 800f89c:	2301      	movs	r3, #1
  result = std::min<int64_t>(result, std::numeric_limits<int16_t>::max());
  result = std::max<int64_t>(result, std::numeric_limits<int16_t>::min());
  return result;
 800f89e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  int64_t result = static_cast<int64_t>(value) * (1 << amount);
 800f8a2:	fa03 f101 	lsl.w	r1, r3, r1
  return result;
 800f8a6:	2300      	movs	r3, #0
  int64_t result = static_cast<int64_t>(value) * (1 << amount);
 800f8a8:	fb81 0100 	smull	r0, r1, r1, r0
  return result;
 800f8ac:	4282      	cmp	r2, r0
 800f8ae:	eb73 0c01 	sbcs.w	ip, r3, r1
 800f8b2:	bfb8      	it	lt
 800f8b4:	4610      	movlt	r0, r2
 800f8b6:	4a06      	ldr	r2, [pc, #24]	; (800f8d0 <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi+0x34>)
 800f8b8:	bfb8      	it	lt
 800f8ba:	4619      	movlt	r1, r3
 800f8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8c0:	4290      	cmp	r0, r2
 800f8c2:	eb71 0c03 	sbcs.w	ip, r1, r3
 800f8c6:	bfb8      	it	lt
 800f8c8:	4610      	movlt	r0, r2
}
 800f8ca:	b200      	sxth	r0, r0
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	ffff8000 	.word	0xffff8000

0800f8d4 <_ZN6tflite19Register_HARD_SWISHEv>:

}  // namespace

TFLMRegistration Register_HARD_SWISH() {
  return tflite::micro::RegisterOp(HardSwishInit, tflite::HardSwishPrepare,
                                   HardSwishEval);
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	4a06      	ldr	r2, [pc, #24]	; (800f8f0 <_ZN6tflite19Register_HARD_SWISHEv+0x1c>)
TFLMRegistration Register_HARD_SWISH() {
 800f8d8:	b513      	push	{r0, r1, r4, lr}
 800f8da:	4604      	mov	r4, r0
                                   HardSwishEval);
 800f8dc:	4905      	ldr	r1, [pc, #20]	; (800f8f4 <_ZN6tflite19Register_HARD_SWISHEv+0x20>)
 800f8de:	e9cd 3300 	strd	r3, r3, [sp]
 800f8e2:	4b05      	ldr	r3, [pc, #20]	; (800f8f8 <_ZN6tflite19Register_HARD_SWISHEv+0x24>)
 800f8e4:	f000 f9c6 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	b002      	add	sp, #8
 800f8ec:	bd10      	pop	{r4, pc}
 800f8ee:	bf00      	nop
 800f8f0:	0800fb09 	.word	0x0800fb09
 800f8f4:	0800f889 	.word	0x0800f889
 800f8f8:	0800f9f1 	.word	0x0800f9f1

0800f8fc <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>:
  assert(exponent >= 0);
 800f8fc:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800f8fe:	b508      	push	{r3, lr}
  assert(exponent >= 0);
 800f900:	da06      	bge.n	800f910 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x14>
 800f902:	4b0e      	ldr	r3, [pc, #56]	; (800f93c <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x40>)
 800f904:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800f908:	4a0d      	ldr	r2, [pc, #52]	; (800f940 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x44>)
  assert(exponent <= 31);
 800f90a:	480e      	ldr	r0, [pc, #56]	; (800f944 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x48>)
 800f90c:	f007 fa22 	bl	8016d54 <__assert_func>
 800f910:	291f      	cmp	r1, #31
 800f912:	dd04      	ble.n	800f91e <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x22>
 800f914:	4b0c      	ldr	r3, [pc, #48]	; (800f948 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x4c>)
 800f916:	f240 1167 	movw	r1, #359	; 0x167
 800f91a:	4a09      	ldr	r2, [pc, #36]	; (800f940 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x44>)
 800f91c:	e7f5      	b.n	800f90a <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800f91e:	2301      	movs	r3, #1
 800f920:	408b      	lsls	r3, r1
 800f922:	3b01      	subs	r3, #1
 800f924:	b21b      	sxth	r3, r3
  return a >> offset;
 800f926:	105a      	asrs	r2, r3, #1
  return a ? BitNot(zero) : zero;
 800f928:	4003      	ands	r3, r0
 800f92a:	eb02 72d0 	add.w	r2, r2, r0, lsr #31
  return a >> offset;
 800f92e:	4108      	asrs	r0, r1
  return a + b;
 800f930:	429a      	cmp	r2, r3
 800f932:	bfb8      	it	lt
 800f934:	3001      	addlt	r0, #1
}
 800f936:	b200      	sxth	r0, r0
 800f938:	bd08      	pop	{r3, pc}
 800f93a:	bf00      	nop
 800f93c:	080f9728 	.word	0x080f9728
 800f940:	080fc3f4 	.word	0x080fc3f4
 800f944:	080f9575 	.word	0x080f9575
 800f948:	080f9566 	.word	0x080f9566

0800f94c <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
        6;
  }
}

template <typename T>
inline void HardSwish(const HardSwishParams& params,
 800f94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f950:	4604      	mov	r4, r0
 800f952:	4608      	mov	r0, r1
                      const RuntimeShape& input_shape, const T* input_data,
                      const RuntimeShape& output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("ReferenceHardSwish/Quantized");

  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800f954:	4619      	mov	r1, r3
inline void HardSwish(const HardSwishParams& params,
 800f956:	4693      	mov	fp, r2

  for (int i = 0; i < flat_size; i++) {
 800f958:	2500      	movs	r5, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800f95a:	f7fb fa5f 	bl	800ae1c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
 800f95e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800f962:	4682      	mov	sl, r0
    output_value += params.output_zero_point;
    output_value =
        std::min<int16_t>(output_value, std::numeric_limits<T>::max());
    output_value =
        std::max<int16_t>(output_value, std::numeric_limits<T>::min());
    output_data[i] = output_value;
 800f964:	f06f 087f 	mvn.w	r8, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
 800f968:	4555      	cmp	r5, sl
 800f96a:	da3e      	bge.n	800f9ea <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x9e>
    const int16_t input_value = input_data[i] - params.input_zero_point;
 800f96c:	8822      	ldrh	r2, [r4, #0]
 800f96e:	f91b 3005 	ldrsb.w	r3, [fp, r5]
    const int16_t input_value_on_preshift_output_scale =
 800f972:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    const int16_t input_value = input_data[i] - params.input_zero_point;
 800f976:	1a9b      	subs	r3, r3, r2
    const int16_t input_value_on_hires_input_scale = input_value * (1 << 7);
 800f978:	01db      	lsls	r3, r3, #7
 800f97a:	b21b      	sxth	r3, r3
    const int16_t input_value_on_preshift_output_scale =
 800f97c:	4618      	mov	r0, r3
 800f97e:	9301      	str	r3, [sp, #4]
 800f980:	f7f8 fdd8 	bl	8008534 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
    if (params.reluish_multiplier_exponent > 0) {
 800f984:	68a7      	ldr	r7, [r4, #8]
    const int16_t input_value_on_preshift_output_scale =
 800f986:	4606      	mov	r6, r0
    if (params.reluish_multiplier_exponent > 0) {
 800f988:	9b01      	ldr	r3, [sp, #4]
 800f98a:	2f00      	cmp	r7, #0
 800f98c:	dd04      	ble.n	800f998 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x4c>
      reluish_value = SaturatingLeftShift(
 800f98e:	4618      	mov	r0, r3
 800f990:	1e79      	subs	r1, r7, #1
 800f992:	f7ff ff83 	bl	800f89c <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
 800f996:	4603      	mov	r3, r0
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
 800f998:	4618      	mov	r0, r3
 800f99a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f99e:	f7f8 fdc9 	bl	8008534 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
    if (params.reluish_multiplier_exponent > 0) {
 800f9a2:	2f00      	cmp	r7, #0
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
 800f9a4:	4603      	mov	r3, r0
    if (params.reluish_multiplier_exponent > 0) {
 800f9a6:	dd1b      	ble.n	800f9e0 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x94>
      reluish_value = SaturatingLeftShift(reluish_value, 1);
 800f9a8:	2101      	movs	r1, #1
 800f9aa:	f7ff ff77 	bl	800f89c <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
      reluish_value = gemmlowp::RoundingDivideByPOT(
 800f9ae:	4603      	mov	r3, r0
    reluish_value = (reluish_value + (1 << 15)) >> 1;
 800f9b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
 800f9b4:	6921      	ldr	r1, [r4, #16]
    reluish_value = (reluish_value + (1 << 15)) >> 1;
 800f9b6:	105b      	asrs	r3, r3, #1
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
 800f9b8:	4249      	negs	r1, r1
  std::int32_t ab_32 = a_32 * b_32;
 800f9ba:	4373      	muls	r3, r6
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
 800f9bc:	fb93 f0f9 	sdiv	r0, r3, r9
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
 800f9c0:	b200      	sxth	r0, r0
 800f9c2:	f7ff ff9b 	bl	800f8fc <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
    output_value += params.output_zero_point;
 800f9c6:	8863      	ldrh	r3, [r4, #2]
    output_data[i] = output_value;
 800f9c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    output_value += params.output_zero_point;
 800f9ca:	4403      	add	r3, r0
    output_data[i] = output_value;
 800f9cc:	b21b      	sxth	r3, r3
 800f9ce:	2b7f      	cmp	r3, #127	; 0x7f
 800f9d0:	bfa8      	it	ge
 800f9d2:	237f      	movge	r3, #127	; 0x7f
 800f9d4:	4543      	cmp	r3, r8
 800f9d6:	bfb8      	it	lt
 800f9d8:	4643      	movlt	r3, r8
 800f9da:	5553      	strb	r3, [r2, r5]
  for (int i = 0; i < flat_size; i++) {
 800f9dc:	3501      	adds	r5, #1
 800f9de:	e7c3      	b.n	800f968 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    if (params.reluish_multiplier_exponent < 0) {
 800f9e0:	d0e6      	beq.n	800f9b0 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x64>
      reluish_value = gemmlowp::RoundingDivideByPOT(
 800f9e2:	4279      	negs	r1, r7
 800f9e4:	f7ff ff8a 	bl	800f8fc <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
 800f9e8:	e7e1      	b.n	800f9ae <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x62>
  }
}
 800f9ea:	b003      	add	sp, #12
 800f9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9f0 <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode>:
      tflite::micro::GetEvalInput(context, node, kHardSwishInputTensor);
 800f9f0:	4b33      	ldr	r3, [pc, #204]	; (800fac0 <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xd0>)
TfLiteStatus HardSwishEval(TfLiteContext* context, TfLiteNode* node) {
 800f9f2:	b570      	push	{r4, r5, r6, lr}
      tflite::micro::GetEvalInput(context, node, kHardSwishInputTensor);
 800f9f4:	681a      	ldr	r2, [r3, #0]
TfLiteStatus HardSwishEval(TfLiteContext* context, TfLiteNode* node) {
 800f9f6:	b09e      	sub	sp, #120	; 0x78
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kHardSwishInputTensor);
 800f9fc:	f000 f961 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kHardSwishOutputTensor);
 800fa00:	4b30      	ldr	r3, [pc, #192]	; (800fac4 <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xd4>)
      tflite::micro::GetEvalInput(context, node, kHardSwishInputTensor);
 800fa02:	4605      	mov	r5, r0
      tflite::micro::GetEvalOutput(context, node, kHardSwishOutputTensor);
 800fa04:	4631      	mov	r1, r6
 800fa06:	4620      	mov	r0, r4
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	f000 f95c 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800fa0e:	4604      	mov	r4, r0
  switch (input->type) {
 800fa10:	7a28      	ldrb	r0, [r5, #8]
 800fa12:	2801      	cmp	r0, #1
 800fa14:	d009      	beq.n	800fa2a <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x3a>
 800fa16:	2809      	cmp	r0, #9
 800fa18:	d03b      	beq.n	800fa92 <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xa2>
      MicroPrintf("Unsupported type %s", TfLiteTypeGetName(input->type));
 800fa1a:	f7f8 fb49 	bl	80080b0 <TfLiteTypeGetName>
 800fa1e:	4601      	mov	r1, r0
 800fa20:	4829      	ldr	r0, [pc, #164]	; (800fac8 <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 800fa22:	f7fb f949 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800fa26:	2001      	movs	r0, #1
 800fa28:	e048      	b.n	800fabc <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xcc>
          tflite::micro::GetTensorShape(input),
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	a802      	add	r0, sp, #8
 800fa2e:	f000 f958 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 800fa32:	4621      	mov	r1, r4
 800fa34:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
 800fa36:	682d      	ldr	r5, [r5, #0]
 800fa38:	f000 f953 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800fa3c:	b90c      	cbnz	r4, 800fa42 <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x52>
 800fa3e:	f007 f981 	bl	8016d44 <abort>
  auto matching_size = MatchingFlatSize(input_shape, output_shape);
 800fa42:	a909      	add	r1, sp, #36	; 0x24
 800fa44:	a802      	add	r0, sp, #8
 800fa46:	f7fb f9e9 	bl	800ae1c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
        in * std::min(static_cast<T>(6), std::max(static_cast<T>(0), in + 3)) /
 800fa4a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800fa4e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
  return reinterpret_cast<T*>(tensor->data.raw);
 800fa52:	6824      	ldr	r4, [r4, #0]
  const T* in_end = input_data + matching_size;
 800fa54:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800fa58:	462b      	mov	r3, r5
  for (; input_data < in_end; input_data++, output_data++) {
 800fa5a:	4298      	cmp	r0, r3
 800fa5c:	d92d      	bls.n	800faba <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xca>
    const float in = *input_data;
 800fa5e:	ecb3 7a01 	vldmia	r3!, {s14}
        in * std::min(static_cast<T>(6), std::max(static_cast<T>(0), in + 3)) /
 800fa62:	ee77 7a06 	vadd.f32	s15, s14, s12
      if (__a < __b)
 800fa66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6e:	dd0d      	ble.n	800fa8c <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x9c>
      return __a;
 800fa70:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fa74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa78:	bf58      	it	pl
 800fa7a:	eef0 7a66 	vmovpl.f32	s15, s13
 800fa7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    *output_data =
 800fa86:	eca4 7a01 	vstmia	r4!, {s14}
 800fa8a:	e7e6      	b.n	800fa5a <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x6a>
      return __a;
 800fa8c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800facc <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xdc>
 800fa90:	e7f5      	b.n	800fa7e <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x8e>
          *params, tflite::micro::GetTensorShape(input),
 800fa92:	4629      	mov	r1, r5
 800fa94:	a810      	add	r0, sp, #64	; 0x40
  HardSwishParams* params = static_cast<HardSwishParams*>(node->user_data);
 800fa96:	6936      	ldr	r6, [r6, #16]
          *params, tflite::micro::GetTensorShape(input),
 800fa98:	f000 f923 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	a817      	add	r0, sp, #92	; 0x5c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800faa0:	682d      	ldr	r5, [r5, #0]
 800faa2:	f000 f91e 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800faa6:	2c00      	cmp	r4, #0
 800faa8:	d0c9      	beq.n	800fa3e <_ZN6tflite12_GLOBAL__N_113HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x4e>
      tflite::reference_ops::HardSwish<int8_t>(
 800faaa:	6823      	ldr	r3, [r4, #0]
 800faac:	462a      	mov	r2, r5
 800faae:	a910      	add	r1, sp, #64	; 0x40
 800fab0:	4630      	mov	r0, r6
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	ab17      	add	r3, sp, #92	; 0x5c
 800fab6:	f7ff ff49 	bl	800f94c <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
  return kTfLiteOk;
 800faba:	2000      	movs	r0, #0
}
 800fabc:	b01e      	add	sp, #120	; 0x78
 800fabe:	bd70      	pop	{r4, r5, r6, pc}
 800fac0:	080fc4dc 	.word	0x080fc4dc
 800fac4:	080fc4e0 	.word	0x080fc4e0
 800fac8:	080fc3e0 	.word	0x080fc3e0
 800facc:	00000000 	.word	0x00000000

0800fad0 <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs>:
  TFLITE_DCHECK_GE(multiplier_int32_t, 0);
 800fad0:	2800      	cmp	r0, #0
                                            int16_t* multiplier_int16_t) {
 800fad2:	b510      	push	{r4, lr}
  TFLITE_DCHECK_GE(multiplier_int32_t, 0);
 800fad4:	da01      	bge.n	800fada <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs+0xa>
 800fad6:	f007 f935 	bl	8016d44 <abort>
  if (multiplier_int32_t >=
 800fada:	4b0a      	ldr	r3, [pc, #40]	; (800fb04 <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs+0x34>)
 800fadc:	4298      	cmp	r0, r3
 800fade:	dd03      	ble.n	800fae8 <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs+0x18>
    *multiplier_int16_t = std::numeric_limits<int16_t>::max();
 800fae0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800fae4:	800b      	strh	r3, [r1, #0]
}
 800fae6:	bd10      	pop	{r4, pc}
  const int32_t result = (multiplier_int32_t + kRoundingOffset) >> 16;
 800fae8:	f500 4200 	add.w	r2, r0, #32768	; 0x8000
  TFLITE_DCHECK_LE(result << 16, multiplier_int32_t + kRoundingOffset);
 800faec:	0c13      	lsrs	r3, r2, #16
  const int32_t result = (multiplier_int32_t + kRoundingOffset) >> 16;
 800faee:	1414      	asrs	r4, r2, #16
  TFLITE_DCHECK_LE(result << 16, multiplier_int32_t + kRoundingOffset);
 800faf0:	041b      	lsls	r3, r3, #16
 800faf2:	429a      	cmp	r2, r3
 800faf4:	dbef      	blt.n	800fad6 <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs+0x6>
  TFLITE_DCHECK_GT(result << 16, multiplier_int32_t - kRoundingOffset);
 800faf6:	f5a0 40ff 	sub.w	r0, r0, #32640	; 0x7f80
 800fafa:	387f      	subs	r0, #127	; 0x7f
 800fafc:	4283      	cmp	r3, r0
 800fafe:	dbea      	blt.n	800fad6 <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs+0x6>
  *multiplier_int16_t = result;
 800fb00:	800c      	strh	r4, [r1, #0]
 800fb02:	e7f0      	b.n	800fae6 <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs+0x16>
 800fb04:	7fff7ffe 	.word	0x7fff7ffe

0800fb08 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode>:
const int kHardSwishOutputTensor = 0;

TfLiteStatus HardSwishPrepare(TfLiteContext* context, TfLiteNode* node) {
  MicroContext* micro_context = GetMicroContext(context);

  TFLITE_DCHECK(node->user_data != nullptr);
 800fb08:	690b      	ldr	r3, [r1, #16]
TfLiteStatus HardSwishPrepare(TfLiteContext* context, TfLiteNode* node) {
 800fb0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb0e:	4605      	mov	r5, r0
 800fb10:	460e      	mov	r6, r1
 800fb12:	ed2d 8b02 	vpush	{d8}
 800fb16:	b086      	sub	sp, #24
  TFLITE_DCHECK(node->user_data != nullptr);
 800fb18:	b90b      	cbnz	r3, 800fb1e <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800fb1a:	f007 f913 	bl	8016d44 <abort>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800fb1e:	680b      	ldr	r3, [r1, #0]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800fb20:	b113      	cbz	r3, 800fb28 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x20>
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	2a01      	cmp	r2, #1
 800fb26:	d014      	beq.n	800fb52 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 800fb28:	696e      	ldr	r6, [r5, #20]
 800fb2a:	b103      	cbz	r3, 800fb2e <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2401      	movs	r4, #1
 800fb30:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fb34:	4b44      	ldr	r3, [pc, #272]	; (800fc48 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x140>)
 800fb36:	9301      	str	r3, [sp, #4]
 800fb38:	4b44      	ldr	r3, [pc, #272]	; (800fc4c <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	2326      	movs	r3, #38	; 0x26
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800fb3e:	4a44      	ldr	r2, [pc, #272]	; (800fc50 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800fb40:	4628      	mov	r0, r5
 800fb42:	4944      	ldr	r1, [pc, #272]	; (800fc54 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800fb44:	47b0      	blx	r6

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
 800fb46:	4620      	mov	r0, r4
 800fb48:	b006      	add	sp, #24
 800fb4a:	ecbd 8b02 	vpop	{d8}
 800fb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800fb52:	684b      	ldr	r3, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 800fb54:	b113      	cbz	r3, 800fb5c <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x54>
 800fb56:	681c      	ldr	r4, [r3, #0]
 800fb58:	2c01      	cmp	r4, #1
 800fb5a:	d00b      	beq.n	800fb74 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 800fb5c:	696e      	ldr	r6, [r5, #20]
 800fb5e:	b103      	cbz	r3, 800fb62 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	2401      	movs	r4, #1
 800fb64:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fb68:	4b37      	ldr	r3, [pc, #220]	; (800fc48 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x140>)
 800fb6a:	9301      	str	r3, [sp, #4]
 800fb6c:	4b3a      	ldr	r3, [pc, #232]	; (800fc58 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 800fb6e:	9300      	str	r3, [sp, #0]
 800fb70:	2327      	movs	r3, #39	; 0x27
 800fb72:	e7e4      	b.n	800fb3e <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x36>
  MicroContext* micro_context = GetMicroContext(context);
 800fb74:	68c7      	ldr	r7, [r0, #12]
      micro_context->AllocateTempInputTensor(node, kHardSwishInputTensor);
 800fb76:	2200      	movs	r2, #0
 800fb78:	4638      	mov	r0, r7
 800fb7a:	f7fa fa7b 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800fb7e:	4680      	mov	r8, r0
 800fb80:	b940      	cbnz	r0, 800fb94 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x8c>
 800fb82:	4b36      	ldr	r3, [pc, #216]	; (800fc5c <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800fb84:	696e      	ldr	r6, [r5, #20]
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	232b      	movs	r3, #43	; 0x2b
    TF_LITE_ENSURE(context, params->output_multiplier_exponent <= 0);
 800fb8a:	4a31      	ldr	r2, [pc, #196]	; (800fc50 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	4934      	ldr	r1, [pc, #208]	; (800fc60 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800fb90:	47b0      	blx	r6
 800fb92:	e7d8      	b.n	800fb46 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
      micro_context->AllocateTempOutputTensor(node, kHardSwishOutputTensor);
 800fb94:	2200      	movs	r2, #0
 800fb96:	4631      	mov	r1, r6
 800fb98:	4638      	mov	r0, r7
 800fb9a:	f7fa fa80 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800fb9e:	4681      	mov	r9, r0
 800fba0:	b920      	cbnz	r0, 800fbac <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xa4>
 800fba2:	4b30      	ldr	r3, [pc, #192]	; (800fc64 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 800fba4:	696e      	ldr	r6, [r5, #20]
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	232e      	movs	r3, #46	; 0x2e
 800fbaa:	e7ee      	b.n	800fb8a <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x82>
  if (input->type == kTfLiteInt8) {
 800fbac:	f898 3000 	ldrb.w	r3, [r8]
 800fbb0:	2b09      	cmp	r3, #9
 800fbb2:	d13c      	bne.n	800fc2e <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x126>
    const float hires_input_scale = (1.0f / 128.0f) * input_scale;
 800fbb4:	ed98 8a03 	vldr	s16, [r8, #12]
 800fbb8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fc68 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x160>
    HardSwishParams* params = static_cast<HardSwishParams*>(node->user_data);
 800fbbc:	6936      	ldr	r6, [r6, #16]
    const float hires_input_scale = (1.0f / 128.0f) * input_scale;
 800fbbe:	ee28 8a27 	vmul.f32	s16, s16, s15
        static_cast<double>(hires_input_scale / output_scale);
 800fbc2:	edd0 7a03 	vldr	s15, [r0, #12]
    params->input_zero_point = input->params.zero_point;
 800fbc6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    QuantizeMultiplier(output_multiplier, &output_multiplier_fixedpoint_int32,
 800fbca:	f106 0a10 	add.w	sl, r6, #16
    const double output_multiplier =
 800fbce:	eec8 7a27 	vdiv.f32	s15, s16, s15
    params->input_zero_point = input->params.zero_point;
 800fbd2:	8033      	strh	r3, [r6, #0]
    params->output_zero_point = output->params.zero_point;
 800fbd4:	6903      	ldr	r3, [r0, #16]
 800fbd6:	8073      	strh	r3, [r6, #2]
    const double output_multiplier =
 800fbd8:	ee17 0a90 	vmov	r0, s15
 800fbdc:	f7f0 fcd6 	bl	800058c <__aeabi_f2d>
 800fbe0:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(output_multiplier, &output_multiplier_fixedpoint_int32,
 800fbe4:	4651      	mov	r1, sl
 800fbe6:	a804      	add	r0, sp, #16
 800fbe8:	f7f8 fb3e 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    DownScaleInt32ToInt16Multiplier(
 800fbec:	f106 010c 	add.w	r1, r6, #12
 800fbf0:	9804      	ldr	r0, [sp, #16]
 800fbf2:	f7ff ff6d 	bl	800fad0 <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs>
    TF_LITE_ENSURE(context, params->output_multiplier_exponent <= 0);
 800fbf6:	6933      	ldr	r3, [r6, #16]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	dd04      	ble.n	800fc06 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 800fbfc:	4b1b      	ldr	r3, [pc, #108]	; (800fc6c <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 800fbfe:	696e      	ldr	r6, [r5, #20]
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	2344      	movs	r3, #68	; 0x44
 800fc04:	e7c1      	b.n	800fb8a <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x82>
    const double reluish_multiplier =
 800fc06:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800fc70 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,
 800fc0a:	f106 0408 	add.w	r4, r6, #8
    const double reluish_multiplier =
 800fc0e:	eec8 7a27 	vdiv.f32	s15, s16, s15
 800fc12:	ee17 0a90 	vmov	r0, s15
 800fc16:	f7f0 fcb9 	bl	800058c <__aeabi_f2d>
 800fc1a:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,
 800fc1e:	4621      	mov	r1, r4
 800fc20:	a805      	add	r0, sp, #20
 800fc22:	f7f8 fb21 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    DownScaleInt32ToInt16Multiplier(
 800fc26:	1d31      	adds	r1, r6, #4
 800fc28:	9805      	ldr	r0, [sp, #20]
 800fc2a:	f7ff ff51 	bl	800fad0 <_ZN6tflite31DownScaleInt32ToInt16MultiplierElPs>
  micro_context->DeallocateTempTfLiteTensor(input);
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	4641      	mov	r1, r8
 800fc32:	4638      	mov	r0, r7
  return kTfLiteOk;
 800fc34:	2400      	movs	r4, #0
  micro_context->DeallocateTempTfLiteTensor(input);
 800fc36:	699b      	ldr	r3, [r3, #24]
 800fc38:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	4649      	mov	r1, r9
 800fc3e:	4638      	mov	r0, r7
 800fc40:	699b      	ldr	r3, [r3, #24]
 800fc42:	4798      	blx	r3
  return kTfLiteOk;
 800fc44:	e77f      	b.n	800fb46 <_ZN6tflite16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
 800fc46:	bf00      	nop
 800fc48:	080fca44 	.word	0x080fca44
 800fc4c:	080fc490 	.word	0x080fc490
 800fc50:	080fc44f 	.word	0x080fc44f
 800fc54:	080f982c 	.word	0x080f982c
 800fc58:	080fc4a0 	.word	0x080fc4a0
 800fc5c:	080fbed7 	.word	0x080fbed7
 800fc60:	080f93a5 	.word	0x080f93a5
 800fc64:	080fbcfa 	.word	0x080fbcfa
 800fc68:	3c000000 	.word	0x3c000000
 800fc6c:	080fc4b1 	.word	0x080fc4b1
 800fc70:	38c00000 	.word	0x38c00000

0800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>:
TFLMRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer),
    void (*reset)(TfLiteContext* context, void* buffer)) {
 800fc74:	b510      	push	{r4, lr}
          /*free=*/free,
          /*prepare=*/prepare,
          /*invoke=*/invoke,
          /*reset*/ reset,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr};
 800fc76:	60c3      	str	r3, [r0, #12]
 800fc78:	9b03      	ldr	r3, [sp, #12]
 800fc7a:	6001      	str	r1, [r0, #0]
 800fc7c:	6103      	str	r3, [r0, #16]
 800fc7e:	2300      	movs	r3, #0
 800fc80:	9902      	ldr	r1, [sp, #8]
 800fc82:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800fc86:	e9c0 1201 	strd	r1, r2, [r0, #4]
}
 800fc8a:	bd10      	pop	{r4, pc}

0800fc8c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 800fc8c:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(context != nullptr);
 800fc8e:	b908      	cbnz	r0, 800fc94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 800fc90:	f007 f858 	bl	8016d44 <abort>
  TFLITE_DCHECK(node != nullptr);
 800fc94:	2900      	cmp	r1, #0
 800fc96:	d0fb      	beq.n	800fc90 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800fc98:	680b      	ldr	r3, [r1, #0]
  if (index >= 0 && index < max_size) {
 800fc9a:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	f851 5b04 	ldr.w	r5, [r1], #4
  if (index >= 0 && index < max_size) {
 800fca2:	db0c      	blt.n	800fcbe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
 800fca4:	4295      	cmp	r5, r2
 800fca6:	dd0a      	ble.n	800fcbe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>

  if (tensor_index < 0) {
 800fca8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fcac:	2900      	cmp	r1, #0
 800fcae:	db06      	blt.n	800fcbe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    return nullptr;
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 800fcb0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800fcb4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800fcb6:	6859      	ldr	r1, [r3, #4]
}
 800fcb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800fcbc:	4710      	bx	r2
}
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	bd70      	pop	{r4, r5, r6, pc}

0800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
 800fcc2:	f7ff bfe3 	b.w	800fc8c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>

0800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 800fcc6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 800fcc8:	b908      	cbnz	r0, 800fcce <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 800fcca:	f007 f83b 	bl	8016d44 <abort>
  TFLITE_DCHECK(node != nullptr);
 800fcce:	2900      	cmp	r1, #0
 800fcd0:	d0fb      	beq.n	800fcca <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800fcd2:	684b      	ldr	r3, [r1, #4]
 800fcd4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800fcd8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800fcda:	6851      	ldr	r1, [r2, #4]
}
 800fcdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800fce0:	4718      	bx	r3

0800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800fce2:	b510      	push	{r4, lr}
 800fce4:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 800fce6:	b109      	cbz	r1, 800fcec <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
 800fce8:	6849      	ldr	r1, [r1, #4]
 800fcea:	b919      	cbnz	r1, 800fcf4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
 800fcec:	2300      	movs	r3, #0
 800fcee:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
 800fcf4:	f851 2b04 	ldr.w	r2, [r1], #4
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800fcf8:	2a06      	cmp	r2, #6
      : size_(dimensions_count) {
 800fcfa:	6002      	str	r2, [r0, #0]
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800fcfc:	dd01      	ble.n	800fd02 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
 800fcfe:	f007 f821 	bl	8016d44 <abort>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800fd02:	0092      	lsls	r2, r2, #2
 800fd04:	3004      	adds	r0, #4
 800fd06:	f007 f8a4 	bl	8016e52 <memcpy>
 800fd0a:	e7f1      	b.n	800fcf0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>

0800fd0c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
 800fd0c:	2801      	cmp	r0, #1
 800fd0e:	d003      	beq.n	800fd18 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xc>
 800fd10:	2802      	cmp	r0, #2
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 800fd12:	bf0c      	ite	eq
 800fd14:	2002      	moveq	r0, #2
 800fd16:	2000      	movne	r0, #0
  }
}
 800fd18:	4770      	bx	lr
	...

0800fd1c <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor>:
// The old dims data is copied to the new storage area.
// The tensor and eval_tensor must be the same tensor.
// Only use during Prepare phase.
TfLiteStatus CreateWritableTensorDimsWithCopy(TfLiteContext* context,
                                              TfLiteTensor* tensor,
                                              TfLiteEvalTensor* eval_tensor) {
 800fd1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd1e:	4604      	mov	r4, r0
 800fd20:	4617      	mov	r7, r2
  TF_LITE_ENSURE(context, tensor != nullptr);
 800fd22:	460d      	mov	r5, r1
 800fd24:	b949      	cbnz	r1, 800fd3a <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x1e>
 800fd26:	4b18      	ldr	r3, [pc, #96]	; (800fd88 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x6c>)
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	2383      	movs	r3, #131	; 0x83
 800fd2c:	6944      	ldr	r4, [r0, #20]
  TF_LITE_ENSURE(context, eval_tensor != nullptr);
 800fd2e:	4a17      	ldr	r2, [pc, #92]	; (800fd8c <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x70>)
 800fd30:	4917      	ldr	r1, [pc, #92]	; (800fd90 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x74>)
 800fd32:	47a0      	blx	r4
 800fd34:	2001      	movs	r0, #1
  for (int i = 0; i < ranks; i++) {
    new_dims->data[i] = old_dims->data[i];
  }

  return kTfLiteOk;
}
 800fd36:	b003      	add	sp, #12
 800fd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(context, eval_tensor != nullptr);
 800fd3a:	b922      	cbnz	r2, 800fd46 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x2a>
 800fd3c:	4b15      	ldr	r3, [pc, #84]	; (800fd94 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x78>)
 800fd3e:	9300      	str	r3, [sp, #0]
 800fd40:	2384      	movs	r3, #132	; 0x84
 800fd42:	6944      	ldr	r4, [r0, #20]
 800fd44:	e7f3      	b.n	800fd2e <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x12>
  TF_LITE_ENSURE(context, context->AllocatePersistentBuffer != nullptr);
 800fd46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fd48:	b923      	cbnz	r3, 800fd54 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x38>
 800fd4a:	4b13      	ldr	r3, [pc, #76]	; (800fd98 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x7c>)
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	2385      	movs	r3, #133	; 0x85
 800fd50:	6944      	ldr	r4, [r0, #20]
 800fd52:	e7ec      	b.n	800fd2e <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x12>
  int ranks = tensor->dims->size;
 800fd54:	688b      	ldr	r3, [r1, #8]
 800fd56:	681e      	ldr	r6, [r3, #0]
  size_t alloc_size = TfLiteIntArrayGetSizeInBytes(ranks);
 800fd58:	4630      	mov	r0, r6
 800fd5a:	f7f8 f98f 	bl	800807c <TfLiteIntArrayGetSizeInBytes>
      context->AllocatePersistentBuffer(context, alloc_size));
 800fd5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fd60:	4601      	mov	r1, r0
 800fd62:	4620      	mov	r0, r4
 800fd64:	4798      	blx	r3
  eval_tensor->dims = new_dims;
 800fd66:	2300      	movs	r3, #0
  TfLiteIntArray* old_dims = tensor->dims;
 800fd68:	68a9      	ldr	r1, [r5, #8]
  new_dims->size = ranks;
 800fd6a:	6006      	str	r6, [r0, #0]
  tensor->dims = new_dims;
 800fd6c:	60a8      	str	r0, [r5, #8]
  eval_tensor->dims = new_dims;
 800fd6e:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < ranks; i++) {
 800fd70:	429e      	cmp	r6, r3
 800fd72:	f103 0201 	add.w	r2, r3, #1
 800fd76:	dd05      	ble.n	800fd84 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x68>
    new_dims->data[i] = old_dims->data[i];
 800fd78:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800fd7c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  for (int i = 0; i < ranks; i++) {
 800fd80:	4613      	mov	r3, r2
 800fd82:	e7f5      	b.n	800fd70 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x54>
  return kTfLiteOk;
 800fd84:	2000      	movs	r0, #0
 800fd86:	e7d6      	b.n	800fd36 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x1a>
 800fd88:	080fc524 	.word	0x080fc524
 800fd8c:	080fc4e4 	.word	0x080fc4e4
 800fd90:	080f93a5 	.word	0x080f93a5
 800fd94:	080fc51f 	.word	0x080fc51f
 800fd98:	080fc536 	.word	0x080fc536

0800fd9c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
 800fd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fda0:	4605      	mov	r5, r0
 800fda2:	460e      	mov	r6, r1
 800fda4:	4690      	mov	r8, r2
  const int dims_count = shape.DimensionsCount();
 800fda6:	6807      	ldr	r7, [r0, #0]
  for (int i = 0; i < dims_count; ++i) {
 800fda8:	2400      	movs	r4, #0
 800fdaa:	42bc      	cmp	r4, r7
 800fdac:	da10      	bge.n	800fdd0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
 800fdae:	42b4      	cmp	r4, r6
 800fdb0:	d00c      	beq.n	800fdcc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800fdb2:	4621      	mov	r1, r4
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	f7f7 fbbc 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fdba:	4681      	mov	r9, r0
 800fdbc:	4621      	mov	r1, r4
 800fdbe:	4640      	mov	r0, r8
 800fdc0:	f7f7 fbb7 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fdc4:	4581      	cmp	r9, r0
 800fdc6:	d001      	beq.n	800fdcc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
 800fdc8:	f006 ffbc 	bl	8016d44 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800fdcc:	3401      	adds	r4, #1
 800fdce:	e7ec      	b.n	800fdaa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800fdd0:	2e00      	cmp	r6, #0
 800fdd2:	dbf9      	blt.n	800fdc8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
 800fdd4:	42be      	cmp	r6, r7
 800fdd6:	daf7      	bge.n	800fdc8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
  const int32_t* DimsData() const { return dims_; }
 800fdd8:	3504      	adds	r5, #4
  int flat_size = 1;
 800fdda:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
 800fddc:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800fdde:	429e      	cmp	r6, r3
 800fde0:	bf18      	it	ne
 800fde2:	f855 2023 	ldrne.w	r2, [r5, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800fde6:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800fdea:	bf08      	it	eq
 800fdec:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
 800fdee:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800fdf0:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
 800fdf4:	dcf3      	bgt.n	800fdde <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x42>
}
 800fdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800fdfa:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	f7f8 fbb5 	bl	800856c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
}
 800fe02:	bd08      	pop	{r3, pc}

0800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800fe04:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800fe06:	f7f8 fb6d 	bl	80084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
}
 800fe0a:	bd08      	pop	{r3, pc}

0800fe0c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800fe0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe10:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800fe12:	4814      	ldr	r0, [pc, #80]	; (800fe64 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x58>)
 800fe14:	f7ff fff1 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fe18:	4606      	mov	r6, r0
  return a + b;
 800fe1a:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800fe1e:	4812      	ldr	r0, [pc, #72]	; (800fe68 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x5c>)
 800fe20:	f7ff ffeb 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fe24:	4680      	mov	r8, r0
  F x2 = x * x;
 800fe26:	4621      	mov	r1, r4
 800fe28:	4620      	mov	r0, r4
 800fe2a:	f7ff ffeb 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fe2e:	4605      	mov	r5, r0
  F x3 = x2 * x;
 800fe30:	4621      	mov	r1, r4
 800fe32:	f7ff ffe7 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
 800fe36:	4629      	mov	r1, r5
  F x3 = x2 * x;
 800fe38:	4607      	mov	r7, r0
  F x4 = x2 * x2;
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	f7ff ffe2 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800fe40:	2102      	movs	r1, #2
 800fe42:	f7f8 fb93 	bl	800856c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
 800fe46:	4641      	mov	r1, r8
 800fe48:	4438      	add	r0, r7
 800fe4a:	f7ff ffdb 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800fe4e:	2101      	movs	r1, #1
 800fe50:	4428      	add	r0, r5
 800fe52:	f7f8 fb8b 	bl	800856c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
  return AddSaturatingIf16Bit(
 800fe56:	1821      	adds	r1, r4, r0
 800fe58:	4630      	mov	r0, r6
 800fe5a:	f7ff ffd3 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
 800fe5e:	4430      	add	r0, r6
 800fe60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe64:	70f5a894 	.word	0x70f5a894
 800fe68:	2aaaaaab 	.word	0x2aaaaaab

0800fe6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800fe6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe70:	4605      	mov	r5, r0
  return a - b;
 800fe72:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800fe76:	0160      	lsls	r0, r4, #5
  return a - b;
 800fe78:	1b64      	subs	r4, r4, r5
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800fe7a:	f7ff ffc7 	bl	800fe0c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800fe7e:	4681      	mov	r9, r0
  return a ? BitNot(zero) : zero;
 800fe80:	f3c4 6700 	ubfx	r7, r4, #24, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800fe84:	4840      	ldr	r0, [pc, #256]	; (800ff88 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
 800fe86:	f7ff ffb8 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fe8a:	4601      	mov	r1, r0
  return a ? BitNot(zero) : zero;
 800fe8c:	f1c7 0800 	rsb	r8, r7, #0
  return a & b;
 800fe90:	3f01      	subs	r7, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800fe92:	4648      	mov	r0, r9
  return a ? BitNot(zero) : zero;
 800fe94:	f3c4 7600 	ubfx	r6, r4, #28, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800fe98:	f7ff ffb4 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a & b;
 800fe9c:	ea07 0709 	and.w	r7, r7, r9
 800fea0:	ea00 0808 	and.w	r8, r0, r8
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 800fea4:	4839      	ldr	r0, [pc, #228]	; (800ff8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
 800fea6:	f7ff ffa8 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800feaa:	4601      	mov	r1, r0
  return a ^ b;
 800feac:	ea88 0707 	eor.w	r7, r8, r7
  return a ? BitNot(zero) : zero;
 800feb0:	f3c4 6840 	ubfx	r8, r4, #25, #1
 800feb4:	f1c8 0900 	rsb	r9, r8, #0
  return a & b;
 800feb8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 800febc:	4638      	mov	r0, r7
 800febe:	f7ff ffa1 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a & b;
 800fec2:	ea08 0807 	and.w	r8, r8, r7
 800fec6:	ea00 0909 	and.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 800feca:	4831      	ldr	r0, [pc, #196]	; (800ff90 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
 800fecc:	f7ff ff95 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fed0:	4601      	mov	r1, r0
  return a ^ b;
 800fed2:	ea89 0808 	eor.w	r8, r9, r8
  return a ? BitNot(zero) : zero;
 800fed6:	f3c4 6980 	ubfx	r9, r4, #26, #1
 800feda:	f1c9 0700 	rsb	r7, r9, #0
  return a & b;
 800fede:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 800fee2:	4640      	mov	r0, r8
 800fee4:	f7ff ff8e 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a & b;
 800fee8:	ea09 0908 	and.w	r9, r9, r8
 800feec:	4007      	ands	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 800feee:	4829      	ldr	r0, [pc, #164]	; (800ff94 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
 800fef0:	f7ff ff83 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fef4:	4601      	mov	r1, r0
  return a ^ b;
 800fef6:	ea87 0909 	eor.w	r9, r7, r9
  return a ? BitNot(zero) : zero;
 800fefa:	f3c4 67c0 	ubfx	r7, r4, #27, #1
 800fefe:	f1c7 0800 	rsb	r8, r7, #0
  return a & b;
 800ff02:	3f01      	subs	r7, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 800ff04:	4648      	mov	r0, r9
 800ff06:	f7ff ff7d 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a & b;
 800ff0a:	ea07 0709 	and.w	r7, r7, r9
 800ff0e:	ea00 0808 	and.w	r8, r0, r8
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 800ff12:	4821      	ldr	r0, [pc, #132]	; (800ff98 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
 800ff14:	f7ff ff71 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800ff18:	4601      	mov	r1, r0
  return a ^ b;
 800ff1a:	ea88 0707 	eor.w	r7, r8, r7
  return a ? BitNot(zero) : zero;
 800ff1e:	f1c6 0800 	rsb	r8, r6, #0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 800ff22:	4638      	mov	r0, r7
 800ff24:	f7ff ff6e 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a & b;
 800ff28:	ea00 0008 	and.w	r0, r0, r8
 800ff2c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800ff30:	ea08 0807 	and.w	r8, r8, r7
  return a ? BitNot(zero) : zero;
 800ff34:	f3c4 7740 	ubfx	r7, r4, #29, #1
 800ff38:	f3c4 7480 	ubfx	r4, r4, #30, #1
  return a ^ b;
 800ff3c:	ea80 0808 	eor.w	r8, r0, r8
  return a ? BitNot(zero) : zero;
 800ff40:	427e      	negs	r6, r7
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 800ff42:	4816      	ldr	r0, [pc, #88]	; (800ff9c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
  return a & b;
 800ff44:	3f01      	subs	r7, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 800ff46:	f7ff ff58 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800ff4a:	4601      	mov	r1, r0
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	f7ff ff59 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a & b;
 800ff52:	4006      	ands	r6, r0
 800ff54:	ea07 0008 	and.w	r0, r7, r8
  return a ^ b;
 800ff58:	4046      	eors	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 800ff5a:	20f2      	movs	r0, #242	; 0xf2
 800ff5c:	f7ff ff4d 	bl	800fdfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800ff60:	4601      	mov	r1, r0
 800ff62:	4630      	mov	r0, r6
 800ff64:	f7ff ff4e 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
 800ff68:	4263      	negs	r3, r4
  return a & b;
 800ff6a:	3c01      	subs	r4, #1
 800ff6c:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
 800ff6e:	fab5 f385 	clz	r3, r5
  return a & b;
 800ff72:	4034      	ands	r4, r6
  return a ? BitNot(zero) : zero;
 800ff74:	095b      	lsrs	r3, r3, #5
  return a ^ b;
 800ff76:	4044      	eors	r4, r0
  return a & b;
 800ff78:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
 800ff7a:	425b      	negs	r3, r3
  return a & b;
 800ff7c:	4020      	ands	r0, r4
 800ff7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
 800ff82:	4058      	eors	r0, r3
 800ff84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff88:	63afbe7b 	.word	0x63afbe7b
 800ff8c:	4da2cbf2 	.word	0x4da2cbf2
 800ff90:	2f16ac6c 	.word	0x2f16ac6c
 800ff94:	1152aaa4 	.word	0x1152aaa4
 800ff98:	02582ab7 	.word	0x02582ab7
 800ff9c:	000afe11 	.word	0x000afe11

0800ffa0 <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_>:
                                         const RuntimeShape& check_shape_0) {
 800ffa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const int shape_dims = shape.DimensionsCount();
 800ffa4:	f8d0 8000 	ldr.w	r8, [r0]
                                         const RuntimeShape& check_shape_0) {
 800ffa8:	4606      	mov	r6, r0
  const int check_shape_0_dims = check_shape_0.DimensionsCount();
 800ffaa:	680f      	ldr	r7, [r1, #0]
                                         const RuntimeShape& check_shape_0) {
 800ffac:	4689      	mov	r9, r1
 800ffae:	4644      	mov	r4, r8
  const int check_shape_0_dims = check_shape_0.DimensionsCount();
 800ffb0:	2501      	movs	r5, #1
 800ffb2:	45b8      	cmp	r8, r7
 800ffb4:	bfa8      	it	ge
 800ffb6:	463c      	movge	r4, r7
  for (int i = 0; i < min_dims; ++i) {
 800ffb8:	1e6b      	subs	r3, r5, #1
 800ffba:	429c      	cmp	r4, r3
 800ffbc:	dd0f      	ble.n	800ffde <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(shape_dims - 1 - i),
 800ffbe:	eba8 0105 	sub.w	r1, r8, r5
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	f7f7 fab5 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ffc8:	4682      	mov	sl, r0
 800ffca:	1b79      	subs	r1, r7, r5
 800ffcc:	4648      	mov	r0, r9
 800ffce:	f7f7 fab0 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ffd2:	4582      	cmp	sl, r0
 800ffd4:	f105 0501 	add.w	r5, r5, #1
 800ffd8:	d0ee      	beq.n	800ffb8 <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_+0x18>
 800ffda:	f006 feb3 	bl	8016d44 <abort>
 800ffde:	4625      	mov	r5, r4
    TFLITE_DCHECK_EQ(shape.Dims(shape_dims - 1 - i), 1);
 800ffe0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
  for (int i = min_dims; i < shape_dims; ++i) {
 800ffe4:	4545      	cmp	r5, r8
 800ffe6:	db0a      	blt.n	800fffe <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_+0x5e>
    TFLITE_DCHECK_EQ(check_shape_0.Dims(check_shape_0_dims - 1 - i), 1);
 800ffe8:	1e7d      	subs	r5, r7, #1
  for (int i = min_dims; i < check_shape_0_dims; ++i) {
 800ffea:	42bc      	cmp	r4, r7
 800ffec:	da10      	bge.n	8010010 <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_+0x70>
    TFLITE_DCHECK_EQ(check_shape_0.Dims(check_shape_0_dims - 1 - i), 1);
 800ffee:	1b29      	subs	r1, r5, r4
 800fff0:	4648      	mov	r0, r9
 800fff2:	f7f7 fa9e 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fff6:	2801      	cmp	r0, #1
 800fff8:	d1ef      	bne.n	800ffda <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_+0x3a>
  for (int i = min_dims; i < check_shape_0_dims; ++i) {
 800fffa:	3401      	adds	r4, #1
 800fffc:	e7f5      	b.n	800ffea <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_+0x4a>
    TFLITE_DCHECK_EQ(shape.Dims(shape_dims - 1 - i), 1);
 800fffe:	ebaa 0105 	sub.w	r1, sl, r5
 8010002:	4630      	mov	r0, r6
 8010004:	f7f7 fa95 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010008:	2801      	cmp	r0, #1
 801000a:	d1e6      	bne.n	800ffda <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_+0x3a>
  for (int i = min_dims; i < shape_dims; ++i) {
 801000c:	3501      	adds	r5, #1
 801000e:	e7e9      	b.n	800ffe4 <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_+0x44>
  return shape.FlatSize();
 8010010:	4630      	mov	r0, r6
 8010012:	f7f7 fa9a 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
}
 8010016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801001c <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/memory_helpers.h"
#include "tensorflow/lite/micro/micro_log.h"

namespace tflite {

TfLiteStatus MulEval(TfLiteContext* context, TfLiteNode* node) {
 801001c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8010020:	f8d1 8014 	ldr.w	r8, [r1, #20]
TfLiteStatus MulEval(TfLiteContext* context, TfLiteNode* node) {
 8010024:	b085      	sub	sp, #20
 8010026:	4606      	mov	r6, r0
 8010028:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801002a:	f1b8 0f00 	cmp.w	r8, #0
 801002e:	d101      	bne.n	8010034 <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0x18>
 8010030:	f006 fe88 	bl	8016d44 <abort>
  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 8010034:	690f      	ldr	r7, [r1, #16]
 8010036:	2f00      	cmp	r7, #0
 8010038:	d0fa      	beq.n	8010030 <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0x14>
  const OpDataMul* data = static_cast<const OpDataMul*>(node->user_data);

  const TfLiteEvalTensor* input1 =
      tflite::micro::GetEvalInput(context, node, kMulInput1Tensor);
 801003a:	4b1e      	ldr	r3, [pc, #120]	; (80100b4 <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0x98>)
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	f7ff fe40 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* input2 =
      tflite::micro::GetEvalInput(context, node, kMulInput2Tensor);
 8010042:	4b1d      	ldr	r3, [pc, #116]	; (80100b8 <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0x9c>)
      tflite::micro::GetEvalInput(context, node, kMulInput1Tensor);
 8010044:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kMulInput2Tensor);
 8010046:	4621      	mov	r1, r4
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	4630      	mov	r0, r6
 801004c:	f7ff fe39 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kMulOutputTensor);
 8010050:	4b1a      	ldr	r3, [pc, #104]	; (80100bc <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0xa0>)
      tflite::micro::GetEvalInput(context, node, kMulInput2Tensor);
 8010052:	4681      	mov	r9, r0
      tflite::micro::GetEvalOutput(context, node, kMulOutputTensor);
 8010054:	4621      	mov	r1, r4
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	4630      	mov	r0, r6
 801005a:	f7ff fe34 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  switch (input1->type) {
 801005e:	7a2b      	ldrb	r3, [r5, #8]
 8010060:	1e5a      	subs	r2, r3, #1
 8010062:	2a08      	cmp	r2, #8
 8010064:	d81c      	bhi.n	80100a0 <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0x84>
 8010066:	e8df f002 	tbb	[pc, r2]
 801006a:	0511      	.short	0x0511
 801006c:	1b1b1b1b 	.word	0x1b1b1b1b
 8010070:	1b05      	.short	0x1b05
 8010072:	05          	.byte	0x05
 8010073:	00          	.byte	0x00
    case kTfLiteInt8:
    case kTfLiteInt16:
    case kTfLiteInt32:
      EvalMulQuantizedReference(context, node, data, input1, input2, output);
 8010074:	e9cd 9000 	strd	r9, r0, [sp]
 8010078:	462b      	mov	r3, r5
 801007a:	463a      	mov	r2, r7
 801007c:	4621      	mov	r1, r4
 801007e:	4630      	mov	r0, r6
 8010080:	f000 fc30 	bl	80108e4 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_>
      MicroPrintf("Type %s (%d) not supported.",
                  TfLiteTypeGetName(input1->type), input1->type);
      return kTfLiteError;
  }

  return kTfLiteOk;
 8010084:	2000      	movs	r0, #0
}
 8010086:	b005      	add	sp, #20
 8010088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      EvalMulFloatReference(context, node, params, data, input1, input2,
 801008c:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8010090:	9500      	str	r5, [sp, #0]
 8010092:	463b      	mov	r3, r7
 8010094:	4642      	mov	r2, r8
 8010096:	4621      	mov	r1, r4
 8010098:	4630      	mov	r0, r6
 801009a:	f000 fe5f 	bl	8010d5c <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_>
 801009e:	e7f1      	b.n	8010084 <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0x68>
      MicroPrintf("Type %s (%d) not supported.",
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7f8 f805 	bl	80080b0 <TfLiteTypeGetName>
 80100a6:	7a2a      	ldrb	r2, [r5, #8]
 80100a8:	4601      	mov	r1, r0
 80100aa:	4805      	ldr	r0, [pc, #20]	; (80100c0 <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0xa4>)
 80100ac:	f7fa fe04 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 80100b0:	2001      	movs	r0, #1
 80100b2:	e7e8      	b.n	8010086 <_ZN6tflite7MulEvalEP13TfLiteContextP10TfLiteNode+0x6a>
 80100b4:	080fc564 	.word	0x080fc564
 80100b8:	080fc568 	.word	0x080fc568
 80100bc:	080fc56c 	.word	0x080fc56c
 80100c0:	080fbb1a 	.word	0x080fbb1a

080100c4 <_ZN6tflite12Register_MULEv>:

TFLMRegistration Register_MUL() {
  return tflite::micro::RegisterOp(MulInit, MulPrepare, MulEval);
 80100c4:	2300      	movs	r3, #0
 80100c6:	4a06      	ldr	r2, [pc, #24]	; (80100e0 <_ZN6tflite12Register_MULEv+0x1c>)
TFLMRegistration Register_MUL() {
 80100c8:	b513      	push	{r0, r1, r4, lr}
 80100ca:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(MulInit, MulPrepare, MulEval);
 80100cc:	4905      	ldr	r1, [pc, #20]	; (80100e4 <_ZN6tflite12Register_MULEv+0x20>)
 80100ce:	e9cd 3300 	strd	r3, r3, [sp]
 80100d2:	4b05      	ldr	r3, [pc, #20]	; (80100e8 <_ZN6tflite12Register_MULEv+0x24>)
 80100d4:	f7ff fdce 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 80100d8:	4620      	mov	r0, r4
 80100da:	b002      	add	sp, #8
 80100dc:	bd10      	pop	{r4, pc}
 80100de:	bf00      	nop
 80100e0:	080103a5 	.word	0x080103a5
 80100e4:	0801010b 	.word	0x0801010b
 80100e8:	0801001d 	.word	0x0801001d

080100ec <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_S2_>:
                                         const RuntimeShape& check_shape_1) {
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	4616      	mov	r6, r2
 80100f0:	4605      	mov	r5, r0
  const int flat_size = MatchingExtendedShapeFlatSize(shape, check_shape_0);
 80100f2:	f7ff ff55 	bl	800ffa0 <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_>
 80100f6:	4604      	mov	r4, r0
  TFLITE_DCHECK_EQ(MatchingExtendedShapeFlatSize(shape, check_shape_1),
 80100f8:	4631      	mov	r1, r6
 80100fa:	4628      	mov	r0, r5
 80100fc:	f7ff ff50 	bl	800ffa0 <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_>
 8010100:	4284      	cmp	r4, r0
 8010102:	d001      	beq.n	8010108 <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_S2_+0x1c>
 8010104:	f006 fe1e 	bl	8016d44 <abort>
}
 8010108:	bd70      	pop	{r4, r5, r6, pc}

0801010a <_ZN6tflite7MulInitEP13TfLiteContextPKcj>:
const int kMulInput1Tensor = 0;
const int kMulInput2Tensor = 1;
const int kMulOutputTensor = 0;

void* MulInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801010a:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* MulInit(TfLiteContext* context, const char* buffer, size_t length) {
 801010c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801010e:	b90b      	cbnz	r3, 8010114 <_ZN6tflite7MulInitEP13TfLiteContextPKcj+0xa>
 8010110:	f006 fe18 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataMul));
 8010114:	2124      	movs	r1, #36	; 0x24
}
 8010116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpDataMul));
 801011a:	4718      	bx	r3

0801011c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE>:

TfLiteStatus CalculateOpDataMul(TfLiteContext* context, TfLiteNode* node,
                                TfLiteMulParams* params, OpDataMul* data) {
 801011c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);
 8010120:	68c7      	ldr	r7, [r0, #12]
                                TfLiteMulParams* params, OpDataMul* data) {
 8010122:	b089      	sub	sp, #36	; 0x24
 8010124:	4606      	mov	r6, r0
 8010126:	4693      	mov	fp, r2

  TfLiteTensor* input1 =
      micro_context->AllocateTempInputTensor(node, kMulInput1Tensor);
 8010128:	4638      	mov	r0, r7
 801012a:	2200      	movs	r2, #0
                                TfLiteMulParams* params, OpDataMul* data) {
 801012c:	460d      	mov	r5, r1
 801012e:	461c      	mov	r4, r3
      micro_context->AllocateTempInputTensor(node, kMulInput1Tensor);
 8010130:	f7f9 ffa0 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input1 != nullptr);
 8010134:	4682      	mov	sl, r0
 8010136:	b960      	cbnz	r0, 8010152 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x36>
 8010138:	4b86      	ldr	r3, [pc, #536]	; (8010354 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x238>)
 801013a:	6974      	ldr	r4, [r6, #20]
 801013c:	9300      	str	r3, [sp, #0]
 801013e:	232c      	movs	r3, #44	; 0x2c
  TfLiteTensor* input2 =
      micro_context->AllocateTempInputTensor(node, kMulInput2Tensor);
  TF_LITE_ENSURE(context, input2 != nullptr);
 8010140:	4a85      	ldr	r2, [pc, #532]	; (8010358 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x23c>)
 8010142:	4630      	mov	r0, r6
 8010144:	4985      	ldr	r1, [pc, #532]	; (801035c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x240>)
 8010146:	47a0      	blx	r4
 8010148:	2501      	movs	r5, #1

  micro_context->DeallocateTempTfLiteTensor(input1);
  micro_context->DeallocateTempTfLiteTensor(input2);
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 801014a:	4628      	mov	r0, r5
 801014c:	b009      	add	sp, #36	; 0x24
 801014e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      micro_context->AllocateTempInputTensor(node, kMulInput2Tensor);
 8010152:	2201      	movs	r2, #1
 8010154:	4629      	mov	r1, r5
 8010156:	4638      	mov	r0, r7
 8010158:	f7f9 ff8c 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input2 != nullptr);
 801015c:	4681      	mov	r9, r0
 801015e:	b920      	cbnz	r0, 801016a <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x4e>
 8010160:	4b7f      	ldr	r3, [pc, #508]	; (8010360 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x244>)
 8010162:	6974      	ldr	r4, [r6, #20]
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	232f      	movs	r3, #47	; 0x2f
 8010168:	e7ea      	b.n	8010140 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x24>
      micro_context->AllocateTempOutputTensor(node, kMulOutputTensor);
 801016a:	2200      	movs	r2, #0
 801016c:	4629      	mov	r1, r5
 801016e:	4638      	mov	r0, r7
 8010170:	f7f9 ff95 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8010174:	4680      	mov	r8, r0
 8010176:	b920      	cbnz	r0, 8010182 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x66>
 8010178:	4b7a      	ldr	r3, [pc, #488]	; (8010364 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x248>)
 801017a:	6974      	ldr	r4, [r6, #20]
 801017c:	9300      	str	r3, [sp, #0]
 801017e:	2332      	movs	r3, #50	; 0x32
 8010180:	e7de      	b.n	8010140 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x24>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
 8010182:	682b      	ldr	r3, [r5, #0]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8010184:	b113      	cbz	r3, 801018c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x70>
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	2a02      	cmp	r2, #2
 801018a:	d00f      	beq.n	80101ac <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x90>
 801018c:	6974      	ldr	r4, [r6, #20]
 801018e:	b103      	cbz	r3, 8010192 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x76>
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2202      	movs	r2, #2
 8010194:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010198:	4b73      	ldr	r3, [pc, #460]	; (8010368 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x24c>)
 801019a:	9301      	str	r3, [sp, #4]
 801019c:	4b73      	ldr	r3, [pc, #460]	; (801036c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x250>)
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	2334      	movs	r3, #52	; 0x34
      TF_LITE_ENSURE_EQ(context, data->output_zero_point, 0);
 80101a2:	4a6d      	ldr	r2, [pc, #436]	; (8010358 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x23c>)
 80101a4:	4630      	mov	r0, r6
 80101a6:	4972      	ldr	r1, [pc, #456]	; (8010370 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x254>)
 80101a8:	47a0      	blx	r4
 80101aa:	e7cd      	b.n	8010148 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x2c>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80101ac:	686b      	ldr	r3, [r5, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 80101ae:	b113      	cbz	r3, 80101b6 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x9a>
 80101b0:	681d      	ldr	r5, [r3, #0]
 80101b2:	2d01      	cmp	r5, #1
 80101b4:	d00f      	beq.n	80101d6 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0xba>
 80101b6:	6974      	ldr	r4, [r6, #20]
 80101b8:	b103      	cbz	r3, 80101bc <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0xa0>
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2501      	movs	r5, #1
 80101be:	4a66      	ldr	r2, [pc, #408]	; (8010358 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x23c>)
 80101c0:	496b      	ldr	r1, [pc, #428]	; (8010370 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x254>)
 80101c2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80101c6:	4b6b      	ldr	r3, [pc, #428]	; (8010374 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x258>)
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	4b6b      	ldr	r3, [pc, #428]	; (8010378 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x25c>)
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	2335      	movs	r3, #53	; 0x35
  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);
 80101d0:	4630      	mov	r0, r6
 80101d2:	47a0      	blx	r4
 80101d4:	e7b9      	b.n	801014a <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x2e>
 80101d6:	f89a 0000 	ldrb.w	r0, [sl]
 80101da:	f899 3000 	ldrb.w	r3, [r9]
 80101de:	4283      	cmp	r3, r0
 80101e0:	d011      	beq.n	8010206 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0xea>
 80101e2:	6974      	ldr	r4, [r6, #20]
 80101e4:	f7f7 ff64 	bl	80080b0 <TfLiteTypeGetName>
 80101e8:	4607      	mov	r7, r0
 80101ea:	f899 0000 	ldrb.w	r0, [r9]
 80101ee:	f7f7 ff5f 	bl	80080b0 <TfLiteTypeGetName>
 80101f2:	4b62      	ldr	r3, [pc, #392]	; (801037c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x260>)
 80101f4:	4a58      	ldr	r2, [pc, #352]	; (8010358 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x23c>)
 80101f6:	9301      	str	r3, [sp, #4]
 80101f8:	4b61      	ldr	r3, [pc, #388]	; (8010380 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x264>)
 80101fa:	4962      	ldr	r1, [pc, #392]	; (8010384 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x268>)
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	2337      	movs	r3, #55	; 0x37
 8010200:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8010204:	e7e4      	b.n	80101d0 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0xb4>
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
 8010206:	f898 3000 	ldrb.w	r3, [r8]
 801020a:	f89b 1000 	ldrb.w	r1, [fp]
 801020e:	2b09      	cmp	r3, #9
 8010210:	d001      	beq.n	8010216 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0xfa>
 8010212:	2b07      	cmp	r3, #7
 8010214:	d15d      	bne.n	80102d2 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1b6>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8010216:	f104 030c 	add.w	r3, r4, #12
 801021a:	4642      	mov	r2, r8
 801021c:	4630      	mov	r0, r6
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	f104 0308 	add.w	r3, r4, #8
 8010224:	f7f8 fa8a 	bl	800873c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8010228:	4605      	mov	r5, r0
 801022a:	2800      	cmp	r0, #0
 801022c:	d18d      	bne.n	801014a <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x2e>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 801022e:	f104 0314 	add.w	r3, r4, #20
    double real_multiplier = static_cast<double>(input1->params.scale) *
 8010232:	f8da 000c 	ldr.w	r0, [sl, #12]
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8010236:	f104 0b18 	add.w	fp, r4, #24
 801023a:	9305      	str	r3, [sp, #20]
    double real_multiplier = static_cast<double>(input1->params.scale) *
 801023c:	f7f0 f9a6 	bl	800058c <__aeabi_f2d>
 8010240:	e9cd 0106 	strd	r0, r1, [sp, #24]
                             static_cast<double>(input2->params.scale) /
 8010244:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8010248:	f7f0 f9a0 	bl	800058c <__aeabi_f2d>
    double real_multiplier = static_cast<double>(input1->params.scale) *
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010254:	f7f0 f9f2 	bl	800063c <__aeabi_dmul>
 8010258:	e9cd 0106 	strd	r0, r1, [sp, #24]
                             static_cast<double>(output->params.scale);
 801025c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8010260:	f7f0 f994 	bl	800058c <__aeabi_f2d>
    double real_multiplier = static_cast<double>(input1->params.scale) *
 8010264:	4602      	mov	r2, r0
 8010266:	460b      	mov	r3, r1
 8010268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801026c:	f7f0 fb10 	bl	8000890 <__aeabi_ddiv>
 8010270:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8010274:	4659      	mov	r1, fp
 8010276:	9805      	ldr	r0, [sp, #20]
 8010278:	f7f7 fff6 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    if (input1->type == kTfLiteInt16) {
 801027c:	f89a 0000 	ldrb.w	r0, [sl]
    data->input1_zero_point = input1->params.zero_point;
 8010280:	f8da 1010 	ldr.w	r1, [sl, #16]
    data->input2_zero_point = input2->params.zero_point;
 8010284:	f8d9 2010 	ldr.w	r2, [r9, #16]
    if (input1->type == kTfLiteInt16) {
 8010288:	2807      	cmp	r0, #7
    data->output_zero_point = output->params.zero_point;
 801028a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    data->input1_zero_point = input1->params.zero_point;
 801028e:	6021      	str	r1, [r4, #0]
    data->input2_zero_point = input2->params.zero_point;
 8010290:	6062      	str	r2, [r4, #4]
    data->output_zero_point = output->params.zero_point;
 8010292:	6123      	str	r3, [r4, #16]
    if (input1->type == kTfLiteInt16) {
 8010294:	d12c      	bne.n	80102f0 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1d4>
      TF_LITE_ENSURE_EQ(context, data->input1_zero_point, 0);
 8010296:	b141      	cbz	r1, 80102aa <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x18e>
 8010298:	4b3b      	ldr	r3, [pc, #236]	; (8010388 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x26c>)
 801029a:	6974      	ldr	r4, [r6, #20]
 801029c:	9301      	str	r3, [sp, #4]
 801029e:	4b3b      	ldr	r3, [pc, #236]	; (801038c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x270>)
 80102a0:	e9cd 1502 	strd	r1, r5, [sp, #8]
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	2349      	movs	r3, #73	; 0x49
 80102a8:	e77b      	b.n	80101a2 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x86>
      TF_LITE_ENSURE_EQ(context, data->input2_zero_point, 0);
 80102aa:	b142      	cbz	r2, 80102be <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1a2>
 80102ac:	4b36      	ldr	r3, [pc, #216]	; (8010388 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x26c>)
 80102ae:	6974      	ldr	r4, [r6, #20]
 80102b0:	9301      	str	r3, [sp, #4]
 80102b2:	4b37      	ldr	r3, [pc, #220]	; (8010390 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x274>)
 80102b4:	e9cd 2502 	strd	r2, r5, [sp, #8]
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	234a      	movs	r3, #74	; 0x4a
 80102bc:	e771      	b.n	80101a2 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x86>
      TF_LITE_ENSURE_EQ(context, data->output_zero_point, 0);
 80102be:	b1bb      	cbz	r3, 80102f0 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1d4>
 80102c0:	6974      	ldr	r4, [r6, #20]
 80102c2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80102c6:	4b30      	ldr	r3, [pc, #192]	; (8010388 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x26c>)
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	4b32      	ldr	r3, [pc, #200]	; (8010394 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x278>)
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	234b      	movs	r3, #75	; 0x4b
 80102d0:	e767      	b.n	80101a2 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x86>
  } else if (output->type == kTfLiteInt32) {
 80102d2:	2b02      	cmp	r3, #2
 80102d4:	d127      	bne.n	8010326 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x20a>
  if (activation == kTfLiteActRelu) {
 80102d6:	2901      	cmp	r1, #1
 80102d8:	f04f 0300 	mov.w	r3, #0
 80102dc:	d103      	bne.n	80102e6 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1ca>
    *activation_min = std::numeric_limits<T>::lowest();
 80102de:	60a3      	str	r3, [r4, #8]
    *activation_max = std::numeric_limits<T>::max();
 80102e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80102e4:	e003      	b.n	80102ee <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1d2>
  } else if (activation == kTfLiteActRelu6) {
 80102e6:	2903      	cmp	r1, #3
 80102e8:	d113      	bne.n	8010312 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1f6>
    *activation_min = 0;
 80102ea:	60a3      	str	r3, [r4, #8]
    *activation_max = 6;
 80102ec:	2306      	movs	r3, #6
    *activation_max = 1;
 80102ee:	60e3      	str	r3, [r4, #12]
  micro_context->DeallocateTempTfLiteTensor(input1);
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	4651      	mov	r1, sl
 80102f4:	4638      	mov	r0, r7
  return kTfLiteOk;
 80102f6:	2500      	movs	r5, #0
  micro_context->DeallocateTempTfLiteTensor(input1);
 80102f8:	699b      	ldr	r3, [r3, #24]
 80102fa:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input2);
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	4649      	mov	r1, r9
 8010300:	4638      	mov	r0, r7
 8010302:	699b      	ldr	r3, [r3, #24]
 8010304:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	4641      	mov	r1, r8
 801030a:	4638      	mov	r0, r7
 801030c:	699b      	ldr	r3, [r3, #24]
 801030e:	4798      	blx	r3
  return kTfLiteOk;
 8010310:	e71b      	b.n	801014a <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x2e>
  } else if (activation == kTfLiteActReluN1To1) {
 8010312:	2902      	cmp	r1, #2
 8010314:	d104      	bne.n	8010320 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x204>
    *activation_min = -1;
 8010316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801031a:	60a3      	str	r3, [r4, #8]
    *activation_max = 1;
 801031c:	2301      	movs	r3, #1
 801031e:	e7e6      	b.n	80102ee <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1d2>
    *activation_min = std::numeric_limits<T>::lowest();
 8010320:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010324:	e7db      	b.n	80102de <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1c2>
  if (activation == kTfLiteActRelu) {
 8010326:	2901      	cmp	r1, #1
 8010328:	d103      	bne.n	8010332 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x216>
    *activation_min = 0;
 801032a:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
 801032c:	61e3      	str	r3, [r4, #28]
    *activation_max = std::numeric_limits<T>::max();
 801032e:	4b1a      	ldr	r3, [pc, #104]	; (8010398 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x27c>)
 8010330:	e004      	b.n	801033c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x220>
  } else if (activation == kTfLiteActRelu6) {
 8010332:	2903      	cmp	r1, #3
 8010334:	d104      	bne.n	8010340 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x224>
    *activation_min = 0;
 8010336:	2300      	movs	r3, #0
 8010338:	61e3      	str	r3, [r4, #28]
    *activation_max = 6;
 801033a:	4b18      	ldr	r3, [pc, #96]	; (801039c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x280>)
    *activation_max = std::numeric_limits<T>::max();
 801033c:	6223      	str	r3, [r4, #32]
 801033e:	e7d7      	b.n	80102f0 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x1d4>
  } else if (activation == kTfLiteActReluN1To1) {
 8010340:	2902      	cmp	r1, #2
 8010342:	d104      	bne.n	801034e <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x232>
    *activation_min = -1;
 8010344:	4b16      	ldr	r3, [pc, #88]	; (80103a0 <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x284>)
 8010346:	61e3      	str	r3, [r4, #28]
    *activation_max = 1;
 8010348:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801034c:	e7f6      	b.n	801033c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x220>
    *activation_min = std::numeric_limits<T>::lowest();
 801034e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8010352:	e7eb      	b.n	801032c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE+0x210>
 8010354:	080fbcd6 	.word	0x080fbcd6
 8010358:	080fc570 	.word	0x080fc570
 801035c:	080f93a5 	.word	0x080f93a5
 8010360:	080fbce8 	.word	0x080fbce8
 8010364:	080fbcfa 	.word	0x080fbcfa
 8010368:	080fc778 	.word	0x080fc778
 801036c:	080fc490 	.word	0x080fc490
 8010370:	080f982c 	.word	0x080f982c
 8010374:	080fca44 	.word	0x080fca44
 8010378:	080fc4a0 	.word	0x080fc4a0
 801037c:	080fc5aa 	.word	0x080fc5aa
 8010380:	080fc5b7 	.word	0x080fc5b7
 8010384:	080fc37f 	.word	0x080fc37f
 8010388:	080fc4d7 	.word	0x080fc4d7
 801038c:	080fc5c4 	.word	0x080fc5c4
 8010390:	080fc5dc 	.word	0x080fc5dc
 8010394:	080fc5f4 	.word	0x080fc5f4
 8010398:	7f7fffff 	.word	0x7f7fffff
 801039c:	40c00000 	.word	0x40c00000
 80103a0:	bf800000 	.word	0xbf800000

080103a4 <_ZN6tflite10MulPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MulPrepare(TfLiteContext* context, TfLiteNode* node) {
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80103a4:	694a      	ldr	r2, [r1, #20]
TfLiteStatus MulPrepare(TfLiteContext* context, TfLiteNode* node) {
 80103a6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80103a8:	b90a      	cbnz	r2, 80103ae <_ZN6tflite10MulPrepareEP13TfLiteContextP10TfLiteNode+0xa>
 80103aa:	f006 fccb 	bl	8016d44 <abort>
  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 80103ae:	690b      	ldr	r3, [r1, #16]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d0fa      	beq.n	80103aa <_ZN6tflite10MulPrepareEP13TfLiteContextP10TfLiteNode+0x6>
  OpDataMul* data = static_cast<OpDataMul*>(node->user_data);

  return CalculateOpDataMul(context, node, params, data);
}
 80103b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return CalculateOpDataMul(context, node, params, data);
 80103b8:	f7ff beb0 	b.w	801011c <_ZN6tflite18CalculateOpDataMulEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS_9OpDataMulE>

080103bc <_ZN6tflite14CopyDimsToDescILi6EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
  }
}

// Copies dims to desc, calculating strides.
template <int N>
TFLITE_NOINLINE void CopyDimsToDesc(const RuntimeShape& input_shape,
 80103bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103be:	4607      	mov	r7, r0
 80103c0:	f101 0614 	add.w	r6, r1, #20
                                    NdArrayDesc<N>* desc_out) {
  int desc_stride = 1;
  for (int i = N - 1; i >= 0; --i) {
 80103c4:	2405      	movs	r4, #5
  int desc_stride = 1;
 80103c6:	2501      	movs	r5, #1
    desc_out->extents[i] = input_shape.Dims(i);
 80103c8:	4621      	mov	r1, r4
 80103ca:	4638      	mov	r0, r7
 80103cc:	f7f7 f8b1 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
    desc_out->strides[i] = desc_stride;
    desc_stride *= input_shape.Dims(i);
 80103d0:	4621      	mov	r1, r4
    desc_out->extents[i] = input_shape.Dims(i);
 80103d2:	f846 0904 	str.w	r0, [r6], #-4
    desc_stride *= input_shape.Dims(i);
 80103d6:	4638      	mov	r0, r7
    desc_out->strides[i] = desc_stride;
 80103d8:	61f5      	str	r5, [r6, #28]
    desc_stride *= input_shape.Dims(i);
 80103da:	f7f7 f8aa 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
 80103de:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    desc_stride *= input_shape.Dims(i);
 80103e2:	fb00 f505 	mul.w	r5, r0, r5
  for (int i = N - 1; i >= 0; --i) {
 80103e6:	d2ef      	bcs.n	80103c8 <_ZN6tflite14CopyDimsToDescILi6EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
  }
}
 80103e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080103ea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
 80103ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ee:	460c      	mov	r4, r1
 80103f0:	b08e      	sub	sp, #56	; 0x38
 80103f2:	461e      	mov	r6, r3
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
 80103f4:	4615      	mov	r5, r2
 80103f6:	b90a      	cbnz	r2, 80103fc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
 80103f8:	f006 fca4 	bl	8016d44 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d0fb      	beq.n	80103f8 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
 8010400:	4602      	mov	r2, r0
 8010402:	2301      	movs	r3, #1
 8010404:	2106      	movs	r1, #6
 8010406:	4668      	mov	r0, sp
 8010408:	f7f8 f84e 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 801040c:	4622      	mov	r2, r4
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
 801040e:	2400      	movs	r4, #0
 8010410:	2301      	movs	r3, #1
 8010412:	2106      	movs	r1, #6
 8010414:	a807      	add	r0, sp, #28
 8010416:	f7f8 f847 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
        desc0_out->extents[i] = extent1;
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
        desc1_out->strides[i] = 0;
 801041a:	46a0      	mov	r8, r4
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
 801041c:	4629      	mov	r1, r5
 801041e:	4668      	mov	r0, sp
 8010420:	f7ff ffcc 	bl	80103bc <_ZN6tflite14CopyDimsToDescILi6EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
 8010424:	4631      	mov	r1, r6
 8010426:	a807      	add	r0, sp, #28
 8010428:	f7ff ffc8 	bl	80103bc <_ZN6tflite14CopyDimsToDescILi6EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
    const int extent0 = extended_input0_shape.Dims(i);
 801042c:	4621      	mov	r1, r4
 801042e:	4668      	mov	r0, sp
 8010430:	f7f7 f87f 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010434:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
 8010436:	4621      	mov	r1, r4
 8010438:	a807      	add	r0, sp, #28
 801043a:	f7f7 f87a 	bl	8007532 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
 801043e:	42b8      	cmp	r0, r7
 8010440:	d008      	beq.n	8010454 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x6a>
      if (extent0 == 1) {
 8010442:	2f01      	cmp	r7, #1
 8010444:	ea4f 0384 	mov.w	r3, r4, lsl #2
 8010448:	d10a      	bne.n	8010460 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x76>
        desc0_out->strides[i] = 0;
 801044a:	442b      	add	r3, r5
 801044c:	f8c3 8018 	str.w	r8, [r3, #24]
        desc0_out->extents[i] = extent1;
 8010450:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
 8010454:	3401      	adds	r4, #1
 8010456:	2c06      	cmp	r4, #6
 8010458:	d1e8      	bne.n	801042c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x42>
        desc1_out->extents[i] = extent0;
      }
    }
  }
}
 801045a:	b00e      	add	sp, #56	; 0x38
 801045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
 8010460:	2801      	cmp	r0, #1
 8010462:	d1c9      	bne.n	80103f8 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
 8010464:	4433      	add	r3, r6
 8010466:	f8c3 8018 	str.w	r8, [r3, #24]
        desc1_out->extents[i] = extent0;
 801046a:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 801046e:	e7f1      	b.n	8010454 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x6a>

08010470 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    output_data[i] = output_offset + clamped_result;
  }
}

template <typename T>
inline void BroadcastMul6DSlow(
 8010470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	b0c3      	sub	sp, #268	; 0x10c
 8010476:	4604      	mov	r4, r0
 8010478:	4608      	mov	r0, r1
 801047a:	4619      	mov	r1, r3
 801047c:	9220      	str	r2, [sp, #128]	; 0x80
  ruy::profiler::ScopeLabel label("BroadcastMul6DSlow");

  NdArrayDesc<kMaxMulBroadcastDim> desc1;
  NdArrayDesc<kMaxMulBroadcastDim> desc2;
  // The input shapes are extended as part of NdArrayDesc initialization.
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 801047e:	ab36      	add	r3, sp, #216	; 0xd8
 8010480:	aa2a      	add	r2, sp, #168	; 0xa8
              sizeof(extended_output_shape_dims));

  size_t input1_offset_a = 0;
  size_t input2_offset_a = 0;
  size_t output_offset_a = 0;
  for (int a = 0; a < extended_output_shape_dims[0]; ++a) {
 8010482:	2500      	movs	r5, #0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 8010484:	f7ff ffb1 	bl	80103ea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
 8010488:	2301      	movs	r3, #1
 801048a:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 801048c:	2106      	movs	r1, #6
 801048e:	a823      	add	r0, sp, #140	; 0x8c
 8010490:	f7f8 f80a 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  std::memcpy(extended_output_shape_dims, extended_output_shape.DimsData(),
 8010494:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010496:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8010498:	931f      	str	r3, [sp, #124]	; 0x7c
 801049a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801049c:	931b      	str	r3, [sp, #108]	; 0x6c
 801049e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80104a0:	931c      	str	r3, [sp, #112]	; 0x70
 80104a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80104a4:	9319      	str	r3, [sp, #100]	; 0x64
 80104a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
              extended_output_shape_dims[4] * extended_output_shape_dims[5];
        }
        input1_offset_b += desc1.strides[2];
        input2_offset_b += desc2.strides[2];
        output_offset_b += extended_output_shape_dims[3] *
                           extended_output_shape_dims[4] *
 80104a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  std::memcpy(extended_output_shape_dims, extended_output_shape.DimsData(),
 80104aa:	931a      	str	r3, [sp, #104]	; 0x68
              extended_output_shape_dims[4] * extended_output_shape_dims[5];
 80104ac:	4373      	muls	r3, r6
 80104ae:	930e      	str	r3, [sp, #56]	; 0x38
                           extended_output_shape_dims[4] *
 80104b0:	4353      	muls	r3, r2
      }
      input1_offset_d += desc1.strides[1];
      input2_offset_d += desc2.strides[1];
      output_offset_d +=
          extended_output_shape_dims[2] * extended_output_shape_dims[3] *
          extended_output_shape_dims[4] * extended_output_shape_dims[5];
 80104b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
                           extended_output_shape_dims[4] *
 80104b4:	930f      	str	r3, [sp, #60]	; 0x3c
          extended_output_shape_dims[4] * extended_output_shape_dims[5];
 80104b6:	4353      	muls	r3, r2
    }
    input1_offset_a += desc1.strides[0];
    input2_offset_a += desc2.strides[0];
    output_offset_a +=
        extended_output_shape_dims[1] * extended_output_shape_dims[2] *
        extended_output_shape_dims[3] * extended_output_shape_dims[4] *
 80104b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
          extended_output_shape_dims[4] * extended_output_shape_dims[5];
 80104ba:	9310      	str	r3, [sp, #64]	; 0x40
        extended_output_shape_dims[3] * extended_output_shape_dims[4] *
 80104bc:	4353      	muls	r3, r2
 80104be:	931d      	str	r3, [sp, #116]	; 0x74
 80104c0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80104c2:	425a      	negs	r2, r3
  size_t input1_offset_a = 0;
 80104c4:	e9cd 5502 	strd	r5, r5, [sp, #8]
 80104c8:	9211      	str	r2, [sp, #68]	; 0x44
  for (int a = 0; a < extended_output_shape_dims[0]; ++a) {
 80104ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80104cc:	4295      	cmp	r5, r2
 80104ce:	f280 80bb 	bge.w	8010648 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1d8>
 80104d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80104d4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    size_t input2_offset_d = input2_offset_a;
 80104d8:	9a03      	ldr	r2, [sp, #12]
 80104da:	9205      	str	r2, [sp, #20]
    size_t input1_offset_d = input1_offset_a;
 80104dc:	9a02      	ldr	r2, [sp, #8]
 80104de:	9204      	str	r2, [sp, #16]
    for (int d = 0; d < extended_output_shape_dims[1]; ++d) {
 80104e0:	2200      	movs	r2, #0
 80104e2:	9206      	str	r2, [sp, #24]
 80104e4:	9a06      	ldr	r2, [sp, #24]
 80104e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80104e8:	428a      	cmp	r2, r1
 80104ea:	f280 809d 	bge.w	8010628 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1b8>
 80104ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80104f0:	9214      	str	r2, [sp, #80]	; 0x50
 80104f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80104f4:	9215      	str	r2, [sp, #84]	; 0x54
      size_t input2_offset_b = input2_offset_d;
 80104f6:	9a05      	ldr	r2, [sp, #20]
 80104f8:	9208      	str	r2, [sp, #32]
      size_t input1_offset_b = input1_offset_d;
 80104fa:	9a04      	ldr	r2, [sp, #16]
 80104fc:	9207      	str	r2, [sp, #28]
      for (int b = 0; b < extended_output_shape_dims[2]; ++b) {
 80104fe:	2200      	movs	r2, #0
 8010500:	9209      	str	r2, [sp, #36]	; 0x24
 8010502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010504:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010506:	428a      	cmp	r2, r1
 8010508:	da7b      	bge.n	8010602 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x192>
 801050a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801050c:	9216      	str	r2, [sp, #88]	; 0x58
 801050e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010510:	9217      	str	r2, [sp, #92]	; 0x5c
        size_t input2_offset_y = input2_offset_b;
 8010512:	9a08      	ldr	r2, [sp, #32]
 8010514:	920b      	str	r2, [sp, #44]	; 0x2c
        size_t input1_offset_y = input1_offset_b;
 8010516:	9a07      	ldr	r2, [sp, #28]
 8010518:	920a      	str	r2, [sp, #40]	; 0x28
        for (int y = 0; y < extended_output_shape_dims[3]; ++y) {
 801051a:	2200      	movs	r2, #0
 801051c:	920c      	str	r2, [sp, #48]	; 0x30
 801051e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010520:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010522:	428a      	cmp	r2, r1
 8010524:	dd5a      	ble.n	80105dc <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16c>
 8010526:	9a16      	ldr	r2, [sp, #88]	; 0x58
          for (int x = 0; x < extended_output_shape_dims[4]; ++x) {
 8010528:	f04f 0800 	mov.w	r8, #0
 801052c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801052e:	9218      	str	r2, [sp, #96]	; 0x60
          size_t input1_offset_x = input1_offset_y;
 8010530:	e9dd 290a 	ldrd	r2, r9, [sp, #40]	; 0x28
 8010534:	920d      	str	r2, [sp, #52]	; 0x34
          for (int x = 0; x < extended_output_shape_dims[4]; ++x) {
 8010536:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010538:	4590      	cmp	r8, r2
 801053a:	da3c      	bge.n	80105b6 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x146>
            size_t input2_offset_c = input2_offset_x;
 801053c:	46ca      	mov	sl, r9
            size_t input1_offset_c = input1_offset_x;
 801053e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8010542:	9701      	str	r7, [sp, #4]
            for (int c = 0; c < extended_output_shape_dims[5]; ++c) {
 8010544:	9a01      	ldr	r2, [sp, #4]
 8010546:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010548:	440a      	add	r2, r1
 801054a:	42b2      	cmp	r2, r6
 801054c:	da26      	bge.n	801059c <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x12c>
 801054e:	9321      	str	r3, [sp, #132]	; 0x84
                  params.output_offset +
 8010550:	68e3      	ldr	r3, [r4, #12]
              const int32_t input1_val =
 8010552:	6860      	ldr	r0, [r4, #4]
                  params.output_offset +
 8010554:	931e      	str	r3, [sp, #120]	; 0x78
                  params.input1_offset + input1_data[input1_offset_c];
 8010556:	9b20      	ldr	r3, [sp, #128]	; 0x80
              const int32_t input2_val =
 8010558:	68a2      	ldr	r2, [r4, #8]
                  params.input1_offset + input1_data[input1_offset_c];
 801055a:	f913 c00b 	ldrsb.w	ip, [r3, fp]
                  params.input2_offset + input2_data[input2_offset_c];
 801055e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
              const int32_t input1_val =
 8010560:	4484      	add	ip, r0
                  params.input2_offset + input2_data[input2_offset_c];
 8010562:	f913 000a 	ldrsb.w	r0, [r3, sl]
              const int32_t input2_val =
 8010566:	4410      	add	r0, r2
                  MultiplyByQuantizedMultiplier(input1_val * input2_val,
 8010568:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 801056c:	fb00 f00c 	mul.w	r0, r0, ip
 8010570:	f7f7 fdaa 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                  params.output_offset +
 8010574:	9b1e      	ldr	r3, [sp, #120]	; 0x78
              output_data[output_offset_c] = static_cast<T>(clamped_output);
 8010576:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                  params.output_offset +
 8010578:	4418      	add	r0, r3
              output_data[output_offset_c] = static_cast<T>(clamped_output);
 801057a:	9b01      	ldr	r3, [sp, #4]
 801057c:	4290      	cmp	r0, r2
 801057e:	bfb8      	it	lt
 8010580:	4610      	movlt	r0, r2
 8010582:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010584:	4290      	cmp	r0, r2
 8010586:	bfa8      	it	ge
 8010588:	4610      	movge	r0, r2
              input1_offset_c += desc1.strides[5];
 801058a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801058c:	4493      	add	fp, r2
              input2_offset_c += desc2.strides[5];
 801058e:	9a41      	ldr	r2, [sp, #260]	; 0x104
              output_data[output_offset_c] = static_cast<T>(clamped_output);
 8010590:	f803 0b01 	strb.w	r0, [r3], #1
              input2_offset_c += desc2.strides[5];
 8010594:	4492      	add	sl, r2
              output_data[output_offset_c] = static_cast<T>(clamped_output);
 8010596:	9301      	str	r3, [sp, #4]
            for (int c = 0; c < extended_output_shape_dims[5]; ++c) {
 8010598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801059a:	e7d3      	b.n	8010544 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
            input1_offset_x += desc1.strides[4];
 801059c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
          for (int x = 0; x < extended_output_shape_dims[4]; ++x) {
 801059e:	f108 0801 	add.w	r8, r8, #1
            input1_offset_x += desc1.strides[4];
 80105a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80105a4:	4437      	add	r7, r6
 80105a6:	4411      	add	r1, r2
            input2_offset_x += desc2.strides[4];
 80105a8:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80105aa:	4491      	add	r9, r2
 80105ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
            input1_offset_x += desc1.strides[4];
 80105ae:	910d      	str	r1, [sp, #52]	; 0x34
 80105b0:	1b92      	subs	r2, r2, r6
 80105b2:	9218      	str	r2, [sp, #96]	; 0x60
          for (int x = 0; x < extended_output_shape_dims[4]; ++x) {
 80105b4:	e7bf      	b.n	8010536 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc6>
          input1_offset_y += desc1.strides[3];
 80105b6:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80105b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80105ba:	4411      	add	r1, r2
          input2_offset_y += desc2.strides[3];
 80105bc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
          input1_offset_y += desc1.strides[3];
 80105be:	910a      	str	r1, [sp, #40]	; 0x28
          input2_offset_y += desc2.strides[3];
 80105c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80105c2:	4411      	add	r1, r2
        for (int y = 0; y < extended_output_shape_dims[3]; ++y) {
 80105c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105c6:	3201      	adds	r2, #1
          input2_offset_y += desc2.strides[3];
 80105c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80105ca:	990e      	ldr	r1, [sp, #56]	; 0x38
        for (int y = 0; y < extended_output_shape_dims[3]; ++y) {
 80105cc:	920c      	str	r2, [sp, #48]	; 0x30
 80105ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80105d0:	440a      	add	r2, r1
 80105d2:	9217      	str	r2, [sp, #92]	; 0x5c
 80105d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80105d6:	1a52      	subs	r2, r2, r1
 80105d8:	9216      	str	r2, [sp, #88]	; 0x58
 80105da:	e7a0      	b.n	801051e <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xae>
        input1_offset_b += desc1.strides[2];
 80105dc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80105de:	9907      	ldr	r1, [sp, #28]
 80105e0:	4411      	add	r1, r2
        input2_offset_b += desc2.strides[2];
 80105e2:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
        input1_offset_b += desc1.strides[2];
 80105e4:	9107      	str	r1, [sp, #28]
        input2_offset_b += desc2.strides[2];
 80105e6:	9908      	ldr	r1, [sp, #32]
 80105e8:	4411      	add	r1, r2
      for (int b = 0; b < extended_output_shape_dims[2]; ++b) {
 80105ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105ec:	3201      	adds	r2, #1
        input2_offset_b += desc2.strides[2];
 80105ee:	9108      	str	r1, [sp, #32]
 80105f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
      for (int b = 0; b < extended_output_shape_dims[2]; ++b) {
 80105f2:	9209      	str	r2, [sp, #36]	; 0x24
 80105f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80105f6:	440a      	add	r2, r1
 80105f8:	9215      	str	r2, [sp, #84]	; 0x54
 80105fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80105fc:	1a52      	subs	r2, r2, r1
 80105fe:	9214      	str	r2, [sp, #80]	; 0x50
 8010600:	e77f      	b.n	8010502 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x92>
      input1_offset_d += desc1.strides[1];
 8010602:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8010604:	9904      	ldr	r1, [sp, #16]
 8010606:	4411      	add	r1, r2
      input2_offset_d += desc2.strides[1];
 8010608:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
      input1_offset_d += desc1.strides[1];
 801060a:	9104      	str	r1, [sp, #16]
      input2_offset_d += desc2.strides[1];
 801060c:	9905      	ldr	r1, [sp, #20]
 801060e:	4411      	add	r1, r2
    for (int d = 0; d < extended_output_shape_dims[1]; ++d) {
 8010610:	9a06      	ldr	r2, [sp, #24]
 8010612:	3201      	adds	r2, #1
      input2_offset_d += desc2.strides[1];
 8010614:	9105      	str	r1, [sp, #20]
 8010616:	9910      	ldr	r1, [sp, #64]	; 0x40
    for (int d = 0; d < extended_output_shape_dims[1]; ++d) {
 8010618:	9206      	str	r2, [sp, #24]
 801061a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801061c:	440a      	add	r2, r1
 801061e:	9213      	str	r2, [sp, #76]	; 0x4c
 8010620:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010622:	1a52      	subs	r2, r2, r1
 8010624:	9212      	str	r2, [sp, #72]	; 0x48
 8010626:	e75d      	b.n	80104e4 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x74>
    input1_offset_a += desc1.strides[0];
 8010628:	9a30      	ldr	r2, [sp, #192]	; 0xc0
  for (int a = 0; a < extended_output_shape_dims[0]; ++a) {
 801062a:	3501      	adds	r5, #1
    input1_offset_a += desc1.strides[0];
 801062c:	9902      	ldr	r1, [sp, #8]
 801062e:	4411      	add	r1, r2
    input2_offset_a += desc2.strides[0];
 8010630:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    input1_offset_a += desc1.strides[0];
 8010632:	9102      	str	r1, [sp, #8]
    input2_offset_a += desc2.strides[0];
 8010634:	9903      	ldr	r1, [sp, #12]
 8010636:	4411      	add	r1, r2
 8010638:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801063a:	9103      	str	r1, [sp, #12]
 801063c:	4413      	add	r3, r2
 801063e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8010640:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010642:	1a52      	subs	r2, r2, r1
 8010644:	9211      	str	r2, [sp, #68]	; 0x44
  for (int a = 0; a < extended_output_shape_dims[0]; ++a) {
 8010646:	e740      	b.n	80104ca <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
        extended_output_shape_dims[5];
  }
}
 8010648:	b043      	add	sp, #268	; 0x10c
 801064a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801064e <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
inline void BroadcastMul6DSlow(
 801064e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010652:	b0bf      	sub	sp, #252	; 0xfc
 8010654:	4604      	mov	r4, r0
 8010656:	4608      	mov	r0, r1
 8010658:	4619      	mov	r1, r3
 801065a:	921c      	str	r2, [sp, #112]	; 0x70
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 801065c:	ab32      	add	r3, sp, #200	; 0xc8
 801065e:	aa26      	add	r2, sp, #152	; 0x98
 8010660:	f7ff fec3 	bl	80103ea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
 8010664:	2301      	movs	r3, #1
 8010666:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8010668:	2106      	movs	r1, #6
 801066a:	a81f      	add	r0, sp, #124	; 0x7c
 801066c:	f7f7 ff1c 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  std::memcpy(extended_output_shape_dims, extended_output_shape.DimsData(),
 8010670:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010672:	9d4a      	ldr	r5, [sp, #296]	; 0x128
 8010674:	931a      	str	r3, [sp, #104]	; 0x68
 8010676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010678:	9315      	str	r3, [sp, #84]	; 0x54
 801067a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801067c:	9316      	str	r3, [sp, #88]	; 0x58
 801067e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010680:	9311      	str	r3, [sp, #68]	; 0x44
 8010682:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010684:	9314      	str	r3, [sp, #80]	; 0x50
              extended_output_shape_dims[4] * extended_output_shape_dims[5];
 8010686:	9a14      	ldr	r2, [sp, #80]	; 0x50
  std::memcpy(extended_output_shape_dims, extended_output_shape.DimsData(),
 8010688:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801068a:	930e      	str	r3, [sp, #56]	; 0x38
              extended_output_shape_dims[4] * extended_output_shape_dims[5];
 801068c:	4353      	muls	r3, r2
 801068e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010690:	005b      	lsls	r3, r3, #1
 8010692:	9317      	str	r3, [sp, #92]	; 0x5c
 8010694:	4353      	muls	r3, r2
 8010696:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010698:	9312      	str	r3, [sp, #72]	; 0x48
 801069a:	4353      	muls	r3, r2
 801069c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801069e:	9313      	str	r3, [sp, #76]	; 0x4c
 80106a0:	4353      	muls	r3, r2
 80106a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80106a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106a6:	005b      	lsls	r3, r3, #1
 80106a8:	9319      	str	r3, [sp, #100]	; 0x64
  for (int a = 0; a < extended_output_shape_dims[0]; ++a) {
 80106aa:	2300      	movs	r3, #0
  size_t input1_offset_a = 0;
 80106ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
  for (int a = 0; a < extended_output_shape_dims[0]; ++a) {
 80106b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80106b2:	4293      	cmp	r3, r2
 80106b4:	f280 80a1 	bge.w	80107fa <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1ac>
    size_t input2_offset_d = input2_offset_a;
 80106b8:	9a03      	ldr	r2, [sp, #12]
 80106ba:	950f      	str	r5, [sp, #60]	; 0x3c
 80106bc:	9205      	str	r2, [sp, #20]
    size_t input1_offset_d = input1_offset_a;
 80106be:	9a02      	ldr	r2, [sp, #8]
 80106c0:	9204      	str	r2, [sp, #16]
    for (int d = 0; d < extended_output_shape_dims[1]; ++d) {
 80106c2:	2200      	movs	r2, #0
 80106c4:	9206      	str	r2, [sp, #24]
 80106c6:	9a06      	ldr	r2, [sp, #24]
 80106c8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80106ca:	428a      	cmp	r2, r1
 80106cc:	f280 8089 	bge.w	80107e2 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x194>
 80106d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80106d2:	9210      	str	r2, [sp, #64]	; 0x40
      size_t input2_offset_b = input2_offset_d;
 80106d4:	9a05      	ldr	r2, [sp, #20]
 80106d6:	9208      	str	r2, [sp, #32]
      size_t input1_offset_b = input1_offset_d;
 80106d8:	9a04      	ldr	r2, [sp, #16]
 80106da:	9207      	str	r2, [sp, #28]
      for (int b = 0; b < extended_output_shape_dims[2]; ++b) {
 80106dc:	2200      	movs	r2, #0
 80106de:	9209      	str	r2, [sp, #36]	; 0x24
 80106e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80106e4:	428a      	cmp	r2, r1
 80106e6:	da6c      	bge.n	80107c2 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x174>
 80106e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80106ea:	9201      	str	r2, [sp, #4]
        size_t input2_offset_y = input2_offset_b;
 80106ec:	9a08      	ldr	r2, [sp, #32]
 80106ee:	920b      	str	r2, [sp, #44]	; 0x2c
        size_t input1_offset_y = input1_offset_b;
 80106f0:	9a07      	ldr	r2, [sp, #28]
 80106f2:	920a      	str	r2, [sp, #40]	; 0x28
        for (int y = 0; y < extended_output_shape_dims[3]; ++y) {
 80106f4:	2200      	movs	r2, #0
 80106f6:	920c      	str	r2, [sp, #48]	; 0x30
 80106f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80106fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80106fc:	428a      	cmp	r2, r1
 80106fe:	dd50      	ble.n	80107a2 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x154>
 8010700:	9f01      	ldr	r7, [sp, #4]
          for (int x = 0; x < extended_output_shape_dims[4]; ++x) {
 8010702:	f04f 0800 	mov.w	r8, #0
          size_t input1_offset_x = input1_offset_y;
 8010706:	e9dd a90a 	ldrd	sl, r9, [sp, #40]	; 0x28
          for (int x = 0; x < extended_output_shape_dims[4]; ++x) {
 801070a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801070c:	4590      	cmp	r8, r2
 801070e:	da38      	bge.n	8010782 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x134>
            size_t input2_offset_c = input2_offset_x;
 8010710:	46cb      	mov	fp, r9
            for (int c = 0; c < extended_output_shape_dims[5]; ++c) {
 8010712:	2600      	movs	r6, #0
            size_t input1_offset_c = input1_offset_x;
 8010714:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
            for (int c = 0; c < extended_output_shape_dims[5]; ++c) {
 8010718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801071a:	4296      	cmp	r6, r2
 801071c:	da28      	bge.n	8010770 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x122>
 801071e:	931d      	str	r3, [sp, #116]	; 0x74
                  params.output_offset +
 8010720:	68e3      	ldr	r3, [r4, #12]
                  params.input1_offset + input1_data[input1_offset_c];
 8010722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                  params.output_offset +
 8010724:	9318      	str	r3, [sp, #96]	; 0x60
                  params.input1_offset + input1_data[input1_offset_c];
 8010726:	9b1c      	ldr	r3, [sp, #112]	; 0x70
              const int32_t input1_val =
 8010728:	6860      	ldr	r0, [r4, #4]
                  params.input1_offset + input1_data[input1_offset_c];
 801072a:	f933 c012 	ldrsh.w	ip, [r3, r2, lsl #1]
                  params.input2_offset + input2_data[input2_offset_c];
 801072e:	9b48      	ldr	r3, [sp, #288]	; 0x120
              const int32_t input1_val =
 8010730:	4484      	add	ip, r0
              const int32_t input2_val =
 8010732:	68a2      	ldr	r2, [r4, #8]
                  params.input2_offset + input2_data[input2_offset_c];
 8010734:	f933 001b 	ldrsh.w	r0, [r3, fp, lsl #1]
              const int32_t input2_val =
 8010738:	4410      	add	r0, r2
                  MultiplyByQuantizedMultiplier(input1_val * input2_val,
 801073a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 801073e:	fb00 f00c 	mul.w	r0, r0, ip
 8010742:	f7f7 fcc1 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                  params.output_offset +
 8010746:	9b18      	ldr	r3, [sp, #96]	; 0x60
              output_data[output_offset_c] = static_cast<T>(clamped_output);
 8010748:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                  params.output_offset +
 801074a:	4418      	add	r0, r3
              input1_offset_c += desc1.strides[5];
 801074c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
              output_data[output_offset_c] = static_cast<T>(clamped_output);
 801074e:	4290      	cmp	r0, r2
 8010750:	bfb8      	it	lt
 8010752:	4610      	movlt	r0, r2
 8010754:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010756:	4290      	cmp	r0, r2
 8010758:	bfa8      	it	ge
 801075a:	4610      	movge	r0, r2
              input1_offset_c += desc1.strides[5];
 801075c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801075e:	4413      	add	r3, r2
              input2_offset_c += desc2.strides[5];
 8010760:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
              output_data[output_offset_c] = static_cast<T>(clamped_output);
 8010762:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
            for (int c = 0; c < extended_output_shape_dims[5]; ++c) {
 8010766:	3601      	adds	r6, #1
              input1_offset_c += desc1.strides[5];
 8010768:	930d      	str	r3, [sp, #52]	; 0x34
              input2_offset_c += desc2.strides[5];
 801076a:	4493      	add	fp, r2
            for (int c = 0; c < extended_output_shape_dims[5]; ++c) {
 801076c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801076e:	e7d3      	b.n	8010718 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xca>
            input1_offset_x += desc1.strides[4];
 8010770:	9a30      	ldr	r2, [sp, #192]	; 0xc0
          for (int x = 0; x < extended_output_shape_dims[4]; ++x) {
 8010772:	f108 0801 	add.w	r8, r8, #1
            input1_offset_x += desc1.strides[4];
 8010776:	4492      	add	sl, r2
            input2_offset_x += desc2.strides[4];
 8010778:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 801077a:	4491      	add	r9, r2
 801077c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801077e:	4417      	add	r7, r2
          for (int x = 0; x < extended_output_shape_dims[4]; ++x) {
 8010780:	e7c3      	b.n	801070a <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xbc>
          input1_offset_y += desc1.strides[3];
 8010782:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8010784:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010786:	4411      	add	r1, r2
          input2_offset_y += desc2.strides[3];
 8010788:	9a3b      	ldr	r2, [sp, #236]	; 0xec
          input1_offset_y += desc1.strides[3];
 801078a:	910a      	str	r1, [sp, #40]	; 0x28
          input2_offset_y += desc2.strides[3];
 801078c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801078e:	4411      	add	r1, r2
        for (int y = 0; y < extended_output_shape_dims[3]; ++y) {
 8010790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010792:	3201      	adds	r2, #1
          input2_offset_y += desc2.strides[3];
 8010794:	910b      	str	r1, [sp, #44]	; 0x2c
 8010796:	9917      	ldr	r1, [sp, #92]	; 0x5c
        for (int y = 0; y < extended_output_shape_dims[3]; ++y) {
 8010798:	920c      	str	r2, [sp, #48]	; 0x30
 801079a:	9a01      	ldr	r2, [sp, #4]
 801079c:	440a      	add	r2, r1
 801079e:	9201      	str	r2, [sp, #4]
 80107a0:	e7aa      	b.n	80106f8 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xaa>
        input1_offset_b += desc1.strides[2];
 80107a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80107a4:	9907      	ldr	r1, [sp, #28]
 80107a6:	4411      	add	r1, r2
        input2_offset_b += desc2.strides[2];
 80107a8:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
        input1_offset_b += desc1.strides[2];
 80107aa:	9107      	str	r1, [sp, #28]
        input2_offset_b += desc2.strides[2];
 80107ac:	9908      	ldr	r1, [sp, #32]
 80107ae:	4411      	add	r1, r2
      for (int b = 0; b < extended_output_shape_dims[2]; ++b) {
 80107b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107b2:	3201      	adds	r2, #1
        input2_offset_b += desc2.strides[2];
 80107b4:	9108      	str	r1, [sp, #32]
 80107b6:	9912      	ldr	r1, [sp, #72]	; 0x48
      for (int b = 0; b < extended_output_shape_dims[2]; ++b) {
 80107b8:	9209      	str	r2, [sp, #36]	; 0x24
 80107ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80107bc:	440a      	add	r2, r1
 80107be:	9210      	str	r2, [sp, #64]	; 0x40
 80107c0:	e78e      	b.n	80106e0 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x92>
      input1_offset_d += desc1.strides[1];
 80107c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80107c4:	9904      	ldr	r1, [sp, #16]
 80107c6:	4411      	add	r1, r2
      input2_offset_d += desc2.strides[1];
 80107c8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
      input1_offset_d += desc1.strides[1];
 80107ca:	9104      	str	r1, [sp, #16]
      input2_offset_d += desc2.strides[1];
 80107cc:	9905      	ldr	r1, [sp, #20]
 80107ce:	4411      	add	r1, r2
    for (int d = 0; d < extended_output_shape_dims[1]; ++d) {
 80107d0:	9a06      	ldr	r2, [sp, #24]
 80107d2:	3201      	adds	r2, #1
      input2_offset_d += desc2.strides[1];
 80107d4:	9105      	str	r1, [sp, #20]
 80107d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    for (int d = 0; d < extended_output_shape_dims[1]; ++d) {
 80107d8:	9206      	str	r2, [sp, #24]
 80107da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80107dc:	440a      	add	r2, r1
 80107de:	920f      	str	r2, [sp, #60]	; 0x3c
 80107e0:	e771      	b.n	80106c6 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x78>
    input1_offset_a += desc1.strides[0];
 80107e2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  for (int a = 0; a < extended_output_shape_dims[0]; ++a) {
 80107e4:	3301      	adds	r3, #1
    input1_offset_a += desc1.strides[0];
 80107e6:	9902      	ldr	r1, [sp, #8]
 80107e8:	4411      	add	r1, r2
    input2_offset_a += desc2.strides[0];
 80107ea:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    input1_offset_a += desc1.strides[0];
 80107ec:	9102      	str	r1, [sp, #8]
    input2_offset_a += desc2.strides[0];
 80107ee:	9903      	ldr	r1, [sp, #12]
 80107f0:	4411      	add	r1, r2
 80107f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80107f4:	9103      	str	r1, [sp, #12]
 80107f6:	4415      	add	r5, r2
  for (int a = 0; a < extended_output_shape_dims[0]; ++a) {
 80107f8:	e75a      	b.n	80106b0 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
}
 80107fa:	b03f      	add	sp, #252	; 0xfc
 80107fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010800 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIlZNS0_18BroadcastMul6DSlowIlLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_llE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_>:

  MulElementwise(flat_size, params, input1_data, input2_data, output_data);
}

template <typename T, typename F>
void BroadcastMulRecursiveDimensions(
 8010800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t* input2_offset_p, size_t* output_offset,
    const NdArrayDesc<kMaxMulBroadcastDim>& desc1,
    const NdArrayDesc<kMaxMulBroadcastDim>& desc2,
    const int32_t extended_output_shape_dims[kMaxMulBroadcastDim],
    F binary_func) {
  if (dimension == kMaxMulBroadcastDim - 1) {
 8010804:	2905      	cmp	r1, #5
void BroadcastMulRecursiveDimensions(
 8010806:	b08f      	sub	sp, #60	; 0x3c
 8010808:	4682      	mov	sl, r0
 801080a:	460e      	mov	r6, r1
 801080c:	4693      	mov	fp, r2
 801080e:	9309      	str	r3, [sp, #36]	; 0x24
 8010810:	e9dd 5419 	ldrd	r5, r4, [sp, #100]	; 0x64
 8010814:	e9dd 791b 	ldrd	r7, r9, [sp, #108]	; 0x6c
  if (dimension == kMaxMulBroadcastDim - 1) {
 8010818:	d034      	beq.n	8010884 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIlZNS0_18BroadcastMul6DSlowIlLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_llE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0x84>
      *input1_offset_p += desc1.strides[dimension];
      *input2_offset_p += desc2.strides[dimension];
      ++(*output_offset);
    }
  } else {
    for (int a = 0; a < extended_output_shape_dims[dimension]; ++a) {
 801081a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801081c:	f04f 0800 	mov.w	r8, #0
 8010820:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010824:	930a      	str	r3, [sp, #40]	; 0x28
      size_t input1_offset_c = *input1_offset_p;
      size_t input2_offset_c = *input2_offset_p;
      BroadcastMulRecursiveDimensions(
 8010826:	1c4b      	adds	r3, r1, #1
 8010828:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int a = 0; a < extended_output_shape_dims[dimension]; ++a) {
 801082a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	4543      	cmp	r3, r8
 8010830:	dd55      	ble.n	80108de <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIlZNS0_18BroadcastMul6DSlowIlLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_llE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0xde>
      size_t input1_offset_c = *input1_offset_p;
 8010832:	682b      	ldr	r3, [r5, #0]
      BroadcastMulRecursiveDimensions(
 8010834:	465a      	mov	r2, fp
 8010836:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010838:	4650      	mov	r0, sl
      size_t input1_offset_c = *input1_offset_p;
 801083a:	930c      	str	r3, [sp, #48]	; 0x30
    for (int a = 0; a < extended_output_shape_dims[dimension]; ++a) {
 801083c:	f108 0801 	add.w	r8, r8, #1
      size_t input2_offset_c = *input2_offset_p;
 8010840:	6823      	ldr	r3, [r4, #0]
      BroadcastMulRecursiveDimensions(
 8010842:	9703      	str	r7, [sp, #12]
      size_t input2_offset_c = *input2_offset_p;
 8010844:	930d      	str	r3, [sp, #52]	; 0x34
      BroadcastMulRecursiveDimensions(
 8010846:	f04f 0300 	mov.w	r3, #0
 801084a:	f88d 301c 	strb.w	r3, [sp, #28]
 801084e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010850:	9306      	str	r3, [sp, #24]
 8010852:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010854:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8010858:	ab0d      	add	r3, sp, #52	; 0x34
 801085a:	9302      	str	r3, [sp, #8]
 801085c:	ab0c      	add	r3, sp, #48	; 0x30
 801085e:	9301      	str	r3, [sp, #4]
 8010860:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010862:	9300      	str	r3, [sp, #0]
 8010864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010866:	f7ff ffcb 	bl	8010800 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIlZNS0_18BroadcastMul6DSlowIlLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_llE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_>
          params, dimension + 1, input1_data, input2_data, output_data,
          &input1_offset_c, &input2_offset_c, output_offset, desc1, desc2,
          extended_output_shape_dims, binary_func);
      *input1_offset_p += desc1.strides[dimension];
 801086a:	1db2      	adds	r2, r6, #6
 801086c:	682b      	ldr	r3, [r5, #0]
 801086e:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 8010872:	440b      	add	r3, r1
      *input2_offset_p += desc2.strides[dimension];
 8010874:	991d      	ldr	r1, [sp, #116]	; 0x74
      *input1_offset_p += desc1.strides[dimension];
 8010876:	602b      	str	r3, [r5, #0]
      *input2_offset_p += desc2.strides[dimension];
 8010878:	6823      	ldr	r3, [r4, #0]
 801087a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801087e:	4413      	add	r3, r2
 8010880:	6023      	str	r3, [r4, #0]
    for (int a = 0; a < extended_output_shape_dims[dimension]; ++a) {
 8010882:	e7d2      	b.n	801082a <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIlZNS0_18BroadcastMul6DSlowIlLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_llE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0x2a>
    for (int c = 0; c < extended_output_shape_dims[dimension]; ++c) {
 8010884:	2200      	movs	r2, #0
 8010886:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010888:	695b      	ldr	r3, [r3, #20]
 801088a:	4293      	cmp	r3, r2
 801088c:	dd27      	ble.n	80108de <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIlZNS0_18BroadcastMul6DSlowIlLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_llE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0xde>
      output_data[*output_offset] = binary_func(params, input1_val, input2_val);
 801088e:	683b      	ldr	r3, [r7, #0]
    for (int c = 0; c < extended_output_shape_dims[dimension]; ++c) {
 8010890:	3201      	adds	r2, #1
      const T input1_val = input1_data[*input1_offset_p];
 8010892:	682e      	ldr	r6, [r5, #0]
      output_data[*output_offset] = binary_func(params, input1_val, input2_val);
 8010894:	930a      	str	r3, [sp, #40]	; 0x28
         const T input2_val) {
        T output_activation_min;
        T output_activation_max;
        GetActivationParams(params, &output_activation_min,
                            &output_activation_max);
        return ActivationFunctionWithMinMax<T>(input1_val * input2_val,
 8010896:	9809      	ldr	r0, [sp, #36]	; 0x24
      const T input2_val = input2_data[*input2_offset_p];
 8010898:	6823      	ldr	r3, [r4, #0]
      output_data[*output_offset] = binary_func(params, input1_val, input2_val);
 801089a:	9918      	ldr	r1, [sp, #96]	; 0x60
        return ActivationFunctionWithMinMax<T>(input1_val * input2_val,
 801089c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80108a0:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
 80108a4:	4343      	muls	r3, r0
      output_data[*output_offset] = binary_func(params, input1_val, input2_val);
 80108a6:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80108aa:	4283      	cmp	r3, r0
 80108ac:	bfb8      	it	lt
 80108ae:	4603      	movlt	r3, r0
 80108b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80108b2:	469c      	mov	ip, r3
 80108b4:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80108b8:	459c      	cmp	ip, r3
 80108ba:	bfd4      	ite	le
 80108bc:	f841 c020 	strle.w	ip, [r1, r0, lsl #2]
 80108c0:	f841 3020 	strgt.w	r3, [r1, r0, lsl #2]
      *input1_offset_p += desc1.strides[dimension];
 80108c4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
      *input2_offset_p += desc2.strides[dimension];
 80108c8:	991d      	ldr	r1, [sp, #116]	; 0x74
      *input1_offset_p += desc1.strides[dimension];
 80108ca:	441e      	add	r6, r3
 80108cc:	602e      	str	r6, [r5, #0]
      *input2_offset_p += desc2.strides[dimension];
 80108ce:	6823      	ldr	r3, [r4, #0]
 80108d0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80108d2:	440b      	add	r3, r1
 80108d4:	6023      	str	r3, [r4, #0]
      ++(*output_offset);
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	3301      	adds	r3, #1
 80108da:	603b      	str	r3, [r7, #0]
    for (int c = 0; c < extended_output_shape_dims[dimension]; ++c) {
 80108dc:	e7d3      	b.n	8010886 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIlZNS0_18BroadcastMul6DSlowIlLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_llE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0x86>
}
 80108de:	b00f      	add	sp, #60	; 0x3c
 80108e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080108e4 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_>:

TfLiteStatus EvalMulQuantizedReference(TfLiteContext* context, TfLiteNode* node,
                                       const OpDataMul* data,
                                       const TfLiteEvalTensor* input1,
                                       const TfLiteEvalTensor* input2,
                                       TfLiteEvalTensor* output) {
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 80108ec:	4614      	mov	r4, r2
  tflite::ArithmeticParams op_params = {};
 80108ee:	2100      	movs	r1, #0
 80108f0:	2268      	movs	r2, #104	; 0x68
                                       TfLiteEvalTensor* output) {
 80108f2:	4681      	mov	r9, r0
  tflite::ArithmeticParams op_params = {};
 80108f4:	a890      	add	r0, sp, #576	; 0x240
                                       TfLiteEvalTensor* output) {
 80108f6:	4698      	mov	r8, r3
 80108f8:	9db4      	ldr	r5, [sp, #720]	; 0x2d0
 80108fa:	f8dd a2d4 	ldr.w	sl, [sp, #724]	; 0x2d4
  tflite::ArithmeticParams op_params = {};
 80108fe:	f006 fab3 	bl	8016e68 <memset>
  op_params.quantized_activation_min = data->output_activation_min;
 8010902:	68a3      	ldr	r3, [r4, #8]
  op_params.output_offset = data->output_zero_point;
  op_params.output_multiplier = data->output_multiplier;
  op_params.output_shift = data->output_shift;

  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
      tflite::micro::GetTensorShape(input1),
 8010904:	ae78      	add	r6, sp, #480	; 0x1e0
      tflite::micro::GetTensorShape(input2), &op_params);
 8010906:	af84      	add	r7, sp, #528	; 0x210
      tflite::micro::GetTensorShape(input1),
 8010908:	4641      	mov	r1, r8
  op_params.quantized_activation_min = data->output_activation_min;
 801090a:	939b      	str	r3, [sp, #620]	; 0x26c
      tflite::micro::GetTensorShape(input1),
 801090c:	4630      	mov	r0, r6
  op_params.quantized_activation_max = data->output_activation_max;
 801090e:	68e3      	ldr	r3, [r4, #12]
 8010910:	939c      	str	r3, [sp, #624]	; 0x270
  op_params.float_activation_max = data->output_activation_max_f32;
 8010912:	6a23      	ldr	r3, [r4, #32]
 8010914:	939e      	str	r3, [sp, #632]	; 0x278
  op_params.input1_offset = -data->input1_zero_point;
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	425b      	negs	r3, r3
 801091a:	9391      	str	r3, [sp, #580]	; 0x244
  op_params.input2_offset = -data->input2_zero_point;
 801091c:	6863      	ldr	r3, [r4, #4]
 801091e:	425b      	negs	r3, r3
 8010920:	9392      	str	r3, [sp, #584]	; 0x248
  op_params.output_offset = data->output_zero_point;
 8010922:	6923      	ldr	r3, [r4, #16]
 8010924:	9393      	str	r3, [sp, #588]	; 0x24c
  op_params.output_multiplier = data->output_multiplier;
 8010926:	6963      	ldr	r3, [r4, #20]
 8010928:	9394      	str	r3, [sp, #592]	; 0x250
  op_params.output_shift = data->output_shift;
 801092a:	69a3      	ldr	r3, [r4, #24]
 801092c:	9395      	str	r3, [sp, #596]	; 0x254
      tflite::micro::GetTensorShape(input1),
 801092e:	f7ff f9d8 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
 8010932:	4629      	mov	r1, r5
 8010934:	4638      	mov	r0, r7
 8010936:	f7ff f9d4 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801093a:	aa90      	add	r2, sp, #576	; 0x240
 801093c:	4639      	mov	r1, r7
 801093e:	4630      	mov	r0, r6
 8010940:	f7fa fba1 	bl	800b086 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>

  if (input1->type == kTfLiteInt8) {
 8010944:	f898 3008 	ldrb.w	r3, [r8, #8]
      tflite::micro::GetTensorShape(input2), &op_params);
 8010948:	4683      	mov	fp, r0
  if (input1->type == kTfLiteInt8) {
 801094a:	2b09      	cmp	r3, #9
 801094c:	d160      	bne.n	8010a10 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x12c>
    if (need_broadcast) {
      reference_integer_ops::BroadcastMul4DSlow(
          op_params, tflite::micro::GetTensorShape(input1),
 801094e:	4641      	mov	r1, r8
    if (need_broadcast) {
 8010950:	b308      	cbz	r0, 8010996 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0xb2>
          op_params, tflite::micro::GetTensorShape(input1),
 8010952:	a808      	add	r0, sp, #32
 8010954:	f7ff f9c5 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorData<int8_t>(input1),
          tflite::micro::GetTensorShape(input2),
 8010958:	4629      	mov	r1, r5
 801095a:	a80f      	add	r0, sp, #60	; 0x3c
  return reinterpret_cast<const T*>(tensor->data.raw);
 801095c:	f8d8 6000 	ldr.w	r6, [r8]
 8010960:	f7ff f9bf 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010964:	b90d      	cbnz	r5, 801096a <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x86>
 8010966:	f006 f9ed 	bl	8016d44 <abort>
          tflite::micro::GetTensorData<int8_t>(input2),
          tflite::micro::GetTensorShape(output),
 801096a:	ac16      	add	r4, sp, #88	; 0x58
 801096c:	4651      	mov	r1, sl
  return reinterpret_cast<const T*>(tensor->data.raw);
 801096e:	682d      	ldr	r5, [r5, #0]
 8010970:	4620      	mov	r0, r4
 8010972:	f7ff f9b6 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010976:	f1ba 0f00 	cmp.w	sl, #0
 801097a:	d0f4      	beq.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
template <typename T>
inline void BroadcastMul4DSlow(
    const ArithmeticParams& params, const RuntimeShape& input1_shape,
    const T* input1_data, const RuntimeShape& input2_shape,
    const T* input2_data, const RuntimeShape& output_shape, T* output_data) {
  BroadcastMul6DSlow(params, input1_shape, input1_data, input2_shape,
 801097c:	f8da 3000 	ldr.w	r3, [sl]
 8010980:	4632      	mov	r2, r6
 8010982:	9500      	str	r5, [sp, #0]
 8010984:	a908      	add	r1, sp, #32
 8010986:	a890      	add	r0, sp, #576	; 0x240
 8010988:	e9cd 4301 	strd	r4, r3, [sp, #4]
 801098c:	ab0f      	add	r3, sp, #60	; 0x3c
 801098e:	f7ff fd6f 	bl	8010470 <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
                                 tflite::micro::GetTensorData<int16_t>(input2),
                                 tflite::micro::GetTensorShape(output),
                                 tflite::micro::GetTensorData<int16_t>(output));
    }
  }
  return kTfLiteOk;
 8010992:	2000      	movs	r0, #0
 8010994:	e0d8      	b.n	8010b48 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x264>
                                 tflite::micro::GetTensorShape(input1),
 8010996:	a81d      	add	r0, sp, #116	; 0x74
 8010998:	f7ff f9a3 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                 tflite::micro::GetTensorShape(input2),
 801099c:	4629      	mov	r1, r5
 801099e:	a824      	add	r0, sp, #144	; 0x90
  return reinterpret_cast<const T*>(tensor->data.raw);
 80109a0:	f8d8 6000 	ldr.w	r6, [r8]
 80109a4:	f7ff f99d 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 80109a8:	2d00      	cmp	r5, #0
 80109aa:	d0dc      	beq.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
                                 tflite::micro::GetTensorShape(output),
 80109ac:	4651      	mov	r1, sl
 80109ae:	a82b      	add	r0, sp, #172	; 0xac
  return reinterpret_cast<const T*>(tensor->data.raw);
 80109b0:	682d      	ldr	r5, [r5, #0]
 80109b2:	f7ff f996 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 80109b6:	f1ba 0f00 	cmp.w	sl, #0
 80109ba:	d0d4      	beq.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 80109bc:	9a9b      	ldr	r2, [sp, #620]	; 0x26c
 80109be:	9b9c      	ldr	r3, [sp, #624]	; 0x270
  return reinterpret_cast<T*>(tensor->data.raw);
 80109c0:	f8da 7000 	ldr.w	r7, [sl]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	dcce      	bgt.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  const int flat_size =
 80109c8:	aa2b      	add	r2, sp, #172	; 0xac
 80109ca:	a924      	add	r1, sp, #144	; 0x90
 80109cc:	a81d      	add	r0, sp, #116	; 0x74
 80109ce:	f7fa fa5f 	bl	800ae90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 80109d2:	4680      	mov	r8, r0
  for (int i = 0; i < size; ++i) {
 80109d4:	45d8      	cmp	r8, fp
 80109d6:	dddc      	ble.n	8010992 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0xae>
    const int32_t input1_val = params.input1_offset + input1_data[i];
 80109d8:	f916 300b 	ldrsb.w	r3, [r6, fp]
 80109dc:	9891      	ldr	r0, [sp, #580]	; 0x244
    const int32_t input2_val = params.input2_offset + input2_data[i];
 80109de:	9a92      	ldr	r2, [sp, #584]	; 0x248
    const int32_t input1_val = params.input1_offset + input1_data[i];
 80109e0:	4403      	add	r3, r0
    const int32_t input2_val = params.input2_offset + input2_data[i];
 80109e2:	f915 000b 	ldrsb.w	r0, [r5, fp]
        params.output_offset +
 80109e6:	9c93      	ldr	r4, [sp, #588]	; 0x24c
    const int32_t input2_val = params.input2_offset + input2_data[i];
 80109e8:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
 80109ea:	9994      	ldr	r1, [sp, #592]	; 0x250
 80109ec:	9a95      	ldr	r2, [sp, #596]	; 0x254
 80109ee:	4358      	muls	r0, r3
 80109f0:	f7f7 fb6a 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
        params.output_offset +
 80109f4:	4404      	add	r4, r0
    output_data[i] = static_cast<OutputType>(clamped_output);
 80109f6:	989b      	ldr	r0, [sp, #620]	; 0x26c
 80109f8:	4284      	cmp	r4, r0
 80109fa:	bfb8      	it	lt
 80109fc:	4604      	movlt	r4, r0
 80109fe:	989c      	ldr	r0, [sp, #624]	; 0x270
 8010a00:	4284      	cmp	r4, r0
 8010a02:	bfa8      	it	ge
 8010a04:	4604      	movge	r4, r0
 8010a06:	f807 400b 	strb.w	r4, [r7, fp]
  for (int i = 0; i < size; ++i) {
 8010a0a:	f10b 0b01 	add.w	fp, fp, #1
 8010a0e:	e7e1      	b.n	80109d4 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0xf0>
  } else if (input1->type == kTfLiteInt32) {
 8010a10:	2b02      	cmp	r3, #2
 8010a12:	f040 8085 	bne.w	8010b20 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x23c>
          op_params, tflite::micro::GetTensorShape(input1),
 8010a16:	4641      	mov	r1, r8
    if (need_broadcast) {
 8010a18:	2800      	cmp	r0, #0
 8010a1a:	d04e      	beq.n	8010aba <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x1d6>
          op_params, tflite::micro::GetTensorShape(input1),
 8010a1c:	a832      	add	r0, sp, #200	; 0xc8
 8010a1e:	f7ff f960 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(input2),
 8010a22:	4629      	mov	r1, r5
 8010a24:	a839      	add	r0, sp, #228	; 0xe4
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010a26:	f8d8 8000 	ldr.w	r8, [r8]
 8010a2a:	f7ff f95a 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010a2e:	2d00      	cmp	r5, #0
 8010a30:	d099      	beq.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
          tflite::micro::GetTensorShape(output),
 8010a32:	4651      	mov	r1, sl
 8010a34:	a840      	add	r0, sp, #256	; 0x100
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010a36:	f8d5 9000 	ldr.w	r9, [r5]
 8010a3a:	f7ff f952 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010a3e:	f1ba 0f00 	cmp.w	sl, #0
 8010a42:	d090      	beq.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 6);
 8010a44:	9b32      	ldr	r3, [sp, #200]	; 0xc8
  return reinterpret_cast<T*>(tensor->data.raw);
 8010a46:	f8da a000 	ldr.w	sl, [sl]
 8010a4a:	2b06      	cmp	r3, #6
 8010a4c:	dc8b      	bgt.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 6);
 8010a4e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8010a50:	2b06      	cmp	r3, #6
 8010a52:	dc88      	bgt.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 6);
 8010a54:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8010a56:	2b06      	cmp	r3, #6
 8010a58:	dc85      	bgt.n	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
 8010a5a:	463b      	mov	r3, r7
 8010a5c:	4632      	mov	r2, r6
 8010a5e:	a939      	add	r1, sp, #228	; 0xe4
 8010a60:	a832      	add	r0, sp, #200	; 0xc8
 8010a62:	f7ff fcc2 	bl	80103ea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
 8010a66:	aa40      	add	r2, sp, #256	; 0x100
 8010a68:	2301      	movs	r3, #1
 8010a6a:	2106      	movs	r1, #6
 8010a6c:	a871      	add	r0, sp, #452	; 0x1c4
  std::memcpy(extended_output_shape_dims, extended_output_shape.DimsData(),
 8010a6e:	ad72      	add	r5, sp, #456	; 0x1c8
 8010a70:	f7f7 fd1a 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 8010a74:	f50d 7cd4 	add.w	ip, sp, #424	; 0x1a8
 8010a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a7a:	4664      	mov	r4, ip
 8010a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a7e:	e895 0003 	ldmia.w	r5, {r0, r1}
  size_t input1_offset = 0;
 8010a82:	ab55      	add	r3, sp, #340	; 0x154
  size_t input2_offset = 0;
 8010a84:	aa5c      	add	r2, sp, #368	; 0x170
  std::memcpy(extended_output_shape_dims, extended_output_shape.DimsData(),
 8010a86:	e884 0003 	stmia.w	r4, {r0, r1}
  size_t input1_offset = 0;
 8010a8a:	2400      	movs	r4, #0
  size_t output_offset = 0;
 8010a8c:	a963      	add	r1, sp, #396	; 0x18c
  BroadcastMulRecursiveDimensions(
 8010a8e:	f04f 0000 	mov.w	r0, #0
 8010a92:	f8cd a000 	str.w	sl, [sp]
  size_t input1_offset = 0;
 8010a96:	9455      	str	r4, [sp, #340]	; 0x154
  BroadcastMulRecursiveDimensions(
 8010a98:	f88d 001c 	strb.w	r0, [sp, #28]
 8010a9c:	a890      	add	r0, sp, #576	; 0x240
  size_t input2_offset = 0;
 8010a9e:	945c      	str	r4, [sp, #368]	; 0x170
  size_t output_offset = 0;
 8010aa0:	9463      	str	r4, [sp, #396]	; 0x18c
  BroadcastMulRecursiveDimensions(
 8010aa2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010aa6:	e9cd 1603 	strd	r1, r6, [sp, #12]
 8010aaa:	e9cd 7c05 	strd	r7, ip, [sp, #20]
 8010aae:	464b      	mov	r3, r9
 8010ab0:	4642      	mov	r2, r8
 8010ab2:	4621      	mov	r1, r4
 8010ab4:	f7ff fea4 	bl	8010800 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIlZNS0_18BroadcastMul6DSlowIlLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_llE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_>
 8010ab8:	e76b      	b.n	8010992 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0xae>
      reference_ops::Mul(op_params, tflite::micro::GetTensorShape(input1),
 8010aba:	a847      	add	r0, sp, #284	; 0x11c
 8010abc:	f7ff f911 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                         tflite::micro::GetTensorShape(input2),
 8010ac0:	4629      	mov	r1, r5
 8010ac2:	a84e      	add	r0, sp, #312	; 0x138
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010ac4:	f8d8 6000 	ldr.w	r6, [r8]
 8010ac8:	f7ff f90b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010acc:	2d00      	cmp	r5, #0
 8010ace:	f43f af4a 	beq.w	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
                         tflite::micro::GetTensorShape(output),
 8010ad2:	4651      	mov	r1, sl
 8010ad4:	a855      	add	r0, sp, #340	; 0x154
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010ad6:	682d      	ldr	r5, [r5, #0]
 8010ad8:	f7ff f903 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010adc:	f1ba 0f00 	cmp.w	sl, #0
 8010ae0:	f43f af41 	beq.w	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  const int flat_size =
 8010ae4:	aa55      	add	r2, sp, #340	; 0x154
 8010ae6:	a94e      	add	r1, sp, #312	; 0x138
 8010ae8:	a847      	add	r0, sp, #284	; 0x11c
  return reinterpret_cast<T*>(tensor->data.raw);
 8010aea:	f8da 4000 	ldr.w	r4, [sl]
 8010aee:	f7ff fafd 	bl	80100ec <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_S2_>
  params->int64_activation_max = max;
}

template <typename P>
inline void GetActivationParams(const P& params, int32_t* min, int32_t* max) {
  *min = params.quantized_activation_min;
 8010af2:	f8dd 826c 	ldr.w	r8, [sp, #620]	; 0x26c
  *max = params.quantized_activation_max;
 8010af6:	9f9c      	ldr	r7, [sp, #624]	; 0x270
  for (int i = 0; i < flat_size; ++i) {
 8010af8:	465b      	mov	r3, fp
 8010afa:	4298      	cmp	r0, r3
 8010afc:	f77f af49 	ble.w	8010992 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0xae>
    output_data[i] = ActivationFunctionWithMinMax<T>(
 8010b00:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8010b04:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8010b08:	434a      	muls	r2, r1
 8010b0a:	4542      	cmp	r2, r8
 8010b0c:	bfb8      	it	lt
 8010b0e:	4642      	movlt	r2, r8
 8010b10:	42ba      	cmp	r2, r7
 8010b12:	bfd4      	ite	le
 8010b14:	f844 2023 	strle.w	r2, [r4, r3, lsl #2]
 8010b18:	f844 7023 	strgt.w	r7, [r4, r3, lsl #2]
  for (int i = 0; i < flat_size; ++i) {
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	e7ec      	b.n	8010afa <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x216>
  } else if (input1->type == kTfLiteInt16) {
 8010b20:	2b07      	cmp	r3, #7
 8010b22:	f47f af36 	bne.w	8010992 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0xae>
    TF_LITE_ENSURE_EQ(context, op_params.input1_offset, 0);
 8010b26:	9a91      	ldr	r2, [sp, #580]	; 0x244
 8010b28:	b192      	cbz	r2, 8010b50 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x26c>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b30:	4b46      	ldr	r3, [pc, #280]	; (8010c4c <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x368>)
 8010b32:	9301      	str	r3, [sp, #4]
 8010b34:	4b46      	ldr	r3, [pc, #280]	; (8010c50 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x36c>)
 8010b36:	9300      	str	r3, [sp, #0]
 8010b38:	239d      	movs	r3, #157	; 0x9d
 8010b3a:	f8d9 4014 	ldr.w	r4, [r9, #20]
    TF_LITE_ENSURE_EQ(context, op_params.input2_offset, 0);
 8010b3e:	4648      	mov	r0, r9
 8010b40:	4a44      	ldr	r2, [pc, #272]	; (8010c54 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x370>)
 8010b42:	4945      	ldr	r1, [pc, #276]	; (8010c58 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x374>)
 8010b44:	47a0      	blx	r4
 8010b46:	2001      	movs	r0, #1
}
 8010b48:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 8010b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_EQ(context, op_params.input2_offset, 0);
 8010b50:	9b92      	ldr	r3, [sp, #584]	; 0x248
 8010b52:	b14b      	cbz	r3, 8010b68 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x284>
 8010b54:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010b58:	4b3c      	ldr	r3, [pc, #240]	; (8010c4c <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x368>)
 8010b5a:	9301      	str	r3, [sp, #4]
 8010b5c:	4b3f      	ldr	r3, [pc, #252]	; (8010c5c <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x378>)
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	239e      	movs	r3, #158	; 0x9e
 8010b62:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8010b66:	e7ea      	b.n	8010b3e <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x25a>
    TF_LITE_ENSURE_EQ(context, op_params.output_offset, 0);
 8010b68:	9c93      	ldr	r4, [sp, #588]	; 0x24c
 8010b6a:	b14c      	cbz	r4, 8010b80 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x29c>
 8010b6c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8010b70:	4b36      	ldr	r3, [pc, #216]	; (8010c4c <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x368>)
 8010b72:	9301      	str	r3, [sp, #4]
 8010b74:	4b3a      	ldr	r3, [pc, #232]	; (8010c60 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x37c>)
 8010b76:	9300      	str	r3, [sp, #0]
 8010b78:	239f      	movs	r3, #159	; 0x9f
 8010b7a:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8010b7e:	e7de      	b.n	8010b3e <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x25a>
          op_params, tflite::micro::GetTensorShape(input1),
 8010b80:	4641      	mov	r1, r8
    if (need_broadcast) {
 8010b82:	b308      	cbz	r0, 8010bc8 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x2e4>
          op_params, tflite::micro::GetTensorShape(input1),
 8010b84:	a85c      	add	r0, sp, #368	; 0x170
 8010b86:	f7ff f8ac 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(input2),
 8010b8a:	4629      	mov	r1, r5
 8010b8c:	a863      	add	r0, sp, #396	; 0x18c
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010b8e:	f8d8 6000 	ldr.w	r6, [r8]
 8010b92:	f7ff f8a6 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010b96:	2d00      	cmp	r5, #0
 8010b98:	f43f aee5 	beq.w	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010b9c:	682f      	ldr	r7, [r5, #0]
          tflite::micro::GetTensorShape(output),
 8010b9e:	ad6a      	add	r5, sp, #424	; 0x1a8
 8010ba0:	4651      	mov	r1, sl
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f7ff f89d 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010ba8:	f1ba 0f00 	cmp.w	sl, #0
 8010bac:	f43f aedb 	beq.w	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  BroadcastMul6DSlow(params, input1_shape, input1_data, input2_shape,
 8010bb0:	f8da 3000 	ldr.w	r3, [sl]
 8010bb4:	4632      	mov	r2, r6
 8010bb6:	9700      	str	r7, [sp, #0]
 8010bb8:	a95c      	add	r1, sp, #368	; 0x170
 8010bba:	a890      	add	r0, sp, #576	; 0x240
 8010bbc:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8010bc0:	ab63      	add	r3, sp, #396	; 0x18c
 8010bc2:	f7ff fd44 	bl	801064e <_ZN6tflite21reference_integer_ops18BroadcastMul6DSlowIsEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
 8010bc6:	e6e4      	b.n	8010992 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0xae>
                                 tflite::micro::GetTensorShape(input1),
 8010bc8:	a871      	add	r0, sp, #452	; 0x1c4
 8010bca:	f7ff f88a 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                 tflite::micro::GetTensorShape(input2),
 8010bce:	4629      	mov	r1, r5
 8010bd0:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010bd2:	f8d8 8000 	ldr.w	r8, [r8]
 8010bd6:	f7ff f884 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010bda:	2d00      	cmp	r5, #0
 8010bdc:	f43f aec3 	beq.w	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
                                 tflite::micro::GetTensorShape(output),
 8010be0:	4651      	mov	r1, sl
 8010be2:	4638      	mov	r0, r7
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010be4:	f8d5 9000 	ldr.w	r9, [r5]
 8010be8:	f7ff f87b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010bec:	f1ba 0f00 	cmp.w	sl, #0
 8010bf0:	f43f aeb9 	beq.w	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8010bf4:	9a9b      	ldr	r2, [sp, #620]	; 0x26c
 8010bf6:	9b9c      	ldr	r3, [sp, #624]	; 0x270
  return reinterpret_cast<T*>(tensor->data.raw);
 8010bf8:	f8da 5000 	ldr.w	r5, [sl]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	f73f aeb2 	bgt.w	8010966 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x82>
  const int flat_size =
 8010c02:	463a      	mov	r2, r7
 8010c04:	4631      	mov	r1, r6
 8010c06:	a871      	add	r0, sp, #452	; 0x1c4
  for (int i = 0; i < size; ++i) {
 8010c08:	2600      	movs	r6, #0
  const int flat_size =
 8010c0a:	f7fa f941 	bl	800ae90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 8010c0e:	4607      	mov	r7, r0
  for (int i = 0; i < size; ++i) {
 8010c10:	42b7      	cmp	r7, r6
 8010c12:	f77f aebe 	ble.w	8010992 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0xae>
    const int32_t input1_val = params.input1_offset + input1_data[i];
 8010c16:	f938 3016 	ldrsh.w	r3, [r8, r6, lsl #1]
 8010c1a:	9891      	ldr	r0, [sp, #580]	; 0x244
    const int32_t input2_val = params.input2_offset + input2_data[i];
 8010c1c:	9a92      	ldr	r2, [sp, #584]	; 0x248
    const int32_t input1_val = params.input1_offset + input1_data[i];
 8010c1e:	4403      	add	r3, r0
    const int32_t input2_val = params.input2_offset + input2_data[i];
 8010c20:	f939 0016 	ldrsh.w	r0, [r9, r6, lsl #1]
        params.output_offset +
 8010c24:	9c93      	ldr	r4, [sp, #588]	; 0x24c
    const int32_t input2_val = params.input2_offset + input2_data[i];
 8010c26:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
 8010c28:	9994      	ldr	r1, [sp, #592]	; 0x250
 8010c2a:	9a95      	ldr	r2, [sp, #596]	; 0x254
 8010c2c:	4358      	muls	r0, r3
 8010c2e:	f7f7 fa4b 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
        params.output_offset +
 8010c32:	4420      	add	r0, r4
    output_data[i] = static_cast<OutputType>(clamped_output);
 8010c34:	9c9b      	ldr	r4, [sp, #620]	; 0x26c
 8010c36:	42a0      	cmp	r0, r4
 8010c38:	bfb8      	it	lt
 8010c3a:	4620      	movlt	r0, r4
 8010c3c:	9c9c      	ldr	r4, [sp, #624]	; 0x270
 8010c3e:	42a0      	cmp	r0, r4
 8010c40:	bfa8      	it	ge
 8010c42:	4620      	movge	r0, r4
 8010c44:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
  for (int i = 0; i < size; ++i) {
 8010c48:	3601      	adds	r6, #1
 8010c4a:	e7e1      	b.n	8010c10 <_ZN6tflite25EvalMulQuantizedReferenceEP13TfLiteContextP10TfLiteNodePKNS_9OpDataMulEPK16TfLiteEvalTensorS9_PS7_+0x32c>
 8010c4c:	080fc4d7 	.word	0x080fc4d7
 8010c50:	080fc60c 	.word	0x080fc60c
 8010c54:	080fc570 	.word	0x080fc570
 8010c58:	080f982c 	.word	0x080f982c
 8010c5c:	080fc624 	.word	0x080fc624
 8010c60:	080fc63c 	.word	0x080fc63c

08010c64 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIfZNS0_18BroadcastMul6DSlowIfLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_ffE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_>:
void BroadcastMulRecursiveDimensions(
 8010c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (dimension == kMaxMulBroadcastDim - 1) {
 8010c68:	2905      	cmp	r1, #5
void BroadcastMulRecursiveDimensions(
 8010c6a:	b08f      	sub	sp, #60	; 0x3c
 8010c6c:	469b      	mov	fp, r3
 8010c6e:	4682      	mov	sl, r0
 8010c70:	460e      	mov	r6, r1
 8010c72:	9209      	str	r2, [sp, #36]	; 0x24
    for (int c = 0; c < extended_output_shape_dims[dimension]; ++c) {
 8010c74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
void BroadcastMulRecursiveDimensions(
 8010c76:	e9dd 5419 	ldrd	r5, r4, [sp, #100]	; 0x64
 8010c7a:	e9dd 791b 	ldrd	r7, r9, [sp, #108]	; 0x6c
  if (dimension == kMaxMulBroadcastDim - 1) {
 8010c7e:	d033      	beq.n	8010ce8 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIfZNS0_18BroadcastMul6DSlowIfLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_ffE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0x84>
    for (int a = 0; a < extended_output_shape_dims[dimension]; ++a) {
 8010c80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010c84:	f04f 0800 	mov.w	r8, #0
 8010c88:	930a      	str	r3, [sp, #40]	; 0x28
      BroadcastMulRecursiveDimensions(
 8010c8a:	1c4b      	adds	r3, r1, #1
 8010c8c:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int a = 0; a < extended_output_shape_dims[dimension]; ++a) {
 8010c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4543      	cmp	r3, r8
 8010c94:	dd5f      	ble.n	8010d56 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIfZNS0_18BroadcastMul6DSlowIfLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_ffE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0xf2>
      size_t input1_offset_c = *input1_offset_p;
 8010c96:	682b      	ldr	r3, [r5, #0]
      BroadcastMulRecursiveDimensions(
 8010c98:	4650      	mov	r0, sl
 8010c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    for (int a = 0; a < extended_output_shape_dims[dimension]; ++a) {
 8010c9c:	f108 0801 	add.w	r8, r8, #1
      size_t input1_offset_c = *input1_offset_p;
 8010ca0:	930c      	str	r3, [sp, #48]	; 0x30
      size_t input2_offset_c = *input2_offset_p;
 8010ca2:	6823      	ldr	r3, [r4, #0]
      BroadcastMulRecursiveDimensions(
 8010ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
      size_t input2_offset_c = *input2_offset_p;
 8010ca6:	930d      	str	r3, [sp, #52]	; 0x34
      BroadcastMulRecursiveDimensions(
 8010ca8:	f04f 0300 	mov.w	r3, #0
 8010cac:	9703      	str	r7, [sp, #12]
 8010cae:	f88d 301c 	strb.w	r3, [sp, #28]
 8010cb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010cb4:	9306      	str	r3, [sp, #24]
 8010cb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010cb8:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8010cbc:	ab0d      	add	r3, sp, #52	; 0x34
 8010cbe:	9302      	str	r3, [sp, #8]
 8010cc0:	ab0c      	add	r3, sp, #48	; 0x30
 8010cc2:	9301      	str	r3, [sp, #4]
 8010cc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	465b      	mov	r3, fp
 8010cca:	f7ff ffcb 	bl	8010c64 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIfZNS0_18BroadcastMul6DSlowIfLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_ffE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_>
      *input1_offset_p += desc1.strides[dimension];
 8010cce:	1db2      	adds	r2, r6, #6
 8010cd0:	682b      	ldr	r3, [r5, #0]
 8010cd2:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 8010cd6:	440b      	add	r3, r1
      *input2_offset_p += desc2.strides[dimension];
 8010cd8:	991d      	ldr	r1, [sp, #116]	; 0x74
      *input1_offset_p += desc1.strides[dimension];
 8010cda:	602b      	str	r3, [r5, #0]
      *input2_offset_p += desc2.strides[dimension];
 8010cdc:	6823      	ldr	r3, [r4, #0]
 8010cde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	6023      	str	r3, [r4, #0]
    for (int a = 0; a < extended_output_shape_dims[dimension]; ++a) {
 8010ce6:	e7d2      	b.n	8010c8e <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIfZNS0_18BroadcastMul6DSlowIfLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_ffE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0x2a>
    for (int c = 0; c < extended_output_shape_dims[dimension]; ++c) {
 8010ce8:	6959      	ldr	r1, [r3, #20]
 8010cea:	2300      	movs	r3, #0
 8010cec:	4299      	cmp	r1, r3
 8010cee:	dd32      	ble.n	8010d56 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIfZNS0_18BroadcastMul6DSlowIfLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_ffE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0xf2>
      output_data[*output_offset] = binary_func(params, input1_val, input2_val);
 8010cf0:	6838      	ldr	r0, [r7, #0]
    for (int c = 0; c < extended_output_shape_dims[dimension]; ++c) {
 8010cf2:	3301      	adds	r3, #1
      output_data[*output_offset] = binary_func(params, input1_val, input2_val);
 8010cf4:	9a18      	ldr	r2, [sp, #96]	; 0x60
      const T input1_val = input1_data[*input1_offset_p];
 8010cf6:	f8d5 c000 	ldr.w	ip, [r5]
      const T input2_val = input2_data[*input2_offset_p];
 8010cfa:	6826      	ldr	r6, [r4, #0]
      output_data[*output_offset] = binary_func(params, input1_val, input2_val);
 8010cfc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
      const T input1_val = input1_data[*input1_offset_p];
 8010d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
      const T input2_val = input2_data[*input2_offset_p];
 8010d02:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
  *max = params.int16_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
  *min = params.float_activation_min;
 8010d06:	edda 6a0d 	vldr	s13, [sl, #52]	; 0x34
      const T input1_val = input1_data[*input1_offset_p];
 8010d0a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
  *max = params.float_activation_max;
 8010d0e:	ed9a 7a0e 	vldr	s14, [sl, #56]	; 0x38
        return ActivationFunctionWithMinMax<T>(input1_val * input2_val,
 8010d12:	edd6 7a00 	vldr	s15, [r6]
 8010d16:	ed92 6a00 	vldr	s12, [r2]
      *input1_offset_p += desc1.strides[dimension];
 8010d1a:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
        return ActivationFunctionWithMinMax<T>(input1_val * input2_val,
 8010d1e:	ee67 7a86 	vmul.f32	s15, s15, s12
      *input1_offset_p += desc1.strides[dimension];
 8010d22:	4462      	add	r2, ip
	return __b;
 8010d24:	eef4 6a67 	vcmp.f32	s13, s15
 8010d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2c:	fe76 7aa7 	vselgt.f32	s15, s13, s15
	return __b;
 8010d30:	eeb4 7a67 	vcmp.f32	s14, s15
 8010d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d38:	bf48      	it	mi
 8010d3a:	eef0 7a47 	vmovmi.f32	s15, s14
      output_data[*output_offset] = binary_func(params, input1_val, input2_val);
 8010d3e:	edc0 7a00 	vstr	s15, [r0]
      *input2_offset_p += desc2.strides[dimension];
 8010d42:	981d      	ldr	r0, [sp, #116]	; 0x74
      *input1_offset_p += desc1.strides[dimension];
 8010d44:	602a      	str	r2, [r5, #0]
      *input2_offset_p += desc2.strides[dimension];
 8010d46:	6822      	ldr	r2, [r4, #0]
 8010d48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8010d4a:	4402      	add	r2, r0
 8010d4c:	6022      	str	r2, [r4, #0]
      ++(*output_offset);
 8010d4e:	683a      	ldr	r2, [r7, #0]
 8010d50:	3201      	adds	r2, #1
 8010d52:	603a      	str	r2, [r7, #0]
    for (int c = 0; c < extended_output_shape_dims[dimension]; ++c) {
 8010d54:	e7ca      	b.n	8010cec <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIfZNS0_18BroadcastMul6DSlowIfLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_ffE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_+0x88>
}
 8010d56:	b00f      	add	sp, #60	; 0x3c
 8010d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d5c <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_>:

void EvalMulFloatReference(TfLiteContext* context, TfLiteNode* node,
                           TfLiteMulParams* params, const OpDataMul* data,
                           const TfLiteEvalTensor* input1,
                           const TfLiteEvalTensor* input2,
                           TfLiteEvalTensor* output) {
 8010d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d60:	ed2d 8b02 	vpush	{d8}
 8010d64:	b0e0      	sub	sp, #384	; 0x180
 8010d66:	461e      	mov	r6, r3
  tflite::ArithmeticParams op_params = {};
 8010d68:	2268      	movs	r2, #104	; 0x68
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	a846      	add	r0, sp, #280	; 0x118
                           TfLiteEvalTensor* output) {
 8010d6e:	9d6a      	ldr	r5, [sp, #424]	; 0x1a8
 8010d70:	9c6b      	ldr	r4, [sp, #428]	; 0x1ac
  op_params.float_activation_min = data->output_activation_min_f32;
  op_params.float_activation_max = data->output_activation_max_f32;

  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
      tflite::micro::GetTensorShape(input1),
 8010d72:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
                           TfLiteEvalTensor* output) {
 8010d76:	9f6c      	ldr	r7, [sp, #432]	; 0x1b0
  tflite::ArithmeticParams op_params = {};
 8010d78:	f006 f876 	bl	8016e68 <memset>
  op_params.float_activation_min = data->output_activation_min_f32;
 8010d7c:	69f3      	ldr	r3, [r6, #28]
      tflite::micro::GetTensorShape(input2), &op_params);
 8010d7e:	f10d 09e8 	add.w	r9, sp, #232	; 0xe8
      tflite::micro::GetTensorShape(input1),
 8010d82:	4629      	mov	r1, r5
 8010d84:	4640      	mov	r0, r8
  op_params.float_activation_min = data->output_activation_min_f32;
 8010d86:	9353      	str	r3, [sp, #332]	; 0x14c
  op_params.float_activation_max = data->output_activation_max_f32;
 8010d88:	6a33      	ldr	r3, [r6, #32]
 8010d8a:	9354      	str	r3, [sp, #336]	; 0x150
      tflite::micro::GetTensorShape(input1),
 8010d8c:	f7fe ffa9 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
 8010d90:	4621      	mov	r1, r4
 8010d92:	4648      	mov	r0, r9
 8010d94:	f7fe ffa5 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8010d98:	4649      	mov	r1, r9
 8010d9a:	aa46      	add	r2, sp, #280	; 0x118
 8010d9c:	4640      	mov	r0, r8
 8010d9e:	f7fa f972 	bl	800b086 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>

  if (need_broadcast) {
    reference_ops::BroadcastMul4DSlow(
        op_params, tflite::micro::GetTensorShape(input1),
 8010da2:	4629      	mov	r1, r5
  if (need_broadcast) {
 8010da4:	4606      	mov	r6, r0
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d050      	beq.n	8010e4c <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0xf0>
        op_params, tflite::micro::GetTensorShape(input1),
 8010daa:	a812      	add	r0, sp, #72	; 0x48
 8010dac:	f7fe ff99 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010db0:	b90d      	cbnz	r5, 8010db6 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x5a>
 8010db2:	f005 ffc7 	bl	8016d44 <abort>
        tflite::micro::GetTensorData<float>(input1),
        tflite::micro::GetTensorShape(input2),
 8010db6:	4621      	mov	r1, r4
 8010db8:	a819      	add	r0, sp, #100	; 0x64
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010dba:	682e      	ldr	r6, [r5, #0]
 8010dbc:	f7fe ff91 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010dc0:	2c00      	cmp	r4, #0
 8010dc2:	d0f6      	beq.n	8010db2 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x56>
        tflite::micro::GetTensorData<float>(input2),
        tflite::micro::GetTensorShape(output),
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	a820      	add	r0, sp, #128	; 0x80
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010dc8:	f8d4 a000 	ldr.w	sl, [r4]
 8010dcc:	f7fe ff89 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010dd0:	2f00      	cmp	r7, #0
 8010dd2:	d0ee      	beq.n	8010db2 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x56>
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 6);
 8010dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  return reinterpret_cast<T*>(tensor->data.raw);
 8010dd6:	683f      	ldr	r7, [r7, #0]
 8010dd8:	2b06      	cmp	r3, #6
 8010dda:	dcea      	bgt.n	8010db2 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x56>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 6);
 8010ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010dde:	2b06      	cmp	r3, #6
 8010de0:	dce7      	bgt.n	8010db2 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x56>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 6);
 8010de2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010de4:	2b06      	cmp	r3, #6
 8010de6:	dce4      	bgt.n	8010db2 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x56>
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
 8010de8:	464b      	mov	r3, r9
 8010dea:	4642      	mov	r2, r8
 8010dec:	a919      	add	r1, sp, #100	; 0x64
 8010dee:	a812      	add	r0, sp, #72	; 0x48
 8010df0:	f7ff fafb 	bl	80103ea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi6EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
 8010df4:	2301      	movs	r3, #1
 8010df6:	aa20      	add	r2, sp, #128	; 0x80
 8010df8:	2106      	movs	r1, #6
 8010dfa:	a827      	add	r0, sp, #156	; 0x9c
  std::memcpy(extended_output_shape_dims, extended_output_shape.DimsData(),
 8010dfc:	ad28      	add	r5, sp, #160	; 0xa0
 8010dfe:	f7f7 fb53 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 8010e02:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e08:	4664      	mov	r4, ip
 8010e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e0c:	e895 0003 	ldmia.w	r5, {r0, r1}
  size_t input1_offset = 0;
 8010e10:	ab09      	add	r3, sp, #36	; 0x24
  size_t input2_offset = 0;
 8010e12:	aa0a      	add	r2, sp, #40	; 0x28
  std::memcpy(extended_output_shape_dims, extended_output_shape.DimsData(),
 8010e14:	e884 0003 	stmia.w	r4, {r0, r1}
  size_t output_offset = 0;
 8010e18:	a80b      	add	r0, sp, #44	; 0x2c
  BroadcastMulRecursiveDimensions(
 8010e1a:	f04f 0400 	mov.w	r4, #0
  size_t input1_offset = 0;
 8010e1e:	2100      	movs	r1, #0
  BroadcastMulRecursiveDimensions(
 8010e20:	9700      	str	r7, [sp, #0]
 8010e22:	f88d 401c 	strb.w	r4, [sp, #28]
  size_t input1_offset = 0;
 8010e26:	9109      	str	r1, [sp, #36]	; 0x24
  size_t input2_offset = 0;
 8010e28:	910a      	str	r1, [sp, #40]	; 0x28
  size_t output_offset = 0;
 8010e2a:	910b      	str	r1, [sp, #44]	; 0x2c
  BroadcastMulRecursiveDimensions(
 8010e2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010e30:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8010e34:	e9cd 9c05 	strd	r9, ip, [sp, #20]
 8010e38:	4653      	mov	r3, sl
 8010e3a:	4632      	mov	r2, r6
 8010e3c:	a846      	add	r0, sp, #280	; 0x118
 8010e3e:	f7ff ff11 	bl	8010c64 <_ZN6tflite13reference_ops31BroadcastMulRecursiveDimensionsIfZNS0_18BroadcastMul6DSlowIfLb0EEENSt9enable_ifIXoontsrNS_16is_small_integerIT_EE5valueT0_EvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS5_SE_SG_SE_PS5_EUlSB_ffE_EEvSB_iSG_SG_SH_PjSJ_SJ_RKNS_11NdArrayDescILi6EEESN_PKlT0_>
                       tflite::micro::GetTensorShape(input2),
                       tflite::micro::GetTensorData<float>(input2),
                       tflite::micro::GetTensorShape(output),
                       tflite::micro::GetTensorData<float>(output));
  }
}
 8010e42:	b060      	add	sp, #384	; 0x180
 8010e44:	ecbd 8b02 	vpop	{d8}
 8010e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    reference_ops::Mul(op_params, tflite::micro::GetTensorShape(input1),
 8010e4c:	a827      	add	r0, sp, #156	; 0x9c
 8010e4e:	f7fe ff48 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010e52:	2d00      	cmp	r5, #0
 8010e54:	d0ad      	beq.n	8010db2 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x56>
                       tflite::micro::GetTensorShape(input2),
 8010e56:	4621      	mov	r1, r4
 8010e58:	4640      	mov	r0, r8
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010e5a:	682d      	ldr	r5, [r5, #0]
 8010e5c:	f7fe ff41 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010e60:	2c00      	cmp	r4, #0
 8010e62:	d0a6      	beq.n	8010db2 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x56>
                       tflite::micro::GetTensorShape(output),
 8010e64:	4639      	mov	r1, r7
 8010e66:	4648      	mov	r0, r9
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010e68:	6824      	ldr	r4, [r4, #0]
 8010e6a:	f7fe ff3a 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8010e6e:	2f00      	cmp	r7, #0
 8010e70:	d09f      	beq.n	8010db2 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x56>
  const int flat_size =
 8010e72:	464a      	mov	r2, r9
 8010e74:	4641      	mov	r1, r8
 8010e76:	a827      	add	r0, sp, #156	; 0x9c
  *min = params.float_activation_min;
 8010e78:	eddd 8a53 	vldr	s17, [sp, #332]	; 0x14c
 8010e7c:	f7ff f936 	bl	80100ec <_ZN6tflite29MatchingExtendedShapeFlatSizeERKNS_12RuntimeShapeES2_S2_>
  *max = params.float_activation_max;
 8010e80:	ed9d 8a54 	vldr	s16, [sp, #336]	; 0x150
 8010e84:	683f      	ldr	r7, [r7, #0]
 8010e86:	4629      	mov	r1, r5
 8010e88:	4622      	mov	r2, r4
  for (int i = 0; i < flat_size; ++i) {
 8010e8a:	4633      	mov	r3, r6
 8010e8c:	4298      	cmp	r0, r3
 8010e8e:	ddd8      	ble.n	8010e42 <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0xe6>
        input1_data[i] * input2_data[i], output_activation_min,
 8010e90:	ecf1 7a01 	vldmia	r1!, {s15}
  for (int i = 0; i < flat_size; ++i) {
 8010e94:	3301      	adds	r3, #1
        input1_data[i] * input2_data[i], output_activation_min,
 8010e96:	ecb2 7a01 	vldmia	r2!, {s14}
    output_data[i] = ActivationFunctionWithMinMax<T>(
 8010e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
	return __b;
 8010e9e:	eef4 8a67 	vcmp.f32	s17, s15
 8010ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea6:	fe78 7aa7 	vselgt.f32	s15, s17, s15
	return __b;
 8010eaa:	eeb4 8a67 	vcmp.f32	s16, s15
 8010eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb2:	bf48      	it	mi
 8010eb4:	eef0 7a48 	vmovmi.f32	s15, s16
 8010eb8:	ece7 7a01 	vstmia	r7!, {s15}
 8010ebc:	e7e6      	b.n	8010e8c <_ZN6tflite21EvalMulFloatReferenceEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPKNS_9OpDataMulEPK16TfLiteEvalTensorSB_PS9_+0x130>
	...

08010ec0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec4:	b085      	sub	sp, #20
  const TfLitePackParams* data =
      reinterpret_cast<TfLitePackParams*>(node->builtin_data);

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8010ec6:	2200      	movs	r2, #0
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010ec8:	460c      	mov	r4, r1
  const TfLitePackParams* data =
 8010eca:	694d      	ldr	r5, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010ecc:	9001      	str	r0, [sp, #4]
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8010ece:	f7fe fefa 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8010ed2:	4606      	mov	r6, r0

  switch (output->type) {
 8010ed4:	7a00      	ldrb	r0, [r0, #8]
 8010ed6:	1e43      	subs	r3, r0, #1
 8010ed8:	2b08      	cmp	r3, #8
 8010eda:	f200 8197 	bhi.w	801120c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x34c>
 8010ede:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010ee2:	0009      	.short	0x0009
 8010ee4:	019500cb 	.word	0x019500cb
 8010ee8:	0195012c 	.word	0x0195012c
 8010eec:	01950195 	.word	0x01950195
 8010ef0:	006e0195 	.word	0x006e0195
  const TfLiteEvalTensor* input0 =
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	4621      	mov	r1, r4
 8010ef8:	9801      	ldr	r0, [sp, #4]
  int outer_size = 1;
 8010efa:	2701      	movs	r7, #1
    case kTfLiteFloat32: {
      return PackImpl<float>(context, node, output, data->values_count,
                             data->axis);
 8010efc:	e9d5 9500 	ldrd	r9, r5, [r5]
  const TfLiteEvalTensor* input0 =
 8010f00:	f7fe fedf 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const int dimensions = output->dims->size;
 8010f04:	6871      	ldr	r1, [r6, #4]
  if (axis < 0) {
 8010f06:	2d00      	cmp	r5, #0
  const TfLiteIntArray* input_dims = input0->dims;
 8010f08:	6842      	ldr	r2, [r0, #4]
  const int dimensions = output->dims->size;
 8010f0a:	f8d1 c000 	ldr.w	ip, [r1]
 8010f0e:	f101 0004 	add.w	r0, r1, #4
  for (int i = 0; i < axis; ++i) {
 8010f12:	f04f 0300 	mov.w	r3, #0
    axis += dimensions;
 8010f16:	bfb8      	it	lt
 8010f18:	4465      	addlt	r5, ip
  for (int i = 0; i < axis; ++i) {
 8010f1a:	429d      	cmp	r5, r3
 8010f1c:	dd05      	ble.n	8010f2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    outer_size *= output_dims->data[i];
 8010f1e:	f850 eb04 	ldr.w	lr, [r0], #4
  for (int i = 0; i < axis; ++i) {
 8010f22:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
 8010f24:	fb0e f707 	mul.w	r7, lr, r7
 8010f28:	e7f7      	b.n	8010f1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  for (int i = axis + 1; i < dimensions; ++i) {
 8010f2a:	1c6b      	adds	r3, r5, #1
  int copy_size = 1;
 8010f2c:	2501      	movs	r5, #1
  for (int i = axis + 1; i < dimensions; ++i) {
 8010f2e:	459c      	cmp	ip, r3
 8010f30:	f103 0001 	add.w	r0, r3, #1
 8010f34:	dc0b      	bgt.n	8010f4e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8e>
  for (int i = 0; i < input_dims->size; ++i) {
 8010f36:	4613      	mov	r3, r2
 8010f38:	2100      	movs	r1, #0
  int input_size = 1;
 8010f3a:	2201      	movs	r2, #1
  for (int i = 0; i < input_dims->size; ++i) {
 8010f3c:	f853 cb04 	ldr.w	ip, [r3], #4
 8010f40:	458c      	cmp	ip, r1
 8010f42:	dd09      	ble.n	8010f58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
    input_size *= input_dims->data[i];
 8010f44:	f853 0b04 	ldr.w	r0, [r3], #4
  for (int i = 0; i < input_dims->size; ++i) {
 8010f48:	3101      	adds	r1, #1
    input_size *= input_dims->data[i];
 8010f4a:	4342      	muls	r2, r0
 8010f4c:	e7f8      	b.n	8010f40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>
    copy_size *= output_dims->data[i];
 8010f4e:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8010f52:	435d      	muls	r5, r3
 8010f54:	4603      	mov	r3, r0
 8010f56:	e7ea      	b.n	8010f2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
 8010f58:	fb05 f307 	mul.w	r3, r5, r7
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d001      	beq.n	8010f64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
 8010f60:	f005 fef0 	bl	8016d44 <abort>
 8010f64:	fb05 fb09 	mul.w	fp, r5, r9
 8010f68:	f8d6 8000 	ldr.w	r8, [r6]
 8010f6c:	ea4f 0a85 	mov.w	sl, r5, lsl #2
  for (int i = 0; i < values_count; ++i) {
 8010f70:	2600      	movs	r6, #0
 8010f72:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8010f76:	45b1      	cmp	r9, r6
 8010f78:	dc03      	bgt.n	8010f82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
                             data->axis);
 8010f7a:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
 8010f7c:	b005      	add	sp, #20
 8010f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 8010f82:	4632      	mov	r2, r6
 8010f84:	4621      	mov	r1, r4
 8010f86:	9801      	ldr	r0, [sp, #4]
 8010f88:	f7fe fe9b 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	d0e7      	beq.n	8010f60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
 8010f90:	6802      	ldr	r2, [r0, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8010f92:	4643      	mov	r3, r8
    for (int k = 0; k < outer_size; ++k) {
 8010f94:	2100      	movs	r1, #0
 8010f96:	428f      	cmp	r7, r1
 8010f98:	dd0e      	ble.n	8010fb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>
 8010f9a:	469c      	mov	ip, r3
 8010f9c:	4696      	mov	lr, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
 8010f9e:	2000      	movs	r0, #0
 8010fa0:	4285      	cmp	r5, r0
 8010fa2:	dd05      	ble.n	8010fb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
 8010fa4:	ecfe 7a01 	vldmia	lr!, {s15}
 8010fa8:	3001      	adds	r0, #1
 8010faa:	ecec 7a01 	vstmia	ip!, {s15}
 8010fae:	e7f7      	b.n	8010fa0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>
    for (int k = 0; k < outer_size; ++k) {
 8010fb0:	3101      	adds	r1, #1
 8010fb2:	4452      	add	r2, sl
 8010fb4:	445b      	add	r3, fp
 8010fb6:	e7ee      	b.n	8010f96 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
  for (int i = 0; i < values_count; ++i) {
 8010fb8:	3601      	adds	r6, #1
 8010fba:	44d0      	add	r8, sl
 8010fbc:	e7db      	b.n	8010f76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  const TfLiteEvalTensor* input0 =
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	9801      	ldr	r0, [sp, #4]
  int outer_size = 1;
 8010fc4:	2701      	movs	r7, #1
                              data->axis);
 8010fc6:	e9d5 9500 	ldrd	r9, r5, [r5]
  const TfLiteEvalTensor* input0 =
 8010fca:	f7fe fe7a 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const int dimensions = output->dims->size;
 8010fce:	6871      	ldr	r1, [r6, #4]
  if (axis < 0) {
 8010fd0:	2d00      	cmp	r5, #0
  const TfLiteIntArray* input_dims = input0->dims;
 8010fd2:	6842      	ldr	r2, [r0, #4]
  const int dimensions = output->dims->size;
 8010fd4:	f8d1 c000 	ldr.w	ip, [r1]
 8010fd8:	f101 0004 	add.w	r0, r1, #4
  for (int i = 0; i < axis; ++i) {
 8010fdc:	f04f 0300 	mov.w	r3, #0
    axis += dimensions;
 8010fe0:	bfb8      	it	lt
 8010fe2:	4465      	addlt	r5, ip
  for (int i = 0; i < axis; ++i) {
 8010fe4:	429d      	cmp	r5, r3
 8010fe6:	dd05      	ble.n	8010ff4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x134>
    outer_size *= output_dims->data[i];
 8010fe8:	f850 eb04 	ldr.w	lr, [r0], #4
  for (int i = 0; i < axis; ++i) {
 8010fec:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
 8010fee:	fb0e f707 	mul.w	r7, lr, r7
 8010ff2:	e7f7      	b.n	8010fe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x124>
  for (int i = axis + 1; i < dimensions; ++i) {
 8010ff4:	1c6b      	adds	r3, r5, #1
  int copy_size = 1;
 8010ff6:	2501      	movs	r5, #1
  for (int i = axis + 1; i < dimensions; ++i) {
 8010ff8:	459c      	cmp	ip, r3
 8010ffa:	f103 0001 	add.w	r0, r3, #1
 8010ffe:	dc0b      	bgt.n	8011018 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x158>
  for (int i = 0; i < input_dims->size; ++i) {
 8011000:	4613      	mov	r3, r2
 8011002:	2100      	movs	r1, #0
  int input_size = 1;
 8011004:	2201      	movs	r2, #1
  for (int i = 0; i < input_dims->size; ++i) {
 8011006:	f853 cb04 	ldr.w	ip, [r3], #4
 801100a:	458c      	cmp	ip, r1
 801100c:	dd09      	ble.n	8011022 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x162>
    input_size *= input_dims->data[i];
 801100e:	f853 0b04 	ldr.w	r0, [r3], #4
  for (int i = 0; i < input_dims->size; ++i) {
 8011012:	3101      	adds	r1, #1
    input_size *= input_dims->data[i];
 8011014:	4342      	muls	r2, r0
 8011016:	e7f8      	b.n	801100a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    copy_size *= output_dims->data[i];
 8011018:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 801101c:	435d      	muls	r5, r3
 801101e:	4603      	mov	r3, r0
 8011020:	e7ea      	b.n	8010ff8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x138>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
 8011022:	fb05 f307 	mul.w	r3, r5, r7
 8011026:	429a      	cmp	r2, r3
 8011028:	d19a      	bne.n	8010f60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
 801102a:	f8d6 8000 	ldr.w	r8, [r6]
 801102e:	fb05 fa09 	mul.w	sl, r5, r9
  for (int i = 0; i < values_count; ++i) {
 8011032:	2600      	movs	r6, #0
 8011034:	45b1      	cmp	r9, r6
 8011036:	dda0      	ble.n	8010f7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 8011038:	4632      	mov	r2, r6
 801103a:	4621      	mov	r1, r4
 801103c:	9801      	ldr	r0, [sp, #4]
 801103e:	f7fe fe40 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 8011042:	2800      	cmp	r0, #0
 8011044:	d08c      	beq.n	8010f60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
 8011046:	6803      	ldr	r3, [r0, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011048:	4641      	mov	r1, r8
    for (int k = 0; k < outer_size; ++k) {
 801104a:	2000      	movs	r0, #0
 801104c:	425a      	negs	r2, r3
 801104e:	4287      	cmp	r7, r0
 8011050:	dd0f      	ble.n	8011072 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b2>
 8011052:	468e      	mov	lr, r1
 8011054:	469c      	mov	ip, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
 8011056:	eb0c 0b02 	add.w	fp, ip, r2
 801105a:	455d      	cmp	r5, fp
 801105c:	dd04      	ble.n	8011068 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
 801105e:	f91c bb01 	ldrsb.w	fp, [ip], #1
 8011062:	f80e bb01 	strb.w	fp, [lr], #1
 8011066:	e7f6      	b.n	8011056 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x196>
    for (int k = 0; k < outer_size; ++k) {
 8011068:	3001      	adds	r0, #1
 801106a:	442b      	add	r3, r5
 801106c:	4451      	add	r1, sl
 801106e:	1b52      	subs	r2, r2, r5
 8011070:	e7ed      	b.n	801104e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18e>
  for (int i = 0; i < values_count; ++i) {
 8011072:	3601      	adds	r6, #1
 8011074:	44a8      	add	r8, r5
 8011076:	e7dd      	b.n	8011034 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x174>
  const TfLiteEvalTensor* input0 =
 8011078:	2200      	movs	r2, #0
 801107a:	4621      	mov	r1, r4
 801107c:	9801      	ldr	r0, [sp, #4]
  int outer_size = 1;
 801107e:	f04f 0901 	mov.w	r9, #1
                               data->axis);
 8011082:	e9d5 8500 	ldrd	r8, r5, [r5]
  const TfLiteEvalTensor* input0 =
 8011086:	f7fe fe1c 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const int dimensions = output->dims->size;
 801108a:	6872      	ldr	r2, [r6, #4]
  if (axis < 0) {
 801108c:	2d00      	cmp	r5, #0
  const TfLiteIntArray* input_dims = input0->dims;
 801108e:	6843      	ldr	r3, [r0, #4]
  const int dimensions = output->dims->size;
 8011090:	f8d2 c000 	ldr.w	ip, [r2]
 8011094:	f102 0004 	add.w	r0, r2, #4
  for (int i = 0; i < axis; ++i) {
 8011098:	f04f 0100 	mov.w	r1, #0
    axis += dimensions;
 801109c:	bfb8      	it	lt
 801109e:	4465      	addlt	r5, ip
  for (int i = 0; i < axis; ++i) {
 80110a0:	428d      	cmp	r5, r1
 80110a2:	dd05      	ble.n	80110b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f0>
    outer_size *= output_dims->data[i];
 80110a4:	f850 7b04 	ldr.w	r7, [r0], #4
  for (int i = 0; i < axis; ++i) {
 80110a8:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
 80110aa:	fb07 f909 	mul.w	r9, r7, r9
 80110ae:	e7f7      	b.n	80110a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
  for (int i = axis + 1; i < dimensions; ++i) {
 80110b0:	3501      	adds	r5, #1
  int copy_size = 1;
 80110b2:	2701      	movs	r7, #1
  for (int i = axis + 1; i < dimensions; ++i) {
 80110b4:	45ac      	cmp	ip, r5
 80110b6:	f105 0001 	add.w	r0, r5, #1
 80110ba:	dc0a      	bgt.n	80110d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
  for (int i = 0; i < input_dims->size; ++i) {
 80110bc:	f853 5b04 	ldr.w	r5, [r3], #4
  int input_size = 1;
 80110c0:	2201      	movs	r2, #1
  for (int i = 0; i < input_dims->size; ++i) {
 80110c2:	2100      	movs	r1, #0
 80110c4:	428d      	cmp	r5, r1
 80110c6:	dd09      	ble.n	80110dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>
    input_size *= input_dims->data[i];
 80110c8:	f853 0b04 	ldr.w	r0, [r3], #4
  for (int i = 0; i < input_dims->size; ++i) {
 80110cc:	3101      	adds	r1, #1
    input_size *= input_dims->data[i];
 80110ce:	4342      	muls	r2, r0
 80110d0:	e7f8      	b.n	80110c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x204>
    copy_size *= output_dims->data[i];
 80110d2:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80110d6:	4605      	mov	r5, r0
 80110d8:	434f      	muls	r7, r1
 80110da:	e7eb      	b.n	80110b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f4>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
 80110dc:	fb07 f309 	mul.w	r3, r7, r9
 80110e0:	429a      	cmp	r2, r3
 80110e2:	f47f af3d 	bne.w	8010f60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
 80110e6:	fb07 fb08 	mul.w	fp, r7, r8
 80110ea:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 80110ee:	6836      	ldr	r6, [r6, #0]
  for (int i = 0; i < values_count; ++i) {
 80110f0:	2500      	movs	r5, #0
 80110f2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80110f6:	45a8      	cmp	r8, r5
 80110f8:	f77f af3f 	ble.w	8010f7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 80110fc:	462a      	mov	r2, r5
 80110fe:	4621      	mov	r1, r4
 8011100:	9801      	ldr	r0, [sp, #4]
 8011102:	f7fe fdde 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 8011106:	2800      	cmp	r0, #0
 8011108:	f43f af2a 	beq.w	8010f60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
 801110c:	6800      	ldr	r0, [r0, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 801110e:	4632      	mov	r2, r6
    for (int k = 0; k < outer_size; ++k) {
 8011110:	f04f 0c00 	mov.w	ip, #0
 8011114:	45e1      	cmp	r9, ip
 8011116:	dd0d      	ble.n	8011134 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
 8011118:	2300      	movs	r3, #0
 801111a:	429f      	cmp	r7, r3
 801111c:	dd05      	ble.n	801112a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26a>
 801111e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8011122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8011126:	3301      	adds	r3, #1
 8011128:	e7f7      	b.n	801111a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25a>
    for (int k = 0; k < outer_size; ++k) {
 801112a:	f10c 0c01 	add.w	ip, ip, #1
 801112e:	4450      	add	r0, sl
 8011130:	445a      	add	r2, fp
 8011132:	e7ef      	b.n	8011114 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
  for (int i = 0; i < values_count; ++i) {
 8011134:	3501      	adds	r5, #1
 8011136:	4456      	add	r6, sl
 8011138:	e7dd      	b.n	80110f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
      return PackImpl<int64_t>(context, node, output, data->values_count,
 801113a:	682b      	ldr	r3, [r5, #0]
  const TfLiteEvalTensor* input0 =
 801113c:	2200      	movs	r2, #0
 801113e:	4621      	mov	r1, r4
 8011140:	9801      	ldr	r0, [sp, #4]
                               data->axis);
 8011142:	686d      	ldr	r5, [r5, #4]
  int outer_size = 1;
 8011144:	2701      	movs	r7, #1
      return PackImpl<int64_t>(context, node, output, data->values_count,
 8011146:	9302      	str	r3, [sp, #8]
  const TfLiteEvalTensor* input0 =
 8011148:	f7fe fdbb 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const int dimensions = output->dims->size;
 801114c:	6871      	ldr	r1, [r6, #4]
  if (axis < 0) {
 801114e:	2d00      	cmp	r5, #0
  const TfLiteIntArray* input_dims = input0->dims;
 8011150:	6842      	ldr	r2, [r0, #4]
  for (int i = 0; i < axis; ++i) {
 8011152:	f04f 0300 	mov.w	r3, #0
  const int dimensions = output->dims->size;
 8011156:	f8d1 c000 	ldr.w	ip, [r1]
 801115a:	f101 0004 	add.w	r0, r1, #4
    axis += dimensions;
 801115e:	bfb8      	it	lt
 8011160:	4465      	addlt	r5, ip
  for (int i = 0; i < axis; ++i) {
 8011162:	429d      	cmp	r5, r3
 8011164:	dd05      	ble.n	8011172 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b2>
    outer_size *= output_dims->data[i];
 8011166:	f850 eb04 	ldr.w	lr, [r0], #4
  for (int i = 0; i < axis; ++i) {
 801116a:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
 801116c:	fb0e f707 	mul.w	r7, lr, r7
 8011170:	e7f7      	b.n	8011162 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a2>
  for (int i = axis + 1; i < dimensions; ++i) {
 8011172:	1c6b      	adds	r3, r5, #1
  int copy_size = 1;
 8011174:	2501      	movs	r5, #1
  for (int i = axis + 1; i < dimensions; ++i) {
 8011176:	459c      	cmp	ip, r3
 8011178:	f103 0001 	add.w	r0, r3, #1
 801117c:	dc0b      	bgt.n	8011196 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d6>
  for (int i = 0; i < input_dims->size; ++i) {
 801117e:	4613      	mov	r3, r2
 8011180:	2100      	movs	r1, #0
  int input_size = 1;
 8011182:	2201      	movs	r2, #1
  for (int i = 0; i < input_dims->size; ++i) {
 8011184:	f853 cb04 	ldr.w	ip, [r3], #4
 8011188:	458c      	cmp	ip, r1
 801118a:	dd09      	ble.n	80111a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>
    input_size *= input_dims->data[i];
 801118c:	f853 0b04 	ldr.w	r0, [r3], #4
  for (int i = 0; i < input_dims->size; ++i) {
 8011190:	3101      	adds	r1, #1
    input_size *= input_dims->data[i];
 8011192:	4342      	muls	r2, r0
 8011194:	e7f8      	b.n	8011188 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
    copy_size *= output_dims->data[i];
 8011196:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 801119a:	435d      	muls	r5, r3
 801119c:	4603      	mov	r3, r0
 801119e:	e7ea      	b.n	8011176 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b6>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
 80111a0:	fb05 f307 	mul.w	r3, r5, r7
 80111a4:	429a      	cmp	r2, r3
 80111a6:	f47f aedb 	bne.w	8010f60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
 80111aa:	9b02      	ldr	r3, [sp, #8]
 80111ac:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 80111b0:	f8d6 8000 	ldr.w	r8, [r6]
  for (int i = 0; i < values_count; ++i) {
 80111b4:	2600      	movs	r6, #0
 80111b6:	436b      	muls	r3, r5
 80111b8:	00db      	lsls	r3, r3, #3
 80111ba:	9303      	str	r3, [sp, #12]
 80111bc:	9b02      	ldr	r3, [sp, #8]
 80111be:	42b3      	cmp	r3, r6
 80111c0:	f77f aedb 	ble.w	8010f7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
    const TfLiteEvalTensor* t = tflite::micro::GetEvalInput(context, node, i);
 80111c4:	4632      	mov	r2, r6
 80111c6:	4621      	mov	r1, r4
 80111c8:	9801      	ldr	r0, [sp, #4]
 80111ca:	f7fe fd7a 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(tensor != nullptr);
 80111ce:	2800      	cmp	r0, #0
 80111d0:	f43f aec6 	beq.w	8010f60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
 80111d4:	6802      	ldr	r2, [r0, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80111d6:	4643      	mov	r3, r8
    for (int k = 0; k < outer_size; ++k) {
 80111d8:	f04f 0c00 	mov.w	ip, #0
 80111dc:	4567      	cmp	r7, ip
 80111de:	dd12      	ble.n	8011206 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x346>
 80111e0:	4699      	mov	r9, r3
 80111e2:	4692      	mov	sl, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
 80111e4:	f04f 0e00 	mov.w	lr, #0
 80111e8:	4575      	cmp	r5, lr
 80111ea:	dd06      	ble.n	80111fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33a>
 80111ec:	f10e 0e01 	add.w	lr, lr, #1
 80111f0:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80111f4:	e8e9 0102 	strd	r0, r1, [r9], #8
 80111f8:	e7f6      	b.n	80111e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x328>
 80111fa:	9903      	ldr	r1, [sp, #12]
    for (int k = 0; k < outer_size; ++k) {
 80111fc:	f10c 0c01 	add.w	ip, ip, #1
 8011200:	445a      	add	r2, fp
 8011202:	440b      	add	r3, r1
 8011204:	e7ea      	b.n	80111dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31c>
  for (int i = 0; i < values_count; ++i) {
 8011206:	3601      	adds	r6, #1
 8011208:	44d8      	add	r8, fp
 801120a:	e7d7      	b.n	80111bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      MicroPrintf("Type '%s' is not supported by pack.",
 801120c:	f7f6 ff50 	bl	80080b0 <TfLiteTypeGetName>
 8011210:	4601      	mov	r1, r0
 8011212:	4802      	ldr	r0, [pc, #8]	; (801121c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35c>)
 8011214:	f7f9 fd50 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8011218:	2001      	movs	r0, #1
 801121a:	e6af      	b.n	8010f7c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
 801121c:	080fc654 	.word	0x080fc654

08011220 <_ZN6tflite13Register_PACKEv>:

}  // namespace

TFLMRegistration Register_PACK() {
  return tflite::micro::RegisterOp(nullptr, nullptr, Eval);
 8011220:	2200      	movs	r2, #0
 8011222:	4b05      	ldr	r3, [pc, #20]	; (8011238 <_ZN6tflite13Register_PACKEv+0x18>)
TFLMRegistration Register_PACK() {
 8011224:	b513      	push	{r0, r1, r4, lr}
 8011226:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(nullptr, nullptr, Eval);
 8011228:	4611      	mov	r1, r2
 801122a:	e9cd 2200 	strd	r2, r2, [sp]
 801122e:	f7fe fd21 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 8011232:	4620      	mov	r0, r4
 8011234:	b002      	add	sp, #8
 8011236:	bd10      	pop	{r4, pc}
 8011238:	08010ec1 	.word	0x08010ec1

0801123c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  PadParams params;
  int32_t output_zero_point;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801123c:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801123e:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011240:	b90b      	cbnz	r3, 8011246 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 8011242:	f005 fd7f 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8011246:	2138      	movs	r1, #56	; 0x38
}
 8011248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801124c:	4718      	bx	r3
	...

08011250 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus PadPrepare(TfLiteContext* context, TfLiteNode* node) {
 8011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);

  TFLITE_DCHECK(node->user_data != nullptr);
 8011254:	f8d1 a010 	ldr.w	sl, [r1, #16]
TfLiteStatus PadPrepare(TfLiteContext* context, TfLiteNode* node) {
 8011258:	4604      	mov	r4, r0
 801125a:	460f      	mov	r7, r1
 801125c:	ed2d 8b02 	vpush	{d8}
 8011260:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
 8011262:	f1ba 0f00 	cmp.w	sl, #0
 8011266:	d101      	bne.n	801126c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1c>
 8011268:	f005 fd6c 	bl	8016d44 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
 801126c:	680b      	ldr	r3, [r1, #0]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 801126e:	b1d3      	cbz	r3, 80112a6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	3b02      	subs	r3, #2
 8011274:	2b01      	cmp	r3, #1
 8011276:	d816      	bhi.n	80112a6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x56>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8011278:	684b      	ldr	r3, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 801127a:	b9f3      	cbnz	r3, 80112ba <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x6a>
 801127c:	6966      	ldr	r6, [r4, #20]
 801127e:	b103      	cbz	r3, 8011282 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x32>
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2501      	movs	r5, #1
 8011284:	4a99      	ldr	r2, [pc, #612]	; (80114ec <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 8011286:	499a      	ldr	r1, [pc, #616]	; (80114f0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 8011288:	4620      	mov	r0, r4
 801128a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801128e:	4b99      	ldr	r3, [pc, #612]	; (80114f4 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
 8011290:	9301      	str	r3, [sp, #4]
 8011292:	4b99      	ldr	r3, [pc, #612]	; (80114f8 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	2382      	movs	r3, #130	; 0x82
 8011298:	47b0      	blx	r6
    micro_context->DeallocateTempTfLiteTensor(constant_values);
  }
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
 801129a:	4628      	mov	r0, r5
 801129c:	b00f      	add	sp, #60	; 0x3c
 801129e:	ecbd 8b02 	vpop	{d8}
 80112a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
 80112a6:	4b95      	ldr	r3, [pc, #596]	; (80114fc <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
 80112a8:	6965      	ldr	r5, [r4, #20]
 80112aa:	9300      	str	r3, [sp, #0]
 80112ac:	2381      	movs	r3, #129	; 0x81
  TF_LITE_ENSURE(context, output != nullptr);
 80112ae:	4a8f      	ldr	r2, [pc, #572]	; (80114ec <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 80112b0:	4620      	mov	r0, r4
 80112b2:	4993      	ldr	r1, [pc, #588]	; (8011500 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
 80112b4:	47a8      	blx	r5
 80112b6:	2501      	movs	r5, #1
 80112b8:	e7ef      	b.n	801129a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80112ba:	681d      	ldr	r5, [r3, #0]
 80112bc:	2d01      	cmp	r5, #1
 80112be:	d1dd      	bne.n	801127c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2c>
  MicroContext* micro_context = GetMicroContext(context);
 80112c0:	68c6      	ldr	r6, [r0, #12]
      micro_context->AllocateTempInputTensor(node, /*index=*/0);
 80112c2:	2200      	movs	r2, #0
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7f8 fed5 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 80112ca:	4681      	mov	r9, r0
 80112cc:	b940      	cbnz	r0, 80112e0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x90>
 80112ce:	4b8d      	ldr	r3, [pc, #564]	; (8011504 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
 80112d0:	6966      	ldr	r6, [r4, #20]
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	2386      	movs	r3, #134	; 0x86
  TF_LITE_ENSURE(context, paddings != nullptr);
 80112d6:	4a85      	ldr	r2, [pc, #532]	; (80114ec <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 80112d8:	4620      	mov	r0, r4
 80112da:	4989      	ldr	r1, [pc, #548]	; (8011500 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
 80112dc:	47b0      	blx	r6
 80112de:	e7dc      	b.n	801129a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
      micro_context->AllocateTempInputTensor(node, /*index=*/1);
 80112e0:	462a      	mov	r2, r5
 80112e2:	4639      	mov	r1, r7
 80112e4:	4630      	mov	r0, r6
 80112e6:	f7f8 fec5 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, paddings != nullptr);
 80112ea:	4680      	mov	r8, r0
 80112ec:	b920      	cbnz	r0, 80112f8 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xa8>
 80112ee:	4b86      	ldr	r3, [pc, #536]	; (8011508 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
 80112f0:	6966      	ldr	r6, [r4, #20]
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	2389      	movs	r3, #137	; 0x89
 80112f6:	e7ee      	b.n	80112d6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x86>
      NumInputs(node) == 3
 80112f8:	683d      	ldr	r5, [r7, #0]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 80112fa:	b145      	cbz	r5, 801130e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
          ? micro_context->AllocateTempInputTensor(node, /*index=*/2)
 80112fc:	682b      	ldr	r3, [r5, #0]
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d111      	bne.n	8011326 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
 8011302:	2202      	movs	r2, #2
 8011304:	4639      	mov	r1, r7
 8011306:	4630      	mov	r0, r6
 8011308:	f7f8 feb4 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 801130c:	4605      	mov	r5, r0
      micro_context->AllocateTempOutputTensor(node, /*index=*/0);
 801130e:	2200      	movs	r2, #0
 8011310:	4639      	mov	r1, r7
 8011312:	4630      	mov	r0, r6
 8011314:	f7f8 fec3 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8011318:	4683      	mov	fp, r0
 801131a:	b930      	cbnz	r0, 801132a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 801131c:	4b7b      	ldr	r3, [pc, #492]	; (801150c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 801131e:	6965      	ldr	r5, [r4, #20]
 8011320:	9300      	str	r3, [sp, #0]
 8011322:	2390      	movs	r3, #144	; 0x90
 8011324:	e7c3      	b.n	80112ae <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
          ? micro_context->AllocateTempInputTensor(node, /*index=*/2)
 8011326:	2500      	movs	r5, #0
 8011328:	e7f1      	b.n	801130e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801132a:	f899 3000 	ldrb.w	r3, [r9]
 801132e:	7802      	ldrb	r2, [r0, #0]
 8011330:	4293      	cmp	r3, r2
 8011332:	d00c      	beq.n	801134e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8011334:	6965      	ldr	r5, [r4, #20]
 8011336:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801133a:	4b75      	ldr	r3, [pc, #468]	; (8011510 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
 801133c:	9301      	str	r3, [sp, #4]
 801133e:	4b75      	ldr	r3, [pc, #468]	; (8011514 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	2392      	movs	r3, #146	; 0x92
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
 8011344:	4a69      	ldr	r2, [pc, #420]	; (80114ec <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 8011346:	4620      	mov	r0, r4
 8011348:	4969      	ldr	r1, [pc, #420]	; (80114f0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 801134a:	47a8      	blx	r5
 801134c:	e7b3      	b.n	80112b6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x66>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801134e:	f8d9 2008 	ldr.w	r2, [r9, #8]
  TF_LITE_ENSURE(context, NumDimensions(input) <=
 8011352:	6812      	ldr	r2, [r2, #0]
 8011354:	2a05      	cmp	r2, #5
 8011356:	dd04      	ble.n	8011362 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x112>
 8011358:	4b6f      	ldr	r3, [pc, #444]	; (8011518 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 801135a:	6965      	ldr	r5, [r4, #20]
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	2396      	movs	r3, #150	; 0x96
 8011360:	e7a5      	b.n	80112ae <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
  if (constant_values != nullptr) {
 8011362:	b325      	cbz	r5, 80113ae <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x15e>
    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);
 8011364:	782a      	ldrb	r2, [r5, #0]
 8011366:	4293      	cmp	r3, r2
 8011368:	d008      	beq.n	801137c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
 801136a:	6965      	ldr	r5, [r4, #20]
 801136c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011370:	4b6a      	ldr	r3, [pc, #424]	; (801151c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8011372:	9301      	str	r3, [sp, #4]
 8011374:	4b67      	ldr	r3, [pc, #412]	; (8011514 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 8011376:	9300      	str	r3, [sp, #0]
 8011378:	2399      	movs	r3, #153	; 0x99
 801137a:	e7e3      	b.n	8011344 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  return NumElements(t->dims);
 801137c:	68a8      	ldr	r0, [r5, #8]
 801137e:	f7f9 fd17 	bl	800adb0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
    TF_LITE_ENSURE_EQ(context, NumElements(constant_values), 1);
 8011382:	2900      	cmp	r1, #0
 8011384:	bf08      	it	eq
 8011386:	2801      	cmpeq	r0, #1
 8011388:	d011      	beq.n	80113ae <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x15e>
 801138a:	68a8      	ldr	r0, [r5, #8]
 801138c:	2501      	movs	r5, #1
 801138e:	6966      	ldr	r6, [r4, #20]
 8011390:	f7f9 fd0e 	bl	800adb0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 8011394:	4b57      	ldr	r3, [pc, #348]	; (80114f4 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
 8011396:	9504      	str	r5, [sp, #16]
 8011398:	9301      	str	r3, [sp, #4]
 801139a:	4b61      	ldr	r3, [pc, #388]	; (8011520 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 801139c:	4a53      	ldr	r2, [pc, #332]	; (80114ec <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 801139e:	9300      	str	r3, [sp, #0]
 80113a0:	239b      	movs	r3, #155	; 0x9b
 80113a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113a6:	4952      	ldr	r1, [pc, #328]	; (80114f0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 80113a8:	4620      	mov	r0, r4
 80113aa:	47b0      	blx	r6
 80113ac:	e775      	b.n	801129a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, GetTensorShape(paddings).FlatSize(),
 80113ae:	4641      	mov	r1, r8
 80113b0:	a807      	add	r0, sp, #28
 80113b2:	f7f7 f866 	bl	8008482 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80113b6:	a807      	add	r0, sp, #28
 80113b8:	f7f6 f8c7 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80113bc:	f8db 1008 	ldr.w	r1, [fp, #8]
 80113c0:	f8d1 c000 	ldr.w	ip, [r1]
 80113c4:	ebb0 0f4c 	cmp.w	r0, ip, lsl #1
 80113c8:	d013      	beq.n	80113f2 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
 80113ca:	4641      	mov	r1, r8
 80113cc:	a807      	add	r0, sp, #28
 80113ce:	6965      	ldr	r5, [r4, #20]
 80113d0:	f7f7 f857 	bl	8008482 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80113d4:	a807      	add	r0, sp, #28
 80113d6:	f7f6 f8b8 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80113da:	f8db 3008 	ldr.w	r3, [fp, #8]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	005b      	lsls	r3, r3, #1
 80113e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80113e6:	4b4f      	ldr	r3, [pc, #316]	; (8011524 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 80113e8:	9301      	str	r3, [sp, #4]
 80113ea:	4b4f      	ldr	r3, [pc, #316]	; (8011528 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 80113ec:	9300      	str	r3, [sp, #0]
 80113ee:	23a0      	movs	r3, #160	; 0xa0
 80113f0:	e7a8      	b.n	8011344 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  TF_LITE_ENSURE(context, IsConstantTensor(paddings));
 80113f2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d004      	beq.n	8011404 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
 80113fa:	4b4c      	ldr	r3, [pc, #304]	; (801152c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 80113fc:	6965      	ldr	r5, [r4, #20]
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	23a5      	movs	r3, #165	; 0xa5
 8011402:	e754      	b.n	80112ae <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x5e>

namespace tflite {

template <typename T>
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8011404:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011408:	3104      	adds	r1, #4
  for (int i = 0; i < output->dims->size; i++) {
 801140a:	2300      	movs	r3, #0
 801140c:	459c      	cmp	ip, r3
 801140e:	dd1c      	ble.n	801144a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
 8011410:	f8d9 2008 	ldr.w	r2, [r9, #8]
    int output_dim = output->dims->data[i];
 8011414:	f851 0b04 	ldr.w	r0, [r1], #4
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
 8011418:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801141c:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011420:	f857 2033 	ldr.w	r2, [r7, r3, lsl #3]
 8011424:	4472      	add	r2, lr
 8011426:	eb07 0ec3 	add.w	lr, r7, r3, lsl #3
 801142a:	f8de e004 	ldr.w	lr, [lr, #4]
 801142e:	4472      	add	r2, lr
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
 8011430:	4290      	cmp	r0, r2
 8011432:	d008      	beq.n	8011446 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1f6>
 8011434:	4b3e      	ldr	r3, [pc, #248]	; (8011530 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8011436:	6965      	ldr	r5, [r4, #20]
 8011438:	9301      	str	r3, [sp, #4]
 801143a:	4b3e      	ldr	r3, [pc, #248]	; (8011534 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 801143c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8011440:	9300      	str	r3, [sp, #0]
 8011442:	23ab      	movs	r3, #171	; 0xab
 8011444:	e77e      	b.n	8011344 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  for (int i = 0; i < output->dims->size; i++) {
 8011446:	3301      	adds	r3, #1
 8011448:	e7e0      	b.n	801140c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
  data->params.resizing_category = ResizingCategory::kGenericResize;
 801144a:	2302      	movs	r3, #2
  const int paddings_total = GetTensorShape(paddings).FlatSize();
 801144c:	4641      	mov	r1, r8
 801144e:	a807      	add	r0, sp, #28
  data->params.resizing_category = ResizingCategory::kGenericResize;
 8011450:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
  const int paddings_total = GetTensorShape(paddings).FlatSize();
 8011454:	f7f7 f815 	bl	8008482 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8011458:	a807      	add	r0, sp, #28
 801145a:	f7f6 f876 	bl	800754a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
 801145e:	2808      	cmp	r0, #8
 8011460:	d10a      	bne.n	8011478 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x228>
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	b943      	cbnz	r3, 8011478 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x228>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	b933      	cbnz	r3, 8011478 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x228>
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	b923      	cbnz	r3, 8011478 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x228>
      (paddings_data[6] == 0 && paddings_data[7] == 0)) {
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	b913      	cbnz	r3, 8011478 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x228>
    data->params.resizing_category = ResizingCategory::kImageStyle;
 8011472:	2301      	movs	r3, #1
 8011474:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8011478:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801147c:	681b      	ldr	r3, [r3, #0]
  data->params.left_padding_count = num_input_dimensions;
 801147e:	b25a      	sxtb	r2, r3
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
 8011480:	1e59      	subs	r1, r3, #1
 8011482:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8011486:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  data->params.left_padding_count = num_input_dimensions;
 801148a:	f88a 2000 	strb.w	r2, [sl]
  data->params.right_padding_count = num_input_dimensions;
 801148e:	f88a 2018 	strb.w	r2, [sl, #24]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
 8011492:	2900      	cmp	r1, #0
 8011494:	db08      	blt.n	80114a8 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x258>
    data->params.left_padding[idx] = paddings_data[idx * 2];
 8011496:	f857 2c08 	ldr.w	r2, [r7, #-8]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
 801149a:	3901      	subs	r1, #1
 801149c:	3f08      	subs	r7, #8
    data->params.left_padding[idx] = paddings_data[idx * 2];
 801149e:	f843 2904 	str.w	r2, [r3], #-4
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	61da      	str	r2, [r3, #28]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
 80114a6:	e7f4      	b.n	8011492 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x242>
  if (input->type == kTfLiteInt8) {
 80114a8:	f899 3000 	ldrb.w	r3, [r9]
 80114ac:	2b09      	cmp	r3, #9
 80114ae:	d16d      	bne.n	801158c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x33c>
 80114b0:	f8db 3010 	ldr.w	r3, [fp, #16]
    if (constant_values == nullptr) {
 80114b4:	b975      	cbnz	r5, 80114d4 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x284>
      TF_LITE_ENSURE(context, output->params.zero_point >=
 80114b6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80114ba:	da04      	bge.n	80114c6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x276>
 80114bc:	4b1e      	ldr	r3, [pc, #120]	; (8011538 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80114be:	6965      	ldr	r5, [r4, #20]
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	23c4      	movs	r3, #196	; 0xc4
 80114c4:	e6f3      	b.n	80112ae <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
      TF_LITE_ENSURE(context, output->params.zero_point <=
 80114c6:	2b7f      	cmp	r3, #127	; 0x7f
 80114c8:	dd5e      	ble.n	8011588 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x338>
 80114ca:	4b1c      	ldr	r3, [pc, #112]	; (801153c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80114cc:	6965      	ldr	r5, [r4, #20]
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	23c6      	movs	r3, #198	; 0xc6
 80114d2:	e6ec      	b.n	80112ae <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
 80114d4:	692a      	ldr	r2, [r5, #16]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d036      	beq.n	8011548 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>
 80114da:	6965      	ldr	r5, [r4, #20]
 80114dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80114e0:	4b17      	ldr	r3, [pc, #92]	; (8011540 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 80114e2:	9301      	str	r3, [sp, #4]
 80114e4:	4b17      	ldr	r3, [pc, #92]	; (8011544 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	23cb      	movs	r3, #203	; 0xcb
 80114ea:	e72b      	b.n	8011344 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xf4>
 80114ec:	080fc678 	.word	0x080fc678
 80114f0:	080f982c 	.word	0x080f982c
 80114f4:	080fca44 	.word	0x080fca44
 80114f8:	080fc4a0 	.word	0x080fc4a0
 80114fc:	080fc6ab 	.word	0x080fc6ab
 8011500:	080f93a5 	.word	0x080f93a5
 8011504:	080fbed7 	.word	0x080fbed7
 8011508:	080fc6d8 	.word	0x080fc6d8
 801150c:	080fbcfa 	.word	0x080fbcfa
 8011510:	080fbfbd 	.word	0x080fbfbd
 8011514:	080fbfca 	.word	0x080fbfca
 8011518:	080fc6ec 	.word	0x080fc6ec
 801151c:	080fc730 	.word	0x080fc730
 8011520:	080fc746 	.word	0x080fc746
 8011524:	080fc763 	.word	0x080fc763
 8011528:	080fc77a 	.word	0x080fc77a
 801152c:	080fc79e 	.word	0x080fc79e
 8011530:	080fc7b9 	.word	0x080fc7b9
 8011534:	080fc7c6 	.word	0x080fc7c6
 8011538:	080fc7d1 	.word	0x080fc7d1
 801153c:	080fc811 	.word	0x080fc811
 8011540:	080fc851 	.word	0x080fc851
 8011544:	080fc874 	.word	0x080fc874
      TF_LITE_ENSURE_EQ(context, static_cast<double>(output->params.scale),
 8011548:	ed9b 8a03 	vldr	s16, [fp, #12]
 801154c:	edd5 7a03 	vldr	s15, [r5, #12]
 8011550:	eeb4 8a67 	vcmp.f32	s16, s15
 8011554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011558:	d016      	beq.n	8011588 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x338>
 801155a:	ee17 0a90 	vmov	r0, s15
 801155e:	f7ef f815 	bl	800058c <__aeabi_f2d>
 8011562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011566:	ee18 0a10 	vmov	r0, s16
 801156a:	f7ef f80f 	bl	800058c <__aeabi_f2d>
 801156e:	4b13      	ldr	r3, [pc, #76]	; (80115bc <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x36c>)
 8011570:	6965      	ldr	r5, [r4, #20]
 8011572:	9301      	str	r3, [sp, #4]
 8011574:	4b12      	ldr	r3, [pc, #72]	; (80115c0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x370>)
 8011576:	4a13      	ldr	r2, [pc, #76]	; (80115c4 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x374>)
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	23cd      	movs	r3, #205	; 0xcd
 801157c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011580:	4911      	ldr	r1, [pc, #68]	; (80115c8 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x378>)
 8011582:	4620      	mov	r0, r4
 8011584:	47a8      	blx	r5
 8011586:	e696      	b.n	80112b6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x66>
    data->output_zero_point = output->params.zero_point;
 8011588:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  micro_context->DeallocateTempTfLiteTensor(input);
 801158c:	6833      	ldr	r3, [r6, #0]
 801158e:	4649      	mov	r1, r9
 8011590:	4630      	mov	r0, r6
 8011592:	699b      	ldr	r3, [r3, #24]
 8011594:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(paddings);
 8011596:	6833      	ldr	r3, [r6, #0]
 8011598:	4641      	mov	r1, r8
 801159a:	4630      	mov	r0, r6
 801159c:	699b      	ldr	r3, [r3, #24]
 801159e:	4798      	blx	r3
  if (constant_values != nullptr) {
 80115a0:	b125      	cbz	r5, 80115ac <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x35c>
    micro_context->DeallocateTempTfLiteTensor(constant_values);
 80115a2:	6833      	ldr	r3, [r6, #0]
 80115a4:	4629      	mov	r1, r5
 80115a6:	4630      	mov	r0, r6
 80115a8:	699b      	ldr	r3, [r3, #24]
 80115aa:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 80115ac:	6833      	ldr	r3, [r6, #0]
 80115ae:	4659      	mov	r1, fp
 80115b0:	4630      	mov	r0, r6
  return kTfLiteOk;
 80115b2:	2500      	movs	r5, #0
  micro_context->DeallocateTempTfLiteTensor(output);
 80115b4:	699b      	ldr	r3, [r3, #24]
 80115b6:	4798      	blx	r3
  return kTfLiteOk;
 80115b8:	e66f      	b.n	801129a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 80115ba:	bf00      	nop
 80115bc:	080fc88e 	.word	0x080fc88e
 80115c0:	080fc8c1 	.word	0x080fc8c1
 80115c4:	080fc678 	.word	0x080fc678
 80115c8:	080f982c 	.word	0x080f982c

080115cc <_ZN6tflite12Register_PADEv>:

TFLMRegistration Register_PAD() {
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
 80115cc:	2300      	movs	r3, #0
 80115ce:	4a06      	ldr	r2, [pc, #24]	; (80115e8 <_ZN6tflite12Register_PADEv+0x1c>)
TFLMRegistration Register_PAD() {
 80115d0:	b513      	push	{r0, r1, r4, lr}
 80115d2:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
 80115d4:	4905      	ldr	r1, [pc, #20]	; (80115ec <_ZN6tflite12Register_PADEv+0x20>)
 80115d6:	e9cd 3300 	strd	r3, r3, [sp]
 80115da:	4b05      	ldr	r3, [pc, #20]	; (80115f0 <_ZN6tflite12Register_PADEv+0x24>)
 80115dc:	f7fe fb4a 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 80115e0:	4620      	mov	r0, r4
 80115e2:	b002      	add	sp, #8
 80115e4:	bd10      	pop	{r4, pc}
 80115e6:	bf00      	nop
 80115e8:	08011251 	.word	0x08011251
 80115ec:	0801123d 	.word	0x0801123d
 80115f0:	08011d31 	.word	0x08011d31

080115f4 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
// value.
//
// Note that two typenames are required, so that T=P=int32_t is considered a
// specialization distinct from P=int32_t.
template <typename T, typename P>
inline void PadImpl(const tflite::PadParams& op_params,
 80115f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f8:	b0ad      	sub	sp, #180	; 0xb4
 80115fa:	4605      	mov	r5, r0
 80115fc:	461c      	mov	r4, r3
 80115fe:	2301      	movs	r3, #1
 8011600:	9201      	str	r2, [sp, #4]
 8011602:	a81e      	add	r0, sp, #120	; 0x78
 8011604:	460a      	mov	r2, r1
 8011606:	2105      	movs	r1, #5
 8011608:	f7f6 ff4e 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 801160c:	2301      	movs	r3, #1
 801160e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8011610:	2105      	movs	r1, #5
 8011612:	a825      	add	r0, sp, #148	; 0x94
 8011614:	f7f6 ff48 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                    T* output_data) {
  const RuntimeShape ext_input_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), input_shape);
  const RuntimeShape ext_output_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), output_shape);
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
 8011618:	f995 6000 	ldrsb.w	r6, [r5]
 801161c:	2e05      	cmp	r6, #5
 801161e:	dd01      	ble.n	8011624 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
 8011620:	f005 fb90 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
 8011624:	f995 0018 	ldrsb.w	r0, [r5, #24]
 8011628:	2805      	cmp	r0, #5
 801162a:	dcf9      	bgt.n	8011620 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 801162c:	f06f 0103 	mvn.w	r1, #3

  // Runtime calls are currently fixed at 5 dimensions. Copy inputs so we can
  // pad them to 5 dims (yes, we are "padding the padding").
  int left_padding_copy[PadKernelMaxDimensionCount()];
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    left_padding_copy[i] = 0;
 8011630:	2300      	movs	r3, #0
 8011632:	f105 0c04 	add.w	ip, r5, #4
 8011636:	4371      	muls	r1, r6
 8011638:	9318      	str	r3, [sp, #96]	; 0x60
 801163a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 801163e:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  }
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011642:	429e      	cmp	r6, r3
 8011644:	dc14      	bgt.n	8011670 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7c>
 8011646:	f06f 0103 	mvn.w	r1, #3
    left_padding_copy[i + PadKernelMaxDimensionCount() -
                      op_params.left_padding_count] = op_params.left_padding[i];
  }
  int right_padding_copy[PadKernelMaxDimensionCount()];
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    right_padding_copy[i] = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	351c      	adds	r5, #28
 801164e:	4341      	muls	r1, r0
 8011650:	931d      	str	r3, [sp, #116]	; 0x74
 8011652:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8011656:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  }
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 801165a:	4298      	cmp	r0, r3
 801165c:	dd12      	ble.n	8011684 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x90>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 801165e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011662:	af19      	add	r7, sp, #100	; 0x64
                       op_params.right_padding_count] =
 8011664:	f855 6b04 	ldr.w	r6, [r5], #4
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 8011668:	3301      	adds	r3, #1
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 801166a:	443a      	add	r2, r7
 801166c:	6156      	str	r6, [r2, #20]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 801166e:	e7f4      	b.n	801165a <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x66>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 8011670:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011674:	af14      	add	r7, sp, #80	; 0x50
                      op_params.left_padding_count] = op_params.left_padding[i];
 8011676:	f85c eb04 	ldr.w	lr, [ip], #4
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 801167a:	3301      	adds	r3, #1
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 801167c:	443a      	add	r2, r7
 801167e:	f8c2 e014 	str.w	lr, [r2, #20]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011682:	e7de      	b.n	8011642 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x4e>
    TFLITE_DCHECK_LT(i, size_);
 8011684:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011686:	2b00      	cmp	r3, #0
 8011688:	ddca      	ble.n	8011620 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    return dims_[i];
 801168a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    TFLITE_DCHECK_LT(i, size_);
 801168c:	2b01      	cmp	r3, #1
    return dims_[i];
 801168e:	9202      	str	r2, [sp, #8]
    TFLITE_DCHECK_LT(i, size_);
 8011690:	d0c6      	beq.n	8011620 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011692:	2b02      	cmp	r3, #2
    return dims_[i];
 8011694:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    TFLITE_DCHECK_LT(i, size_);
 8011696:	d0c3      	beq.n	8011620 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011698:	2b03      	cmp	r3, #3
    return dims_[i];
 801169a:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
    TFLITE_DCHECK_LT(i, size_);
 801169e:	d0bf      	beq.n	8011620 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 80116a0:	2b04      	cmp	r3, #4
    return dims_[i];
 80116a2:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
    TFLITE_DCHECK_LT(i, size_);
 80116a6:	d0bb      	beq.n	8011620 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  const int output_plane = ext_output_shape.Dims(1);
  const int output_height = ext_output_shape.Dims(2);
  const int output_width = ext_output_shape.Dims(3);
  const int output_depth = ext_output_shape.Dims(4);

  const int left_b_padding = left_padding_copy[0];
 80116a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    return dims_[i];
 80116aa:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
 80116ae:	9305      	str	r3, [sp, #20]
  const int left_p_padding = left_padding_copy[1];
 80116b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    for (int out_p = 0; out_p < output_plane; ++out_p) {
      for (int out_h = 0; out_h < output_height; ++out_h) {
        for (int out_w = 0; out_w < output_width; ++out_w) {
          for (int out_d = 0; out_d < output_depth; ++out_d) {
            if (out_b < left_b_padding ||
                out_b >= output_batch - right_b_padding ||
 80116b2:	9902      	ldr	r1, [sp, #8]
  const int left_p_padding = left_padding_copy[1];
 80116b4:	9306      	str	r3, [sp, #24]
  const int left_h_padding = left_padding_copy[2];
 80116b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80116b8:	9307      	str	r3, [sp, #28]
  const int left_w_padding = left_padding_copy[3];
 80116ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80116bc:	9308      	str	r3, [sp, #32]
  const int left_d_padding = left_padding_copy[4];
 80116be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80116c0:	9309      	str	r3, [sp, #36]	; 0x24
  const int right_h_padding = right_padding_copy[2];
 80116c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116c4:	930a      	str	r3, [sp, #40]	; 0x28
  const int right_w_padding = right_padding_copy[3];
 80116c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80116c8:	930b      	str	r3, [sp, #44]	; 0x2c
  const int right_d_padding = right_padding_copy[4];
 80116ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80116cc:	930c      	str	r3, [sp, #48]	; 0x30
  const T pad_value = *pad_value_ptr;
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	930d      	str	r3, [sp, #52]	; 0x34
 80116d2:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 80116d6:	009a      	lsls	r2, r3, #2
 80116d8:	920e      	str	r2, [sp, #56]	; 0x38
 80116da:	ea2c 72ec 	bic.w	r2, ip, ip, asr #31
 80116de:	4353      	muls	r3, r2
 80116e0:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80116e4:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 80116e8:	fb0a f303 	mul.w	r3, sl, r3
 80116ec:	9303      	str	r3, [sp, #12]
 80116ee:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80116f2:	9a03      	ldr	r2, [sp, #12]
 80116f4:	4353      	muls	r3, r2
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 80116f6:	2200      	movs	r2, #0
 80116f8:	9304      	str	r3, [sp, #16]
                out_b >= output_batch - right_b_padding ||
 80116fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80116fc:	1acb      	subs	r3, r1, r3
 80116fe:	9312      	str	r3, [sp, #72]	; 0x48
                out_p < left_p_padding ||
                out_p >= output_plane - right_p_padding ||
 8011700:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011702:	1af3      	subs	r3, r6, r3
 8011704:	9313      	str	r3, [sp, #76]	; 0x4c
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8011706:	9b02      	ldr	r3, [sp, #8]
 8011708:	429a      	cmp	r2, r3
 801170a:	da57      	bge.n	80117bc <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1c8>
                out_h < left_h_padding ||
                out_h >= output_height - right_h_padding ||
 801170c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 801170e:	2100      	movs	r1, #0
 8011710:	f8dd e0dc 	ldr.w	lr, [sp, #220]	; 0xdc
                out_h >= output_height - right_h_padding ||
 8011714:	ebab 0303 	sub.w	r3, fp, r3
 8011718:	9311      	str	r3, [sp, #68]	; 0x44
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 801171a:	42b1      	cmp	r1, r6
 801171c:	da48      	bge.n	80117b0 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1bc>
 801171e:	46f0      	mov	r8, lr
      for (int out_h = 0; out_h < output_height; ++out_h) {
 8011720:	2000      	movs	r0, #0
 8011722:	4558      	cmp	r0, fp
 8011724:	da40      	bge.n	80117a8 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1b4>
                out_w < left_w_padding ||
                out_w >= output_width - right_w_padding ||
 8011726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011728:	4645      	mov	r5, r8
        for (int out_w = 0; out_w < output_width; ++out_w) {
 801172a:	2400      	movs	r4, #0
                out_w >= output_width - right_w_padding ||
 801172c:	ebac 0303 	sub.w	r3, ip, r3
 8011730:	930f      	str	r3, [sp, #60]	; 0x3c
                out_d < left_d_padding ||
                out_d >= output_depth - right_d_padding) {
 8011732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011734:	eba9 0303 	sub.w	r3, r9, r3
 8011738:	9310      	str	r3, [sp, #64]	; 0x40
        for (int out_w = 0; out_w < output_width; ++out_w) {
 801173a:	4564      	cmp	r4, ip
 801173c:	da31      	bge.n	80117a2 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1ae>
          for (int out_d = 0; out_d < output_depth; ++out_d) {
 801173e:	2300      	movs	r3, #0
 8011740:	454b      	cmp	r3, r9
 8011742:	da2a      	bge.n	801179a <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1a6>
            if (out_b < left_b_padding ||
 8011744:	9f05      	ldr	r7, [sp, #20]
 8011746:	42ba      	cmp	r2, r7
 8011748:	db1a      	blt.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
 801174a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801174c:	4297      	cmp	r7, r2
 801174e:	dd17      	ble.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
                out_b >= output_batch - right_b_padding ||
 8011750:	9f06      	ldr	r7, [sp, #24]
 8011752:	42b9      	cmp	r1, r7
 8011754:	db14      	blt.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
                out_p < left_p_padding ||
 8011756:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8011758:	428f      	cmp	r7, r1
 801175a:	dd11      	ble.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
                out_p >= output_plane - right_p_padding ||
 801175c:	9f07      	ldr	r7, [sp, #28]
 801175e:	42b8      	cmp	r0, r7
 8011760:	db0e      	blt.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
                out_h < left_h_padding ||
 8011762:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8011764:	4287      	cmp	r7, r0
 8011766:	dd0b      	ble.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
                out_h >= output_height - right_h_padding ||
 8011768:	9f08      	ldr	r7, [sp, #32]
 801176a:	42bc      	cmp	r4, r7
 801176c:	db08      	blt.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
                out_w < left_w_padding ||
 801176e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011770:	42a7      	cmp	r7, r4
 8011772:	dd05      	ble.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
                out_w >= output_width - right_w_padding ||
 8011774:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011776:	42bb      	cmp	r3, r7
 8011778:	db02      	blt.n	8011780 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18c>
                out_d < left_d_padding ||
 801177a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801177c:	429f      	cmp	r7, r3
 801177e:	dc04      	bgt.n	801178a <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x196>
              *out_ptr++ = pad_value;
 8011780:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011782:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
 8011786:	3301      	adds	r3, #1
 8011788:	e7da      	b.n	8011740 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14c>
            } else {
              *out_ptr++ = *in_ptr++;
 801178a:	9f01      	ldr	r7, [sp, #4]
 801178c:	683f      	ldr	r7, [r7, #0]
 801178e:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
 8011792:	9f01      	ldr	r7, [sp, #4]
 8011794:	3704      	adds	r7, #4
 8011796:	9701      	str	r7, [sp, #4]
 8011798:	e7f5      	b.n	8011786 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x192>
 801179a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        for (int out_w = 0; out_w < output_width; ++out_w) {
 801179c:	3401      	adds	r4, #1
 801179e:	441d      	add	r5, r3
 80117a0:	e7cb      	b.n	801173a <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
 80117a2:	44d0      	add	r8, sl
      for (int out_h = 0; out_h < output_height; ++out_h) {
 80117a4:	3001      	adds	r0, #1
 80117a6:	e7bc      	b.n	8011722 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12e>
 80117a8:	9b03      	ldr	r3, [sp, #12]
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 80117aa:	3101      	adds	r1, #1
 80117ac:	449e      	add	lr, r3
 80117ae:	e7b4      	b.n	801171a <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x126>
 80117b0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 80117b2:	3201      	adds	r2, #1
 80117b4:	9904      	ldr	r1, [sp, #16]
 80117b6:	440b      	add	r3, r1
 80117b8:	9337      	str	r3, [sp, #220]	; 0xdc
 80117ba:	e7a4      	b.n	8011706 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x112>
          }
        }
      }
    }
  }
}
 80117bc:	b02d      	add	sp, #180	; 0xb4
 80117be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117c2 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
 80117c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c6:	b0ad      	sub	sp, #180	; 0xb4
 80117c8:	4605      	mov	r5, r0
 80117ca:	461c      	mov	r4, r3
    return RuntimeShape(new_shape_size, shape, 1);
 80117cc:	2301      	movs	r3, #1
 80117ce:	9201      	str	r2, [sp, #4]
 80117d0:	a81e      	add	r0, sp, #120	; 0x78
 80117d2:	460a      	mov	r2, r1
 80117d4:	2105      	movs	r1, #5
 80117d6:	f7f6 fe67 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 80117da:	2301      	movs	r3, #1
 80117dc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80117de:	2105      	movs	r1, #5
 80117e0:	a825      	add	r0, sp, #148	; 0x94
 80117e2:	f7f6 fe61 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
 80117e6:	f995 7000 	ldrsb.w	r7, [r5]
 80117ea:	2f05      	cmp	r7, #5
 80117ec:	dd01      	ble.n	80117f2 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
 80117ee:	f005 faa9 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
 80117f2:	f995 0018 	ldrsb.w	r0, [r5, #24]
 80117f6:	2805      	cmp	r0, #5
 80117f8:	dcf9      	bgt.n	80117ee <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 80117fa:	f06f 0103 	mvn.w	r1, #3
    left_padding_copy[i] = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	f105 0c04 	add.w	ip, r5, #4
 8011804:	4379      	muls	r1, r7
 8011806:	9318      	str	r3, [sp, #96]	; 0x60
 8011808:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 801180c:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011810:	429f      	cmp	r7, r3
 8011812:	dc14      	bgt.n	801183e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7c>
 8011814:	f06f 0103 	mvn.w	r1, #3
    right_padding_copy[i] = 0;
 8011818:	2300      	movs	r3, #0
 801181a:	351c      	adds	r5, #28
 801181c:	4341      	muls	r1, r0
 801181e:	931d      	str	r3, [sp, #116]	; 0x74
 8011820:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8011824:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 8011828:	4298      	cmp	r0, r3
 801182a:	dd12      	ble.n	8011852 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x90>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 801182c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011830:	ae19      	add	r6, sp, #100	; 0x64
                       op_params.right_padding_count] =
 8011832:	f855 7b04 	ldr.w	r7, [r5], #4
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 8011836:	3301      	adds	r3, #1
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 8011838:	4432      	add	r2, r6
 801183a:	6157      	str	r7, [r2, #20]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 801183c:	e7f4      	b.n	8011828 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x66>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 801183e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011842:	ae14      	add	r6, sp, #80	; 0x50
                      op_params.left_padding_count] = op_params.left_padding[i];
 8011844:	f85c eb04 	ldr.w	lr, [ip], #4
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011848:	3301      	adds	r3, #1
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 801184a:	4432      	add	r2, r6
 801184c:	f8c2 e014 	str.w	lr, [r2, #20]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011850:	e7de      	b.n	8011810 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x4e>
    TFLITE_DCHECK_LT(i, size_);
 8011852:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011854:	2b00      	cmp	r3, #0
 8011856:	ddca      	ble.n	80117ee <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    return dims_[i];
 8011858:	9a26      	ldr	r2, [sp, #152]	; 0x98
    TFLITE_DCHECK_LT(i, size_);
 801185a:	2b01      	cmp	r3, #1
    return dims_[i];
 801185c:	9203      	str	r2, [sp, #12]
    TFLITE_DCHECK_LT(i, size_);
 801185e:	d0c6      	beq.n	80117ee <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011860:	2b02      	cmp	r3, #2
    return dims_[i];
 8011862:	f8dd a09c 	ldr.w	sl, [sp, #156]	; 0x9c
    TFLITE_DCHECK_LT(i, size_);
 8011866:	d0c2      	beq.n	80117ee <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011868:	2b03      	cmp	r3, #3
    return dims_[i];
 801186a:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
    TFLITE_DCHECK_LT(i, size_);
 801186e:	d0be      	beq.n	80117ee <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011870:	2b04      	cmp	r3, #4
    return dims_[i];
 8011872:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    TFLITE_DCHECK_LT(i, size_);
 8011874:	d0bb      	beq.n	80117ee <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  const int left_b_padding = left_padding_copy[0];
 8011876:	9b14      	ldr	r3, [sp, #80]	; 0x50
    return dims_[i];
 8011878:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
 801187c:	9306      	str	r3, [sp, #24]
  const int left_p_padding = left_padding_copy[1];
 801187e:	9b15      	ldr	r3, [sp, #84]	; 0x54
                out_b >= output_batch - right_b_padding ||
 8011880:	9903      	ldr	r1, [sp, #12]
  const int left_p_padding = left_padding_copy[1];
 8011882:	9307      	str	r3, [sp, #28]
  const int left_h_padding = left_padding_copy[2];
 8011884:	9b16      	ldr	r3, [sp, #88]	; 0x58
  const T pad_value = *pad_value_ptr;
 8011886:	edd4 7a00 	vldr	s15, [r4]
  const int left_h_padding = left_padding_copy[2];
 801188a:	9308      	str	r3, [sp, #32]
  const int left_w_padding = left_padding_copy[3];
 801188c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801188e:	9309      	str	r3, [sp, #36]	; 0x24
  const int left_d_padding = left_padding_copy[4];
 8011890:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011892:	930a      	str	r3, [sp, #40]	; 0x28
  const int right_h_padding = right_padding_copy[2];
 8011894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011896:	930b      	str	r3, [sp, #44]	; 0x2c
  const int right_w_padding = right_padding_copy[3];
 8011898:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801189a:	930c      	str	r3, [sp, #48]	; 0x30
  const int right_d_padding = right_padding_copy[4];
 801189c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801189e:	930d      	str	r3, [sp, #52]	; 0x34
 80118a0:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 80118a4:	009a      	lsls	r2, r3, #2
 80118a6:	920e      	str	r2, [sp, #56]	; 0x38
 80118a8:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 80118ac:	4353      	muls	r3, r2
 80118ae:	009b      	lsls	r3, r3, #2
 80118b0:	9302      	str	r3, [sp, #8]
 80118b2:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 80118b6:	9a02      	ldr	r2, [sp, #8]
 80118b8:	4353      	muls	r3, r2
 80118ba:	9304      	str	r3, [sp, #16]
 80118bc:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80118c0:	9a04      	ldr	r2, [sp, #16]
 80118c2:	4353      	muls	r3, r2
                out_b >= output_batch - right_b_padding ||
 80118c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80118c6:	1a8a      	subs	r2, r1, r2
 80118c8:	9305      	str	r3, [sp, #20]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 80118ca:	2300      	movs	r3, #0
                out_b >= output_batch - right_b_padding ||
 80118cc:	9212      	str	r2, [sp, #72]	; 0x48
                out_p >= output_plane - right_p_padding ||
 80118ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80118d0:	ebaa 0202 	sub.w	r2, sl, r2
 80118d4:	9213      	str	r2, [sp, #76]	; 0x4c
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 80118d6:	9a03      	ldr	r2, [sp, #12]
 80118d8:	4293      	cmp	r3, r2
 80118da:	da58      	bge.n	801198e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1cc>
                out_h >= output_height - right_h_padding ||
 80118dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 80118de:	2200      	movs	r2, #0
 80118e0:	f8dd c0dc 	ldr.w	ip, [sp, #220]	; 0xdc
                out_h >= output_height - right_h_padding ||
 80118e4:	ebab 0101 	sub.w	r1, fp, r1
 80118e8:	9111      	str	r1, [sp, #68]	; 0x44
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 80118ea:	4552      	cmp	r2, sl
 80118ec:	da49      	bge.n	8011982 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1c0>
 80118ee:	46e6      	mov	lr, ip
      for (int out_h = 0; out_h < output_height; ++out_h) {
 80118f0:	2100      	movs	r1, #0
 80118f2:	4559      	cmp	r1, fp
 80118f4:	da41      	bge.n	801197a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1b8>
                out_w >= output_width - right_w_padding ||
 80118f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80118f8:	46f0      	mov	r8, lr
        for (int out_w = 0; out_w < output_width; ++out_w) {
 80118fa:	2000      	movs	r0, #0
                out_w >= output_width - right_w_padding ||
 80118fc:	1b3c      	subs	r4, r7, r4
 80118fe:	940f      	str	r4, [sp, #60]	; 0x3c
                out_d >= output_depth - right_d_padding) {
 8011900:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8011902:	eba9 0404 	sub.w	r4, r9, r4
 8011906:	9410      	str	r4, [sp, #64]	; 0x40
        for (int out_w = 0; out_w < output_width; ++out_w) {
 8011908:	42b8      	cmp	r0, r7
 801190a:	da32      	bge.n	8011972 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1b0>
 801190c:	4645      	mov	r5, r8
          for (int out_d = 0; out_d < output_depth; ++out_d) {
 801190e:	2400      	movs	r4, #0
 8011910:	454c      	cmp	r4, r9
 8011912:	da2a      	bge.n	801196a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1a8>
            if (out_b < left_b_padding ||
 8011914:	9e06      	ldr	r6, [sp, #24]
 8011916:	3504      	adds	r5, #4
 8011918:	42b3      	cmp	r3, r6
 801191a:	db1a      	blt.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
 801191c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801191e:	429e      	cmp	r6, r3
 8011920:	dd17      	ble.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
                out_b >= output_batch - right_b_padding ||
 8011922:	9e07      	ldr	r6, [sp, #28]
 8011924:	42b2      	cmp	r2, r6
 8011926:	db14      	blt.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
                out_p < left_p_padding ||
 8011928:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801192a:	4296      	cmp	r6, r2
 801192c:	dd11      	ble.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
                out_p >= output_plane - right_p_padding ||
 801192e:	9e08      	ldr	r6, [sp, #32]
 8011930:	42b1      	cmp	r1, r6
 8011932:	db0e      	blt.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
                out_h < left_h_padding ||
 8011934:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011936:	428e      	cmp	r6, r1
 8011938:	dd0b      	ble.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
                out_h >= output_height - right_h_padding ||
 801193a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801193c:	42b0      	cmp	r0, r6
 801193e:	db08      	blt.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
                out_w < left_w_padding ||
 8011940:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011942:	4286      	cmp	r6, r0
 8011944:	dd05      	ble.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
                out_w >= output_width - right_w_padding ||
 8011946:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011948:	42b4      	cmp	r4, r6
 801194a:	db02      	blt.n	8011952 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x190>
                out_d < left_d_padding ||
 801194c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801194e:	42a6      	cmp	r6, r4
 8011950:	dc03      	bgt.n	801195a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x198>
              *out_ptr++ = pad_value;
 8011952:	ed45 7a01 	vstr	s15, [r5, #-4]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
 8011956:	3401      	adds	r4, #1
 8011958:	e7da      	b.n	8011910 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14e>
              *out_ptr++ = *in_ptr++;
 801195a:	9e01      	ldr	r6, [sp, #4]
 801195c:	ed96 7a00 	vldr	s14, [r6]
 8011960:	3604      	adds	r6, #4
 8011962:	ed05 7a01 	vstr	s14, [r5, #-4]
 8011966:	9601      	str	r6, [sp, #4]
 8011968:	e7f5      	b.n	8011956 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x194>
 801196a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
        for (int out_w = 0; out_w < output_width; ++out_w) {
 801196c:	3001      	adds	r0, #1
 801196e:	44a0      	add	r8, r4
 8011970:	e7ca      	b.n	8011908 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
 8011972:	9802      	ldr	r0, [sp, #8]
      for (int out_h = 0; out_h < output_height; ++out_h) {
 8011974:	3101      	adds	r1, #1
 8011976:	4486      	add	lr, r0
 8011978:	e7bb      	b.n	80118f2 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
 801197a:	9904      	ldr	r1, [sp, #16]
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 801197c:	3201      	adds	r2, #1
 801197e:	448c      	add	ip, r1
 8011980:	e7b3      	b.n	80118ea <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x128>
 8011982:	9a37      	ldr	r2, [sp, #220]	; 0xdc
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8011984:	3301      	adds	r3, #1
 8011986:	9905      	ldr	r1, [sp, #20]
 8011988:	440a      	add	r2, r1
 801198a:	9237      	str	r2, [sp, #220]	; 0xdc
 801198c:	e7a3      	b.n	80118d6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x114>
}
 801198e:	b02d      	add	sp, #180	; 0xb4
 8011990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011994 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
 8011994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011998:	b0ad      	sub	sp, #180	; 0xb4
 801199a:	4605      	mov	r5, r0
 801199c:	461c      	mov	r4, r3
    return RuntimeShape(new_shape_size, shape, 1);
 801199e:	2301      	movs	r3, #1
 80119a0:	9201      	str	r2, [sp, #4]
 80119a2:	a81e      	add	r0, sp, #120	; 0x78
 80119a4:	460a      	mov	r2, r1
 80119a6:	2105      	movs	r1, #5
 80119a8:	f7f6 fd7e 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 80119ac:	2301      	movs	r3, #1
 80119ae:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80119b0:	2105      	movs	r1, #5
 80119b2:	a825      	add	r0, sp, #148	; 0x94
 80119b4:	f7f6 fd78 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
 80119b8:	f995 7000 	ldrsb.w	r7, [r5]
 80119bc:	2f05      	cmp	r7, #5
 80119be:	dd01      	ble.n	80119c4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
 80119c0:	f005 f9c0 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
 80119c4:	f995 0018 	ldrsb.w	r0, [r5, #24]
 80119c8:	2805      	cmp	r0, #5
 80119ca:	dcf9      	bgt.n	80119c0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 80119cc:	f06f 0103 	mvn.w	r1, #3
    left_padding_copy[i] = 0;
 80119d0:	2300      	movs	r3, #0
 80119d2:	f105 0c04 	add.w	ip, r5, #4
 80119d6:	4379      	muls	r1, r7
 80119d8:	9318      	str	r3, [sp, #96]	; 0x60
 80119da:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 80119de:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 80119e2:	429f      	cmp	r7, r3
 80119e4:	dc14      	bgt.n	8011a10 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7c>
 80119e6:	f06f 0103 	mvn.w	r1, #3
    right_padding_copy[i] = 0;
 80119ea:	2300      	movs	r3, #0
 80119ec:	351c      	adds	r5, #28
 80119ee:	4341      	muls	r1, r0
 80119f0:	931d      	str	r3, [sp, #116]	; 0x74
 80119f2:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 80119f6:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 80119fa:	4298      	cmp	r0, r3
 80119fc:	dd12      	ble.n	8011a24 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x90>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 80119fe:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011a02:	ae19      	add	r6, sp, #100	; 0x64
                       op_params.right_padding_count] =
 8011a04:	f855 7b04 	ldr.w	r7, [r5], #4
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 8011a08:	3301      	adds	r3, #1
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 8011a0a:	4432      	add	r2, r6
 8011a0c:	6157      	str	r7, [r2, #20]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 8011a0e:	e7f4      	b.n	80119fa <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x66>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 8011a10:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011a14:	ae14      	add	r6, sp, #80	; 0x50
                      op_params.left_padding_count] = op_params.left_padding[i];
 8011a16:	f85c eb04 	ldr.w	lr, [ip], #4
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011a1a:	3301      	adds	r3, #1
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 8011a1c:	4432      	add	r2, r6
 8011a1e:	f8c2 e014 	str.w	lr, [r2, #20]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011a22:	e7de      	b.n	80119e2 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x4e>
    TFLITE_DCHECK_LT(i, size_);
 8011a24:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	ddca      	ble.n	80119c0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    return dims_[i];
 8011a2a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    TFLITE_DCHECK_LT(i, size_);
 8011a2c:	2b01      	cmp	r3, #1
    return dims_[i];
 8011a2e:	9202      	str	r2, [sp, #8]
    TFLITE_DCHECK_LT(i, size_);
 8011a30:	d0c6      	beq.n	80119c0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011a32:	2b02      	cmp	r3, #2
    return dims_[i];
 8011a34:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
    TFLITE_DCHECK_LT(i, size_);
 8011a38:	d0c2      	beq.n	80119c0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011a3a:	2b03      	cmp	r3, #3
    return dims_[i];
 8011a3c:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
    TFLITE_DCHECK_LT(i, size_);
 8011a40:	d0be      	beq.n	80119c0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011a42:	2b04      	cmp	r3, #4
    return dims_[i];
 8011a44:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    TFLITE_DCHECK_LT(i, size_);
 8011a46:	d0bb      	beq.n	80119c0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  const int left_b_padding = left_padding_copy[0];
 8011a48:	9b14      	ldr	r3, [sp, #80]	; 0x50
    return dims_[i];
 8011a4a:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
 8011a4e:	9305      	str	r3, [sp, #20]
  const int left_p_padding = left_padding_copy[1];
 8011a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a52:	ea29 78e9 	bic.w	r8, r9, r9, asr #31
                out_b >= output_batch - right_b_padding ||
 8011a56:	9902      	ldr	r1, [sp, #8]
  const int left_p_padding = left_padding_copy[1];
 8011a58:	9306      	str	r3, [sp, #24]
  const int left_h_padding = left_padding_copy[2];
 8011a5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011a5c:	9307      	str	r3, [sp, #28]
  const int left_w_padding = left_padding_copy[3];
 8011a5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a60:	9308      	str	r3, [sp, #32]
  const int left_d_padding = left_padding_copy[4];
 8011a62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011a64:	9309      	str	r3, [sp, #36]	; 0x24
  const int right_h_padding = right_padding_copy[2];
 8011a66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a68:	930a      	str	r3, [sp, #40]	; 0x28
  const int right_w_padding = right_padding_copy[3];
 8011a6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011a6c:	930b      	str	r3, [sp, #44]	; 0x2c
  const int right_d_padding = right_padding_copy[4];
 8011a6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a70:	930c      	str	r3, [sp, #48]	; 0x30
  const T pad_value = *pad_value_ptr;
 8011a72:	f994 3000 	ldrsb.w	r3, [r4]
 8011a76:	930d      	str	r3, [sp, #52]	; 0x34
 8011a78:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8011a7c:	fb08 f303 	mul.w	r3, r8, r3
 8011a80:	9304      	str	r3, [sp, #16]
 8011a82:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8011a86:	9a04      	ldr	r2, [sp, #16]
 8011a88:	4353      	muls	r3, r2
 8011a8a:	9303      	str	r3, [sp, #12]
 8011a8c:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 8011a90:	9a03      	ldr	r2, [sp, #12]
 8011a92:	4353      	muls	r3, r2
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8011a94:	2200      	movs	r2, #0
 8011a96:	930e      	str	r3, [sp, #56]	; 0x38
                out_b >= output_batch - right_b_padding ||
 8011a98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011a9a:	1acb      	subs	r3, r1, r3
 8011a9c:	9312      	str	r3, [sp, #72]	; 0x48
                out_p >= output_plane - right_p_padding ||
 8011a9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011aa0:	ebab 0303 	sub.w	r3, fp, r3
 8011aa4:	9313      	str	r3, [sp, #76]	; 0x4c
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8011aa6:	9b02      	ldr	r3, [sp, #8]
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	da55      	bge.n	8011b58 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1c4>
                out_h >= output_height - right_h_padding ||
 8011aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 8011aae:	2100      	movs	r1, #0
 8011ab0:	f8dd c0dc 	ldr.w	ip, [sp, #220]	; 0xdc
                out_h >= output_height - right_h_padding ||
 8011ab4:	ebaa 0303 	sub.w	r3, sl, r3
 8011ab8:	9311      	str	r3, [sp, #68]	; 0x44
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 8011aba:	4559      	cmp	r1, fp
 8011abc:	da46      	bge.n	8011b4c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1b8>
 8011abe:	46e6      	mov	lr, ip
      for (int out_h = 0; out_h < output_height; ++out_h) {
 8011ac0:	2000      	movs	r0, #0
 8011ac2:	4550      	cmp	r0, sl
 8011ac4:	da3e      	bge.n	8011b44 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1b0>
                out_w >= output_width - right_w_padding ||
 8011ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ac8:	4675      	mov	r5, lr
        for (int out_w = 0; out_w < output_width; ++out_w) {
 8011aca:	2400      	movs	r4, #0
                out_w >= output_width - right_w_padding ||
 8011acc:	1afb      	subs	r3, r7, r3
 8011ace:	930f      	str	r3, [sp, #60]	; 0x3c
                out_d >= output_depth - right_d_padding) {
 8011ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ad2:	eba9 0303 	sub.w	r3, r9, r3
 8011ad6:	9310      	str	r3, [sp, #64]	; 0x40
        for (int out_w = 0; out_w < output_width; ++out_w) {
 8011ad8:	42bc      	cmp	r4, r7
 8011ada:	da2f      	bge.n	8011b3c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1a8>
          for (int out_d = 0; out_d < output_depth; ++out_d) {
 8011adc:	2300      	movs	r3, #0
 8011ade:	454b      	cmp	r3, r9
 8011ae0:	da29      	bge.n	8011b36 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1a2>
            if (out_b < left_b_padding ||
 8011ae2:	9e05      	ldr	r6, [sp, #20]
 8011ae4:	42b2      	cmp	r2, r6
 8011ae6:	db1a      	blt.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
 8011ae8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011aea:	4296      	cmp	r6, r2
 8011aec:	dd17      	ble.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
                out_b >= output_batch - right_b_padding ||
 8011aee:	9e06      	ldr	r6, [sp, #24]
 8011af0:	42b1      	cmp	r1, r6
 8011af2:	db14      	blt.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
                out_p < left_p_padding ||
 8011af4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011af6:	428e      	cmp	r6, r1
 8011af8:	dd11      	ble.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
                out_p >= output_plane - right_p_padding ||
 8011afa:	9e07      	ldr	r6, [sp, #28]
 8011afc:	42b0      	cmp	r0, r6
 8011afe:	db0e      	blt.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
                out_h < left_h_padding ||
 8011b00:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011b02:	4286      	cmp	r6, r0
 8011b04:	dd0b      	ble.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
                out_h >= output_height - right_h_padding ||
 8011b06:	9e08      	ldr	r6, [sp, #32]
 8011b08:	42b4      	cmp	r4, r6
 8011b0a:	db08      	blt.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
                out_w < left_w_padding ||
 8011b0c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011b0e:	42a6      	cmp	r6, r4
 8011b10:	dd05      	ble.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
                out_w >= output_width - right_w_padding ||
 8011b12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011b14:	42b3      	cmp	r3, r6
 8011b16:	db02      	blt.n	8011b1e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18a>
                out_d < left_d_padding ||
 8011b18:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011b1a:	429e      	cmp	r6, r3
 8011b1c:	dc03      	bgt.n	8011b26 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x192>
              *out_ptr++ = pad_value;
 8011b1e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011b20:	54ee      	strb	r6, [r5, r3]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
 8011b22:	3301      	adds	r3, #1
 8011b24:	e7db      	b.n	8011ade <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14a>
              *out_ptr++ = *in_ptr++;
 8011b26:	9e01      	ldr	r6, [sp, #4]
 8011b28:	f996 6000 	ldrsb.w	r6, [r6]
 8011b2c:	54ee      	strb	r6, [r5, r3]
 8011b2e:	9e01      	ldr	r6, [sp, #4]
 8011b30:	3601      	adds	r6, #1
 8011b32:	9601      	str	r6, [sp, #4]
 8011b34:	e7f5      	b.n	8011b22 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
 8011b36:	4445      	add	r5, r8
        for (int out_w = 0; out_w < output_width; ++out_w) {
 8011b38:	3401      	adds	r4, #1
 8011b3a:	e7cd      	b.n	8011ad8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
 8011b3c:	9b04      	ldr	r3, [sp, #16]
      for (int out_h = 0; out_h < output_height; ++out_h) {
 8011b3e:	3001      	adds	r0, #1
 8011b40:	449e      	add	lr, r3
 8011b42:	e7be      	b.n	8011ac2 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12e>
 8011b44:	9b03      	ldr	r3, [sp, #12]
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 8011b46:	3101      	adds	r1, #1
 8011b48:	449c      	add	ip, r3
 8011b4a:	e7b6      	b.n	8011aba <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x126>
 8011b4c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8011b4e:	3201      	adds	r2, #1
 8011b50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011b52:	440b      	add	r3, r1
 8011b54:	9337      	str	r3, [sp, #220]	; 0xdc
 8011b56:	e7a6      	b.n	8011aa6 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x112>
}
 8011b58:	b02d      	add	sp, #180	; 0xb4
 8011b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b5e <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
 8011b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b62:	b0ad      	sub	sp, #180	; 0xb4
 8011b64:	4605      	mov	r5, r0
 8011b66:	461c      	mov	r4, r3
    return RuntimeShape(new_shape_size, shape, 1);
 8011b68:	2301      	movs	r3, #1
 8011b6a:	9201      	str	r2, [sp, #4]
 8011b6c:	a81e      	add	r0, sp, #120	; 0x78
 8011b6e:	460a      	mov	r2, r1
 8011b70:	2105      	movs	r1, #5
 8011b72:	f7f6 fc99 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 8011b76:	2301      	movs	r3, #1
 8011b78:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8011b7a:	2105      	movs	r1, #5
 8011b7c:	a825      	add	r0, sp, #148	; 0x94
 8011b7e:	f7f6 fc93 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
 8011b82:	f995 7000 	ldrsb.w	r7, [r5]
 8011b86:	2f05      	cmp	r7, #5
 8011b88:	dd01      	ble.n	8011b8e <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
 8011b8a:	f005 f8db 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
 8011b8e:	f995 0018 	ldrsb.w	r0, [r5, #24]
 8011b92:	2805      	cmp	r0, #5
 8011b94:	dcf9      	bgt.n	8011b8a <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011b96:	f06f 0103 	mvn.w	r1, #3
    left_padding_copy[i] = 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	f105 0c04 	add.w	ip, r5, #4
 8011ba0:	4379      	muls	r1, r7
 8011ba2:	9318      	str	r3, [sp, #96]	; 0x60
 8011ba4:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011ba8:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011bac:	429f      	cmp	r7, r3
 8011bae:	dc14      	bgt.n	8011bda <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7c>
 8011bb0:	f06f 0103 	mvn.w	r1, #3
    right_padding_copy[i] = 0;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	351c      	adds	r5, #28
 8011bb8:	4341      	muls	r1, r0
 8011bba:	931d      	str	r3, [sp, #116]	; 0x74
 8011bbc:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8011bc0:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 8011bc4:	4298      	cmp	r0, r3
 8011bc6:	dd12      	ble.n	8011bee <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x90>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 8011bc8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011bcc:	ae19      	add	r6, sp, #100	; 0x64
                       op_params.right_padding_count] =
 8011bce:	f855 7b04 	ldr.w	r7, [r5], #4
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 8011bd2:	3301      	adds	r3, #1
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 8011bd4:	4432      	add	r2, r6
 8011bd6:	6157      	str	r7, [r2, #20]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 8011bd8:	e7f4      	b.n	8011bc4 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x66>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 8011bda:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011bde:	ae14      	add	r6, sp, #80	; 0x50
                      op_params.left_padding_count] = op_params.left_padding[i];
 8011be0:	f85c eb04 	ldr.w	lr, [ip], #4
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011be4:	3301      	adds	r3, #1
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 8011be6:	4432      	add	r2, r6
 8011be8:	f8c2 e014 	str.w	lr, [r2, #20]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 8011bec:	e7de      	b.n	8011bac <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x4e>
    TFLITE_DCHECK_LT(i, size_);
 8011bee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	ddca      	ble.n	8011b8a <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
    return dims_[i];
 8011bf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    TFLITE_DCHECK_LT(i, size_);
 8011bf6:	2b01      	cmp	r3, #1
    return dims_[i];
 8011bf8:	9202      	str	r2, [sp, #8]
    TFLITE_DCHECK_LT(i, size_);
 8011bfa:	d0c6      	beq.n	8011b8a <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011bfc:	2b02      	cmp	r3, #2
    return dims_[i];
 8011bfe:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
    TFLITE_DCHECK_LT(i, size_);
 8011c02:	d0c2      	beq.n	8011b8a <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011c04:	2b03      	cmp	r3, #3
    return dims_[i];
 8011c06:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
    TFLITE_DCHECK_LT(i, size_);
 8011c0a:	d0be      	beq.n	8011b8a <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
 8011c0c:	2b04      	cmp	r3, #4
    return dims_[i];
 8011c0e:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    TFLITE_DCHECK_LT(i, size_);
 8011c10:	d0bb      	beq.n	8011b8a <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  const int left_b_padding = left_padding_copy[0];
 8011c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
    return dims_[i];
 8011c14:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8011c18:	9305      	str	r3, [sp, #20]
  const int left_p_padding = left_padding_copy[1];
 8011c1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
                out_b >= output_batch - right_b_padding ||
 8011c1c:	9902      	ldr	r1, [sp, #8]
  const int left_p_padding = left_padding_copy[1];
 8011c1e:	9306      	str	r3, [sp, #24]
  const int left_h_padding = left_padding_copy[2];
 8011c20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c22:	9307      	str	r3, [sp, #28]
  const int left_w_padding = left_padding_copy[3];
 8011c24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c26:	9308      	str	r3, [sp, #32]
  const int left_d_padding = left_padding_copy[4];
 8011c28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c2a:	9309      	str	r3, [sp, #36]	; 0x24
  const int right_h_padding = right_padding_copy[2];
 8011c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c2e:	930a      	str	r3, [sp, #40]	; 0x28
  const int right_w_padding = right_padding_copy[3];
 8011c30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011c32:	930b      	str	r3, [sp, #44]	; 0x2c
  const int right_d_padding = right_padding_copy[4];
 8011c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c36:	930c      	str	r3, [sp, #48]	; 0x30
  const T pad_value = *pad_value_ptr;
 8011c38:	f9b4 3000 	ldrsh.w	r3, [r4]
 8011c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8011c3e:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8011c42:	005a      	lsls	r2, r3, #1
 8011c44:	920e      	str	r2, [sp, #56]	; 0x38
 8011c46:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 8011c4a:	4353      	muls	r3, r2
 8011c4c:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8011c50:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8011c54:	fb09 f303 	mul.w	r3, r9, r3
 8011c58:	9303      	str	r3, [sp, #12]
 8011c5a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 8011c5e:	9a03      	ldr	r2, [sp, #12]
 8011c60:	4353      	muls	r3, r2
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8011c62:	2200      	movs	r2, #0
 8011c64:	9304      	str	r3, [sp, #16]
                out_b >= output_batch - right_b_padding ||
 8011c66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011c68:	1acb      	subs	r3, r1, r3
 8011c6a:	9312      	str	r3, [sp, #72]	; 0x48
                out_p >= output_plane - right_p_padding ||
 8011c6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011c6e:	ebab 0303 	sub.w	r3, fp, r3
 8011c72:	9313      	str	r3, [sp, #76]	; 0x4c
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8011c74:	9b02      	ldr	r3, [sp, #8]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	da57      	bge.n	8011d2a <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1cc>
                out_h >= output_height - right_h_padding ||
 8011c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 8011c7c:	2100      	movs	r1, #0
 8011c7e:	f8dd c0dc 	ldr.w	ip, [sp, #220]	; 0xdc
                out_h >= output_height - right_h_padding ||
 8011c82:	ebaa 0303 	sub.w	r3, sl, r3
 8011c86:	9311      	str	r3, [sp, #68]	; 0x44
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 8011c88:	4559      	cmp	r1, fp
 8011c8a:	da48      	bge.n	8011d1e <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1c0>
 8011c8c:	46e6      	mov	lr, ip
      for (int out_h = 0; out_h < output_height; ++out_h) {
 8011c8e:	2000      	movs	r0, #0
 8011c90:	4550      	cmp	r0, sl
 8011c92:	da40      	bge.n	8011d16 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1b8>
                out_w >= output_width - right_w_padding ||
 8011c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c96:	4675      	mov	r5, lr
        for (int out_w = 0; out_w < output_width; ++out_w) {
 8011c98:	2400      	movs	r4, #0
                out_w >= output_width - right_w_padding ||
 8011c9a:	1afb      	subs	r3, r7, r3
 8011c9c:	930f      	str	r3, [sp, #60]	; 0x3c
                out_d >= output_depth - right_d_padding) {
 8011c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ca0:	eba8 0303 	sub.w	r3, r8, r3
 8011ca4:	9310      	str	r3, [sp, #64]	; 0x40
        for (int out_w = 0; out_w < output_width; ++out_w) {
 8011ca6:	42bc      	cmp	r4, r7
 8011ca8:	da32      	bge.n	8011d10 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1b2>
          for (int out_d = 0; out_d < output_depth; ++out_d) {
 8011caa:	2300      	movs	r3, #0
 8011cac:	4543      	cmp	r3, r8
 8011cae:	da2b      	bge.n	8011d08 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1aa>
            if (out_b < left_b_padding ||
 8011cb0:	9e05      	ldr	r6, [sp, #20]
 8011cb2:	42b2      	cmp	r2, r6
 8011cb4:	db1a      	blt.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
 8011cb6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011cb8:	4296      	cmp	r6, r2
 8011cba:	dd17      	ble.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
                out_b >= output_batch - right_b_padding ||
 8011cbc:	9e06      	ldr	r6, [sp, #24]
 8011cbe:	42b1      	cmp	r1, r6
 8011cc0:	db14      	blt.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
                out_p < left_p_padding ||
 8011cc2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011cc4:	428e      	cmp	r6, r1
 8011cc6:	dd11      	ble.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
                out_p >= output_plane - right_p_padding ||
 8011cc8:	9e07      	ldr	r6, [sp, #28]
 8011cca:	42b0      	cmp	r0, r6
 8011ccc:	db0e      	blt.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
                out_h < left_h_padding ||
 8011cce:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011cd0:	4286      	cmp	r6, r0
 8011cd2:	dd0b      	ble.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
                out_h >= output_height - right_h_padding ||
 8011cd4:	9e08      	ldr	r6, [sp, #32]
 8011cd6:	42b4      	cmp	r4, r6
 8011cd8:	db08      	blt.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
                out_w < left_w_padding ||
 8011cda:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011cdc:	42a6      	cmp	r6, r4
 8011cde:	dd05      	ble.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
                out_w >= output_width - right_w_padding ||
 8011ce0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011ce2:	42b3      	cmp	r3, r6
 8011ce4:	db02      	blt.n	8011cec <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x18e>
                out_d < left_d_padding ||
 8011ce6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011ce8:	429e      	cmp	r6, r3
 8011cea:	dc04      	bgt.n	8011cf6 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x198>
              *out_ptr++ = pad_value;
 8011cec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011cee:	f825 6013 	strh.w	r6, [r5, r3, lsl #1]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	e7da      	b.n	8011cac <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14e>
              *out_ptr++ = *in_ptr++;
 8011cf6:	9e01      	ldr	r6, [sp, #4]
 8011cf8:	f9b6 6000 	ldrsh.w	r6, [r6]
 8011cfc:	f825 6013 	strh.w	r6, [r5, r3, lsl #1]
 8011d00:	9e01      	ldr	r6, [sp, #4]
 8011d02:	3602      	adds	r6, #2
 8011d04:	9601      	str	r6, [sp, #4]
 8011d06:	e7f4      	b.n	8011cf2 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x194>
 8011d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        for (int out_w = 0; out_w < output_width; ++out_w) {
 8011d0a:	3401      	adds	r4, #1
 8011d0c:	441d      	add	r5, r3
 8011d0e:	e7ca      	b.n	8011ca6 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x148>
 8011d10:	44ce      	add	lr, r9
      for (int out_h = 0; out_h < output_height; ++out_h) {
 8011d12:	3001      	adds	r0, #1
 8011d14:	e7bc      	b.n	8011c90 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
 8011d16:	9b03      	ldr	r3, [sp, #12]
    for (int out_p = 0; out_p < output_plane; ++out_p) {
 8011d18:	3101      	adds	r1, #1
 8011d1a:	449c      	add	ip, r3
 8011d1c:	e7b4      	b.n	8011c88 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12a>
 8011d1e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8011d20:	3201      	adds	r2, #1
 8011d22:	9904      	ldr	r1, [sp, #16]
 8011d24:	440b      	add	r3, r1
 8011d26:	9337      	str	r3, [sp, #220]	; 0xdc
 8011d28:	e7a4      	b.n	8011c74 <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x116>
}
 8011d2a:	b02d      	add	sp, #180	; 0xb4
 8011d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8011d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8011d34:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8011d36:	b0da      	sub	sp, #360	; 0x168
 8011d38:	4680      	mov	r8, r0
 8011d3a:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 8011d3c:	b90f      	cbnz	r7, 8011d42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12>
 8011d3e:	f005 f801 	bl	8016d44 <abort>
      tflite::micro::GetEvalInput(context, node, /*index=*/0);
 8011d42:	2200      	movs	r2, #0
 8011d44:	f7fd ffbd 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      NumInputs(node) == 3
 8011d48:	682c      	ldr	r4, [r5, #0]
      tflite::micro::GetEvalInput(context, node, /*index=*/0);
 8011d4a:	4606      	mov	r6, r0
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8011d4c:	b144      	cbz	r4, 8011d60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30>
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
 8011d4e:	6823      	ldr	r3, [r4, #0]
 8011d50:	2b03      	cmp	r3, #3
 8011d52:	d117      	bne.n	8011d84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
 8011d54:	2202      	movs	r2, #2
 8011d56:	4629      	mov	r1, r5
 8011d58:	4640      	mov	r0, r8
 8011d5a:	f7fd ffb2 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011d5e:	4604      	mov	r4, r0
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
 8011d60:	4629      	mov	r1, r5
 8011d62:	2200      	movs	r2, #0
 8011d64:	4640      	mov	r0, r8
 8011d66:	f7fd ffae 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8011d6a:	4605      	mov	r5, r0
  switch (input->type) {
 8011d6c:	7a30      	ldrb	r0, [r6, #8]
 8011d6e:	1e43      	subs	r3, r0, #1
 8011d70:	2b08      	cmp	r3, #8
 8011d72:	f200 80ae 	bhi.w	8011ed2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
 8011d76:	e8df f003 	tbb	[pc, r3]
 8011d7a:	9107      	.short	0x9107
 8011d7c:	acacacac 	.word	0xacacacac
 8011d80:	ac73      	.short	0xac73
 8011d82:	3c          	.byte	0x3c
 8011d83:	00          	.byte	0x00
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
 8011d84:	2400      	movs	r4, #0
 8011d86:	e7eb      	b.n	8011d60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30>
              ? 0.f
 8011d88:	b1fc      	cbz	r4, 8011dca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9a>
 8011d8a:	6823      	ldr	r3, [r4, #0]
 8011d8c:	681b      	ldr	r3, [r3, #0]
              : *tflite::micro::GetTensorData<float>(constant_values);
 8011d8e:	9304      	str	r3, [sp, #16]
            data->params, tflite::micro::GetTensorShape(input),
 8011d90:	4631      	mov	r1, r6
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
 8011d92:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d119      	bne.n	8011dce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
            tflite::micro::GetTensorShape(output),
 8011d9a:	ac0d      	add	r4, sp, #52	; 0x34
            data->params, tflite::micro::GetTensorShape(input),
 8011d9c:	a806      	add	r0, sp, #24
 8011d9e:	f7fd ffa0 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(output),
 8011da2:	4629      	mov	r1, r5
 8011da4:	4620      	mov	r0, r4
 8011da6:	6836      	ldr	r6, [r6, #0]
 8011da8:	f7fd ff9b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8011dac:	2d00      	cmp	r5, #0
 8011dae:	d0c6      	beq.n	8011d3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe>
template <typename T, typename P>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const T* input_data,
                const P* pad_value_ptr, const RuntimeShape& output_shape,
                T* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 8011db0:	682b      	ldr	r3, [r5, #0]
 8011db2:	4632      	mov	r2, r6
 8011db4:	a906      	add	r1, sp, #24
 8011db6:	e9cd 4300 	strd	r4, r3, [sp]
 8011dba:	ab04      	add	r3, sp, #16
 8011dbc:	4638      	mov	r0, r7
 8011dbe:	f7ff fd00 	bl	80117c2 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
  return kTfLiteOk;
 8011dc2:	2000      	movs	r0, #0
}
 8011dc4:	b05a      	add	sp, #360	; 0x168
 8011dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              ? 0.f
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e7df      	b.n	8011d8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
                           &pad_value, tflite::micro::GetTensorShape(output),
 8011dce:	ac1b      	add	r4, sp, #108	; 0x6c
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 8011dd0:	a814      	add	r0, sp, #80	; 0x50
 8011dd2:	f7fd ff86 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                           &pad_value, tflite::micro::GetTensorShape(output),
 8011dd6:	4629      	mov	r1, r5
 8011dd8:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011dda:	6836      	ldr	r6, [r6, #0]
 8011ddc:	f7fd ff81 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8011de0:	2d00      	cmp	r5, #0
 8011de2:	d0ac      	beq.n	8011d3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe>
 8011de4:	682b      	ldr	r3, [r5, #0]
 8011de6:	4632      	mov	r2, r6
 8011de8:	a914      	add	r1, sp, #80	; 0x50
 8011dea:	e9cd 4300 	strd	r4, r3, [sp]
 8011dee:	ab04      	add	r3, sp, #16
 8011df0:	e7e4      	b.n	8011dbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
      if (constant_values == nullptr) {
 8011df2:	b9ec      	cbnz	r4, 8011e30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
        pad_value = static_cast<uint8_t>(data->output_zero_point);
 8011df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
 8011df6:	f88d 300d 	strb.w	r3, [sp, #13]
            data->params, tflite::micro::GetTensorShape(input),
 8011dfa:	4631      	mov	r1, r6
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
 8011dfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d119      	bne.n	8011e38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x108>
            tflite::micro::GetTensorShape(output),
 8011e04:	ac29      	add	r4, sp, #164	; 0xa4
            data->params, tflite::micro::GetTensorShape(input),
 8011e06:	a822      	add	r0, sp, #136	; 0x88
 8011e08:	f7fd ff6b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(output),
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011e10:	6836      	ldr	r6, [r6, #0]
 8011e12:	f7fd ff66 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8011e16:	2d00      	cmp	r5, #0
 8011e18:	d091      	beq.n	8011d3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe>
 8011e1a:	682b      	ldr	r3, [r5, #0]
 8011e1c:	4632      	mov	r2, r6
 8011e1e:	a922      	add	r1, sp, #136	; 0x88
 8011e20:	e9cd 4300 	strd	r4, r3, [sp]
 8011e24:	f10d 030d 	add.w	r3, sp, #13
 8011e28:	4638      	mov	r0, r7
 8011e2a:	f7ff fdb3 	bl	8011994 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
 8011e2e:	e7c8      	b.n	8011dc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x92>
        pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
 8011e30:	6823      	ldr	r3, [r4, #0]
 8011e32:	f993 3000 	ldrsb.w	r3, [r3]
 8011e36:	e7de      	b.n	8011df6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
                           &pad_value, tflite::micro::GetTensorShape(output),
 8011e38:	ac37      	add	r4, sp, #220	; 0xdc
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 8011e3a:	a830      	add	r0, sp, #192	; 0xc0
 8011e3c:	f7fd ff51 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                           &pad_value, tflite::micro::GetTensorShape(output),
 8011e40:	4629      	mov	r1, r5
 8011e42:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011e44:	6836      	ldr	r6, [r6, #0]
 8011e46:	f7fd ff4c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8011e4a:	2d00      	cmp	r5, #0
 8011e4c:	f43f af77 	beq.w	8011d3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe>
 8011e50:	682b      	ldr	r3, [r5, #0]
 8011e52:	4632      	mov	r2, r6
 8011e54:	a930      	add	r1, sp, #192	; 0xc0
 8011e56:	e9cd 4300 	strd	r4, r3, [sp]
 8011e5a:	f10d 030d 	add.w	r3, sp, #13
 8011e5e:	e7e3      	b.n	8011e28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>
              : *tflite::micro::GetTensorData<int16_t>(constant_values);
 8011e60:	b114      	cbz	r4, 8011e68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x138>
 8011e62:	6823      	ldr	r3, [r4, #0]
 8011e64:	f9b3 4000 	ldrsh.w	r4, [r3]
 8011e68:	f8ad 400e 	strh.w	r4, [sp, #14]
                         &pad_value, tflite::micro::GetTensorShape(output),
 8011e6c:	ac45      	add	r4, sp, #276	; 0x114
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 8011e6e:	4631      	mov	r1, r6
 8011e70:	a83e      	add	r0, sp, #248	; 0xf8
 8011e72:	f7fd ff36 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                         &pad_value, tflite::micro::GetTensorShape(output),
 8011e76:	4629      	mov	r1, r5
 8011e78:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011e7a:	6836      	ldr	r6, [r6, #0]
 8011e7c:	f7fd ff31 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8011e80:	2d00      	cmp	r5, #0
 8011e82:	f43f af5c 	beq.w	8011d3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe>
 8011e86:	682b      	ldr	r3, [r5, #0]
 8011e88:	4632      	mov	r2, r6
 8011e8a:	a93e      	add	r1, sp, #248	; 0xf8
 8011e8c:	4638      	mov	r0, r7
 8011e8e:	e9cd 4300 	strd	r4, r3, [sp]
 8011e92:	f10d 030e 	add.w	r3, sp, #14
 8011e96:	f7ff fe62 	bl	8011b5e <_ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
 8011e9a:	e792      	b.n	8011dc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x92>
              ? 0
 8011e9c:	b10c      	cbz	r4, 8011ea2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
 8011e9e:	6823      	ldr	r3, [r4, #0]
 8011ea0:	681c      	ldr	r4, [r3, #0]
              : *tflite::micro::GetTensorData<int32_t>(constant_values);
 8011ea2:	9405      	str	r4, [sp, #20]
                         &pad_value, tflite::micro::GetTensorShape(output),
 8011ea4:	ac53      	add	r4, sp, #332	; 0x14c
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 8011ea6:	4631      	mov	r1, r6
 8011ea8:	a84c      	add	r0, sp, #304	; 0x130
 8011eaa:	f7fd ff1a 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                         &pad_value, tflite::micro::GetTensorShape(output),
 8011eae:	4629      	mov	r1, r5
 8011eb0:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011eb2:	6836      	ldr	r6, [r6, #0]
 8011eb4:	f7fd ff15 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8011eb8:	2d00      	cmp	r5, #0
 8011eba:	f43f af40 	beq.w	8011d3e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe>
template <>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const int32_t* input_data,
                const int32_t* pad_value_ptr, const RuntimeShape& output_shape,
                int32_t* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 8011ebe:	682b      	ldr	r3, [r5, #0]
 8011ec0:	4632      	mov	r2, r6
 8011ec2:	a94c      	add	r1, sp, #304	; 0x130
 8011ec4:	4638      	mov	r0, r7
 8011ec6:	e9cd 4300 	strd	r4, r3, [sp]
 8011eca:	ab05      	add	r3, sp, #20
 8011ecc:	f7ff fb92 	bl	80115f4 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
 8011ed0:	e777      	b.n	8011dc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x92>
      MicroPrintf("Type %s not currently supported by Pad.",
 8011ed2:	f7f6 f8ed 	bl	80080b0 <TfLiteTypeGetName>
 8011ed6:	4601      	mov	r1, r0
 8011ed8:	4802      	ldr	r0, [pc, #8]	; (8011ee4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
 8011eda:	f7f8 feed 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8011ede:	2001      	movs	r0, #1
 8011ee0:	e770      	b.n	8011dc4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
 8011ee2:	bf00      	nop
 8011ee4:	080fc8eb 	.word	0x080fc8eb

08011ee8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  }
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011ee8:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8011eea:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011eec:	b90b      	cbnz	r3, 8011ef2 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 8011eee:	f004 ff29 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
 8011ef2:	2120      	movs	r1, #32
}
 8011ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
 8011ef8:	4718      	bx	r3

08011efa <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace reference_integer_ops {

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
 8011efa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011efe:	b097      	sub	sp, #92	; 0x5c
 8011f00:	4699      	mov	r9, r3
 8011f02:	4605      	mov	r5, r0
 8011f04:	468b      	mov	fp, r1
 8011f06:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8011f08:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	dd01      	ble.n	8011f14 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
 8011f10:	f004 ff18 	bl	8016d44 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011f14:	680b      	ldr	r3, [r1, #0]
 8011f16:	2b04      	cmp	r3, #4
 8011f18:	d1fa      	bne.n	8011f10 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8011f1a:	f8d9 3000 	ldr.w	r3, [r9]
 8011f1e:	2b04      	cmp	r3, #4
 8011f20:	d1f6      	bne.n	8011f10 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011f22:	2300      	movs	r3, #0
 8011f24:	464a      	mov	r2, r9
 8011f26:	4658      	mov	r0, fp
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
 8011f28:	f04f 0a00 	mov.w	sl, #0
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011f2c:	4619      	mov	r1, r3
 8011f2e:	f7fa fa8f 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8011f32:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011f34:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8011f36:	464a      	mov	r2, r9
 8011f38:	4619      	mov	r1, r3
 8011f3a:	4658      	mov	r0, fp
 8011f3c:	f7fa fa88 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011f40:	f8db 3008 	ldr.w	r3, [fp, #8]
 8011f44:	9009      	str	r0, [sp, #36]	; 0x24
 8011f46:	930a      	str	r3, [sp, #40]	; 0x28
 8011f48:	f8db 300c 	ldr.w	r3, [fp, #12]
 8011f4c:	930d      	str	r3, [sp, #52]	; 0x34
 8011f4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011f52:	930e      	str	r3, [sp, #56]	; 0x38
 8011f54:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011f58:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
 8011f5a:	68eb      	ldr	r3, [r5, #12]
 8011f5c:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_width = params.stride_width;
 8011f5e:	692b      	ldr	r3, [r5, #16]
 8011f60:	930c      	str	r3, [sp, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 8011f62:	9b08      	ldr	r3, [sp, #32]
 8011f64:	459a      	cmp	sl, r3
 8011f66:	f280 808f 	bge.w	8012088 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x18e>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	9305      	str	r3, [sp, #20]
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011f6e:	9303      	str	r3, [sp, #12]
 8011f70:	9b03      	ldr	r3, [sp, #12]
 8011f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f74:	4293      	cmp	r3, r2
 8011f76:	f280 8084 	bge.w	8012082 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x188>
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	9306      	str	r3, [sp, #24]
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011f7e:	9304      	str	r3, [sp, #16]
 8011f80:	9b04      	ldr	r3, [sp, #16]
 8011f82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f84:	4293      	cmp	r3, r2
 8011f86:	da74      	bge.n	8012072 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x178>
        for (int channel = 0; channel < depth; ++channel) {
 8011f88:	2300      	movs	r3, #0
 8011f8a:	9302      	str	r3, [sp, #8]
 8011f8c:	9b02      	ldr	r3, [sp, #8]
 8011f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f90:	4293      	cmp	r3, r2
 8011f92:	da66      	bge.n	8012062 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x168>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
 8011f94:	9a05      	ldr	r2, [sp, #20]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
 8011f96:	2600      	movs	r6, #0
              (out_y * stride_height) - params.padding_values.height;
 8011f98:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
              (out_x * stride_width) - params.padding_values.width;
 8011f9c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
          int filter_count = 0;
 8011fa0:	4634      	mov	r4, r6
          const int in_y_origin =
 8011fa2:	1bd7      	subs	r7, r2, r7
      if (__a < __b)
 8011fa4:	9a06      	ldr	r2, [sp, #24]
 8011fa6:	69a9      	ldr	r1, [r5, #24]
 8011fa8:	1ad3      	subs	r3, r2, r3
          const int filter_x_start = std::max(0, -in_x_origin);
 8011faa:	bf4c      	ite	mi
 8011fac:	425a      	negmi	r2, r3
      return __a;
 8011fae:	2200      	movpl	r2, #0
 8011fb0:	9207      	str	r2, [sp, #28]
              std::min(params.filter_width, input_width - in_x_origin);
 8011fb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011fb4:	1ad2      	subs	r2, r2, r3
 8011fb6:	428a      	cmp	r2, r1
 8011fb8:	bfa8      	it	ge
 8011fba:	460a      	movge	r2, r1
      if (__a < __b)
 8011fbc:	2f00      	cmp	r7, #0
 8011fbe:	6969      	ldr	r1, [r5, #20]
 8011fc0:	9211      	str	r2, [sp, #68]	; 0x44
          const int filter_y_start = std::max(0, -in_y_origin);
 8011fc2:	bfb8      	it	lt
 8011fc4:	f1c7 0800 	rsblt	r8, r7, #0
              std::min(params.filter_height, input_height - in_y_origin);
 8011fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      return __a;
 8011fca:	bfa8      	it	ge
 8011fcc:	f04f 0800 	movge.w	r8, #0
 8011fd0:	1bd2      	subs	r2, r2, r7
 8011fd2:	428a      	cmp	r2, r1
 8011fd4:	bfa8      	it	ge
 8011fd6:	460a      	movge	r2, r1
 8011fd8:	9210      	str	r2, [sp, #64]	; 0x40
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8011fda:	9a07      	ldr	r2, [sp, #28]
 8011fdc:	4413      	add	r3, r2
 8011fde:	9315      	str	r3, [sp, #84]	; 0x54
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fe2:	4598      	cmp	r8, r3
 8011fe4:	da1c      	bge.n	8012020 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x126>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011fe6:	9b07      	ldr	r3, [sp, #28]
 8011fe8:	1b1b      	subs	r3, r3, r4
 8011fea:	9313      	str	r3, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8011fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fee:	1b1b      	subs	r3, r3, r4
 8011ff0:	9314      	str	r3, [sp, #80]	; 0x50
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011ff2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ff4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011ff6:	4423      	add	r3, r4
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	dd0e      	ble.n	801201a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x120>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8011ffc:	9b02      	ldr	r3, [sp, #8]
 8011ffe:	eb08 0207 	add.w	r2, r8, r7
 8012002:	4651      	mov	r1, sl
 8012004:	4658      	mov	r0, fp
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801200a:	4423      	add	r3, r4
              filter_count++;
 801200c:	3401      	adds	r4, #1
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 801200e:	f7fa f889 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
 8012012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012014:	561b      	ldrsb	r3, [r3, r0]
 8012016:	441e      	add	r6, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012018:	e7eb      	b.n	8011ff2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf8>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801201a:	f108 0801 	add.w	r8, r8, #1
 801201e:	e7df      	b.n	8011fe0 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xe6>
            }
          }
          if (filter_count == 0) return false;
 8012020:	2c00      	cmp	r4, #0
 8012022:	d035      	beq.n	8012090 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x196>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 8012024:	2e00      	cmp	r6, #0
                        : (acc - filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012026:	4651      	mov	r1, sl
                        : (acc - filter_count / 2) / filter_count;
 8012028:	bfd7      	itett	le
 801202a:	2302      	movle	r3, #2
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 801202c:	eb06 0664 	addgt.w	r6, r6, r4, asr #1
                        : (acc - filter_count / 2) / filter_count;
 8012030:	fb94 f0f3 	sdivle	r0, r4, r3
 8012034:	1a36      	suble	r6, r6, r0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012036:	9b02      	ldr	r3, [sp, #8]
 8012038:	4648      	mov	r0, r9
 801203a:	9300      	str	r3, [sp, #0]
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 801203c:	fb96 f4f4 	sdiv	r4, r6, r4
 8012040:	69ee      	ldr	r6, [r5, #28]
 8012042:	42b4      	cmp	r4, r6
 8012044:	bfb8      	it	lt
 8012046:	4634      	movlt	r4, r6
 8012048:	6a2e      	ldr	r6, [r5, #32]
 801204a:	42b4      	cmp	r4, r6
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801204c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8012050:	bfa8      	it	ge
 8012052:	4634      	movge	r4, r6
 8012054:	f7fa f866 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012058:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801205a:	541c      	strb	r4, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
 801205c:	9b02      	ldr	r3, [sp, #8]
 801205e:	3301      	adds	r3, #1
 8012060:	e793      	b.n	8011f8a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x90>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012062:	9b04      	ldr	r3, [sp, #16]
 8012064:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012066:	3301      	adds	r3, #1
 8012068:	9304      	str	r3, [sp, #16]
 801206a:	9b06      	ldr	r3, [sp, #24]
 801206c:	4413      	add	r3, r2
 801206e:	9306      	str	r3, [sp, #24]
 8012070:	e786      	b.n	8011f80 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x86>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012072:	9b03      	ldr	r3, [sp, #12]
 8012074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012076:	3301      	adds	r3, #1
 8012078:	9303      	str	r3, [sp, #12]
 801207a:	9b05      	ldr	r3, [sp, #20]
 801207c:	4413      	add	r3, r2
 801207e:	9305      	str	r3, [sp, #20]
 8012080:	e776      	b.n	8011f70 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x76>
  for (int batch = 0; batch < batches; ++batch) {
 8012082:	f10a 0a01 	add.w	sl, sl, #1
 8012086:	e76c      	b.n	8011f62 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x68>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
  return true;
 8012088:	2001      	movs	r0, #1
}
 801208a:	b017      	add	sp, #92	; 0x5c
 801208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (filter_count == 0) return false;
 8012090:	4620      	mov	r0, r4
 8012092:	e7fa      	b.n	801208a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x190>

08012094 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
 8012094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012098:	b097      	sub	sp, #92	; 0x5c
 801209a:	4698      	mov	r8, r3
 801209c:	4604      	mov	r4, r0
 801209e:	460f      	mov	r7, r1
 80120a0:	9209      	str	r2, [sp, #36]	; 0x24
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 80120a2:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	dd01      	ble.n	80120ae <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
 80120aa:	f004 fe4b 	bl	8016d44 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
 80120ae:	3280      	adds	r2, #128	; 0x80
 80120b0:	dbfb      	blt.n	80120aa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
 80120b2:	2b7f      	cmp	r3, #127	; 0x7f
 80120b4:	dcf9      	bgt.n	80120aa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80120b6:	680b      	ldr	r3, [r1, #0]
 80120b8:	2b04      	cmp	r3, #4
 80120ba:	d1f6      	bne.n	80120aa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80120bc:	f8d8 3000 	ldr.w	r3, [r8]
 80120c0:	2b04      	cmp	r3, #4
 80120c2:	d1f2      	bne.n	80120aa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80120c4:	2300      	movs	r3, #0
 80120c6:	4642      	mov	r2, r8
 80120c8:	4638      	mov	r0, r7
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
 80120ca:	f04f 0b00 	mov.w	fp, #0
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80120ce:	4619      	mov	r1, r3
 80120d0:	f7fa f9be 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80120d4:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80120d6:	900b      	str	r0, [sp, #44]	; 0x2c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80120d8:	4642      	mov	r2, r8
 80120da:	4619      	mov	r1, r3
 80120dc:	4638      	mov	r0, r7
 80120de:	f7fa f9b7 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	900c      	str	r0, [sp, #48]	; 0x30
 80120e6:	930e      	str	r3, [sp, #56]	; 0x38
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	9311      	str	r3, [sp, #68]	; 0x44
 80120ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80120f0:	9312      	str	r3, [sp, #72]	; 0x48
 80120f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80120f6:	9313      	str	r3, [sp, #76]	; 0x4c
  const int stride_height = params.stride_height;
 80120f8:	68e3      	ldr	r3, [r4, #12]
 80120fa:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
 80120fc:	6923      	ldr	r3, [r4, #16]
 80120fe:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
 8012100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012102:	459b      	cmp	fp, r3
 8012104:	f280 808d 	bge.w	8012222 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x18e>
 8012108:	2300      	movs	r3, #0
 801210a:	9304      	str	r3, [sp, #16]
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801210c:	9302      	str	r3, [sp, #8]
 801210e:	9b02      	ldr	r3, [sp, #8]
 8012110:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012112:	4293      	cmp	r3, r2
 8012114:	f280 8082 	bge.w	801221c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x188>
 8012118:	2300      	movs	r3, #0
 801211a:	9305      	str	r3, [sp, #20]
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801211c:	9303      	str	r3, [sp, #12]
 801211e:	9b03      	ldr	r3, [sp, #12]
 8012120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012122:	4293      	cmp	r3, r2
 8012124:	da72      	bge.n	801220c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x178>
        for (int channel = 0; channel < depth; ++channel) {
 8012126:	f04f 0900 	mov.w	r9, #0
 801212a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801212c:	4599      	cmp	r9, r3
 801212e:	da65      	bge.n	80121fc <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x168>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
 8012130:	9a04      	ldr	r2, [sp, #16]
              (out_y * stride_height) - params.padding_values.height;
 8012132:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
              (out_x * stride_width) - params.padding_values.width;
 8012136:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_y_origin =
 801213a:	1b96      	subs	r6, r2, r6
      if (__a < __b)
 801213c:	9a05      	ldr	r2, [sp, #20]
 801213e:	1ad3      	subs	r3, r2, r3
 8012140:	9306      	str	r3, [sp, #24]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8012142:	bf4c      	ite	mi
 8012144:	425b      	negmi	r3, r3
      return __a;
 8012146:	2300      	movpl	r3, #0
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8012148:	9a06      	ldr	r2, [sp, #24]
 801214a:	9307      	str	r3, [sp, #28]
 801214c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801214e:	1a9b      	subs	r3, r3, r2
 8012150:	69a2      	ldr	r2, [r4, #24]
 8012152:	4293      	cmp	r3, r2
 8012154:	bfa8      	it	ge
 8012156:	4613      	movge	r3, r2
      if (__a < __b)
 8012158:	2e00      	cmp	r6, #0
 801215a:	6962      	ldr	r2, [r4, #20]
 801215c:	930a      	str	r3, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
 801215e:	bfb8      	it	lt
 8012160:	4275      	neglt	r5, r6
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8012162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      return __a;
 8012164:	bfa8      	it	ge
 8012166:	2500      	movge	r5, #0
 8012168:	1b9b      	subs	r3, r3, r6
 801216a:	4435      	add	r5, r6
 801216c:	4293      	cmp	r3, r2
 801216e:	bfa8      	it	ge
 8012170:	4613      	movge	r3, r2
 8012172:	930d      	str	r3, [sp, #52]	; 0x34
          int8_t max = std::numeric_limits<int8_t>::lowest();
 8012174:	2380      	movs	r3, #128	; 0x80
 8012176:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801217a:	1bab      	subs	r3, r5, r6
 801217c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801217e:	429a      	cmp	r2, r3
 8012180:	dd23      	ble.n	80121ca <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x136>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012182:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012186:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
 801218a:	9308      	str	r3, [sp, #32]
 801218c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801218e:	459a      	cmp	sl, r3
 8012190:	da19      	bge.n	80121c6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x132>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8012192:	9b06      	ldr	r3, [sp, #24]
 8012194:	462a      	mov	r2, r5
 8012196:	4659      	mov	r1, fp
 8012198:	f8cd 9000 	str.w	r9, [sp]
 801219c:	4453      	add	r3, sl
 801219e:	4638      	mov	r0, r7
 80121a0:	f7f9 ffc0 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
 80121a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121a6:	9908      	ldr	r1, [sp, #32]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80121a8:	f10a 0a01 	add.w	sl, sl, #1
 80121ac:	5612      	ldrsb	r2, [r2, r0]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80121ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121b0:	428a      	cmp	r2, r1
      return __a;
 80121b2:	f10d 0257 	add.w	r2, sp, #87	; 0x57
 80121b6:	4403      	add	r3, r0
 80121b8:	bfd8      	it	le
 80121ba:	4613      	movle	r3, r2
              max = std::max(
 80121bc:	f993 3000 	ldrsb.w	r3, [r3]
 80121c0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80121c4:	e7df      	b.n	8012186 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf2>
 80121c6:	3501      	adds	r5, #1
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80121c8:	e7d7      	b.n	801217a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xe6>
 80121ca:	f994 501c 	ldrsb.w	r5, [r4, #28]
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
          max = std::min<int8_t>(max, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80121ce:	4659      	mov	r1, fp
 80121d0:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
 80121d4:	4640      	mov	r0, r8
 80121d6:	f8cd 9000 	str.w	r9, [sp]
        for (int channel = 0; channel < depth; ++channel) {
 80121da:	f109 0901 	add.w	r9, r9, #1
 80121de:	429d      	cmp	r5, r3
 80121e0:	bfb8      	it	lt
 80121e2:	461d      	movlt	r5, r3
 80121e4:	f994 3020 	ldrsb.w	r3, [r4, #32]
 80121e8:	429d      	cmp	r5, r3
 80121ea:	bfa8      	it	ge
 80121ec:	461d      	movge	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80121ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121f2:	f7f9 ff97 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80121f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80121f8:	541d      	strb	r5, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
 80121fa:	e796      	b.n	801212a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x96>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80121fc:	9b03      	ldr	r3, [sp, #12]
 80121fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012200:	3301      	adds	r3, #1
 8012202:	9303      	str	r3, [sp, #12]
 8012204:	9b05      	ldr	r3, [sp, #20]
 8012206:	4413      	add	r3, r2
 8012208:	9305      	str	r3, [sp, #20]
 801220a:	e788      	b.n	801211e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x8a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801220c:	9b02      	ldr	r3, [sp, #8]
 801220e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012210:	3301      	adds	r3, #1
 8012212:	9302      	str	r3, [sp, #8]
 8012214:	9b04      	ldr	r3, [sp, #16]
 8012216:	4413      	add	r3, r2
 8012218:	9304      	str	r3, [sp, #16]
 801221a:	e778      	b.n	801210e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x7a>
  for (int batch = 0; batch < batches; ++batch) {
 801221c:	f10b 0b01 	add.w	fp, fp, #1
 8012220:	e76e      	b.n	8012100 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x6c>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
 8012222:	b017      	add	sp, #92	; 0x5c
 8012224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012228 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps>:

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int16_t* input_data,
                        const RuntimeShape& output_shape,
                        int16_t* output_data) {
 8012228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	4699      	mov	r9, r3
 801222e:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8012230:	69c3      	ldr	r3, [r0, #28]
                        int16_t* output_data) {
 8012232:	4606      	mov	r6, r0
 8012234:	9214      	str	r2, [sp, #80]	; 0x50
 8012236:	468b      	mov	fp, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8012238:	9308      	str	r3, [sp, #32]
 801223a:	6a03      	ldr	r3, [r0, #32]
 801223c:	9309      	str	r3, [sp, #36]	; 0x24
 801223e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8012242:	4293      	cmp	r3, r2
 8012244:	dd01      	ble.n	801224a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x22>
 8012246:	f004 fd7d 	bl	8016d44 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801224a:	680b      	ldr	r3, [r1, #0]
 801224c:	2b04      	cmp	r3, #4
 801224e:	d1fa      	bne.n	8012246 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8012250:	f8d9 3000 	ldr.w	r3, [r9]
 8012254:	2b04      	cmp	r3, #4
 8012256:	d1f6      	bne.n	8012246 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012258:	2300      	movs	r3, #0
 801225a:	464a      	mov	r2, r9
 801225c:	4658      	mov	r0, fp
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
 801225e:	f04f 0a00 	mov.w	sl, #0
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012262:	4619      	mov	r1, r3
 8012264:	f7fa f8f4 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8012268:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801226a:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801226c:	464a      	mov	r2, r9
 801226e:	4619      	mov	r1, r3
 8012270:	4658      	mov	r0, fp
 8012272:	f7fa f8ed 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012276:	f8db 3008 	ldr.w	r3, [fp, #8]
 801227a:	900b      	str	r0, [sp, #44]	; 0x2c
 801227c:	930c      	str	r3, [sp, #48]	; 0x30
 801227e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8012282:	930f      	str	r3, [sp, #60]	; 0x3c
 8012284:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012288:	9310      	str	r3, [sp, #64]	; 0x40
 801228a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801228e:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_height = params.stride_height;
 8012290:	68f3      	ldr	r3, [r6, #12]
 8012292:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_width = params.stride_width;
 8012294:	6933      	ldr	r3, [r6, #16]
 8012296:	930e      	str	r3, [sp, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8012298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801229a:	459a      	cmp	sl, r3
 801229c:	f280 8091 	bge.w	80123c2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x19a>
 80122a0:	2300      	movs	r3, #0
 80122a2:	9305      	str	r3, [sp, #20]
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80122a4:	9303      	str	r3, [sp, #12]
 80122a6:	9b03      	ldr	r3, [sp, #12]
 80122a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80122aa:	4293      	cmp	r3, r2
 80122ac:	f280 8086 	bge.w	80123bc <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x194>
 80122b0:	2300      	movs	r3, #0
 80122b2:	9306      	str	r3, [sp, #24]
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80122b4:	9304      	str	r3, [sp, #16]
 80122b6:	9b04      	ldr	r3, [sp, #16]
 80122b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80122ba:	4293      	cmp	r3, r2
 80122bc:	da76      	bge.n	80123ac <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x184>
        for (int channel = 0; channel < depth; ++channel) {
 80122be:	2300      	movs	r3, #0
 80122c0:	9302      	str	r3, [sp, #8]
 80122c2:	9b02      	ldr	r3, [sp, #8]
 80122c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80122c6:	4293      	cmp	r3, r2
 80122c8:	da68      	bge.n	801239c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x174>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
 80122ca:	9a05      	ldr	r2, [sp, #20]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
 80122cc:	2500      	movs	r5, #0
              (out_y * stride_height) - params.padding_values.height;
 80122ce:	f9b6 7004 	ldrsh.w	r7, [r6, #4]
              (out_x * stride_width) - params.padding_values.width;
 80122d2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
          int filter_count = 0;
 80122d6:	462c      	mov	r4, r5
          const int in_y_origin =
 80122d8:	1bd7      	subs	r7, r2, r7
      if (__a < __b)
 80122da:	9a06      	ldr	r2, [sp, #24]
 80122dc:	69b1      	ldr	r1, [r6, #24]
 80122de:	1ad3      	subs	r3, r2, r3
          const int filter_x_start = std::max(0, -in_x_origin);
 80122e0:	bf4c      	ite	mi
 80122e2:	425a      	negmi	r2, r3
      return __a;
 80122e4:	2200      	movpl	r2, #0
 80122e6:	9207      	str	r2, [sp, #28]
              std::min(params.filter_width, input_width - in_x_origin);
 80122e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80122ea:	1ad2      	subs	r2, r2, r3
 80122ec:	428a      	cmp	r2, r1
 80122ee:	bfa8      	it	ge
 80122f0:	460a      	movge	r2, r1
      if (__a < __b)
 80122f2:	2f00      	cmp	r7, #0
 80122f4:	6971      	ldr	r1, [r6, #20]
 80122f6:	9213      	str	r2, [sp, #76]	; 0x4c
          const int filter_y_start = std::max(0, -in_y_origin);
 80122f8:	bfb8      	it	lt
 80122fa:	f1c7 0800 	rsblt	r8, r7, #0
              std::min(params.filter_height, input_height - in_y_origin);
 80122fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      return __a;
 8012300:	bfa8      	it	ge
 8012302:	f04f 0800 	movge.w	r8, #0
 8012306:	1bd2      	subs	r2, r2, r7
 8012308:	428a      	cmp	r2, r1
 801230a:	bfa8      	it	ge
 801230c:	460a      	movge	r2, r1
 801230e:	9212      	str	r2, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8012310:	9a07      	ldr	r2, [sp, #28]
 8012312:	4413      	add	r3, r2
 8012314:	9317      	str	r3, [sp, #92]	; 0x5c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012316:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012318:	4598      	cmp	r8, r3
 801231a:	da1d      	bge.n	8012358 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x130>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801231c:	9b07      	ldr	r3, [sp, #28]
 801231e:	1b1b      	subs	r3, r3, r4
 8012320:	9315      	str	r3, [sp, #84]	; 0x54
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8012322:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012324:	1b1b      	subs	r3, r3, r4
 8012326:	9316      	str	r3, [sp, #88]	; 0x58
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012328:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801232a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801232c:	4423      	add	r3, r4
 801232e:	429a      	cmp	r2, r3
 8012330:	dd0f      	ble.n	8012352 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8012332:	9b02      	ldr	r3, [sp, #8]
 8012334:	eb08 0207 	add.w	r2, r8, r7
 8012338:	4651      	mov	r1, sl
 801233a:	4658      	mov	r0, fp
 801233c:	9300      	str	r3, [sp, #0]
 801233e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012340:	4423      	add	r3, r4
              filter_count++;
 8012342:	3401      	adds	r4, #1
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8012344:	f7f9 feee 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
 8012348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801234a:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 801234e:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012350:	e7ea      	b.n	8012328 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x100>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012352:	f108 0801 	add.w	r8, r8, #1
 8012356:	e7de      	b.n	8012316 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xee>
            }
          }
          if (filter_count == 0) return false;
 8012358:	2c00      	cmp	r4, #0
 801235a:	d036      	beq.n	80123ca <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1a2>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 801235c:	2d00      	cmp	r5, #0
                        : (acc - filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801235e:	4651      	mov	r1, sl
                        : (acc - filter_count / 2) / filter_count;
 8012360:	bfd7      	itett	le
 8012362:	2302      	movle	r3, #2
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 8012364:	eb05 0564 	addgt.w	r5, r5, r4, asr #1
                        : (acc - filter_count / 2) / filter_count;
 8012368:	fb94 f0f3 	sdivle	r0, r4, r3
 801236c:	1a2d      	suble	r5, r5, r0
 801236e:	9b08      	ldr	r3, [sp, #32]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012370:	4648      	mov	r0, r9
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 8012372:	fb95 f4f4 	sdiv	r4, r5, r4
 8012376:	429c      	cmp	r4, r3
 8012378:	bfb8      	it	lt
 801237a:	461c      	movlt	r4, r3
 801237c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801237e:	429c      	cmp	r4, r3
 8012380:	bfa8      	it	ge
 8012382:	461c      	movge	r4, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012384:	9b02      	ldr	r3, [sp, #8]
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801238c:	f7f9 feca 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012392:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
        for (int channel = 0; channel < depth; ++channel) {
 8012396:	9b02      	ldr	r3, [sp, #8]
 8012398:	3301      	adds	r3, #1
 801239a:	e791      	b.n	80122c0 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x98>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801239c:	9b04      	ldr	r3, [sp, #16]
 801239e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123a0:	3301      	adds	r3, #1
 80123a2:	9304      	str	r3, [sp, #16]
 80123a4:	9b06      	ldr	r3, [sp, #24]
 80123a6:	4413      	add	r3, r2
 80123a8:	9306      	str	r3, [sp, #24]
 80123aa:	e784      	b.n	80122b6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x8e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80123ac:	9b03      	ldr	r3, [sp, #12]
 80123ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123b0:	3301      	adds	r3, #1
 80123b2:	9303      	str	r3, [sp, #12]
 80123b4:	9b05      	ldr	r3, [sp, #20]
 80123b6:	4413      	add	r3, r2
 80123b8:	9305      	str	r3, [sp, #20]
 80123ba:	e774      	b.n	80122a6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7e>
  for (int batch = 0; batch < batches; ++batch) {
 80123bc:	f10a 0a01 	add.w	sl, sl, #1
 80123c0:	e76a      	b.n	8012298 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x70>
              static_cast<int16_t>(acc);
        }
      }
    }
  }
  return true;
 80123c2:	2001      	movs	r0, #1
}
 80123c4:	b019      	add	sp, #100	; 0x64
 80123c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (filter_count == 0) return false;
 80123ca:	4620      	mov	r0, r4
 80123cc:	e7fa      	b.n	80123c4 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x19c>
	...

080123d0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 80123d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80123d4:	694d      	ldr	r5, [r1, #20]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 80123d6:	b0b5      	sub	sp, #212	; 0xd4
 80123d8:	4681      	mov	r9, r0
 80123da:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80123dc:	b90d      	cbnz	r5, 80123e2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x12>
 80123de:	f004 fcb1 	bl	8016d44 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
 80123e2:	690c      	ldr	r4, [r1, #16]
 80123e4:	2c00      	cmp	r4, #0
 80123e6:	d0fa      	beq.n	80123de <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 80123e8:	4b39      	ldr	r3, [pc, #228]	; (80124d0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x100>)
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	f7fd fc69 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 80123f0:	4b38      	ldr	r3, [pc, #224]	; (80124d4 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x104>)
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 80123f2:	4607      	mov	r7, r0
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 80123f4:	4641      	mov	r1, r8
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	4648      	mov	r0, r9
 80123fa:	f7fd fc64 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80123fe:	4606      	mov	r6, r0
  switch (input->type) {
 8012400:	7a38      	ldrb	r0, [r7, #8]
 8012402:	2807      	cmp	r0, #7
 8012404:	d035      	beq.n	8012472 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
 8012406:	2809      	cmp	r0, #9
 8012408:	d00d      	beq.n	8012426 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x56>
 801240a:	2801      	cmp	r0, #1
 801240c:	d157      	bne.n	80124be <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xee>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
 801240e:	4623      	mov	r3, r4
 8012410:	462a      	mov	r2, r5
 8012412:	4641      	mov	r1, r8
 8012414:	4648      	mov	r0, r9
 8012416:	e9cd 7600 	strd	r7, r6, [sp]
 801241a:	f000 fc51 	bl	8012cc0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
 801241e:	2000      	movs	r0, #0
}
 8012420:	b035      	add	sp, #212	; 0xd4
 8012422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  op_params.stride_height = params->stride_height;
 8012426:	68ab      	ldr	r3, [r5, #8]
  reference_integer_ops::AveragePool(op_params,
 8012428:	4639      	mov	r1, r7
 801242a:	a809      	add	r0, sp, #36	; 0x24
  op_params.stride_height = params->stride_height;
 801242c:	9321      	str	r3, [sp, #132]	; 0x84
  op_params.stride_width = params->stride_width;
 801242e:	686b      	ldr	r3, [r5, #4]
 8012430:	9322      	str	r3, [sp, #136]	; 0x88
  op_params.filter_height = params->filter_height;
 8012432:	692b      	ldr	r3, [r5, #16]
 8012434:	9323      	str	r3, [sp, #140]	; 0x8c
  op_params.filter_width = params->filter_width;
 8012436:	68eb      	ldr	r3, [r5, #12]
 8012438:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.padding_values.height = data->padding.height;
 801243a:	6863      	ldr	r3, [r4, #4]
 801243c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
  op_params.padding_values.width = data->padding.width;
 8012440:	6823      	ldr	r3, [r4, #0]
 8012442:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
  op_params.quantized_activation_min = data->activation_min;
 8012446:	6923      	ldr	r3, [r4, #16]
 8012448:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.quantized_activation_max = data->activation_max;
 801244a:	6963      	ldr	r3, [r4, #20]
 801244c:	9326      	str	r3, [sp, #152]	; 0x98
  reference_integer_ops::AveragePool(op_params,
 801244e:	f7fd fc48 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8012452:	4631      	mov	r1, r6
 8012454:	a802      	add	r0, sp, #8
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012456:	683c      	ldr	r4, [r7, #0]
 8012458:	f7fd fc43 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 801245c:	2e00      	cmp	r6, #0
 801245e:	d0be      	beq.n	80123de <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
 8012460:	6833      	ldr	r3, [r6, #0]
 8012462:	4622      	mov	r2, r4
 8012464:	a909      	add	r1, sp, #36	; 0x24
 8012466:	a81e      	add	r0, sp, #120	; 0x78
 8012468:	9300      	str	r3, [sp, #0]
 801246a:	ab02      	add	r3, sp, #8
 801246c:	f7ff fd45 	bl	8011efa <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
 8012470:	e7d5      	b.n	801241e <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x4e>
  op_params.stride_height = params->stride_height;
 8012472:	68ab      	ldr	r3, [r5, #8]
  reference_integer_ops::AveragePool(op_params,
 8012474:	4639      	mov	r1, r7
 8012476:	a817      	add	r0, sp, #92	; 0x5c
  op_params.stride_height = params->stride_height;
 8012478:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.stride_width = params->stride_width;
 801247a:	686b      	ldr	r3, [r5, #4]
 801247c:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.filter_height = params->filter_height;
 801247e:	692b      	ldr	r3, [r5, #16]
 8012480:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.filter_width = params->filter_width;
 8012482:	68eb      	ldr	r3, [r5, #12]
 8012484:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.padding_values.height = data->padding.height;
 8012486:	6863      	ldr	r3, [r4, #4]
 8012488:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
  op_params.padding_values.width = data->padding.width;
 801248c:	6823      	ldr	r3, [r4, #0]
 801248e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
  op_params.quantized_activation_min = data->activation_min;
 8012492:	6923      	ldr	r3, [r4, #16]
 8012494:	9330      	str	r3, [sp, #192]	; 0xc0
  op_params.quantized_activation_max = data->activation_max;
 8012496:	6963      	ldr	r3, [r4, #20]
 8012498:	9331      	str	r3, [sp, #196]	; 0xc4
  reference_integer_ops::AveragePool(op_params,
 801249a:	f7fd fc22 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801249e:	4631      	mov	r1, r6
 80124a0:	a810      	add	r0, sp, #64	; 0x40
  return reinterpret_cast<const T*>(tensor->data.raw);
 80124a2:	683c      	ldr	r4, [r7, #0]
 80124a4:	f7fd fc1d 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 80124a8:	2e00      	cmp	r6, #0
 80124aa:	d098      	beq.n	80123de <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
 80124ac:	6833      	ldr	r3, [r6, #0]
 80124ae:	4622      	mov	r2, r4
 80124b0:	a917      	add	r1, sp, #92	; 0x5c
 80124b2:	a829      	add	r0, sp, #164	; 0xa4
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	ab10      	add	r3, sp, #64	; 0x40
 80124b8:	f7ff feb6 	bl	8012228 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps>
 80124bc:	e7af      	b.n	801241e <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x4e>
      MicroPrintf("Input type %s is not currently supported",
 80124be:	f7f5 fdf7 	bl	80080b0 <TfLiteTypeGetName>
 80124c2:	4601      	mov	r1, r0
 80124c4:	4804      	ldr	r0, [pc, #16]	; (80124d8 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x108>)
 80124c6:	f7f8 fbf7 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 80124ca:	2001      	movs	r0, #1
 80124cc:	e7a8      	b.n	8012420 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x50>
 80124ce:	bf00      	nop
 80124d0:	080fc99c 	.word	0x080fc99c
 80124d4:	080fc9a0 	.word	0x080fc9a0
 80124d8:	080fc913 	.word	0x080fc913

080124dc <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int16_t* input_data, const RuntimeShape& output_shape,
                    int16_t* output_data) {
 80124dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e0:	4698      	mov	r8, r3
 80124e2:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 80124e4:	69c3      	ldr	r3, [r0, #28]
                    int16_t* output_data) {
 80124e6:	4604      	mov	r4, r0
 80124e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80124ea:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 80124ec:	9306      	str	r3, [sp, #24]
 80124ee:	6a03      	ldr	r3, [r0, #32]
 80124f0:	9307      	str	r3, [sp, #28]
 80124f2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80124f6:	4293      	cmp	r3, r2
 80124f8:	dd01      	ble.n	80124fe <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x22>
 80124fa:	f004 fc23 	bl	8016d44 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
 80124fe:	9b06      	ldr	r3, [sp, #24]
 8012500:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012504:	dbf9      	blt.n	80124fa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
                   std::numeric_limits<int16_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
 8012506:	9b07      	ldr	r3, [sp, #28]
 8012508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801250c:	daf5      	bge.n	80124fa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
                   std::numeric_limits<int16_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801250e:	680b      	ldr	r3, [r1, #0]
 8012510:	2b04      	cmp	r3, #4
 8012512:	d1f2      	bne.n	80124fa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8012514:	f8d8 3000 	ldr.w	r3, [r8]
 8012518:	2b04      	cmp	r3, #4
 801251a:	d1ee      	bne.n	80124fa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801251c:	2300      	movs	r3, #0
 801251e:	4642      	mov	r2, r8
 8012520:	4638      	mov	r0, r7
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
 8012522:	f04f 0b00 	mov.w	fp, #0
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012526:	4619      	mov	r1, r3
 8012528:	f7f9 ff92 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801252c:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801252e:	900d      	str	r0, [sp, #52]	; 0x34
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8012530:	4642      	mov	r2, r8
 8012532:	4619      	mov	r1, r3
 8012534:	4638      	mov	r0, r7
 8012536:	f7f9 ff8b 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	900e      	str	r0, [sp, #56]	; 0x38
 801253e:	9310      	str	r3, [sp, #64]	; 0x40
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	9313      	str	r3, [sp, #76]	; 0x4c
 8012544:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012548:	9314      	str	r3, [sp, #80]	; 0x50
 801254a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801254e:	9315      	str	r3, [sp, #84]	; 0x54
  const int stride_height = params.stride_height;
 8012550:	68e3      	ldr	r3, [r4, #12]
 8012552:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
 8012554:	6923      	ldr	r3, [r4, #16]
 8012556:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
 8012558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801255a:	459b      	cmp	fp, r3
 801255c:	f280 8091 	bge.w	8012682 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1a6>
 8012560:	2300      	movs	r3, #0
 8012562:	9304      	str	r3, [sp, #16]
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012564:	9302      	str	r3, [sp, #8]
 8012566:	9b02      	ldr	r3, [sp, #8]
 8012568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801256a:	4293      	cmp	r3, r2
 801256c:	f280 8086 	bge.w	801267c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1a0>
 8012570:	2300      	movs	r3, #0
 8012572:	9305      	str	r3, [sp, #20]
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012574:	9303      	str	r3, [sp, #12]
 8012576:	9b03      	ldr	r3, [sp, #12]
 8012578:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801257a:	4293      	cmp	r3, r2
 801257c:	da76      	bge.n	801266c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x190>
        for (int channel = 0; channel < depth; ++channel) {
 801257e:	f04f 0900 	mov.w	r9, #0
 8012582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012584:	4599      	cmp	r9, r3
 8012586:	da69      	bge.n	801265c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x180>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
 8012588:	9a04      	ldr	r2, [sp, #16]
              (out_y * stride_height) - params.padding_values.height;
 801258a:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
              (out_x * stride_width) - params.padding_values.width;
 801258e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_y_origin =
 8012592:	1b96      	subs	r6, r2, r6
      if (__a < __b)
 8012594:	9a05      	ldr	r2, [sp, #20]
 8012596:	1ad3      	subs	r3, r2, r3
 8012598:	9308      	str	r3, [sp, #32]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801259a:	bf4c      	ite	mi
 801259c:	425b      	negmi	r3, r3
      return __a;
 801259e:	2300      	movpl	r3, #0
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80125a0:	9a08      	ldr	r2, [sp, #32]
 80125a2:	9309      	str	r3, [sp, #36]	; 0x24
 80125a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80125a6:	1a9b      	subs	r3, r3, r2
 80125a8:	69a2      	ldr	r2, [r4, #24]
 80125aa:	4293      	cmp	r3, r2
 80125ac:	bfa8      	it	ge
 80125ae:	4613      	movge	r3, r2
      if (__a < __b)
 80125b0:	2e00      	cmp	r6, #0
 80125b2:	6962      	ldr	r2, [r4, #20]
 80125b4:	930c      	str	r3, [sp, #48]	; 0x30
          const int filter_y_start = std::max(0, -in_y_origin);
 80125b6:	bfb8      	it	lt
 80125b8:	4275      	neglt	r5, r6
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80125ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
      return __a;
 80125bc:	bfa8      	it	ge
 80125be:	2500      	movge	r5, #0
 80125c0:	1b9b      	subs	r3, r3, r6
 80125c2:	4435      	add	r5, r6
 80125c4:	4293      	cmp	r3, r2
 80125c6:	bfa8      	it	ge
 80125c8:	4613      	movge	r3, r2
 80125ca:	930f      	str	r3, [sp, #60]	; 0x3c
          int16_t max = std::numeric_limits<int16_t>::lowest();
 80125cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80125d0:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80125d4:	1bab      	subs	r3, r5, r6
 80125d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125d8:	429a      	cmp	r2, r3
 80125da:	dd25      	ble.n	8012628 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x14c>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80125dc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80125e0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80125e4:	930a      	str	r3, [sp, #40]	; 0x28
 80125e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125e8:	459a      	cmp	sl, r3
 80125ea:	da1b      	bge.n	8012624 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x148>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80125ec:	9b08      	ldr	r3, [sp, #32]
 80125ee:	462a      	mov	r2, r5
 80125f0:	4659      	mov	r1, fp
 80125f2:	f8cd 9000 	str.w	r9, [sp]
 80125f6:	4453      	add	r3, sl
 80125f8:	4638      	mov	r0, r7
 80125fa:	f7f9 fd93 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
 80125fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012600:	990a      	ldr	r1, [sp, #40]	; 0x28
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012602:	f10a 0a01 	add.w	sl, sl, #1
 8012606:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 801260a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801260c:	428a      	cmp	r2, r1
      return __a;
 801260e:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
 8012612:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8012616:	bfd8      	it	le
 8012618:	4613      	movle	r3, r2
              max = std::max(
 801261a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801261e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012622:	e7dd      	b.n	80125e0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x104>
 8012624:	3501      	adds	r5, #1
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012626:	e7d5      	b.n	80125d4 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xf8>
 8012628:	f9bd 505e 	ldrsh.w	r5, [sp, #94]	; 0x5e
            }
          }
          max = std::max<int16_t>(max, params.quantized_activation_min);
          max = std::min<int16_t>(max, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801262c:	4659      	mov	r1, fp
 801262e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012632:	4640      	mov	r0, r8
 8012634:	f8cd 9000 	str.w	r9, [sp]
        for (int channel = 0; channel < depth; ++channel) {
 8012638:	f109 0901 	add.w	r9, r9, #1
 801263c:	429d      	cmp	r5, r3
 801263e:	bfb8      	it	lt
 8012640:	461d      	movlt	r5, r3
 8012642:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012646:	429d      	cmp	r5, r3
 8012648:	bfa8      	it	ge
 801264a:	461d      	movge	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801264c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012650:	f7f9 fd68 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012656:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
        for (int channel = 0; channel < depth; ++channel) {
 801265a:	e792      	b.n	8012582 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xa6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801265c:	9b03      	ldr	r3, [sp, #12]
 801265e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012660:	3301      	adds	r3, #1
 8012662:	9303      	str	r3, [sp, #12]
 8012664:	9b05      	ldr	r3, [sp, #20]
 8012666:	4413      	add	r3, r2
 8012668:	9305      	str	r3, [sp, #20]
 801266a:	e784      	b.n	8012576 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801266c:	9b02      	ldr	r3, [sp, #8]
 801266e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012670:	3301      	adds	r3, #1
 8012672:	9302      	str	r3, [sp, #8]
 8012674:	9b04      	ldr	r3, [sp, #16]
 8012676:	4413      	add	r3, r2
 8012678:	9304      	str	r3, [sp, #16]
 801267a:	e774      	b.n	8012566 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x8a>
  for (int batch = 0; batch < batches; ++batch) {
 801267c:	f10b 0b01 	add.w	fp, fp, #1
 8012680:	e76a      	b.n	8012558 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7c>
              static_cast<int16_t>(max);
        }
      }
    }
  }
}
 8012682:	b019      	add	sp, #100	; 0x64
 8012684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012688 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8012688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801268c:	694d      	ldr	r5, [r1, #20]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 801268e:	b0b5      	sub	sp, #212	; 0xd4
 8012690:	4681      	mov	r9, r0
 8012692:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8012694:	b90d      	cbnz	r5, 801269a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x12>
 8012696:	f004 fb55 	bl	8016d44 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
 801269a:	690c      	ldr	r4, [r1, #16]
 801269c:	2c00      	cmp	r4, #0
 801269e:	d0fa      	beq.n	8012696 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 80126a0:	4b39      	ldr	r3, [pc, #228]	; (8012788 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x100>)
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	f7fd fb0d 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 80126a8:	4b38      	ldr	r3, [pc, #224]	; (801278c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x104>)
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 80126aa:	4607      	mov	r7, r0
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 80126ac:	4641      	mov	r1, r8
 80126ae:	681a      	ldr	r2, [r3, #0]
 80126b0:	4648      	mov	r0, r9
 80126b2:	f7fd fb08 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80126b6:	4606      	mov	r6, r0
  switch (input->type) {
 80126b8:	7a38      	ldrb	r0, [r7, #8]
 80126ba:	2807      	cmp	r0, #7
 80126bc:	d035      	beq.n	801272a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
 80126be:	2809      	cmp	r0, #9
 80126c0:	d00d      	beq.n	80126de <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
 80126c2:	2801      	cmp	r0, #1
 80126c4:	d157      	bne.n	8012776 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
 80126c6:	4623      	mov	r3, r4
 80126c8:	462a      	mov	r2, r5
 80126ca:	4641      	mov	r1, r8
 80126cc:	4648      	mov	r0, r9
 80126ce:	e9cd 7600 	strd	r7, r6, [sp]
 80126d2:	f000 fb23 	bl	8012d1c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
 80126d6:	2000      	movs	r0, #0
}
 80126d8:	b035      	add	sp, #212	; 0xd4
 80126da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  op_params.stride_height = params->stride_height;
 80126de:	68ab      	ldr	r3, [r5, #8]
  reference_integer_ops::MaxPool(op_params,
 80126e0:	4639      	mov	r1, r7
 80126e2:	a809      	add	r0, sp, #36	; 0x24
  op_params.stride_height = params->stride_height;
 80126e4:	9321      	str	r3, [sp, #132]	; 0x84
  op_params.stride_width = params->stride_width;
 80126e6:	686b      	ldr	r3, [r5, #4]
 80126e8:	9322      	str	r3, [sp, #136]	; 0x88
  op_params.filter_height = params->filter_height;
 80126ea:	692b      	ldr	r3, [r5, #16]
 80126ec:	9323      	str	r3, [sp, #140]	; 0x8c
  op_params.filter_width = params->filter_width;
 80126ee:	68eb      	ldr	r3, [r5, #12]
 80126f0:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.padding_values.height = data->padding.height;
 80126f2:	6863      	ldr	r3, [r4, #4]
 80126f4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
  op_params.padding_values.width = data->padding.width;
 80126f8:	6823      	ldr	r3, [r4, #0]
 80126fa:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
  op_params.quantized_activation_min = data->activation_min;
 80126fe:	6923      	ldr	r3, [r4, #16]
 8012700:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.quantized_activation_max = data->activation_max;
 8012702:	6963      	ldr	r3, [r4, #20]
 8012704:	9326      	str	r3, [sp, #152]	; 0x98
  reference_integer_ops::MaxPool(op_params,
 8012706:	f7fd faec 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801270a:	4631      	mov	r1, r6
 801270c:	a802      	add	r0, sp, #8
  return reinterpret_cast<const T*>(tensor->data.raw);
 801270e:	683c      	ldr	r4, [r7, #0]
 8012710:	f7fd fae7 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8012714:	2e00      	cmp	r6, #0
 8012716:	d0be      	beq.n	8012696 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
 8012718:	6833      	ldr	r3, [r6, #0]
 801271a:	4622      	mov	r2, r4
 801271c:	a909      	add	r1, sp, #36	; 0x24
 801271e:	a81e      	add	r0, sp, #120	; 0x78
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	ab02      	add	r3, sp, #8
 8012724:	f7ff fcb6 	bl	8012094 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
 8012728:	e7d5      	b.n	80126d6 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
  op_params.stride_height = params->stride_height;
 801272a:	68ab      	ldr	r3, [r5, #8]
  reference_integer_ops::MaxPool(op_params,
 801272c:	4639      	mov	r1, r7
 801272e:	a817      	add	r0, sp, #92	; 0x5c
  op_params.stride_height = params->stride_height;
 8012730:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.stride_width = params->stride_width;
 8012732:	686b      	ldr	r3, [r5, #4]
 8012734:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.filter_height = params->filter_height;
 8012736:	692b      	ldr	r3, [r5, #16]
 8012738:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.filter_width = params->filter_width;
 801273a:	68eb      	ldr	r3, [r5, #12]
 801273c:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.padding_values.height = data->padding.height;
 801273e:	6863      	ldr	r3, [r4, #4]
 8012740:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
  op_params.padding_values.width = data->padding.width;
 8012744:	6823      	ldr	r3, [r4, #0]
 8012746:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
  op_params.quantized_activation_min = data->activation_min;
 801274a:	6923      	ldr	r3, [r4, #16]
 801274c:	9330      	str	r3, [sp, #192]	; 0xc0
  op_params.quantized_activation_max = data->activation_max;
 801274e:	6963      	ldr	r3, [r4, #20]
 8012750:	9331      	str	r3, [sp, #196]	; 0xc4
  reference_integer_ops::MaxPool(op_params,
 8012752:	f7fd fac6 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8012756:	4631      	mov	r1, r6
 8012758:	a810      	add	r0, sp, #64	; 0x40
  return reinterpret_cast<const T*>(tensor->data.raw);
 801275a:	683c      	ldr	r4, [r7, #0]
 801275c:	f7fd fac1 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8012760:	2e00      	cmp	r6, #0
 8012762:	d098      	beq.n	8012696 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
 8012764:	6833      	ldr	r3, [r6, #0]
 8012766:	4622      	mov	r2, r4
 8012768:	a917      	add	r1, sp, #92	; 0x5c
 801276a:	a829      	add	r0, sp, #164	; 0xa4
 801276c:	9300      	str	r3, [sp, #0]
 801276e:	ab10      	add	r3, sp, #64	; 0x40
 8012770:	f7ff feb4 	bl	80124dc <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps>
 8012774:	e7af      	b.n	80126d6 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
      MicroPrintf("Type %s not currently supported.",
 8012776:	f7f5 fc9b 	bl	80080b0 <TfLiteTypeGetName>
 801277a:	4601      	mov	r1, r0
 801277c:	4804      	ldr	r0, [pc, #16]	; (8012790 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x108>)
 801277e:	f7f8 fa9b 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8012782:	2001      	movs	r0, #1
 8012784:	e7a8      	b.n	80126d8 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x50>
 8012786:	bf00      	nop
 8012788:	080fc99c 	.word	0x080fc99c
 801278c:	080fc9a0 	.word	0x080fc9a0
 8012790:	080fc93c 	.word	0x080fc93c

08012794 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:

}  // namespace

TFLMRegistration Register_AVERAGE_POOL_2D() {
  return tflite::micro::RegisterOp(Init, PoolingPrepare, AverageEval);
 8012794:	2300      	movs	r3, #0
 8012796:	4a06      	ldr	r2, [pc, #24]	; (80127b0 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x1c>)
TFLMRegistration Register_AVERAGE_POOL_2D() {
 8012798:	b513      	push	{r0, r1, r4, lr}
 801279a:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, PoolingPrepare, AverageEval);
 801279c:	4905      	ldr	r1, [pc, #20]	; (80127b4 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x20>)
 801279e:	e9cd 3300 	strd	r3, r3, [sp]
 80127a2:	4b05      	ldr	r3, [pc, #20]	; (80127b8 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x24>)
 80127a4:	f7fd fa66 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 80127a8:	4620      	mov	r0, r4
 80127aa:	b002      	add	sp, #8
 80127ac:	bd10      	pop	{r4, pc}
 80127ae:	bf00      	nop
 80127b0:	08012bb5 	.word	0x08012bb5
 80127b4:	08011ee9 	.word	0x08011ee9
 80127b8:	080123d1 	.word	0x080123d1

080127bc <_ZN6tflite20Register_MAX_POOL_2DEv>:

TFLMRegistration Register_MAX_POOL_2D() {
  return tflite::micro::RegisterOp(Init, PoolingPrepare, MaxEval);
 80127bc:	2300      	movs	r3, #0
 80127be:	4a06      	ldr	r2, [pc, #24]	; (80127d8 <_ZN6tflite20Register_MAX_POOL_2DEv+0x1c>)
TFLMRegistration Register_MAX_POOL_2D() {
 80127c0:	b513      	push	{r0, r1, r4, lr}
 80127c2:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, PoolingPrepare, MaxEval);
 80127c4:	4905      	ldr	r1, [pc, #20]	; (80127dc <_ZN6tflite20Register_MAX_POOL_2DEv+0x20>)
 80127c6:	e9cd 3300 	strd	r3, r3, [sp]
 80127ca:	4b05      	ldr	r3, [pc, #20]	; (80127e0 <_ZN6tflite20Register_MAX_POOL_2DEv+0x24>)
 80127cc:	f7fd fa52 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 80127d0:	4620      	mov	r0, r4
 80127d2:	b002      	add	sp, #8
 80127d4:	bd10      	pop	{r4, pc}
 80127d6:	bf00      	nop
 80127d8:	08012bb5 	.word	0x08012bb5
 80127dc:	08011ee9 	.word	0x08011ee9
 80127e0:	08012689 	.word	0x08012689

080127e4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 80127e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e8:	4698      	mov	r8, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80127ea:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
 80127ec:	4604      	mov	r4, r0
 80127ee:	460f      	mov	r7, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80127f0:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
 80127f2:	ed2d 8b04 	vpush	{d8-d9}
 80127f6:	b095      	sub	sp, #84	; 0x54
 80127f8:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80127fa:	d001      	beq.n	8012800 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
 80127fc:	f004 faa2 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8012800:	f8d8 3000 	ldr.w	r3, [r8]
 8012804:	2b04      	cmp	r3, #4
 8012806:	d1f9      	bne.n	80127fc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012808:	2300      	movs	r3, #0
 801280a:	4642      	mov	r2, r8
 801280c:	4638      	mov	r0, r7
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
 801280e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012812:	4619      	mov	r1, r3
  for (int batch = 0; batch < batches; ++batch) {
 8012814:	f04f 0b00 	mov.w	fp, #0
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012818:	f7f9 fe1a 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801281c:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801281e:	9009      	str	r0, [sp, #36]	; 0x24
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8012820:	4642      	mov	r2, r8
 8012822:	4619      	mov	r1, r3
 8012824:	4638      	mov	r0, r7
 8012826:	f7f9 fe13 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	900a      	str	r0, [sp, #40]	; 0x28
 801282e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	930d      	str	r3, [sp, #52]	; 0x34
 8012834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012838:	9311      	str	r3, [sp, #68]	; 0x44
 801283a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801283e:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_height = params.stride_height;
 8012840:	68e3      	ldr	r3, [r4, #12]
 8012842:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
 8012844:	6923      	ldr	r3, [r4, #16]
 8012846:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
 8012848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801284a:	459b      	cmp	fp, r3
 801284c:	f280 8096 	bge.w	801297c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x198>
 8012850:	2300      	movs	r3, #0
 8012852:	9305      	str	r3, [sp, #20]
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012854:	9303      	str	r3, [sp, #12]
 8012856:	9b03      	ldr	r3, [sp, #12]
 8012858:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801285a:	4293      	cmp	r3, r2
 801285c:	f280 808b 	bge.w	8012976 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
 8012860:	2300      	movs	r3, #0
 8012862:	9306      	str	r3, [sp, #24]
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012864:	9304      	str	r3, [sp, #16]
 8012866:	9b04      	ldr	r3, [sp, #16]
 8012868:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801286a:	4293      	cmp	r3, r2
 801286c:	da7b      	bge.n	8012966 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x182>
        for (int channel = 0; channel < depth; ++channel) {
 801286e:	f04f 0a00 	mov.w	sl, #0
 8012872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012874:	459a      	cmp	sl, r3
 8012876:	da6e      	bge.n	8012956 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x172>
          const int in_y_origin =
 8012878:	9b05      	ldr	r3, [sp, #20]
              (out_y * stride_height) - params.padding_values.height;
 801287a:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
              (out_x * stride_width) - params.padding_values.width;
 801287e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
          const int in_y_origin =
 8012882:	1b9e      	subs	r6, r3, r6
      if (__a < __b)
 8012884:	9b06      	ldr	r3, [sp, #24]
          float filter_count = 0;
 8012886:	eddf 8a41 	vldr	s17, [pc, #260]	; 801298c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a8>
 801288a:	ebb3 0309 	subs.w	r3, r3, r9
          float total = 0.f;
 801288e:	eeb0 9a68 	vmov.f32	s18, s17
 8012892:	9307      	str	r3, [sp, #28]
          const int filter_x_start = std::max(0, -in_x_origin);
 8012894:	bf4c      	ite	mi
 8012896:	425b      	negmi	r3, r3
      return __a;
 8012898:	2300      	movpl	r3, #0
              std::min(params.filter_width, input_width - in_x_origin);
 801289a:	9a07      	ldr	r2, [sp, #28]
 801289c:	9308      	str	r3, [sp, #32]
 801289e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128a0:	1a9b      	subs	r3, r3, r2
 80128a2:	69a2      	ldr	r2, [r4, #24]
 80128a4:	4293      	cmp	r3, r2
 80128a6:	bfa8      	it	ge
 80128a8:	4613      	movge	r3, r2
      if (__a < __b)
 80128aa:	2e00      	cmp	r6, #0
 80128ac:	6962      	ldr	r2, [r4, #20]
 80128ae:	930c      	str	r3, [sp, #48]	; 0x30
          const int filter_y_start = std::max(0, -in_y_origin);
 80128b0:	bfb8      	it	lt
 80128b2:	4275      	neglt	r5, r6
              std::min(params.filter_height, input_height - in_y_origin);
 80128b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      return __a;
 80128b6:	bfa8      	it	ge
 80128b8:	2500      	movge	r5, #0
 80128ba:	1b9b      	subs	r3, r3, r6
 80128bc:	4435      	add	r5, r6
 80128be:	4293      	cmp	r3, r2
 80128c0:	bfa8      	it	ge
 80128c2:	4613      	movge	r3, r2
 80128c4:	9310      	str	r3, [sp, #64]	; 0x40
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80128c6:	1bab      	subs	r3, r5, r6
 80128c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80128ca:	429a      	cmp	r2, r3
 80128cc:	dd1b      	ble.n	8012906 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x122>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80128ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80128d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128d4:	4599      	cmp	r9, r3
 80128d6:	da14      	bge.n	8012902 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x11e>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 80128d8:	9b07      	ldr	r3, [sp, #28]
 80128da:	462a      	mov	r2, r5
 80128dc:	f8cd a000 	str.w	sl, [sp]
 80128e0:	4659      	mov	r1, fp
 80128e2:	444b      	add	r3, r9
 80128e4:	4638      	mov	r0, r7
 80128e6:	f7f9 fc1d 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              total +=
 80128ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
              filter_count++;
 80128ec:	ee78 8aa9 	vadd.f32	s17, s17, s19
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80128f0:	f109 0901 	add.w	r9, r9, #1
              total +=
 80128f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80128f8:	edd0 7a00 	vldr	s15, [r0]
 80128fc:	ee39 9a27 	vadd.f32	s18, s18, s15
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012900:	e7e7      	b.n	80128d2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
 8012902:	3501      	adds	r5, #1
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012904:	e7df      	b.n	80128c6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe2>
            }
          }
          if (filter_count == 0) return false;
 8012906:	eef5 8a40 	vcmp.f32	s17, #0.0
 801290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290e:	d03b      	beq.n	8012988 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
          const float average = total / filter_count;
 8012910:	ee89 8a28 	vdiv.f32	s16, s18, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8012914:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012918:	f8cd a000 	str.w	sl, [sp]
 801291c:	4659      	mov	r1, fp
 801291e:	4640      	mov	r0, r8
                                           params.float_activation_max);
 8012920:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
        for (int channel = 0; channel < depth; ++channel) {
 8012924:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012928:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801292c:	f7f9 fbfa 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012930:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012932:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	return __b;
 8012936:	eeb4 9a48 	vcmp.f32	s18, s16
 801293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293e:	fe39 8a08 	vselgt.f32	s16, s18, s16
	return __b;
 8012942:	eef4 8a48 	vcmp.f32	s17, s16
 8012946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294a:	bf48      	it	mi
 801294c:	eeb0 8a68 	vmovmi.f32	s16, s17
 8012950:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
 8012954:	e78d      	b.n	8012872 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012956:	9b04      	ldr	r3, [sp, #16]
 8012958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801295a:	3301      	adds	r3, #1
 801295c:	9304      	str	r3, [sp, #16]
 801295e:	9b06      	ldr	r3, [sp, #24]
 8012960:	4413      	add	r3, r2
 8012962:	9306      	str	r3, [sp, #24]
 8012964:	e77f      	b.n	8012866 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x82>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012966:	9b03      	ldr	r3, [sp, #12]
 8012968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801296a:	3301      	adds	r3, #1
 801296c:	9303      	str	r3, [sp, #12]
 801296e:	9b05      	ldr	r3, [sp, #20]
 8012970:	4413      	add	r3, r2
 8012972:	9305      	str	r3, [sp, #20]
 8012974:	e76f      	b.n	8012856 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x72>
  for (int batch = 0; batch < batches; ++batch) {
 8012976:	f10b 0b01 	add.w	fp, fp, #1
 801297a:	e765      	b.n	8012848 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x64>
        }
      }
    }
  }
  return true;
 801297c:	2001      	movs	r0, #1
}
 801297e:	b015      	add	sp, #84	; 0x54
 8012980:	ecbd 8b04 	vpop	{d8-d9}
 8012984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (filter_count == 0) return false;
 8012988:	2000      	movs	r0, #0
 801298a:	e7f8      	b.n	801297e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19a>
 801298c:	00000000 	.word	0x00000000

08012990 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8012990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012994:	4698      	mov	r8, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8012996:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
 8012998:	4604      	mov	r4, r0
 801299a:	460f      	mov	r7, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801299c:	2b04      	cmp	r3, #4
                    float* output_data) {
 801299e:	ed2d 8b04 	vpush	{d8-d9}
 80129a2:	b097      	sub	sp, #92	; 0x5c
 80129a4:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80129a6:	d001      	beq.n	80129ac <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
 80129a8:	f004 f9cc 	bl	8016d44 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80129ac:	f8d8 3000 	ldr.w	r3, [r8]
 80129b0:	2b04      	cmp	r3, #4
 80129b2:	d1f9      	bne.n	80129a8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80129b4:	2300      	movs	r3, #0
 80129b6:	4642      	mov	r2, r8
 80129b8:	4638      	mov	r0, r7
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
 80129ba:	f04f 0b00 	mov.w	fp, #0
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80129be:	4619      	mov	r1, r3
 80129c0:	f7f9 fd46 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80129c4:	2303      	movs	r3, #3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80129c6:	9009      	str	r0, [sp, #36]	; 0x24
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80129c8:	4642      	mov	r2, r8
 80129ca:	4619      	mov	r1, r3
 80129cc:	4638      	mov	r0, r7
 80129ce:	f7f9 fd3f 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	900a      	str	r0, [sp, #40]	; 0x28
 80129d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	930e      	str	r3, [sp, #56]	; 0x38
 80129dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80129e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80129e6:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_height = params.stride_height;
 80129e8:	68e3      	ldr	r3, [r4, #12]
 80129ea:	930c      	str	r3, [sp, #48]	; 0x30
  const int stride_width = params.stride_width;
 80129ec:	6923      	ldr	r3, [r4, #16]
 80129ee:	930d      	str	r3, [sp, #52]	; 0x34
  for (int batch = 0; batch < batches; ++batch) {
 80129f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129f2:	459b      	cmp	fp, r3
 80129f4:	f280 8098 	bge.w	8012b28 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x198>
 80129f8:	2300      	movs	r3, #0
 80129fa:	9305      	str	r3, [sp, #20]
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80129fc:	9303      	str	r3, [sp, #12]
 80129fe:	9b03      	ldr	r3, [sp, #12]
 8012a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012a02:	4293      	cmp	r3, r2
 8012a04:	f280 808d 	bge.w	8012b22 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	9306      	str	r3, [sp, #24]
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012a0c:	9304      	str	r3, [sp, #16]
 8012a0e:	9b04      	ldr	r3, [sp, #16]
 8012a10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a12:	4293      	cmp	r3, r2
 8012a14:	da7d      	bge.n	8012b12 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x182>
        for (int channel = 0; channel < depth; ++channel) {
 8012a16:	f04f 0a00 	mov.w	sl, #0
 8012a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a1c:	459a      	cmp	sl, r3
 8012a1e:	da70      	bge.n	8012b02 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x172>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
 8012a20:	9b05      	ldr	r3, [sp, #20]
              (out_y * stride_height) - params.padding_values.height;
 8012a22:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
              (out_x * stride_width) - params.padding_values.width;
 8012a26:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
          const int in_y_origin =
 8012a2a:	1b9e      	subs	r6, r3, r6
      if (__a < __b)
 8012a2c:	9b06      	ldr	r3, [sp, #24]
 8012a2e:	ebb3 0309 	subs.w	r3, r3, r9
 8012a32:	9307      	str	r3, [sp, #28]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8012a34:	bf4c      	ite	mi
 8012a36:	425b      	negmi	r3, r3
      return __a;
 8012a38:	2300      	movpl	r3, #0
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8012a3a:	9a07      	ldr	r2, [sp, #28]
 8012a3c:	9308      	str	r3, [sp, #32]
 8012a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a40:	1a9b      	subs	r3, r3, r2
 8012a42:	69a2      	ldr	r2, [r4, #24]
 8012a44:	4293      	cmp	r3, r2
 8012a46:	bfa8      	it	ge
 8012a48:	4613      	movge	r3, r2
      if (__a < __b)
 8012a4a:	2e00      	cmp	r6, #0
 8012a4c:	6962      	ldr	r2, [r4, #20]
 8012a4e:	9311      	str	r3, [sp, #68]	; 0x44
          const int filter_y_start = std::max(0, -in_y_origin);
 8012a50:	bfb8      	it	lt
 8012a52:	4275      	neglt	r5, r6
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8012a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      return __a;
 8012a56:	bfa8      	it	ge
 8012a58:	2500      	movge	r5, #0
 8012a5a:	1b9b      	subs	r3, r3, r6
 8012a5c:	4435      	add	r5, r6
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	bfa8      	it	ge
 8012a62:	4613      	movge	r3, r2
 8012a64:	9312      	str	r3, [sp, #72]	; 0x48
          float max = std::numeric_limits<float>::lowest();
 8012a66:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8012a6a:	9315      	str	r3, [sp, #84]	; 0x54
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012a6c:	1bab      	subs	r3, r5, r6
 8012a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a70:	4293      	cmp	r3, r2
 8012a72:	da22      	bge.n	8012aba <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x12a>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a7a:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
 8012a7e:	4599      	cmp	r9, r3
 8012a80:	da19      	bge.n	8012ab6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x126>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8012a82:	9b07      	ldr	r3, [sp, #28]
 8012a84:	462a      	mov	r2, r5
 8012a86:	f8cd a000 	str.w	sl, [sp]
 8012a8a:	4659      	mov	r1, fp
 8012a8c:	444b      	add	r3, r9
 8012a8e:	4638      	mov	r0, r7
 8012a90:	f7f9 fb48 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012a96:	f109 0901 	add.w	r9, r9, #1
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8012a9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012a9e:	ab15      	add	r3, sp, #84	; 0x54
      if (__a < __b)
 8012aa0:	edd0 7a00 	vldr	s15, [r0]
 8012aa4:	eef4 7ac8 	vcmpe.f32	s15, s16
 8012aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
 8012aac:	bfd8      	it	le
 8012aae:	4618      	movle	r0, r3
              max = std::max(
 8012ab0:	6803      	ldr	r3, [r0, #0]
 8012ab2:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012ab4:	e7e0      	b.n	8012a78 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
 8012ab6:	3501      	adds	r5, #1
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012ab8:	e7d8      	b.n	8012a6c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xdc>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8012aba:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012abe:	4659      	mov	r1, fp
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8012ac0:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012ac4:	4640      	mov	r0, r8
 8012ac6:	f8cd a000 	str.w	sl, [sp]
        for (int channel = 0; channel < depth; ++channel) {
 8012aca:	f10a 0a01 	add.w	sl, sl, #1
                                           params.float_activation_max);
 8012ace:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012ad2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8012ad6:	f7f9 fb25 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012ada:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8012ade:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012ae8:	bf58      	it	pl
 8012aea:	eeb0 8a49 	vmovpl.f32	s16, s18
      return __a;
 8012aee:	eef4 8ac8 	vcmpe.f32	s17, s16
 8012af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af6:	bf58      	it	pl
 8012af8:	eef0 8a48 	vmovpl.f32	s17, s16
 8012afc:	edc0 8a00 	vstr	s17, [r0]
        for (int channel = 0; channel < depth; ++channel) {
 8012b00:	e78b      	b.n	8012a1a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012b02:	9b04      	ldr	r3, [sp, #16]
 8012b04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b06:	3301      	adds	r3, #1
 8012b08:	9304      	str	r3, [sp, #16]
 8012b0a:	9b06      	ldr	r3, [sp, #24]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	9306      	str	r3, [sp, #24]
 8012b10:	e77d      	b.n	8012a0e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012b12:	9b03      	ldr	r3, [sp, #12]
 8012b14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b16:	3301      	adds	r3, #1
 8012b18:	9303      	str	r3, [sp, #12]
 8012b1a:	9b05      	ldr	r3, [sp, #20]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	9305      	str	r3, [sp, #20]
 8012b20:	e76d      	b.n	80129fe <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x6e>
  for (int batch = 0; batch < batches; ++batch) {
 8012b22:	f10b 0b01 	add.w	fp, fp, #1
 8012b26:	e763      	b.n	80129f0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x60>
        }
      }
    }
  }
}
 8012b28:	b017      	add	sp, #92	; 0x5c
 8012b2a:	ecbd 8b04 	vpop	{d8-d9}
 8012b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b32 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
                                    const TfLitePoolParams* params,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* output,
                                    OpDataPooling* data) {
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8012b32:	6893      	ldr	r3, [r2, #8]
                                    OpDataPooling* data) {
 8012b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return t->dims->data[dim];
 8012b38:	e9d3 7302 	ldrd	r7, r3, [r3, #8]
 8012b3c:	b085      	sub	sp, #20

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
      params->filter_width, params->padding, &out_height, &out_width);
 8012b3e:	f891 a000 	ldrb.w	sl, [r1]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8012b42:	2401      	movs	r4, #1
 8012b44:	9302      	str	r3, [sp, #8]
 8012b46:	4650      	mov	r0, sl
                                    OpDataPooling* data) {
 8012b48:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
      params->stride_height, params->stride_width,
 8012b4c:	e9d1 6901 	ldrd	r6, r9, [r1, #4]
      params->filter_width, params->padding, &out_height, &out_width);
 8012b50:	e9d1 5803 	ldrd	r5, r8, [r1, #12]
 8012b54:	4633      	mov	r3, r6
 8012b56:	9400      	str	r4, [sp, #0]
 8012b58:	462a      	mov	r2, r5
 8012b5a:	9902      	ldr	r1, [sp, #8]
 8012b5c:	f7fb f860 	bl	800dc20 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8012b60:	9400      	str	r4, [sp, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8012b62:	9003      	str	r0, [sp, #12]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8012b64:	464b      	mov	r3, r9
 8012b66:	4642      	mov	r2, r8
 8012b68:	4639      	mov	r1, r7
 8012b6a:	4650      	mov	r0, sl
 8012b6c:	f7fb f858 	bl	800dc20 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8012b70:	9b03      	ldr	r3, [sp, #12]
 8012b72:	3801      	subs	r0, #1
 8012b74:	1e5c      	subs	r4, r3, #1
  int total_padding =
 8012b76:	9b02      	ldr	r3, [sp, #8]
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8012b78:	fb09 8800 	mla	r8, r9, r0, r8

  return kTfLiteOk;
}
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	fb06 5504 	mla	r5, r6, r4, r5
  int total_padding =
 8012b82:	eba8 0707 	sub.w	r7, r8, r7
 8012b86:	1aed      	subs	r5, r5, r3
  total_padding = total_padding > 0 ? total_padding : 0;
 8012b88:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8012b8c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  return total_padding / 2;
 8012b90:	106b      	asrs	r3, r5, #1
  *offset = total_padding % 2;
 8012b92:	f005 0501 	and.w	r5, r5, #1
  data->padding = ComputePaddingHeightWidth(
 8012b96:	f8cb 3000 	str.w	r3, [fp]
  return total_padding / 2;
 8012b9a:	107b      	asrs	r3, r7, #1
  *offset = total_padding % 2;
 8012b9c:	f007 0701 	and.w	r7, r7, #1
 8012ba0:	f8cb 5008 	str.w	r5, [fp, #8]
 8012ba4:	f8cb 3004 	str.w	r3, [fp, #4]
 8012ba8:	f8cb 700c 	str.w	r7, [fp, #12]
}
 8012bac:	b005      	add	sp, #20
 8012bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08012bb4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
 8012bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8012bb8:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
 8012bbc:	4605      	mov	r5, r0
 8012bbe:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8012bc0:	f1b9 0f00 	cmp.w	r9, #0
 8012bc4:	d101      	bne.n	8012bca <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012bc6:	f004 f8bd 	bl	8016d44 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 8012bca:	690c      	ldr	r4, [r1, #16]
 8012bcc:	2c00      	cmp	r4, #0
 8012bce:	d0fa      	beq.n	8012bc6 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x12>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  MicroContext* micro_context = GetMicroContext(context);
 8012bd0:	68c6      	ldr	r6, [r0, #12]

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kPoolingInputTensor);
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f7f7 fa4d 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 8012bda:	4607      	mov	r7, r0
 8012bdc:	b958      	cbnz	r0, 8012bf6 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8012bde:	4b30      	ldr	r3, [pc, #192]	; (8012ca0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8012be0:	696c      	ldr	r4, [r5, #20]
 8012be2:	9300      	str	r3, [sp, #0]
 8012be4:	233d      	movs	r3, #61	; 0x3d
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kPoolingOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 8012be6:	4a2f      	ldr	r2, [pc, #188]	; (8012ca4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 8012be8:	4628      	mov	r0, r5
 8012bea:	492f      	ldr	r1, [pc, #188]	; (8012ca8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 8012bec:	47a0      	blx	r4
 8012bee:	2001      	movs	r0, #1

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
 8012bf0:	b003      	add	sp, #12
 8012bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      micro_context->AllocateTempOutputTensor(node, kPoolingOutputTensor);
 8012bf6:	4641      	mov	r1, r8
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	f7f7 fa4f 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8012c00:	4680      	mov	r8, r0
 8012c02:	b920      	cbnz	r0, 8012c0e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 8012c04:	4b29      	ldr	r3, [pc, #164]	; (8012cac <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 8012c06:	696c      	ldr	r4, [r5, #20]
 8012c08:	9300      	str	r3, [sp, #0]
 8012c0a:	2340      	movs	r3, #64	; 0x40
 8012c0c:	e7eb      	b.n	8012be6 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x32>
  TF_LITE_ENSURE_STATUS(
 8012c0e:	4603      	mov	r3, r0
 8012c10:	9400      	str	r4, [sp, #0]
 8012c12:	463a      	mov	r2, r7
 8012c14:	4649      	mov	r1, r9
 8012c16:	4628      	mov	r0, r5
 8012c18:	f7ff ff8b 	bl	8012b32 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	d1e7      	bne.n	8012bf0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x3c>
  if (input->type == kTfLiteFloat32) {
 8012c20:	7838      	ldrb	r0, [r7, #0]
 8012c22:	2801      	cmp	r0, #1
 8012c24:	d123      	bne.n	8012c6e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xba>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 8012c26:	f899 3014 	ldrb.w	r3, [r9, #20]
  if (activation == kTfLiteActRelu) {
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d103      	bne.n	8012c36 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x82>
    *activation_min = 0;
 8012c2e:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
 8012c30:	61a3      	str	r3, [r4, #24]
    *activation_max = std::numeric_limits<T>::max();
 8012c32:	4b1f      	ldr	r3, [pc, #124]	; (8012cb0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
 8012c34:	e004      	b.n	8012c40 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x8c>
  } else if (activation == kTfLiteActRelu6) {
 8012c36:	2b03      	cmp	r3, #3
 8012c38:	d10f      	bne.n	8012c5a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    *activation_min = 0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	61a3      	str	r3, [r4, #24]
    *activation_max = 6;
 8012c3e:	4b1d      	ldr	r3, [pc, #116]	; (8012cb4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    *activation_max = std::numeric_limits<T>::max();
 8012c40:	61e3      	str	r3, [r4, #28]
  micro_context->DeallocateTempTfLiteTensor(input);
 8012c42:	6833      	ldr	r3, [r6, #0]
 8012c44:	4639      	mov	r1, r7
 8012c46:	4630      	mov	r0, r6
 8012c48:	699b      	ldr	r3, [r3, #24]
 8012c4a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8012c4c:	6833      	ldr	r3, [r6, #0]
 8012c4e:	4630      	mov	r0, r6
 8012c50:	4641      	mov	r1, r8
 8012c52:	699b      	ldr	r3, [r3, #24]
 8012c54:	4798      	blx	r3
  return kTfLiteOk;
 8012c56:	2000      	movs	r0, #0
 8012c58:	e7ca      	b.n	8012bf0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x3c>
  } else if (activation == kTfLiteActReluN1To1) {
 8012c5a:	2b02      	cmp	r3, #2
 8012c5c:	d104      	bne.n	8012c68 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb4>
    *activation_min = -1;
 8012c5e:	4b16      	ldr	r3, [pc, #88]	; (8012cb8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x104>)
 8012c60:	61a3      	str	r3, [r4, #24]
    *activation_max = 1;
 8012c62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012c66:	e7eb      	b.n	8012c40 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x8c>
    *activation_min = std::numeric_limits<T>::lowest();
 8012c68:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8012c6c:	e7e0      	b.n	8012c30 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x7c>
  } else if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8012c6e:	2809      	cmp	r0, #9
 8012c70:	d001      	beq.n	8012c76 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 8012c72:	2807      	cmp	r0, #7
 8012c74:	d10b      	bne.n	8012c8e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xda>
    CalculateActivationRangeQuantized(context, params->activation, output,
 8012c76:	f104 0314 	add.w	r3, r4, #20
 8012c7a:	f899 1014 	ldrb.w	r1, [r9, #20]
 8012c7e:	4642      	mov	r2, r8
 8012c80:	4628      	mov	r0, r5
 8012c82:	9300      	str	r3, [sp, #0]
 8012c84:	f104 0310 	add.w	r3, r4, #16
 8012c88:	f7f5 fd58 	bl	800873c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8012c8c:	e7d9      	b.n	8012c42 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x8e>
    MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8012c8e:	f7f5 fa0f 	bl	80080b0 <TfLiteTypeGetName>
 8012c92:	783a      	ldrb	r2, [r7, #0]
 8012c94:	4601      	mov	r1, r0
 8012c96:	4809      	ldr	r0, [pc, #36]	; (8012cbc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x108>)
 8012c98:	f7f8 f80e 	bl	800acb8 <_Z11MicroPrintfPKcz>
 8012c9c:	e7a7      	b.n	8012bee <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 8012c9e:	bf00      	nop
 8012ca0:	080fbed7 	.word	0x080fbed7
 8012ca4:	080fc95d 	.word	0x080fc95d
 8012ca8:	080f93a5 	.word	0x080f93a5
 8012cac:	080fbcfa 	.word	0x080fbcfa
 8012cb0:	7f7fffff 	.word	0x7f7fffff
 8012cb4:	40c00000 	.word	0x40c00000
 8012cb8:	bf800000 	.word	0xbf800000
 8012cbc:	080fbb1a 	.word	0x080fbb1a

08012cc0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
 8012cc0:	b530      	push	{r4, r5, lr}
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8012cc2:	6891      	ldr	r1, [r2, #8]
                             TfLiteEvalTensor* output) {
 8012cc4:	b09d      	sub	sp, #116	; 0x74
  op_params.stride_height = params->stride_height;
 8012cc6:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
  op_params.float_activation_min = data->activation_min_f32;
  op_params.float_activation_max = data->activation_max_f32;
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8012cc8:	a803      	add	r0, sp, #12
  op_params.stride_width = params->stride_width;
 8012cca:	6851      	ldr	r1, [r2, #4]
 8012ccc:	9115      	str	r1, [sp, #84]	; 0x54
  op_params.filter_height = params->filter_height;
 8012cce:	6911      	ldr	r1, [r2, #16]
  op_params.filter_width = params->filter_width;
 8012cd0:	68d2      	ldr	r2, [r2, #12]
  op_params.filter_height = params->filter_height;
 8012cd2:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.filter_width = params->filter_width;
 8012cd4:	9217      	str	r2, [sp, #92]	; 0x5c
  op_params.padding_values.height = data->padding.height;
 8012cd6:	685a      	ldr	r2, [r3, #4]
 8012cd8:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
  op_params.padding_values.width = data->padding.width;
 8012cdc:	681a      	ldr	r2, [r3, #0]
                             TfLiteEvalTensor* output) {
 8012cde:	e9dd 5420 	ldrd	r5, r4, [sp, #128]	; 0x80
  op_params.padding_values.width = data->padding.width;
 8012ce2:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
  op_params.float_activation_min = data->activation_min_f32;
 8012ce6:	699a      	ldr	r2, [r3, #24]
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8012ce8:	4629      	mov	r1, r5
  op_params.float_activation_max = data->activation_max_f32;
 8012cea:	69db      	ldr	r3, [r3, #28]
  op_params.float_activation_min = data->activation_min_f32;
 8012cec:	921a      	str	r2, [sp, #104]	; 0x68
  op_params.float_activation_max = data->activation_max_f32;
 8012cee:	931b      	str	r3, [sp, #108]	; 0x6c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8012cf0:	f7fc fff7 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8012cf4:	b90d      	cbnz	r5, 8012cfa <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x3a>
 8012cf6:	f004 f825 	bl	8016d44 <abort>
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 8012cfa:	4621      	mov	r1, r4
 8012cfc:	a80a      	add	r0, sp, #40	; 0x28
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012cfe:	682d      	ldr	r5, [r5, #0]
 8012d00:	f7fc ffef 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8012d04:	2c00      	cmp	r4, #0
 8012d06:	d0f6      	beq.n	8012cf6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x36>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8012d08:	6823      	ldr	r3, [r4, #0]
 8012d0a:	462a      	mov	r2, r5
 8012d0c:	a903      	add	r1, sp, #12
 8012d0e:	a811      	add	r0, sp, #68	; 0x44
 8012d10:	9300      	str	r3, [sp, #0]
 8012d12:	ab0a      	add	r3, sp, #40	; 0x28
 8012d14:	f7ff fd66 	bl	80127e4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorData<float>(output));
}
 8012d18:	b01d      	add	sp, #116	; 0x74
 8012d1a:	bd30      	pop	{r4, r5, pc}

08012d1c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 8012d1c:	b530      	push	{r4, r5, lr}
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8012d1e:	6891      	ldr	r1, [r2, #8]
                         TfLiteEvalTensor* output) {
 8012d20:	b09d      	sub	sp, #116	; 0x74
  op_params.stride_height = params->stride_height;
 8012d22:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
  op_params.float_activation_min = data->activation_min_f32;
  op_params.float_activation_max = data->activation_max_f32;
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8012d24:	a803      	add	r0, sp, #12
  op_params.stride_width = params->stride_width;
 8012d26:	6851      	ldr	r1, [r2, #4]
 8012d28:	9115      	str	r1, [sp, #84]	; 0x54
  op_params.filter_height = params->filter_height;
 8012d2a:	6911      	ldr	r1, [r2, #16]
  op_params.filter_width = params->filter_width;
 8012d2c:	68d2      	ldr	r2, [r2, #12]
  op_params.filter_height = params->filter_height;
 8012d2e:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.filter_width = params->filter_width;
 8012d30:	9217      	str	r2, [sp, #92]	; 0x5c
  op_params.padding_values.height = data->padding.height;
 8012d32:	685a      	ldr	r2, [r3, #4]
 8012d34:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
  op_params.padding_values.width = data->padding.width;
 8012d38:	681a      	ldr	r2, [r3, #0]
                         TfLiteEvalTensor* output) {
 8012d3a:	e9dd 5420 	ldrd	r5, r4, [sp, #128]	; 0x80
  op_params.padding_values.width = data->padding.width;
 8012d3e:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
  op_params.float_activation_min = data->activation_min_f32;
 8012d42:	699a      	ldr	r2, [r3, #24]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8012d44:	4629      	mov	r1, r5
  op_params.float_activation_max = data->activation_max_f32;
 8012d46:	69db      	ldr	r3, [r3, #28]
  op_params.float_activation_min = data->activation_min_f32;
 8012d48:	921a      	str	r2, [sp, #104]	; 0x68
  op_params.float_activation_max = data->activation_max_f32;
 8012d4a:	931b      	str	r3, [sp, #108]	; 0x6c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8012d4c:	f7fc ffc9 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8012d50:	b90d      	cbnz	r5, 8012d56 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a>
 8012d52:	f003 fff7 	bl	8016d44 <abort>
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 8012d56:	4621      	mov	r1, r4
 8012d58:	a80a      	add	r0, sp, #40	; 0x28
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012d5a:	682d      	ldr	r5, [r5, #0]
 8012d5c:	f7fc ffc1 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8012d60:	2c00      	cmp	r4, #0
 8012d62:	d0f6      	beq.n	8012d52 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x36>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8012d64:	6823      	ldr	r3, [r4, #0]
 8012d66:	462a      	mov	r2, r5
 8012d68:	a903      	add	r1, sp, #12
 8012d6a:	a811      	add	r0, sp, #68	; 0x44
 8012d6c:	9300      	str	r3, [sp, #0]
 8012d6e:	ab0a      	add	r3, sp, #40	; 0x28
 8012d70:	f7ff fe0e 	bl	8012990 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorData<float>(output));
}
 8012d74:	b01d      	add	sp, #116	; 0x74
 8012d76:	bd30      	pop	{r4, r5, pc}

08012d78 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8012d78:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8012d7a:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8012d7c:	b90b      	cbnz	r3, 8012d82 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 8012d7e:	f003 ffe1 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataQuantizeReference));
 8012d82:	2120      	movs	r1, #32
}
 8012d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                                           sizeof(OpDataQuantizeReference));
 8012d88:	4718      	bx	r3
	...

08012d8c <_ZN6tflite17Register_QUANTIZEEv>:

}  // namespace

TFLMRegistration Register_QUANTIZE() {
  return tflite::micro::RegisterOp(Init, PrepareQuantizeReference,
                                   EvalQuantizeReference);
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	4a06      	ldr	r2, [pc, #24]	; (8012da8 <_ZN6tflite17Register_QUANTIZEEv+0x1c>)
TFLMRegistration Register_QUANTIZE() {
 8012d90:	b513      	push	{r0, r1, r4, lr}
 8012d92:	4604      	mov	r4, r0
                                   EvalQuantizeReference);
 8012d94:	4905      	ldr	r1, [pc, #20]	; (8012dac <_ZN6tflite17Register_QUANTIZEEv+0x20>)
 8012d96:	e9cd 3300 	strd	r3, r3, [sp]
 8012d9a:	4b05      	ldr	r3, [pc, #20]	; (8012db0 <_ZN6tflite17Register_QUANTIZEEv+0x24>)
 8012d9c:	f7fc ff6a 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 8012da0:	4620      	mov	r0, r4
 8012da2:	b002      	add	sp, #8
 8012da4:	bd10      	pop	{r4, pc}
 8012da6:	bf00      	nop
 8012da8:	08012db5 	.word	0x08012db5
 8012dac:	08012d79 	.word	0x08012d79
 8012db0:	08012fe9 	.word	0x08012fe9

08012db4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {

TfLiteStatus PrepareQuantizeReference(TfLiteContext* context,
                                      TfLiteNode* node) {
 8012db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8012db8:	690e      	ldr	r6, [r1, #16]
                                      TfLiteNode* node) {
 8012dba:	b085      	sub	sp, #20
 8012dbc:	4680      	mov	r8, r0
 8012dbe:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 8012dc0:	b90e      	cbnz	r6, 8012dc6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x12>
 8012dc2:	f003 ffbf 	bl	8016d44 <abort>
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8012dc6:	680b      	ldr	r3, [r1, #0]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8012dc8:	b113      	cbz	r3, 8012dd0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c>
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	2a01      	cmp	r2, #1
 8012dce:	d013      	beq.n	8012df8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44>
 8012dd0:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8012dd4:	b103      	cbz	r3, 8012dd8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x24>
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2401      	movs	r4, #1
 8012dda:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012dde:	4b73      	ldr	r3, [pc, #460]	; (8012fac <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8012de0:	9301      	str	r3, [sp, #4]
 8012de2:	4b73      	ldr	r3, [pc, #460]	; (8012fb0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1fc>)
 8012de4:	9300      	str	r3, [sp, #0]
 8012de6:	2324      	movs	r3, #36	; 0x24
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8012de8:	4a72      	ldr	r2, [pc, #456]	; (8012fb4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x200>)
 8012dea:	4640      	mov	r0, r8
 8012dec:	4972      	ldr	r1, [pc, #456]	; (8012fb8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x204>)
 8012dee:	47a8      	blx	r5
  data->input_zero_point = input->params.zero_point;

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 8012df0:	4620      	mov	r0, r4
 8012df2:	b005      	add	sp, #20
 8012df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8012df8:	684b      	ldr	r3, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8012dfa:	b123      	cbz	r3, 8012e06 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x52>
 8012dfc:	f8d3 9000 	ldr.w	r9, [r3]
 8012e00:	f1b9 0f01 	cmp.w	r9, #1
 8012e04:	d00c      	beq.n	8012e20 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6c>
 8012e06:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8012e0a:	b103      	cbz	r3, 8012e0e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5a>
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2401      	movs	r4, #1
 8012e10:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012e14:	4b65      	ldr	r3, [pc, #404]	; (8012fac <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8012e16:	9301      	str	r3, [sp, #4]
 8012e18:	4b68      	ldr	r3, [pc, #416]	; (8012fbc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x208>)
 8012e1a:	9300      	str	r3, [sp, #0]
 8012e1c:	2325      	movs	r3, #37	; 0x25
 8012e1e:	e7e3      	b.n	8012de8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x34>
  MicroContext* micro_context = GetMicroContext(context);
 8012e20:	68c7      	ldr	r7, [r0, #12]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8012e22:	2200      	movs	r2, #0
 8012e24:	4638      	mov	r0, r7
 8012e26:	f7f7 f925 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 8012e2a:	4682      	mov	sl, r0
 8012e2c:	b948      	cbnz	r0, 8012e42 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x8e>
 8012e2e:	4b64      	ldr	r3, [pc, #400]	; (8012fc0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x20c>)
 8012e30:	9300      	str	r3, [sp, #0]
 8012e32:	232a      	movs	r3, #42	; 0x2a
 8012e34:	f8d8 4014 	ldr.w	r4, [r8, #20]
  TF_LITE_ENSURE(
 8012e38:	4a5e      	ldr	r2, [pc, #376]	; (8012fb4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x200>)
 8012e3a:	4640      	mov	r0, r8
 8012e3c:	4961      	ldr	r1, [pc, #388]	; (8012fc4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x210>)
 8012e3e:	47a0      	blx	r4
 8012e40:	e01d      	b.n	8012e7e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 8012e42:	2200      	movs	r2, #0
 8012e44:	4621      	mov	r1, r4
 8012e46:	4638      	mov	r0, r7
 8012e48:	f7f7 f929 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	b928      	cbnz	r0, 8012e5c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa8>
 8012e50:	4b5d      	ldr	r3, [pc, #372]	; (8012fc8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x214>)
 8012e52:	9300      	str	r3, [sp, #0]
 8012e54:	232c      	movs	r3, #44	; 0x2c
 8012e56:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8012e5a:	e7ed      	b.n	8012e38 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
 8012e5c:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
 8012e60:	2c01      	cmp	r4, #1
 8012e62:	d00e      	beq.n	8012e82 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xce>
 8012e64:	4b59      	ldr	r3, [pc, #356]	; (8012fcc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x218>)
 8012e66:	4640      	mov	r0, r8
 8012e68:	4a52      	ldr	r2, [pc, #328]	; (8012fb4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x200>)
 8012e6a:	9301      	str	r3, [sp, #4]
 8012e6c:	4b58      	ldr	r3, [pc, #352]	; (8012fd0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x21c>)
 8012e6e:	4952      	ldr	r1, [pc, #328]	; (8012fb8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x204>)
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	2331      	movs	r3, #49	; 0x31
 8012e74:	e9cd 4902 	strd	r4, r9, [sp, #8]
 8012e78:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8012e7c:	47a0      	blx	r4
  TF_LITE_ENSURE(
 8012e7e:	2401      	movs	r4, #1
 8012e80:	e7b6      	b.n	8012df0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3c>
      reinterpret_cast<TfLiteAffineQuantization*>(output->quantization.params);
 8012e82:	6b43      	ldr	r3, [r0, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
 8012e84:	b94b      	cbnz	r3, 8012e9a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xe6>
 8012e86:	4b53      	ldr	r3, [pc, #332]	; (8012fd4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x220>)
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	2334      	movs	r3, #52	; 0x34
 8012e8c:	f8d8 5014 	ldr.w	r5, [r8, #20]
  TF_LITE_ENSURE(context, output->type == kTfLiteInt8 ||
 8012e90:	4a48      	ldr	r2, [pc, #288]	; (8012fb4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x200>)
 8012e92:	4640      	mov	r0, r8
 8012e94:	494b      	ldr	r1, [pc, #300]	; (8012fc4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x210>)
 8012e96:	47a8      	blx	r5
 8012e98:	e7aa      	b.n	8012df0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	b92b      	cbnz	r3, 8012eaa <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xf6>
 8012e9e:	4b4e      	ldr	r3, [pc, #312]	; (8012fd8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x224>)
 8012ea0:	9300      	str	r3, [sp, #0]
 8012ea2:	2335      	movs	r3, #53	; 0x35
 8012ea4:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8012ea8:	e7c6      	b.n	8012e38 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
 8012eaa:	681c      	ldr	r4, [r3, #0]
 8012eac:	2c01      	cmp	r4, #1
 8012eae:	d005      	beq.n	8012ebc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x108>
 8012eb0:	4b4a      	ldr	r3, [pc, #296]	; (8012fdc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x228>)
 8012eb2:	9300      	str	r3, [sp, #0]
 8012eb4:	2336      	movs	r3, #54	; 0x36
 8012eb6:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8012eba:	e7bd      	b.n	8012e38 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(
 8012ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8012ec0:	1e5a      	subs	r2, r3, #1
 8012ec2:	b2d2      	uxtb	r2, r2
 8012ec4:	2a08      	cmp	r2, #8
 8012ec6:	d805      	bhi.n	8012ed4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x120>
 8012ec8:	f240 1147 	movw	r1, #327	; 0x147
 8012ecc:	fa21 f202 	lsr.w	r2, r1, r2
 8012ed0:	07d2      	lsls	r2, r2, #31
 8012ed2:	d405      	bmi.n	8012ee0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x12c>
 8012ed4:	4b42      	ldr	r3, [pc, #264]	; (8012fe0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	233b      	movs	r3, #59	; 0x3b
 8012eda:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8012ede:	e7ab      	b.n	8012e38 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output->type == kTfLiteInt8 ||
 8012ee0:	7802      	ldrb	r2, [r0, #0]
 8012ee2:	2a09      	cmp	r2, #9
 8012ee4:	d05c      	beq.n	8012fa0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1ec>
 8012ee6:	2a07      	cmp	r2, #7
 8012ee8:	d02d      	beq.n	8012f46 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x192>
 8012eea:	1e91      	subs	r1, r2, #2
 8012eec:	b2c8      	uxtb	r0, r1
 8012eee:	2801      	cmp	r0, #1
 8012ef0:	d905      	bls.n	8012efe <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x14a>
 8012ef2:	4b3c      	ldr	r3, [pc, #240]	; (8012fe4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x230>)
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	233f      	movs	r3, #63	; 0x3f
 8012ef8:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8012efc:	e7c8      	b.n	8012e90 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xdc>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 8012efe:	2b07      	cmp	r3, #7
 8012f00:	d029      	beq.n	8012f56 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1a2>
 8012f02:	2b09      	cmp	r3, #9
 8012f04:	d02b      	beq.n	8012f5e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1aa>
      (input->type == kTfLiteInt8 && output->type == kTfLiteUInt8) ||
 8012f06:	2b03      	cmp	r3, #3
 8012f08:	d123      	bne.n	8012f52 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x19e>
      (input->type == kTfLiteUInt8 && output->type == kTfLiteInt8) ||
 8012f0a:	2a09      	cmp	r2, #9
      (input->type == kTfLiteInt32 && output->type == kTfLiteInt16)) {
 8012f0c:	d02e      	beq.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
  data->quantization_params.zero_point = output->params.zero_point;
 8012f0e:	692b      	ldr	r3, [r5, #16]
  return kTfLiteOk;
 8012f10:	2400      	movs	r4, #0
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 8012f12:	68e8      	ldr	r0, [r5, #12]
  data->quantization_params.zero_point = output->params.zero_point;
 8012f14:	6033      	str	r3, [r6, #0]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 8012f16:	f7ed fb39 	bl	800058c <__aeabi_f2d>
  data->input_zero_point = input->params.zero_point;
 8012f1a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8012f1e:	61b3      	str	r3, [r6, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
 8012f20:	683b      	ldr	r3, [r7, #0]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 8012f22:	e9c6 0102 	strd	r0, r1, [r6, #8]
  micro_context->DeallocateTempTfLiteTensor(input);
 8012f26:	699b      	ldr	r3, [r3, #24]
 8012f28:	4651      	mov	r1, sl
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	4629      	mov	r1, r5
 8012f32:	4638      	mov	r0, r7
 8012f34:	699b      	ldr	r3, [r3, #24]
 8012f36:	4798      	blx	r3
  return kTfLiteOk;
 8012f38:	e75a      	b.n	8012df0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3c>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt32) ||
 8012f3a:	2b02      	cmp	r3, #2
 8012f3c:	d1e7      	bne.n	8012f0e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x15a>
      (input->type == kTfLiteInt32 && output->type == kTfLiteInt8) ||
 8012f3e:	2a09      	cmp	r2, #9
 8012f40:	d014      	beq.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
      (input->type == kTfLiteInt32 && output->type == kTfLiteInt16)) {
 8012f42:	2a07      	cmp	r2, #7
 8012f44:	e7e2      	b.n	8012f0c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x158>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 8012f46:	2b07      	cmp	r3, #7
 8012f48:	d010      	beq.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
 8012f4a:	2b09      	cmp	r3, #9
 8012f4c:	d00e      	beq.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
      (input->type == kTfLiteInt8 && output->type == kTfLiteUInt8) ||
 8012f4e:	2b03      	cmp	r3, #3
 8012f50:	d0dd      	beq.n	8012f0e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x15a>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
 8012f52:	2b07      	cmp	r3, #7
 8012f54:	d1f1      	bne.n	8012f3a <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x186>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt16) ||
 8012f56:	2a07      	cmp	r2, #7
 8012f58:	d008      	beq.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt32) ||
 8012f5a:	2a02      	cmp	r2, #2
 8012f5c:	e7d6      	b.n	8012f0c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x158>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 8012f5e:	2a09      	cmp	r2, #9
 8012f60:	d004      	beq.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt16) ||
 8012f62:	2a07      	cmp	r2, #7
 8012f64:	d002      	beq.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
 8012f66:	b2c9      	uxtb	r1, r1
 8012f68:	2901      	cmp	r1, #1
 8012f6a:	d8d0      	bhi.n	8012f0e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x15a>
    double effective_scale = static_cast<double>(input->params.scale) /
 8012f6c:	f8da 000c 	ldr.w	r0, [sl, #12]
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
 8012f70:	f106 0b14 	add.w	fp, r6, #20
    double effective_scale = static_cast<double>(input->params.scale) /
 8012f74:	f7ed fb0a 	bl	800058c <__aeabi_f2d>
 8012f78:	4680      	mov	r8, r0
 8012f7a:	4689      	mov	r9, r1
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
 8012f7c:	f106 0410 	add.w	r4, r6, #16
                             static_cast<double>(output->params.scale);
 8012f80:	68e8      	ldr	r0, [r5, #12]
 8012f82:	f7ed fb03 	bl	800058c <__aeabi_f2d>
    double effective_scale = static_cast<double>(input->params.scale) /
 8012f86:	4602      	mov	r2, r0
 8012f88:	460b      	mov	r3, r1
 8012f8a:	4640      	mov	r0, r8
 8012f8c:	4649      	mov	r1, r9
 8012f8e:	f7ed fc7f 	bl	8000890 <__aeabi_ddiv>
 8012f92:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
 8012f96:	4659      	mov	r1, fp
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f7f5 f965 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
 8012f9e:	e7b6      	b.n	8012f0e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x15a>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 8012fa0:	2b07      	cmp	r3, #7
 8012fa2:	d0e3      	beq.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
 8012fa4:	2b09      	cmp	r3, #9
 8012fa6:	d1ae      	bne.n	8012f06 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x152>
 8012fa8:	e7e0      	b.n	8012f6c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b8>
 8012faa:	bf00      	nop
 8012fac:	080fca44 	.word	0x080fca44
 8012fb0:	080fc490 	.word	0x080fc490
 8012fb4:	080fc9c7 	.word	0x080fc9c7
 8012fb8:	080f982c 	.word	0x080f982c
 8012fbc:	080fc4a0 	.word	0x080fc4a0
 8012fc0:	080fbed7 	.word	0x080fbed7
 8012fc4:	080f93a5 	.word	0x080f93a5
 8012fc8:	080fbcfa 	.word	0x080fbcfa
 8012fcc:	080f9846 	.word	0x080f9846
 8012fd0:	080fca06 	.word	0x080fca06
 8012fd4:	080f9893 	.word	0x080f9893
 8012fd8:	080f98a7 	.word	0x080f98a7
 8012fdc:	080fca20 	.word	0x080fca20
 8012fe0:	080fca46 	.word	0x080fca46
 8012fe4:	080fcadf 	.word	0x080fcadf

08012fe8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus EvalQuantizeReference(TfLiteContext* context, TfLiteNode* node) {
 8012fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8012fec:	690c      	ldr	r4, [r1, #16]
TfLiteStatus EvalQuantizeReference(TfLiteContext* context, TfLiteNode* node) {
 8012fee:	4606      	mov	r6, r0
 8012ff0:	460d      	mov	r5, r1
 8012ff2:	ed2d 8b02 	vpush	{d8}
 8012ff6:	b091      	sub	sp, #68	; 0x44
  TFLITE_DCHECK(node->user_data != nullptr);
 8012ff8:	b90c      	cbnz	r4, 8012ffe <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16>
 8012ffa:	f003 fea3 	bl	8016d44 <abort>
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8012ffe:	2200      	movs	r2, #0
 8013000:	f7fc fe5f 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013004:	4607      	mov	r7, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013006:	4629      	mov	r1, r5
 8013008:	4630      	mov	r0, r6
 801300a:	2200      	movs	r2, #0
 801300c:	f7fc fe5b 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  if (input->type == kTfLiteFloat32) {
 8013010:	7a3d      	ldrb	r5, [r7, #8]
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013012:	4606      	mov	r6, r0
  if (input->type == kTfLiteFloat32) {
 8013014:	2d01      	cmp	r5, #1
 8013016:	d171      	bne.n	80130fc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x114>
    switch (output->type) {
 8013018:	7a03      	ldrb	r3, [r0, #8]
 801301a:	2b07      	cmp	r3, #7
 801301c:	d037      	beq.n	801308e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xa6>
 801301e:	2b09      	cmp	r3, #9
 8013020:	f040 8216 	bne.w	8013450 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x468>
      case kTfLiteInt8:
        reference_ops::AffineQuantize(
            data->quantization_params, tflite::micro::GetTensorShape(input),
 8013024:	4639      	mov	r1, r7
 8013026:	a802      	add	r0, sp, #8
 8013028:	f7fc fe5b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorData<float>(input),
            tflite::micro::GetTensorShape(output),
 801302c:	4631      	mov	r1, r6
 801302e:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013030:	683f      	ldr	r7, [r7, #0]
 8013032:	f7fc fe56 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32_t zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013036:	a909      	add	r1, sp, #36	; 0x24
 8013038:	a802      	add	r0, sp, #8
  const int32_t zero_point = op_params.zero_point;
 801303a:	f8d4 8000 	ldr.w	r8, [r4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801303e:	f7f7 feed 	bl	800ae1c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013042:	f8d6 9000 	ldr.w	r9, [r6]
 8013046:	4682      	mov	sl, r0
    const InputT val = input_data[i];
    int32_t unclamped =
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
        zero_point;
    int32_t clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
 8013048:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801304c:	464e      	mov	r6, r9
  const double scale = op_params.scale;
 801304e:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
  for (int i = 0; i < flat_size; i++) {
 8013052:	eba6 0309 	sub.w	r3, r6, r9
 8013056:	459a      	cmp	sl, r3
 8013058:	dd69      	ble.n	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 801305a:	4620      	mov	r0, r4
 801305c:	4629      	mov	r1, r5
 801305e:	f7ed fdaf 	bl	8000bc0 <__aeabi_d2f>
    const InputT val = input_data[i];
 8013062:	ecb7 8a01 	vldmia	r7!, {s16}
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 8013066:	ee07 0a90 	vmov	s15, r0
 801306a:	eec8 7a27 	vdiv.f32	s15, s16, s15
 801306e:	fef8 7a67 	vrinta.f32	s15, s15
 8013072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013076:	ee17 3a90 	vmov	r3, s15
 801307a:	4443      	add	r3, r8
    output_data[i] = clamped;
 801307c:	2b7f      	cmp	r3, #127	; 0x7f
 801307e:	bfa8      	it	ge
 8013080:	237f      	movge	r3, #127	; 0x7f
 8013082:	455b      	cmp	r3, fp
 8013084:	bfb8      	it	lt
 8013086:	465b      	movlt	r3, fp
 8013088:	f806 3b01 	strb.w	r3, [r6], #1
 801308c:	e7e1      	b.n	8013052 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6a>
            tflite::micro::GetTensorData<int8_t>(output));
        break;
      case kTfLiteInt16:
        reference_ops::AffineQuantize(
            data->quantization_params, tflite::micro::GetTensorShape(input),
 801308e:	4639      	mov	r1, r7
 8013090:	a802      	add	r0, sp, #8
 8013092:	f7fc fe26 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorData<float>(input),
            tflite::micro::GetTensorShape(output),
 8013096:	4631      	mov	r1, r6
 8013098:	a809      	add	r0, sp, #36	; 0x24
 801309a:	683d      	ldr	r5, [r7, #0]
 801309c:	f7fc fe21 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 80130a0:	6833      	ldr	r3, [r6, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80130a2:	a909      	add	r1, sp, #36	; 0x24
 80130a4:	a802      	add	r0, sp, #8
 80130a6:	9300      	str	r3, [sp, #0]
    output_data[i] = clamped;
 80130a8:	f647 7bff 	movw	fp, #32767	; 0x7fff
  const int32_t zero_point = op_params.zero_point;
 80130ac:	f8d4 9000 	ldr.w	r9, [r4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80130b0:	f7f7 feb4 	bl	800ae1c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
    output_data[i] = clamped;
 80130b4:	f8df a39c 	ldr.w	sl, [pc, #924]	; 8013454 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x46c>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80130b8:	4680      	mov	r8, r0
  const double scale = op_params.scale;
 80130ba:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
  for (int i = 0; i < flat_size; i++) {
 80130be:	2400      	movs	r4, #0
 80130c0:	45a0      	cmp	r8, r4
 80130c2:	dd34      	ble.n	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 80130c4:	4630      	mov	r0, r6
 80130c6:	4639      	mov	r1, r7
 80130c8:	f7ed fd7a 	bl	8000bc0 <__aeabi_d2f>
    const InputT val = input_data[i];
 80130cc:	ecb5 8a01 	vldmia	r5!, {s16}
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 80130d0:	ee07 0a90 	vmov	s15, r0
    output_data[i] = clamped;
 80130d4:	9a00      	ldr	r2, [sp, #0]
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 80130d6:	eec8 7a27 	vdiv.f32	s15, s16, s15
 80130da:	fef8 7a67 	vrinta.f32	s15, s15
 80130de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130e2:	ee17 3a90 	vmov	r3, s15
 80130e6:	444b      	add	r3, r9
    output_data[i] = clamped;
 80130e8:	455b      	cmp	r3, fp
 80130ea:	bfa8      	it	ge
 80130ec:	465b      	movge	r3, fp
 80130ee:	4553      	cmp	r3, sl
 80130f0:	bfb8      	it	lt
 80130f2:	4653      	movlt	r3, sl
 80130f4:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  for (int i = 0; i < flat_size; i++) {
 80130f8:	3401      	adds	r4, #1
 80130fa:	e7e1      	b.n	80130c0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd8>
        MicroPrintf("Input %s, output %s not supported.",
                    TfLiteTypeGetName(input->type),
                    TfLiteTypeGetName(output->type));
        return kTfLiteError;
    }
  } else if (input->type == kTfLiteInt32) {
 80130fc:	2d02      	cmp	r5, #2
 80130fe:	d154      	bne.n	80131aa <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c2>
    size_t size = ElementCount(*input->dims);
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f7f7 fe47 	bl	800ad94 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 8013106:	7a33      	ldrb	r3, [r6, #8]
    size_t size = ElementCount(*input->dims);
 8013108:	4605      	mov	r5, r0
    switch (output->type) {
 801310a:	2b07      	cmp	r3, #7
 801310c:	d028      	beq.n	8013160 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x178>
 801310e:	2b09      	cmp	r3, #9
 8013110:	f040 8190 	bne.w	8013434 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013114:	f8d7 a000 	ldr.w	sl, [r7]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
                                      effective_scale_shift) +
        output_zeropoint;
    const int32_t clamped_output =
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
 8013118:	f06f 087f 	mvn.w	r8, #127	; 0x7f
      case kTfLiteInt8:
        reference_ops::Requantize(
 801311c:	69a7      	ldr	r7, [r4, #24]
 801311e:	f8d4 b000 	ldr.w	fp, [r4]
  return reinterpret_cast<T*>(tensor->data.raw);
 8013122:	6836      	ldr	r6, [r6, #0]
            tflite::micro::GetTensorData<int32_t>(input), size,
            data->requantize_output_multiplier, data->requantize_output_shift,
 8013124:	e9d4 3904 	ldrd	r3, r9, [r4, #16]
 8013128:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 801312a:	42a5      	cmp	r5, r4
 801312c:	dc05      	bgt.n	801313a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x152>
                TfLiteTypeGetName(input->type),
                TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
 801312e:	2000      	movs	r0, #0
}
 8013130:	b011      	add	sp, #68	; 0x44
 8013132:	ecbd 8b02 	vpop	{d8}
 8013136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int32_t input = input_data[i] - input_zeropoint;
 801313a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 801313e:	4619      	mov	r1, r3
 8013140:	464a      	mov	r2, r9
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	1bc0      	subs	r0, r0, r7
 8013146:	f7f4 ffbf 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 801314a:	4458      	add	r0, fp
 801314c:	9b00      	ldr	r3, [sp, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 801314e:	4540      	cmp	r0, r8
 8013150:	bfb8      	it	lt
 8013152:	4640      	movlt	r0, r8
 8013154:	287f      	cmp	r0, #127	; 0x7f
 8013156:	bfa8      	it	ge
 8013158:	207f      	movge	r0, #127	; 0x7f
 801315a:	5530      	strb	r0, [r6, r4]
  for (int i = 0; i < size; ++i) {
 801315c:	3401      	adds	r4, #1
 801315e:	e7e4      	b.n	801312a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x142>
 8013160:	6832      	ldr	r2, [r6, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 8013162:	f647 76ff 	movw	r6, #32767	; 0x7fff
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013166:	683b      	ldr	r3, [r7, #0]
        reference_ops::Requantize(
 8013168:	f8d4 9018 	ldr.w	r9, [r4, #24]
 801316c:	f8d4 8000 	ldr.w	r8, [r4]
 8013170:	4fb8      	ldr	r7, [pc, #736]	; (8013454 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x46c>)
  return reinterpret_cast<T*>(tensor->data.raw);
 8013172:	9200      	str	r2, [sp, #0]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8013174:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8013178:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 801317a:	42a5      	cmp	r5, r4
 801317c:	ddd7      	ble.n	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 801317e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8013182:	465a      	mov	r2, fp
 8013184:	4651      	mov	r1, sl
    const int32_t input = input_data[i] - input_zeropoint;
 8013186:	9301      	str	r3, [sp, #4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8013188:	eba0 0009 	sub.w	r0, r0, r9
 801318c:	f7f4 ff9c 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8013190:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 8013192:	9b00      	ldr	r3, [sp, #0]
 8013194:	42b8      	cmp	r0, r7
 8013196:	bfb8      	it	lt
 8013198:	4638      	movlt	r0, r7
 801319a:	42b0      	cmp	r0, r6
 801319c:	bfa8      	it	ge
 801319e:	4630      	movge	r0, r6
 80131a0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
  for (int i = 0; i < size; ++i) {
 80131a4:	3401      	adds	r4, #1
 80131a6:	9b01      	ldr	r3, [sp, #4]
 80131a8:	e7e7      	b.n	801317a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x192>
  } else if (input->type == kTfLiteInt16) {
 80131aa:	2d07      	cmp	r5, #7
 80131ac:	d167      	bne.n	801327e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x296>
    size_t size = ElementCount(*input->dims);
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f7f7 fdf0 	bl	800ad94 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 80131b4:	7a33      	ldrb	r3, [r6, #8]
    size_t size = ElementCount(*input->dims);
 80131b6:	4605      	mov	r5, r0
    switch (output->type) {
 80131b8:	2b07      	cmp	r3, #7
 80131ba:	d03b      	beq.n	8013234 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x24c>
 80131bc:	2b09      	cmp	r3, #9
 80131be:	d019      	beq.n	80131f4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x20c>
 80131c0:	2b02      	cmp	r3, #2
 80131c2:	f040 8137 	bne.w	8013434 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80131c6:	f8d7 a000 	ldr.w	sl, [r7]
        reference_ops::Requantize(
 80131ca:	f8d4 b000 	ldr.w	fp, [r4]
 80131ce:	69a7      	ldr	r7, [r4, #24]
  return reinterpret_cast<T*>(tensor->data.raw);
 80131d0:	6836      	ldr	r6, [r6, #0]
            data->requantize_output_multiplier, data->requantize_output_shift,
 80131d2:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 80131d6:	2400      	movs	r4, #0
 80131d8:	42a5      	cmp	r5, r4
 80131da:	dda8      	ble.n	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 80131dc:	f93a 0014 	ldrsh.w	r0, [sl, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 80131e0:	464a      	mov	r2, r9
 80131e2:	4641      	mov	r1, r8
 80131e4:	1bc0      	subs	r0, r0, r7
 80131e6:	f7f4 ff6f 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 80131ea:	4458      	add	r0, fp
    output_data[i] = static_cast<output_type>(clamped_output);
 80131ec:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
 80131f0:	3401      	adds	r4, #1
 80131f2:	e7f1      	b.n	80131d8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f0>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80131f4:	f8d7 a000 	ldr.w	sl, [r7]
    output_data[i] = static_cast<output_type>(clamped_output);
 80131f8:	f06f 087f 	mvn.w	r8, #127	; 0x7f
        reference_ops::Requantize(
 80131fc:	69a7      	ldr	r7, [r4, #24]
 80131fe:	f8d4 b000 	ldr.w	fp, [r4]
  return reinterpret_cast<T*>(tensor->data.raw);
 8013202:	6836      	ldr	r6, [r6, #0]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8013204:	e9d4 3904 	ldrd	r3, r9, [r4, #16]
 8013208:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 801320a:	42a5      	cmp	r5, r4
 801320c:	dd8f      	ble.n	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 801320e:	f93a 0014 	ldrsh.w	r0, [sl, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8013212:	4619      	mov	r1, r3
 8013214:	464a      	mov	r2, r9
 8013216:	9300      	str	r3, [sp, #0]
 8013218:	1bc0      	subs	r0, r0, r7
 801321a:	f7f4 ff55 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 801321e:	4458      	add	r0, fp
 8013220:	9b00      	ldr	r3, [sp, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 8013222:	4540      	cmp	r0, r8
 8013224:	bfb8      	it	lt
 8013226:	4640      	movlt	r0, r8
 8013228:	287f      	cmp	r0, #127	; 0x7f
 801322a:	bfa8      	it	ge
 801322c:	207f      	movge	r0, #127	; 0x7f
 801322e:	5530      	strb	r0, [r6, r4]
  for (int i = 0; i < size; ++i) {
 8013230:	3401      	adds	r4, #1
 8013232:	e7ea      	b.n	801320a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x222>
 8013234:	6833      	ldr	r3, [r6, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 8013236:	f647 76ff 	movw	r6, #32767	; 0x7fff
  return reinterpret_cast<const T*>(tensor->data.raw);
 801323a:	f8d7 a000 	ldr.w	sl, [r7]
        reference_ops::Requantize(
 801323e:	f8d4 b000 	ldr.w	fp, [r4]
 8013242:	69a7      	ldr	r7, [r4, #24]
  return reinterpret_cast<T*>(tensor->data.raw);
 8013244:	9300      	str	r3, [sp, #0]
 8013246:	4b83      	ldr	r3, [pc, #524]	; (8013454 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x46c>)
            data->requantize_output_multiplier, data->requantize_output_shift,
 8013248:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 801324c:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 801324e:	42a5      	cmp	r5, r4
 8013250:	9301      	str	r3, [sp, #4]
 8013252:	f77f af6c 	ble.w	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 8013256:	f93a 0014 	ldrsh.w	r0, [sl, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 801325a:	464a      	mov	r2, r9
 801325c:	4641      	mov	r1, r8
 801325e:	1bc0      	subs	r0, r0, r7
 8013260:	f7f4 ff32 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
    output_data[i] = static_cast<output_type>(clamped_output);
 8013264:	9b01      	ldr	r3, [sp, #4]
                                      effective_scale_shift) +
 8013266:	4458      	add	r0, fp
    output_data[i] = static_cast<output_type>(clamped_output);
 8013268:	9a00      	ldr	r2, [sp, #0]
 801326a:	4298      	cmp	r0, r3
 801326c:	bfb8      	it	lt
 801326e:	4618      	movlt	r0, r3
 8013270:	42b0      	cmp	r0, r6
 8013272:	bfa8      	it	ge
 8013274:	4630      	movge	r0, r6
 8013276:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
  for (int i = 0; i < size; ++i) {
 801327a:	3401      	adds	r4, #1
 801327c:	e7e7      	b.n	801324e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x266>
  } else if (input->type == kTfLiteInt8) {
 801327e:	2d09      	cmp	r5, #9
 8013280:	f040 809b 	bne.w	80133ba <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3d2>
    size_t size = ElementCount(*input->dims);
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f7f7 fd85 	bl	800ad94 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 801328a:	7a33      	ldrb	r3, [r6, #8]
    size_t size = ElementCount(*input->dims);
 801328c:	4605      	mov	r5, r0
    switch (output->type) {
 801328e:	3b02      	subs	r3, #2
 8013290:	2b07      	cmp	r3, #7
 8013292:	f200 80cf 	bhi.w	8013434 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44c>
 8013296:	e8df f003 	tbb	[pc, r3]
 801329a:	2578      	.short	0x2578
 801329c:	53cdcdcd 	.word	0x53cdcdcd
 80132a0:	04cd      	.short	0x04cd
  return reinterpret_cast<const T*>(tensor->data.raw);
 80132a2:	f8d7 a000 	ldr.w	sl, [r7]
    output_data[i] = static_cast<output_type>(clamped_output);
 80132a6:	f06f 087f 	mvn.w	r8, #127	; 0x7f
        reference_ops::Requantize(
 80132aa:	69a7      	ldr	r7, [r4, #24]
 80132ac:	f8d4 b000 	ldr.w	fp, [r4]
  return reinterpret_cast<T*>(tensor->data.raw);
 80132b0:	6836      	ldr	r6, [r6, #0]
            data->requantize_output_multiplier, data->requantize_output_shift,
 80132b2:	e9d4 3904 	ldrd	r3, r9, [r4, #16]
 80132b6:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 80132b8:	42a5      	cmp	r5, r4
 80132ba:	f77f af38 	ble.w	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 80132be:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 80132c2:	4619      	mov	r1, r3
 80132c4:	464a      	mov	r2, r9
 80132c6:	9300      	str	r3, [sp, #0]
 80132c8:	1bc0      	subs	r0, r0, r7
 80132ca:	f7f4 fefd 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 80132ce:	4458      	add	r0, fp
 80132d0:	9b00      	ldr	r3, [sp, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 80132d2:	4540      	cmp	r0, r8
 80132d4:	bfb8      	it	lt
 80132d6:	4640      	movlt	r0, r8
 80132d8:	287f      	cmp	r0, #127	; 0x7f
 80132da:	bfa8      	it	ge
 80132dc:	207f      	movge	r0, #127	; 0x7f
 80132de:	5530      	strb	r0, [r6, r4]
  for (int i = 0; i < size; ++i) {
 80132e0:	3401      	adds	r4, #1
 80132e2:	e7e9      	b.n	80132b8 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2d0>
            data->requantize_output_multiplier, data->requantize_output_shift,
 80132e4:	e9d4 8a04 	ldrd	r8, sl, [r4, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80132e8:	f8d7 9000 	ldr.w	r9, [r7]
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 80132ec:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
        reference_ops::Requantize(
 80132f0:	69a7      	ldr	r7, [r4, #24]
 80132f2:	f8d4 b000 	ldr.w	fp, [r4]
  return reinterpret_cast<T*>(tensor->data.raw);
 80132f6:	6836      	ldr	r6, [r6, #0]
 80132f8:	d111      	bne.n	801331e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x336>
 80132fa:	f1ba 0f01 	cmp.w	sl, #1
 80132fe:	d10e      	bne.n	801331e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x336>
    const int32_t zero_point_diff = input_zeropoint - output_zeropoint;
 8013300:	eba7 030b 	sub.w	r3, r7, fp
    if ((mixed_type_int8_uint8 && zero_point_diff == -128) ||
 8013304:	3380      	adds	r3, #128	; 0x80
 8013306:	d10a      	bne.n	801331e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x336>
      for (int i = 0; i < size; ++i) {
 8013308:	2300      	movs	r3, #0
 801330a:	429d      	cmp	r5, r3
 801330c:	f77f af0f 	ble.w	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
        output_data[i] = input_data[i] ^ 0x80;
 8013310:	f819 2003 	ldrb.w	r2, [r9, r3]
 8013314:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8013318:	54f2      	strb	r2, [r6, r3]
      for (int i = 0; i < size; ++i) {
 801331a:	3301      	adds	r3, #1
 801331c:	e7f5      	b.n	801330a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x322>
    if ((mixed_type_int8_uint8 && zero_point_diff == -128) ||
 801331e:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8013320:	42a5      	cmp	r5, r4
 8013322:	f77f af04 	ble.w	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 8013326:	f919 0004 	ldrsb.w	r0, [r9, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 801332a:	4652      	mov	r2, sl
 801332c:	4641      	mov	r1, r8
 801332e:	1bc0      	subs	r0, r0, r7
 8013330:	f7f4 feca 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 8013334:	4458      	add	r0, fp
    output_data[i] = static_cast<output_type>(clamped_output);
 8013336:	f380 0008 	usat	r0, #8, r0
 801333a:	5530      	strb	r0, [r6, r4]
  for (int i = 0; i < size; ++i) {
 801333c:	3401      	adds	r4, #1
 801333e:	e7ef      	b.n	8013320 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x338>
 8013340:	6833      	ldr	r3, [r6, #0]
    output_data[i] = static_cast<output_type>(clamped_output);
 8013342:	f647 76ff 	movw	r6, #32767	; 0x7fff
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013346:	f8d7 a000 	ldr.w	sl, [r7]
        reference_ops::Requantize(
 801334a:	f8d4 b000 	ldr.w	fp, [r4]
 801334e:	69a7      	ldr	r7, [r4, #24]
  return reinterpret_cast<T*>(tensor->data.raw);
 8013350:	9300      	str	r3, [sp, #0]
 8013352:	4b40      	ldr	r3, [pc, #256]	; (8013454 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x46c>)
            data->requantize_output_multiplier, data->requantize_output_shift,
 8013354:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 8013358:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 801335a:	42a5      	cmp	r5, r4
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	f77f aee6 	ble.w	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 8013362:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8013366:	464a      	mov	r2, r9
 8013368:	4641      	mov	r1, r8
 801336a:	1bc0      	subs	r0, r0, r7
 801336c:	f7f4 feac 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
    output_data[i] = static_cast<output_type>(clamped_output);
 8013370:	9b01      	ldr	r3, [sp, #4]
                                      effective_scale_shift) +
 8013372:	4458      	add	r0, fp
    output_data[i] = static_cast<output_type>(clamped_output);
 8013374:	9a00      	ldr	r2, [sp, #0]
 8013376:	4298      	cmp	r0, r3
 8013378:	bfb8      	it	lt
 801337a:	4618      	movlt	r0, r3
 801337c:	42b0      	cmp	r0, r6
 801337e:	bfa8      	it	ge
 8013380:	4630      	movge	r0, r6
 8013382:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
  for (int i = 0; i < size; ++i) {
 8013386:	3401      	adds	r4, #1
 8013388:	e7e7      	b.n	801335a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x372>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801338a:	f8d7 a000 	ldr.w	sl, [r7]
        reference_ops::Requantize(
 801338e:	f8d4 b000 	ldr.w	fp, [r4]
 8013392:	69a7      	ldr	r7, [r4, #24]
  return reinterpret_cast<T*>(tensor->data.raw);
 8013394:	6836      	ldr	r6, [r6, #0]
            data->requantize_output_multiplier, data->requantize_output_shift,
 8013396:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 801339a:	2400      	movs	r4, #0
 801339c:	42a5      	cmp	r5, r4
 801339e:	f77f aec6 	ble.w	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 80133a2:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 80133a6:	464a      	mov	r2, r9
 80133a8:	4641      	mov	r1, r8
 80133aa:	1bc0      	subs	r0, r0, r7
 80133ac:	f7f4 fe8c 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 80133b0:	4458      	add	r0, fp
    output_data[i] = static_cast<output_type>(clamped_output);
 80133b2:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
 80133b6:	3401      	adds	r4, #1
 80133b8:	e7f0      	b.n	801339c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3b4>
  } else if (input->type == kTfLiteUInt8) {
 80133ba:	2d03      	cmp	r5, #3
 80133bc:	d148      	bne.n	8013450 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x468>
    size_t size = ElementCount(*input->dims);
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7f7 fce8 	bl	800ad94 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 80133c4:	7a33      	ldrb	r3, [r6, #8]
    size_t size = ElementCount(*input->dims);
 80133c6:	4682      	mov	sl, r0
    switch (output->type) {
 80133c8:	2b09      	cmp	r3, #9
 80133ca:	d133      	bne.n	8013434 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80133cc:	f8d7 b000 	ldr.w	fp, [r7]
        reference_ops::Requantize(
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	69a7      	ldr	r7, [r4, #24]
  return reinterpret_cast<T*>(tensor->data.raw);
 80133d4:	6835      	ldr	r5, [r6, #0]
            data->requantize_output_multiplier, data->requantize_output_shift,
 80133d6:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 80133da:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80133de:	d110      	bne.n	8013402 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x41a>
 80133e0:	f1b9 0f01 	cmp.w	r9, #1
 80133e4:	d10d      	bne.n	8013402 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x41a>
    const int32_t zero_point_diff = input_zeropoint - output_zeropoint;
 80133e6:	1afa      	subs	r2, r7, r3
    if ((mixed_type_int8_uint8 && zero_point_diff == -128) ||
 80133e8:	2a80      	cmp	r2, #128	; 0x80
 80133ea:	d10a      	bne.n	8013402 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x41a>
      for (int i = 0; i < size; ++i) {
 80133ec:	2300      	movs	r3, #0
 80133ee:	459a      	cmp	sl, r3
 80133f0:	f77f ae9d 	ble.w	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
        output_data[i] = input_data[i] ^ 0x80;
 80133f4:	f81b 2003 	ldrb.w	r2, [fp, r3]
 80133f8:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 80133fc:	54ea      	strb	r2, [r5, r3]
      for (int i = 0; i < size; ++i) {
 80133fe:	3301      	adds	r3, #1
 8013400:	e7f5      	b.n	80133ee <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x406>
    if ((mixed_type_int8_uint8 && zero_point_diff == -128) ||
 8013402:	2400      	movs	r4, #0
    output_data[i] = static_cast<output_type>(clamped_output);
 8013404:	f06f 067f 	mvn.w	r6, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
 8013408:	45a2      	cmp	sl, r4
 801340a:	9300      	str	r3, [sp, #0]
 801340c:	f77f ae8f 	ble.w	801312e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
    const int32_t input = input_data[i] - input_zeropoint;
 8013410:	f81b 0004 	ldrb.w	r0, [fp, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 8013414:	464a      	mov	r2, r9
 8013416:	4641      	mov	r1, r8
 8013418:	1bc0      	subs	r0, r0, r7
 801341a:	f7f4 fe55 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 801341e:	9b00      	ldr	r3, [sp, #0]
 8013420:	4418      	add	r0, r3
    output_data[i] = static_cast<output_type>(clamped_output);
 8013422:	42b0      	cmp	r0, r6
 8013424:	bfb8      	it	lt
 8013426:	4630      	movlt	r0, r6
 8013428:	287f      	cmp	r0, #127	; 0x7f
 801342a:	bfa8      	it	ge
 801342c:	207f      	movge	r0, #127	; 0x7f
 801342e:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
 8013430:	3401      	adds	r4, #1
 8013432:	e7e9      	b.n	8013408 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x420>
        MicroPrintf("Input %s, output %s not supported.",
 8013434:	7a38      	ldrb	r0, [r7, #8]
    MicroPrintf("Input %s, output %s not supported.",
 8013436:	f7f4 fe3b 	bl	80080b0 <TfLiteTypeGetName>
 801343a:	4604      	mov	r4, r0
 801343c:	7a30      	ldrb	r0, [r6, #8]
 801343e:	f7f4 fe37 	bl	80080b0 <TfLiteTypeGetName>
 8013442:	4621      	mov	r1, r4
 8013444:	4602      	mov	r2, r0
 8013446:	4804      	ldr	r0, [pc, #16]	; (8013458 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x470>)
 8013448:	f7f7 fc36 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 801344c:	2001      	movs	r0, #1
 801344e:	e66f      	b.n	8013130 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x148>
    MicroPrintf("Input %s, output %s not supported.",
 8013450:	4628      	mov	r0, r5
 8013452:	e7f0      	b.n	8013436 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x44e>
 8013454:	ffff8000 	.word	0xffff8000
 8013458:	080fc9a4 	.word	0x080fc9a4

0801345c <_ZN6tflite10InitReduceEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {

void* InitReduce(TfLiteContext* context, const char* buffer, size_t length) {
  return context->AllocatePersistentBuffer(context, sizeof(OpDataReduce));
 801345c:	2128      	movs	r1, #40	; 0x28
 801345e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013460:	4718      	bx	r3

08013462 <_ZN6tflite16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode>:
                          static_cast<OpDataReduce*>(node->user_data));
}

TfLiteStatus PrepareMeanOrSum(TfLiteContext* context, TfLiteNode* node) {
  return PrepareMeanOrSumHelper(context, node,
                                static_cast<OpDataReduce*>(node->user_data));
 8013462:	690a      	ldr	r2, [r1, #16]
 8013464:	f000 b9ea 	b.w	801383c <_ZN6tflite22PrepareMeanOrSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE>

08013468 <_ZN6tflite8EvalMeanEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
  return EvalMeanHelper(context, node,
                        static_cast<OpDataReduce*>(node->user_data));
 8013468:	690a      	ldr	r2, [r1, #16]
 801346a:	f000 bd43 	b.w	8013ef4 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE>
	...

08013470 <_ZN6tflite13Register_MEANEv>:
  return EvalSumHelper(context, node,
                       static_cast<OpDataReduce*>(node->user_data));
}

TFLMRegistration Register_MEAN() {
  return tflite::micro::RegisterOp(InitReduce, PrepareMeanOrSum, EvalMean);
 8013470:	2300      	movs	r3, #0
 8013472:	4a06      	ldr	r2, [pc, #24]	; (801348c <_ZN6tflite13Register_MEANEv+0x1c>)
TFLMRegistration Register_MEAN() {
 8013474:	b513      	push	{r0, r1, r4, lr}
 8013476:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(InitReduce, PrepareMeanOrSum, EvalMean);
 8013478:	4905      	ldr	r1, [pc, #20]	; (8013490 <_ZN6tflite13Register_MEANEv+0x20>)
 801347a:	e9cd 3300 	strd	r3, r3, [sp]
 801347e:	4b05      	ldr	r3, [pc, #20]	; (8013494 <_ZN6tflite13Register_MEANEv+0x24>)
 8013480:	f7fc fbf8 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 8013484:	4620      	mov	r0, r4
 8013486:	b002      	add	sp, #8
 8013488:	bd10      	pop	{r4, pc}
 801348a:	bf00      	nop
 801348c:	08013463 	.word	0x08013463
 8013490:	0801345d 	.word	0x0801345d
 8013494:	08013469 	.word	0x08013469

08013498 <_ZZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_ENUlffE_4_FUNEff>:
inline bool ReduceSumImpl(const In* input_data, const int* input_dims,
                          const int* output_dims, const int input_num_dims,
                          const int output_num_dims, const int* axis,
                          const int num_axis, int* input_iter,
                          Out* output_data) {
  auto reducer = [](const Out current, const In in) -> Out {
 8013498:	ee30 0a20 	vadd.f32	s0, s0, s1
 801349c:	4770      	bx	lr

0801349e <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8>:
inline bool ResolveAxis(const int num_dims, const int* axis,
 801349e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134a2:	468c      	mov	ip, r1
 80134a4:	4690      	mov	r8, r2
 80134a6:	4699      	mov	r9, r3
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80134a8:	2400      	movs	r4, #0
 80134aa:	2500      	movs	r5, #0
inline bool ResolveAxis(const int num_dims, const int* axis,
 80134ac:	e9dd 2708 	ldrd	r2, r7, [sp, #32]
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80134b0:	4544      	cmp	r4, r8
 80134b2:	eb75 0309 	sbcs.w	r3, r5, r9
 80134b6:	da1e      	bge.n	80134f6 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8+0x58>
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 80134b8:	00a3      	lsls	r3, r4, #2
 80134ba:	f85c 3003 	ldr.w	r3, [ip, r3]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	da01      	bge.n	80134c6 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8+0x28>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 80134c2:	181b      	adds	r3, r3, r0
 80134c4:	d40c      	bmi.n	80134e0 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8+0x42>
 80134c6:	4298      	cmp	r0, r3
 80134c8:	dd0a      	ble.n	80134e0 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8+0x42>
    for (int j = 0; j < *out_num_axis; ++j) {
 80134ca:	f8d7 e000 	ldr.w	lr, [r7]
 80134ce:	2600      	movs	r6, #0
 80134d0:	45b6      	cmp	lr, r6
 80134d2:	dd07      	ble.n	80134e4 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8+0x46>
      if (out_axis[j] == current) {
 80134d4:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 80134d8:	4299      	cmp	r1, r3
 80134da:	d008      	beq.n	80134ee <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8+0x50>
    for (int j = 0; j < *out_num_axis; ++j) {
 80134dc:	3601      	adds	r6, #1
 80134de:	e7f7      	b.n	80134d0 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8+0x32>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 80134e0:	f003 fc30 	bl	8016d44 <abort>
      out_axis[*out_num_axis] = current;
 80134e4:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      *out_num_axis += 1;
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	3301      	adds	r3, #1
 80134ec:	603b      	str	r3, [r7, #0]
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80134ee:	3401      	adds	r4, #1
 80134f0:	f145 0500 	adc.w	r5, r5, #0
 80134f4:	e7dc      	b.n	80134b0 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8+0x12>
}
 80134f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080134fa <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12>:
inline bool NextIndex(const int num_dims, const int* dims, IndexType* current) {
 80134fa:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(dims != nullptr);
 80134fc:	b909      	cbnz	r1, 8013502 <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12+0x8>
 80134fe:	f003 fc21 	bl	8016d44 <abort>
  TFLITE_DCHECK(current != nullptr);
 8013502:	2a00      	cmp	r2, #0
 8013504:	d0fb      	beq.n	80134fe <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12+0x4>
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8013506:	1e44      	subs	r4, r0, #1
 8013508:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801350c:	2500      	movs	r5, #0
 801350e:	2c00      	cmp	r4, #0
 8013510:	db11      	blt.n	8013536 <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12+0x3c>
    IndexType current_val = current[idx] + carry;
 8013512:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8013516:	1f10      	subs	r0, r2, #4
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8013518:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    IndexType current_val = current[idx] + carry;
 801351c:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 801351e:	4293      	cmp	r3, r2
 8013520:	dced      	bgt.n	80134fe <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12+0x4>
    if (dims[idx] == current_val) {
 8013522:	d103      	bne.n	801352c <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12+0x32>
 8013524:	4602      	mov	r2, r0
      current[idx] = 0;
 8013526:	6005      	str	r5, [r0, #0]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8013528:	3c01      	subs	r4, #1
 801352a:	e7f0      	b.n	801350e <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12+0x14>
      current[idx] = current_val;
 801352c:	6003      	str	r3, [r0, #0]
      carry = 0;
 801352e:	2000      	movs	r0, #0
}
 8013530:	f080 0001 	eor.w	r0, r0, #1
 8013534:	bd38      	pop	{r3, r4, r5, pc}
  int carry = 1;
 8013536:	2001      	movs	r0, #1
 8013538:	e7fa      	b.n	8013530 <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12+0x36>

0801353a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>:
                                  const int* axis) {
 801353a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801353c:	469c      	mov	ip, r3
 801353e:	9f06      	ldr	r7, [sp, #24]
  if (num_dims == 0) {
 8013540:	4606      	mov	r6, r0
 8013542:	b1d0      	cbz	r0, 801357a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x40>
  TFLITE_DCHECK(dims != nullptr);
 8013544:	b909      	cbnz	r1, 801354a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x10>
 8013546:	f003 fbfd 	bl	8016d44 <abort>
  TFLITE_DCHECK(index != nullptr);
 801354a:	2a00      	cmp	r2, #0
 801354c:	d0fb      	beq.n	8013546 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xc>
  for (int idx = 0; idx < num_dims; ++idx) {
 801354e:	2400      	movs	r4, #0
  size_t offset = 0;
 8013550:	4620      	mov	r0, r4
  for (int idx = 0; idx < num_dims; ++idx) {
 8013552:	42a6      	cmp	r6, r4
 8013554:	dd11      	ble.n	801357a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x40>
    if (axis != nullptr) {
 8013556:	b147      	cbz	r7, 801356a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x30>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 8013558:	2500      	movs	r5, #0
 801355a:	45ac      	cmp	ip, r5
 801355c:	dd05      	ble.n	801356a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x30>
        if (idx == axis[axis_idx]) {
 801355e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8013562:	429c      	cmp	r4, r3
 8013564:	d007      	beq.n	8013576 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3c>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 8013566:	3501      	adds	r5, #1
 8013568:	e7f7      	b.n	801355a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x20>
      offset = offset * static_cast<size_t>(dims[idx]) +
 801356a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 801356e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 8013572:	fb03 5000 	mla	r0, r3, r0, r5
  for (int idx = 0; idx < num_dims; ++idx) {
 8013576:	3401      	adds	r4, #1
 8013578:	e7eb      	b.n	8013552 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x18>
}
 801357a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801357c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf>:

inline void Mean(const tflite::MeanParams& op_params,
                 const RuntimeShape& unextended_input_shape,
                 const float* input_data,
                 const RuntimeShape& unextended_output_shape,
                 float* output_data) {
 801357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ruy::profiler::ScopeLabel label("Mean4D");

  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8013580:	680d      	ldr	r5, [r1, #0]
                 float* output_data) {
 8013582:	4604      	mov	r4, r0
 8013584:	4693      	mov	fp, r2
 8013586:	461e      	mov	r6, r3
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8013588:	2d04      	cmp	r5, #4
                 float* output_data) {
 801358a:	ed2d 8b02 	vpush	{d8}
 801358e:	b093      	sub	sp, #76	; 0x4c
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8013590:	d001      	beq.n	8013596 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a>
 8013592:	f003 fbd7 	bl	8016d44 <abort>
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2b04      	cmp	r3, #4
 801359a:	dcfa      	bgt.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
 801359c:	460a      	mov	r2, r1
 801359e:	2301      	movs	r3, #1
 80135a0:	4629      	mov	r1, r5
 80135a2:	a804      	add	r0, sp, #16
 80135a4:	f7f4 ff80 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 80135a8:	2301      	movs	r3, #1
 80135aa:	4632      	mov	r2, r6
 80135ac:	4629      	mov	r1, r5
 80135ae:	a80b      	add	r0, sp, #44	; 0x2c
 80135b0:	f7f4 ff7a 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    TFLITE_DCHECK_LT(i, size_);
 80135b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	ddeb      	ble.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
 80135ba:	2b01      	cmp	r3, #1
    return dims_[i];
 80135bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
 80135c0:	d0e7      	beq.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
 80135c2:	2b02      	cmp	r3, #2
    return dims_[i];
 80135c4:	990d      	ldr	r1, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
 80135c6:	d0e4      	beq.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
 80135c8:	2b03      	cmp	r3, #3
    return dims_[i];
 80135ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
 80135cc:	d0e1      	beq.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
    return dims_[i];
 80135ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135d0:	9303      	str	r3, [sp, #12]
    TFLITE_DCHECK_LT(i, size_);
 80135d2:	9b04      	ldr	r3, [sp, #16]
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	dddc      	ble.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
 80135d8:	2b02      	cmp	r3, #2
    return dims_[i];
 80135da:	f8dd 8018 	ldr.w	r8, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
 80135de:	d0d8      	beq.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
  const int output_depth = output_shape.Dims(3);

  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 80135e0:	f994 3000 	ldrsb.w	r3, [r4]
    return dims_[i];
 80135e4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80135e8:	2b02      	cmp	r3, #2
 80135ea:	d1d2      	bne.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 80135ec:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	d129      	bne.n	8013648 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xcc>
 80135f4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80135f8:	2b02      	cmp	r3, #2
 80135fa:	d1ca      	bne.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
 80135fc:	2901      	cmp	r1, #1
 80135fe:	d1c8      	bne.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
  TFLITE_CHECK_EQ(output_width, 1);
 8013600:	2a01      	cmp	r2, #1
 8013602:	d1c6      	bne.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
        for (int in_w = 0; in_w < input_width; ++in_w) {
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
        }
      }
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
          value / (input_width * input_height);
 8013604:	fb09 f308 	mul.w	r3, r9, r8
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8013608:	2400      	movs	r4, #0
          value / (input_width * input_height);
 801360a:	ee08 3a90 	vmov	s17, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 801360e:	4554      	cmp	r4, sl
 8013610:	da36      	bge.n	8013680 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8013612:	2500      	movs	r5, #0
 8013614:	9b03      	ldr	r3, [sp, #12]
 8013616:	429d      	cmp	r5, r3
 8013618:	da30      	bge.n	801367c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x100>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 801361a:	2600      	movs	r6, #0
      float value = 0;
 801361c:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 801368c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x110>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8013620:	4546      	cmp	r6, r8
 8013622:	da19      	bge.n	8013658 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xdc>
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8013624:	2700      	movs	r7, #0
 8013626:	454f      	cmp	r7, r9
 8013628:	da14      	bge.n	8013654 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd8>
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 801362a:	463b      	mov	r3, r7
 801362c:	9500      	str	r5, [sp, #0]
 801362e:	4632      	mov	r2, r6
 8013630:	4621      	mov	r1, r4
 8013632:	a804      	add	r0, sp, #16
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8013634:	3701      	adds	r7, #1
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 8013636:	f7f8 fd75 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801363a:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
 801363e:	edd0 7a00 	vldr	s15, [r0]
 8013642:	ee38 8a27 	vadd.f32	s16, s16, s15
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8013646:	e7ee      	b.n	8013626 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8013648:	2b02      	cmp	r3, #2
 801364a:	d1a2      	bne.n	8013592 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16>
 801364c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013650:	2b01      	cmp	r3, #1
 8013652:	e7d2      	b.n	80135fa <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8013654:	3601      	adds	r6, #1
 8013656:	e7e3      	b.n	8013620 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xa4>
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 8013658:	2300      	movs	r3, #0
 801365a:	9500      	str	r5, [sp, #0]
 801365c:	4621      	mov	r1, r4
 801365e:	a80b      	add	r0, sp, #44	; 0x2c
 8013660:	461a      	mov	r2, r3
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8013662:	3501      	adds	r5, #1
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 8013664:	f7f8 fd5e 	bl	800c124 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          value / (input_width * input_height);
 8013668:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 801366c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
          value / (input_width * input_height);
 801366e:	eec8 7a07 	vdiv.f32	s15, s16, s14
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 8013672:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013676:	edc0 7a00 	vstr	s15, [r0]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 801367a:	e7cb      	b.n	8013614 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 801367c:	3401      	adds	r4, #1
 801367e:	e7c6      	b.n	801360e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x92>
    }
  }
}
 8013680:	b013      	add	sp, #76	; 0x4c
 8013682:	ecbd 8b02 	vpop	{d8}
 8013686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368a:	bf00      	nop
 801368c:	00000000 	.word	0x00000000

08013690 <_ZN6tflite11NumElementsEPKii>:
inline int64_t NumElements(const int* dims, int num_dims) {
 8013690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013694:	4682      	mov	sl, r0
 8013696:	468b      	mov	fp, r1
  for (int i = 0; i < num_dims; ++i) {
 8013698:	2600      	movs	r6, #0
  int64_t count = 1;
 801369a:	2401      	movs	r4, #1
 801369c:	2500      	movs	r5, #0
  for (int i = 0; i < num_dims; ++i) {
 801369e:	455e      	cmp	r6, fp
 80136a0:	da21      	bge.n	80136e6 <_ZN6tflite11NumElementsEPKii+0x56>
    if (count <= 0) {
 80136a2:	2c01      	cmp	r4, #1
 80136a4:	f175 0300 	sbcs.w	r3, r5, #0
 80136a8:	db1d      	blt.n	80136e6 <_ZN6tflite11NumElementsEPKii+0x56>
    TF_LITE_ASSERT(dims[i] < std::numeric_limits<int>::max() / count);
 80136aa:	f85a 7026 	ldr.w	r7, [sl, r6, lsl #2]
 80136ae:	462b      	mov	r3, r5
 80136b0:	4622      	mov	r2, r4
 80136b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80136b6:	2100      	movs	r1, #0
 80136b8:	ea4f 79e7 	mov.w	r9, r7, asr #31
 80136bc:	f7ed fad0 	bl	8000c60 <__aeabi_ldivmod>
 80136c0:	4287      	cmp	r7, r0
 80136c2:	eb79 0301 	sbcs.w	r3, r9, r1
 80136c6:	db05      	blt.n	80136d4 <_ZN6tflite11NumElementsEPKii+0x44>
 80136c8:	4909      	ldr	r1, [pc, #36]	; (80136f0 <_ZN6tflite11NumElementsEPKii+0x60>)
 80136ca:	480a      	ldr	r0, [pc, #40]	; (80136f4 <_ZN6tflite11NumElementsEPKii+0x64>)
 80136cc:	f7f7 faf4 	bl	800acb8 <_Z11MicroPrintfPKcz>
 80136d0:	f003 fb38 	bl	8016d44 <abort>
    count *= dims[i];
 80136d4:	fb04 f309 	mul.w	r3, r4, r9
  for (int i = 0; i < num_dims; ++i) {
 80136d8:	3601      	adds	r6, #1
    count *= dims[i];
 80136da:	fb07 3305 	mla	r3, r7, r5, r3
 80136de:	fba4 4507 	umull	r4, r5, r4, r7
 80136e2:	441d      	add	r5, r3
  for (int i = 0; i < num_dims; ++i) {
 80136e4:	e7db      	b.n	801369e <_ZN6tflite11NumElementsEPKii+0xe>
}
 80136e6:	4620      	mov	r0, r4
 80136e8:	4629      	mov	r1, r5
 80136ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ee:	bf00      	nop
 80136f0:	080fbae8 	.word	0x080fbae8
 80136f4:	080fc3f1 	.word	0x080fc3f1

080136f8 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi>:

const int kMaxNumberOfAxis = 5;
const int kMaxNumberOfReducedAxis = 2;

TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node,
                           int32_t* multiplier, int* shift) {
 80136f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);
 80136fc:	68c5      	ldr	r5, [r0, #12]
                           int32_t* multiplier, int* shift) {
 80136fe:	b087      	sub	sp, #28
 8013700:	4689      	mov	r9, r1
 8013702:	4680      	mov	r8, r0
 8013704:	9205      	str	r2, [sp, #20]

  // Inputs Tensor (dtype depends on quantization):
  // [0] = Input
  // [1] = Axis
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8013706:	4628      	mov	r0, r5
 8013708:	2200      	movs	r2, #0
                           int32_t* multiplier, int* shift) {
 801370a:	469b      	mov	fp, r3
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 801370c:	f7f6 fcb2 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>

  // Outputs Tensor (dtype depends on quantization):
  // [0] = Output

  // Validate number of inputs and outputs
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
 8013710:	f8d9 3000 	ldr.w	r3, [r9]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8013714:	4606      	mov	r6, r0
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
 8013716:	f8d3 a000 	ldr.w	sl, [r3]
 801371a:	f1ba 0f02 	cmp.w	sl, #2
 801371e:	d011      	beq.n	8013744 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x4c>
 8013720:	4b3b      	ldr	r3, [pc, #236]	; (8013810 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x118>)
 8013722:	2202      	movs	r2, #2
 8013724:	9301      	str	r3, [sp, #4]
 8013726:	4b3b      	ldr	r3, [pc, #236]	; (8013814 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x11c>)
 8013728:	e9cd a202 	strd	sl, r2, [sp, #8]
 801372c:	9300      	str	r3, [sp, #0]
 801372e:	232f      	movs	r3, #47	; 0x2f
 8013730:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8013734:	4a38      	ldr	r2, [pc, #224]	; (8013818 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x120>)
 8013736:	4640      	mov	r0, r8
 8013738:	4938      	ldr	r1, [pc, #224]	; (801381c <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x124>)
 801373a:	47a0      	blx	r4
 801373c:	2001      	movs	r0, #1
    micro_context->DeallocateTempTfLiteTensor(output);
  }
  micro_context->DeallocateTempTfLiteTensor(axis);
  micro_context->DeallocateTempTfLiteTensor(input);
  return kTfLiteOk;
}
 801373e:	b007      	add	sp, #28
 8013740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8013744:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013748:	6814      	ldr	r4, [r2, #0]
 801374a:	2c01      	cmp	r4, #1
 801374c:	d00a      	beq.n	8013764 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x6c>
 801374e:	4b34      	ldr	r3, [pc, #208]	; (8013820 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x128>)
 8013750:	2501      	movs	r5, #1
 8013752:	9301      	str	r3, [sp, #4]
 8013754:	4b33      	ldr	r3, [pc, #204]	; (8013824 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x12c>)
 8013756:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801375a:	9300      	str	r3, [sp, #0]
 801375c:	2330      	movs	r3, #48	; 0x30
 801375e:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8013762:	e7e7      	b.n	8013734 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x3c>
  TfLiteTensor* axis = micro_context->AllocateTempInputTensor(node, 1);
 8013764:	4622      	mov	r2, r4
 8013766:	4649      	mov	r1, r9
 8013768:	4628      	mov	r0, r5
 801376a:	f7f6 fc83 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, axis != nullptr);
 801376e:	4607      	mov	r7, r0
 8013770:	b948      	cbnz	r0, 8013786 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x8e>
 8013772:	4b2d      	ldr	r3, [pc, #180]	; (8013828 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x130>)
 8013774:	4640      	mov	r0, r8
 8013776:	4a28      	ldr	r2, [pc, #160]	; (8013818 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x120>)
 8013778:	9300      	str	r3, [sp, #0]
 801377a:	2334      	movs	r3, #52	; 0x34
 801377c:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8013780:	492a      	ldr	r1, [pc, #168]	; (801382c <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x134>)
 8013782:	47a8      	blx	r5
 8013784:	e7da      	b.n	801373c <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x44>
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
 8013786:	7800      	ldrb	r0, [r0, #0]
 8013788:	2802      	cmp	r0, #2
 801378a:	d013      	beq.n	80137b4 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0xbc>
 801378c:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8013790:	f7f4 fc8e 	bl	80080b0 <TfLiteTypeGetName>
 8013794:	4606      	mov	r6, r0
 8013796:	4650      	mov	r0, sl
 8013798:	f7f4 fc8a 	bl	80080b0 <TfLiteTypeGetName>
 801379c:	4b24      	ldr	r3, [pc, #144]	; (8013830 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x138>)
 801379e:	4a1e      	ldr	r2, [pc, #120]	; (8013818 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x120>)
 80137a0:	9301      	str	r3, [sp, #4]
 80137a2:	4b24      	ldr	r3, [pc, #144]	; (8013834 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x13c>)
 80137a4:	4924      	ldr	r1, [pc, #144]	; (8013838 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x140>)
 80137a6:	9300      	str	r3, [sp, #0]
 80137a8:	2335      	movs	r3, #53	; 0x35
 80137aa:	e9cd 6002 	strd	r6, r0, [sp, #8]
 80137ae:	4640      	mov	r0, r8
 80137b0:	47a8      	blx	r5
 80137b2:	e7c3      	b.n	801373c <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x44>
  if (input->type == kTfLiteInt8) {
 80137b4:	7833      	ldrb	r3, [r6, #0]
 80137b6:	2b09      	cmp	r3, #9
 80137b8:	d11e      	bne.n	80137f8 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x100>
    TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80137ba:	2200      	movs	r2, #0
 80137bc:	4649      	mov	r1, r9
 80137be:	4628      	mov	r0, r5
 80137c0:	f7f6 fc6d 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 80137c4:	4604      	mov	r4, r0
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80137c6:	68f0      	ldr	r0, [r6, #12]
 80137c8:	f7ec fee0 	bl	800058c <__aeabi_f2d>
 80137cc:	4680      	mov	r8, r0
 80137ce:	4689      	mov	r9, r1
                                   static_cast<double>(output->params.scale);
 80137d0:	68e0      	ldr	r0, [r4, #12]
 80137d2:	f7ec fedb 	bl	800058c <__aeabi_f2d>
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80137d6:	460b      	mov	r3, r1
 80137d8:	4602      	mov	r2, r0
 80137da:	4649      	mov	r1, r9
 80137dc:	4640      	mov	r0, r8
 80137de:	f7ed f857 	bl	8000890 <__aeabi_ddiv>
 80137e2:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, multiplier, shift);
 80137e6:	4659      	mov	r1, fp
 80137e8:	9805      	ldr	r0, [sp, #20]
 80137ea:	f7f4 fd3d 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    micro_context->DeallocateTempTfLiteTensor(output);
 80137ee:	682b      	ldr	r3, [r5, #0]
 80137f0:	4621      	mov	r1, r4
 80137f2:	4628      	mov	r0, r5
 80137f4:	699b      	ldr	r3, [r3, #24]
 80137f6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(axis);
 80137f8:	682b      	ldr	r3, [r5, #0]
 80137fa:	4639      	mov	r1, r7
 80137fc:	4628      	mov	r0, r5
 80137fe:	699b      	ldr	r3, [r3, #24]
 8013800:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8013802:	682b      	ldr	r3, [r5, #0]
 8013804:	4628      	mov	r0, r5
 8013806:	4631      	mov	r1, r6
 8013808:	699b      	ldr	r3, [r3, #24]
 801380a:	4798      	blx	r3
  return kTfLiteOk;
 801380c:	2000      	movs	r0, #0
 801380e:	e796      	b.n	801373e <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi+0x46>
 8013810:	080fc778 	.word	0x080fc778
 8013814:	080fcb98 	.word	0x080fcb98
 8013818:	080fcb5b 	.word	0x080fcb5b
 801381c:	080f982c 	.word	0x080f982c
 8013820:	080fca44 	.word	0x080fca44
 8013824:	080fc12b 	.word	0x080fc12b
 8013828:	080fcbab 	.word	0x080fcbab
 801382c:	080f93a5 	.word	0x080f93a5
 8013830:	080fcbbb 	.word	0x080fcbbb
 8013834:	080fcbc8 	.word	0x080fcbc8
 8013838:	080fc37f 	.word	0x080fc37f

0801383c <_ZN6tflite22PrepareMeanOrSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE>:
  micro_context->DeallocateTempTfLiteTensor(axis);
  return kTfLiteOk;
}

TfLiteStatus PrepareMeanOrSumHelper(TfLiteContext* context, TfLiteNode* node,
                                    OpDataReduce* op_data) {
 801383c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);
 8013840:	68c4      	ldr	r4, [r0, #12]
                                    OpDataReduce* op_data) {
 8013842:	4689      	mov	r9, r1
 8013844:	4615      	mov	r5, r2
 8013846:	4680      	mov	r8, r0
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8013848:	2200      	movs	r2, #0
 801384a:	4620      	mov	r0, r4
 801384c:	f7f6 fc12 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 8013850:	2200      	movs	r2, #0
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8013852:	4606      	mov	r6, r0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 8013854:	4649      	mov	r1, r9
 8013856:	4620      	mov	r0, r4
 8013858:	f105 0b04 	add.w	fp, r5, #4
 801385c:	f7f6 fc1f 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TfLiteTensor* axis = micro_context->AllocateTempInputTensor(node, 1);
 8013860:	2201      	movs	r2, #1
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 8013862:	4607      	mov	r7, r0
  TfLiteTensor* axis = micro_context->AllocateTempInputTensor(node, 1);
 8013864:	4649      	mov	r1, r9
 8013866:	4620      	mov	r0, r4
 8013868:	f7f6 fc04 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801386c:	7833      	ldrb	r3, [r6, #0]
  TfLiteTensor* axis = micro_context->AllocateTempInputTensor(node, 1);
 801386e:	4682      	mov	sl, r0
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8013870:	2b09      	cmp	r3, #9
 8013872:	d001      	beq.n	8013878 <_ZN6tflite22PrepareMeanOrSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x3c>
 8013874:	2b07      	cmp	r3, #7
 8013876:	d113      	bne.n	80138a0 <_ZN6tflite22PrepareMeanOrSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x64>
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8013878:	68f0      	ldr	r0, [r6, #12]
 801387a:	f7ec fe87 	bl	800058c <__aeabi_f2d>
 801387e:	e9cd 0100 	strd	r0, r1, [sp]
                                   static_cast<double>(output->params.scale);
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	f7ec fe82 	bl	800058c <__aeabi_f2d>
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8013888:	4602      	mov	r2, r0
 801388a:	460b      	mov	r3, r1
 801388c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013890:	f7ec fffe 	bl	8000890 <__aeabi_ddiv>
 8013894:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, &op_data->multiplier, &op_data->shift);
 8013898:	4659      	mov	r1, fp
 801389a:	4628      	mov	r0, r5
 801389c:	f7f4 fce4 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  }

  int output_size = NumElements(output);
 80138a0:	68b8      	ldr	r0, [r7, #8]
  return NumElements(dims->data, dims->size);
 80138a2:	6801      	ldr	r1, [r0, #0]
 80138a4:	3004      	adds	r0, #4
 80138a6:	f7ff fef3 	bl	8013690 <_ZN6tflite11NumElementsEPKii>
 80138aa:	9000      	str	r0, [sp, #0]
  op_data->num_axis = NumElements(axis);
 80138ac:	f8da 0008 	ldr.w	r0, [sl, #8]
 80138b0:	6801      	ldr	r1, [r0, #0]
 80138b2:	3004      	adds	r0, #4
 80138b4:	f7ff feec 	bl	8013690 <_ZN6tflite11NumElementsEPKii>

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 80138b8:	7833      	ldrb	r3, [r6, #0]
  op_data->num_axis = NumElements(axis);
 80138ba:	6268      	str	r0, [r5, #36]	; 0x24
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 80138bc:	2b09      	cmp	r3, #9
 80138be:	d001      	beq.n	80138c4 <_ZN6tflite22PrepareMeanOrSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x88>
 80138c0:	2b07      	cmp	r3, #7
 80138c2:	d10f      	bne.n	80138e4 <_ZN6tflite22PrepareMeanOrSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xa8>
    context->RequestScratchBufferInArena(context, output_size * sizeof(int32_t),
 80138c4:	9900      	ldr	r1, [sp, #0]
 80138c6:	f105 0208 	add.w	r2, r5, #8
 80138ca:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80138ce:	4640      	mov	r0, r8
 80138d0:	0089      	lsls	r1, r1, #2
 80138d2:	4798      	blx	r3
                                         &op_data->temp_buffer_idx);
    op_data->input_zp = input->params.zero_point;
 80138d4:	6933      	ldr	r3, [r6, #16]
 80138d6:	612b      	str	r3, [r5, #16]
    op_data->input_scale = input->params.scale;
 80138d8:	68f3      	ldr	r3, [r6, #12]
 80138da:	616b      	str	r3, [r5, #20]
    op_data->output_zp = output->params.zero_point;
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	61ab      	str	r3, [r5, #24]
    op_data->output_scale = output->params.scale;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	61eb      	str	r3, [r5, #28]
  }

  TF_LITE_ENSURE_OK(
 80138e4:	462a      	mov	r2, r5
 80138e6:	465b      	mov	r3, fp
 80138e8:	4649      	mov	r1, r9
 80138ea:	4640      	mov	r0, r8
 80138ec:	f7ff ff04 	bl	80136f8 <_ZN6tflite13PrepareSimpleEP13TfLiteContextP10TfLiteNodePlPi>
 80138f0:	4605      	mov	r5, r0
 80138f2:	b970      	cbnz	r0, 8013912 <_ZN6tflite22PrepareMeanOrSumHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xd6>
      context,
      PrepareSimple(context, node, &(op_data->multiplier), &(op_data->shift)));
  // TODO(b/144955155): Support uint8_t(b/144955155) and int8_t(b/144955018)
  micro_context->DeallocateTempTfLiteTensor(input);
 80138f4:	6823      	ldr	r3, [r4, #0]
 80138f6:	4631      	mov	r1, r6
 80138f8:	4620      	mov	r0, r4
 80138fa:	699b      	ldr	r3, [r3, #24]
 80138fc:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	4639      	mov	r1, r7
 8013902:	4620      	mov	r0, r4
 8013904:	699b      	ldr	r3, [r3, #24]
 8013906:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(axis);
 8013908:	6823      	ldr	r3, [r4, #0]
 801390a:	4651      	mov	r1, sl
 801390c:	4620      	mov	r0, r4
 801390e:	699b      	ldr	r3, [r3, #24]
 8013910:	4798      	blx	r3
  return kTfLiteOk;
}
 8013912:	4628      	mov	r0, r5
 8013914:	b003      	add	sp, #12
 8013916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801391a <_ZN6tflite11ResolveAxisEPKiiPNS_10MeanParamsE>:

void ResolveAxis(const int* axis_data, int axis_count,
                 tflite::MeanParams* op_params) {
 801391a:	b530      	push	{r4, r5, lr}
  int i = 0;
 801391c:	2300      	movs	r3, #0
 801391e:	1c94      	adds	r4, r2, #2
  for (; i < axis_count; ++i) {
 8013920:	428b      	cmp	r3, r1
 8013922:	db0a      	blt.n	801393a <_ZN6tflite11ResolveAxisEPKiiPNS_10MeanParamsE+0x20>
 8013924:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
  }
  for (; i < 4; ++i) {
    op_params->axis[i] = 1;
 8013928:	2401      	movs	r4, #1
  for (; i < 4; ++i) {
 801392a:	2b03      	cmp	r3, #3
 801392c:	f103 0001 	add.w	r0, r3, #1
 8013930:	dc09      	bgt.n	8013946 <_ZN6tflite11ResolveAxisEPKiiPNS_10MeanParamsE+0x2c>
    op_params->axis[i] = 1;
 8013932:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
  for (; i < 4; ++i) {
 8013936:	4603      	mov	r3, r0
 8013938:	e7f7      	b.n	801392a <_ZN6tflite11ResolveAxisEPKiiPNS_10MeanParamsE+0x10>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 801393a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  for (; i < axis_count; ++i) {
 801393e:	3301      	adds	r3, #1
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8013940:	f824 5b02 	strh.w	r5, [r4], #2
  for (; i < axis_count; ++i) {
 8013944:	e7ec      	b.n	8013920 <_ZN6tflite11ResolveAxisEPKiiPNS_10MeanParamsE+0x6>
  }
  op_params->axis_count = axis_count;
 8013946:	7011      	strb	r1, [r2, #0]
}
 8013948:	bd30      	pop	{r4, r5, pc}

0801394a <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801394a:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
 801394c:	b908      	cbnz	r0, 8013952 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
 801394e:	f003 f9f9 	bl	8016d44 <abort>
}
 8013952:	6800      	ldr	r0, [r0, #0]
 8013954:	bd08      	pop	{r3, pc}

08013956 <_ZZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlffE_clEff>:
  };
 8013956:	ee30 0a80 	vadd.f32	s0, s1, s0
 801395a:	4770      	bx	lr

0801395c <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_>:
inline bool Reduce(const In* input_data, const int* input_dims,
 801395c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013960:	461c      	mov	r4, r3
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8013962:	2300      	movs	r3, #0
inline bool Reduce(const In* input_data, const int* input_dims,
 8013964:	4682      	mov	sl, r0
 8013966:	4688      	mov	r8, r1
 8013968:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    input_iter[idx] = 0;
 801396a:	461a      	mov	r2, r3
  for (int idx = 0; idx < input_num_dims; ++idx) {
 801396c:	42a3      	cmp	r3, r4
 801396e:	db29      	blt.n	80139c4 <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x68>
    size_t input_offset =
 8013970:	2600      	movs	r6, #0
 8013972:	2300      	movs	r3, #0
 8013974:	462a      	mov	r2, r5
 8013976:	4641      	mov	r1, r8
 8013978:	9600      	str	r6, [sp, #0]
 801397a:	4620      	mov	r0, r4
 801397c:	f7ff fddd 	bl	801353a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 8013980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    size_t input_offset =
 8013982:	4681      	mov	r9, r0
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 8013984:	462a      	mov	r2, r5
 8013986:	9300      	str	r3, [sp, #0]
 8013988:	4641      	mov	r1, r8
 801398a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801398c:	4620      	mov	r0, r4
 801398e:	f7ff fdd4 	bl	801353a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
        reducer(output_data[output_offset], input_data[input_offset]);
 8013992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013994:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 8013998:	eb03 0780 	add.w	r7, r3, r0, lsl #2
 801399c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801399e:	edd9 0a00 	vldr	s1, [r9]
 80139a2:	ed97 0a00 	vldr	s0, [r7]
 80139a6:	4798      	blx	r3
    output_data[output_offset] =
 80139a8:	ed87 0a00 	vstr	s0, [r7]
  if (num_dims == 0) {
 80139ac:	b134      	cbz	r4, 80139bc <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x60>
 80139ae:	462a      	mov	r2, r5
 80139b0:	4641      	mov	r1, r8
 80139b2:	4620      	mov	r0, r4
 80139b4:	f7ff fda1 	bl	80134fa <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12>
  } while (NextIndex(input_num_dims, input_dims, input_iter));
 80139b8:	2800      	cmp	r0, #0
 80139ba:	d1da      	bne.n	8013972 <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x16>
}
 80139bc:	2001      	movs	r0, #1
 80139be:	b002      	add	sp, #8
 80139c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    input_iter[idx] = 0;
 80139c4:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 80139c8:	3301      	adds	r3, #1
 80139ca:	e7cf      	b.n	801396c <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x10>

080139cc <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b>:

// Computes the mean of elements across dimensions given in axis.
// It does so in two stages, first calculates the sum of elements along the axis
// then divides it by the number of element in axis for quantized values.
template <typename T, typename U>
inline bool QuantizedMeanOrSum(const T* input_data, int32_t input_zero_point,
 80139cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d0:	b087      	sub	sp, #28
 80139d2:	4690      	mov	r8, r2
 80139d4:	461c      	mov	r4, r3
 80139d6:	4681      	mov	r9, r0
 80139d8:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  } else {
    ruy::profiler::ScopeLabel label(compute_sum ? "Sum/Int8" : "Mean/Int8");
  }
  // Reset output data.
  size_t num_outputs = 1;
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80139dc:	2500      	movs	r5, #0
inline bool QuantizedMeanOrSum(const T* input_data, int32_t input_zero_point,
 80139de:	9f11      	ldr	r7, [sp, #68]	; 0x44
  size_t num_outputs = 1;
 80139e0:	2601      	movs	r6, #1
inline bool QuantizedMeanOrSum(const T* input_data, int32_t input_zero_point,
 80139e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80139e4:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 80139e8:	9102      	str	r1, [sp, #8]
 80139ea:	9303      	str	r3, [sp, #12]
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80139ec:	4295      	cmp	r5, r2
 80139ee:	da0a      	bge.n	8013a06 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x3a>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80139f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80139f2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    // Overflow prevention.
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 80139f6:	fba6 0103 	umull	r0, r1, r6, r3
 80139fa:	2900      	cmp	r1, #0
 80139fc:	f040 80ca 	bne.w	8013b94 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x1c8>
      return false;
    }
    num_outputs *= current;
 8013a00:	435e      	muls	r6, r3
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8013a02:	3501      	adds	r5, #1
 8013a04:	e7f2      	b.n	80139ec <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x20>
  }
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013a06:	2300      	movs	r3, #0
 8013a08:	461a      	mov	r2, r3
 8013a0a:	429e      	cmp	r6, r3
 8013a0c:	d006      	beq.n	8013a1c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x50>
    output_data[idx] = T();
 8013a0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013a10:	54ca      	strb	r2, [r1, r3]
    temp_sum[idx] = U();
 8013a12:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013a18:	3301      	adds	r3, #1
 8013a1a:	e7f6      	b.n	8013a0a <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x3e>

  // Return early when input shape has zero dim. This is done after initializing
  // data for output tensor because there are cases that the input tensor is
  // empty but output tensor is not. In that case, output tensor should be
  // filled with init_value.
  for (int i = 0; i < input_num_dims; ++i) {
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	42a3      	cmp	r3, r4
 8013a20:	da08      	bge.n	8013a34 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x68>
    if (input_dims[i] == 0) return true;
 8013a22:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 8013a26:	b91a      	cbnz	r2, 8013a30 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x64>
 8013a28:	2001      	movs	r0, #1
                     output_zero_point;
    output = std::min(std::max(output, kMinValue), kMaxValue);
    output_data[idx] = static_cast<T>(output);
  }
  return true;
}
 8013a2a:	b007      	add	sp, #28
 8013a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < input_num_dims; ++i) {
 8013a30:	3301      	adds	r3, #1
 8013a32:	e7f4      	b.n	8013a1e <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x52>
  int num_resolved_axis = 0;
 8013a34:	2300      	movs	r3, #0
 8013a36:	9305      	str	r3, [sp, #20]
  if (num_dims == 0) {
 8013a38:	b14c      	cbz	r4, 8013a4e <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x82>
 8013a3a:	ab05      	add	r3, sp, #20
 8013a3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a3e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013a40:	4620      	mov	r0, r4
 8013a42:	9301      	str	r3, [sp, #4]
 8013a44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013a46:	9300      	str	r3, [sp, #0]
 8013a48:	17d3      	asrs	r3, r2, #31
 8013a4a:	f7ff fd28 	bl	801349e <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8013a4e:	2300      	movs	r3, #0
  if (!ReduceSumImpl<T, U>(input_data, input_dims, output_dims, input_num_dims,
 8013a50:	9d05      	ldr	r5, [sp, #20]
    input_iter[idx] = 0;
 8013a52:	461a      	mov	r2, r3
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8013a54:	429c      	cmp	r4, r3
 8013a56:	dd03      	ble.n	8013a60 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x94>
    input_iter[idx] = 0;
 8013a58:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	e7f9      	b.n	8013a54 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x88>
    size_t input_offset =
 8013a60:	2300      	movs	r3, #0
 8013a62:	465a      	mov	r2, fp
 8013a64:	4641      	mov	r1, r8
 8013a66:	4620      	mov	r0, r4
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	f7ff fd66 	bl	801353a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 8013a6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    size_t input_offset =
 8013a70:	4682      	mov	sl, r0
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 8013a72:	465a      	mov	r2, fp
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	4641      	mov	r1, r8
 8013a78:	462b      	mov	r3, r5
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f7ff fd5d 	bl	801353a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    return current + actual_in;
 8013a80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    const Out actual_in = static_cast<Out>(in);
 8013a82:	f919 200a 	ldrsb.w	r2, [r9, sl]
    return current + actual_in;
 8013a86:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013a8a:	4413      	add	r3, r2
    output_data[output_offset] =
 8013a8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013a8e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8013a92:	b134      	cbz	r4, 8013aa2 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0xd6>
 8013a94:	465a      	mov	r2, fp
 8013a96:	4641      	mov	r1, r8
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f7ff fd2e 	bl	80134fa <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12>
  } while (NextIndex(input_num_dims, input_dims, input_iter));
 8013a9e:	2800      	cmp	r0, #0
 8013aa0:	d1de      	bne.n	8013a60 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x94>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8013aa2:	f8dd b014 	ldr.w	fp, [sp, #20]
 8013aa6:	2401      	movs	r4, #1
 8013aa8:	2500      	movs	r5, #0
 8013aaa:	f04f 0900 	mov.w	r9, #0
 8013aae:	45cb      	cmp	fp, r9
 8013ab0:	dd16      	ble.n	8013ae0 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x114>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8013ab2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    if (current > static_cast<size_t>(std::numeric_limits<int64_t>::max() /
 8013ab4:	4622      	mov	r2, r4
 8013ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013aba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8013abe:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8013ac2:	f858 a023 	ldr.w	sl, [r8, r3, lsl #2]
    if (current > static_cast<size_t>(std::numeric_limits<int64_t>::max() /
 8013ac6:	462b      	mov	r3, r5
 8013ac8:	f7ed f8ca 	bl	8000c60 <__aeabi_ldivmod>
 8013acc:	4582      	cmp	sl, r0
 8013ace:	d861      	bhi.n	8013b94 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x1c8>
    num_elements_in_axis *= current;
 8013ad0:	fb0a f305 	mul.w	r3, sl, r5
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8013ad4:	f109 0901 	add.w	r9, r9, #1
    num_elements_in_axis *= current;
 8013ad8:	fba4 450a 	umull	r4, r5, r4, sl
 8013adc:	441d      	add	r5, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8013ade:	e7e6      	b.n	8013aae <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0xe2>
  if (num_elements_in_axis == 0) {
 8013ae0:	ea54 0305 	orrs.w	r3, r4, r5
 8013ae4:	d0a0      	beq.n	8013a28 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x5c>
  if (!compute_sum) {
 8013ae6:	9b03      	ldr	r3, [sp, #12]
 8013ae8:	bb8b      	cbnz	r3, 8013b4e <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x182>
    TFLITE_DCHECK_GE(num_elements_in_axis, 0);
 8013aea:	2c00      	cmp	r4, #0
 8013aec:	f175 0300 	sbcs.w	r3, r5, #0
 8013af0:	da01      	bge.n	8013af6 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x12a>
 8013af2:	f003 f927 	bl	8016d44 <abort>
    return __builtin_clzll(integer_input);
 8013af6:	2d00      	cmp	r5, #0
 8013af8:	d048      	beq.n	8013b8c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x1c0>
 8013afa:	fab5 f385 	clz	r3, r5
    shift = std::min(shift, 31 + output_shift);
 8013afe:	9a12      	ldr	r2, [sp, #72]	; 0x48
        63 - CountLeadingZeros(static_cast<uint64_t>(num_elements_in_axis));
 8013b00:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
        (static_cast<int64_t>(output_multiplier) << shift) /
 8013b04:	ea4f 7be7 	mov.w	fp, r7, asr #31
    shift = std::min(shift, 31 + output_shift);
 8013b08:	f102 081f 	add.w	r8, r2, #31
        (static_cast<int64_t>(output_multiplier) << shift) /
 8013b0c:	4622      	mov	r2, r4
 8013b0e:	f1b8 0f20 	cmp.w	r8, #32
 8013b12:	bfa8      	it	ge
 8013b14:	f04f 0820 	movge.w	r8, #32
 8013b18:	4598      	cmp	r8, r3
 8013b1a:	bfa8      	it	ge
 8013b1c:	4698      	movge	r8, r3
 8013b1e:	f1a8 0320 	sub.w	r3, r8, #32
 8013b22:	f1c8 0120 	rsb	r1, r8, #32
 8013b26:	fa0b fc08 	lsl.w	ip, fp, r8
 8013b2a:	fa07 f008 	lsl.w	r0, r7, r8
 8013b2e:	fa07 f303 	lsl.w	r3, r7, r3
 8013b32:	fa27 f101 	lsr.w	r1, r7, r1
 8013b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8013b3a:	462b      	mov	r3, r5
 8013b3c:	ea4c 0101 	orr.w	r1, ip, r1
 8013b40:	f7ed f88e 	bl	8000c60 <__aeabi_ldivmod>
    output_shift = output_shift - shift;
 8013b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
    output_multiplier = static_cast<int32_t>(
 8013b46:	4607      	mov	r7, r0
    output_shift = output_shift - shift;
 8013b48:	eba3 0308 	sub.w	r3, r3, r8
 8013b4c:	9312      	str	r3, [sp, #72]	; 0x48
        static_cast<U>(temp_sum[idx] - input_zero_point * num_elements_in_axis);
 8013b4e:	9b02      	ldr	r3, [sp, #8]
    output_data[idx] = static_cast<T>(output);
 8013b50:	f06f 097f 	mvn.w	r9, #127	; 0x7f
 8013b54:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
        static_cast<U>(temp_sum[idx] - input_zero_point * num_elements_in_axis);
 8013b56:	435c      	muls	r4, r3
 8013b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b5a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8013b5e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013b62:	42ae      	cmp	r6, r5
 8013b64:	f43f af60 	beq.w	8013a28 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x5c>
        static_cast<U>(temp_sum[idx] - input_zero_point * num_elements_in_axis);
 8013b68:	f855 0b04 	ldr.w	r0, [r5], #4
    int32_t output = MultiplyByQuantizedMultiplier(
 8013b6c:	4639      	mov	r1, r7
 8013b6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b70:	1b00      	subs	r0, r0, r4
 8013b72:	f7f4 faa9 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                         shifted_sum, output_multiplier, output_shift) +
 8013b76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013b78:	4418      	add	r0, r3
    output_data[idx] = static_cast<T>(output);
 8013b7a:	287f      	cmp	r0, #127	; 0x7f
 8013b7c:	bfa8      	it	ge
 8013b7e:	207f      	movge	r0, #127	; 0x7f
 8013b80:	4548      	cmp	r0, r9
 8013b82:	bfb8      	it	lt
 8013b84:	4648      	movlt	r0, r9
 8013b86:	f808 0f01 	strb.w	r0, [r8, #1]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013b8a:	e7ea      	b.n	8013b62 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x196>
 8013b8c:	fab4 f384 	clz	r3, r4
 8013b90:	3320      	adds	r3, #32
 8013b92:	e7b4      	b.n	8013afe <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x132>
      return false;
 8013b94:	2000      	movs	r0, #0
 8013b96:	e748      	b.n	8013a2a <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x5e>

08013b98 <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb>:

template <typename T>
TfLiteStatus QuantizedMeanOrSum(TfLiteContext* context, TfLiteNode* node,
 8013b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b9c:	4688      	mov	r8, r1
 8013b9e:	b093      	sub	sp, #76	; 0x4c
 8013ba0:	4606      	mov	r6, r0
 8013ba2:	4691      	mov	r9, r2
                                int* temp_index, int* resolved_axis,
                                int32_t* temp_sum, OpDataReduce* op_data,
                                bool compute_sum) {
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8013ba4:	2200      	movs	r2, #0
TfLiteStatus QuantizedMeanOrSum(TfLiteContext* context, TfLiteNode* node,
 8013ba6:	469a      	mov	sl, r3
 8013ba8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8013baa:	f7fc f88a 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
 8013bae:	2201      	movs	r2, #1
 8013bb0:	4641      	mov	r1, r8
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8013bb2:	4605      	mov	r5, r0
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
 8013bb4:	4630      	mov	r0, r6
 8013bb6:	f7fc f884 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013bba:	2200      	movs	r2, #0
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
 8013bbc:	4683      	mov	fp, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013bbe:	4641      	mov	r1, r8
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	f7fc f880 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteReducerParams* params =
 8013bc6:	f8d8 3014 	ldr.w	r3, [r8, #20]
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013bca:	4607      	mov	r7, r0
  TfLiteReducerParams* params =
 8013bcc:	930f      	str	r3, [sp, #60]	; 0x3c
  TFLITE_DCHECK(tensor != nullptr);
 8013bce:	b90d      	cbnz	r5, 8013bd4 <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0x3c>
 8013bd0:	f003 f8b8 	bl	8016d44 <abort>
      static_cast<TfLiteReducerParams*>(node->builtin_data);

  bool result = reference_ops::QuantizedMeanOrSumExtraArgs<T, int32_t>(
      tflite::micro::GetTensorData<T>(input), op_data->input_zp,
 8013bd4:	6923      	ldr	r3, [r4, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013bd6:	f8d5 8000 	ldr.w	r8, [r5]
 8013bda:	930e      	str	r3, [sp, #56]	; 0x38
      op_data->input_scale, &input->dims->data[0], input->dims->size,
 8013bdc:	686b      	ldr	r3, [r5, #4]
  bool result = reference_ops::QuantizedMeanOrSumExtraArgs<T, int32_t>(
 8013bde:	1d1a      	adds	r2, r3, #4
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	9211      	str	r2, [sp, #68]	; 0x44
 8013be4:	9310      	str	r3, [sp, #64]	; 0x40
  TFLITE_DCHECK(tensor != nullptr);
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d0f2      	beq.n	8013bd0 <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0x38>
      tflite::micro::GetTensorData<T>(output), op_data->output_scale,
      op_data->multiplier, op_data->shift, op_data->output_zp,
      &output->dims->data[0], output->dims->size,
 8013bea:	6845      	ldr	r5, [r0, #4]
  bool result = reference_ops::QuantizedMeanOrSumExtraArgs<T, int32_t>(
 8013bec:	4658      	mov	r0, fp
 8013bee:	f7ff feac 	bl	801394a <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    bool compute_sum) {
  return QuantizedMeanOrSum<T, U>(
      input_data, input_zero_point, input_dims, input_num_dims, output_data,
      output_multiplier, output_shift, output_zero_point, output_dims,
      output_num_dims, axis, num_axis_dimensions, keep_dims, temp_index,
      resolved_axis, temp_sum, compute_sum);
 8013bf2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013bf4:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 8013bf8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013bfc:	910c      	str	r1, [sp, #48]	; 0x30
 8013bfe:	e9cd a30a 	strd	sl, r3, [sp, #40]	; 0x28
 8013c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c04:	7819      	ldrb	r1, [r3, #0]
 8013c06:	9108      	str	r1, [sp, #32]
 8013c08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013c0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013c0e:	f855 1b04 	ldr.w	r1, [r5], #4
 8013c12:	4640      	mov	r0, r8
 8013c14:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8013c18:	69a1      	ldr	r1, [r4, #24]
 8013c1a:	9103      	str	r1, [sp, #12]
 8013c1c:	6861      	ldr	r1, [r4, #4]
 8013c1e:	9102      	str	r1, [sp, #8]
 8013c20:	6821      	ldr	r1, [r4, #0]
 8013c22:	9101      	str	r1, [sp, #4]
 8013c24:	6839      	ldr	r1, [r7, #0]
 8013c26:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8013c2a:	9100      	str	r1, [sp, #0]
 8013c2c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013c2e:	f7ff fecd 	bl	80139cc <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b>
      tflite::micro::GetTensorData<int>(axis), op_data->num_axis,
      params->keep_dims, temp_index, resolved_axis, temp_sum, compute_sum);
  TF_LITE_ENSURE(context, result);
 8013c32:	b958      	cbnz	r0, 8013c4c <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xb4>
 8013c34:	4b06      	ldr	r3, [pc, #24]	; (8013c50 <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xb8>)
 8013c36:	4630      	mov	r0, r6
 8013c38:	6974      	ldr	r4, [r6, #20]
 8013c3a:	9300      	str	r3, [sp, #0]
 8013c3c:	239e      	movs	r3, #158	; 0x9e
 8013c3e:	4a05      	ldr	r2, [pc, #20]	; (8013c54 <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xbc>)
 8013c40:	4905      	ldr	r1, [pc, #20]	; (8013c58 <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xc0>)
 8013c42:	47a0      	blx	r4
 8013c44:	2001      	movs	r0, #1

  return kTfLiteOk;
}
 8013c46:	b013      	add	sp, #76	; 0x4c
 8013c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return kTfLiteOk;
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	e7fa      	b.n	8013c46 <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xae>
 8013c50:	080fcd9a 	.word	0x080fcd9a
 8013c54:	080fcb5b 	.word	0x080fcb5b
 8013c58:	080f93a5 	.word	0x080f93a5

08013c5c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b>:
inline bool QuantizedMeanOrSum(const T* input_data, int32_t input_zero_point,
 8013c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c60:	b087      	sub	sp, #28
 8013c62:	4690      	mov	r8, r2
 8013c64:	461c      	mov	r4, r3
 8013c66:	4681      	mov	r9, r0
 8013c68:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8013c6c:	2500      	movs	r5, #0
inline bool QuantizedMeanOrSum(const T* input_data, int32_t input_zero_point,
 8013c6e:	9e11      	ldr	r6, [sp, #68]	; 0x44
  size_t num_outputs = 1;
 8013c70:	2701      	movs	r7, #1
inline bool QuantizedMeanOrSum(const T* input_data, int32_t input_zero_point,
 8013c72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c74:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8013c78:	9102      	str	r1, [sp, #8]
 8013c7a:	9303      	str	r3, [sp, #12]
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8013c7c:	4295      	cmp	r5, r2
 8013c7e:	da0a      	bge.n	8013c96 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x3a>
    size_t current = static_cast<size_t>(output_dims[idx]);
 8013c80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c82:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 8013c86:	fba7 0103 	umull	r0, r1, r7, r3
 8013c8a:	2900      	cmp	r1, #0
 8013c8c:	f040 80cb 	bne.w	8013e26 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x1ca>
    num_outputs *= current;
 8013c90:	435f      	muls	r7, r3
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8013c92:	3501      	adds	r5, #1
 8013c94:	e7f2      	b.n	8013c7c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x20>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013c96:	2300      	movs	r3, #0
 8013c98:	461a      	mov	r2, r3
 8013c9a:	429f      	cmp	r7, r3
 8013c9c:	d007      	beq.n	8013cae <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x52>
    output_data[idx] = T();
 8013c9e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013ca0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    temp_sum[idx] = U();
 8013ca4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013caa:	3301      	adds	r3, #1
 8013cac:	e7f5      	b.n	8013c9a <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x3e>
  for (int i = 0; i < input_num_dims; ++i) {
 8013cae:	2300      	movs	r3, #0
 8013cb0:	42a3      	cmp	r3, r4
 8013cb2:	da08      	bge.n	8013cc6 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x6a>
    if (input_dims[i] == 0) return true;
 8013cb4:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 8013cb8:	b91a      	cbnz	r2, 8013cc2 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x66>
 8013cba:	2001      	movs	r0, #1
}
 8013cbc:	b007      	add	sp, #28
 8013cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < input_num_dims; ++i) {
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	e7f4      	b.n	8013cb0 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x54>
  int num_resolved_axis = 0;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	9305      	str	r3, [sp, #20]
  if (num_dims == 0) {
 8013cca:	b14c      	cbz	r4, 8013ce0 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x84>
 8013ccc:	ab05      	add	r3, sp, #20
 8013cce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013cd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	9301      	str	r3, [sp, #4]
 8013cd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	17d3      	asrs	r3, r2, #31
 8013cdc:	f7ff fbdf 	bl	801349e <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8013ce0:	2300      	movs	r3, #0
  if (!ReduceSumImpl<T, U>(input_data, input_dims, output_dims, input_num_dims,
 8013ce2:	9d05      	ldr	r5, [sp, #20]
    input_iter[idx] = 0;
 8013ce4:	461a      	mov	r2, r3
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8013ce6:	429c      	cmp	r4, r3
 8013ce8:	dd03      	ble.n	8013cf2 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x96>
    input_iter[idx] = 0;
 8013cea:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8013cee:	3301      	adds	r3, #1
 8013cf0:	e7f9      	b.n	8013ce6 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x8a>
    size_t input_offset =
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	465a      	mov	r2, fp
 8013cf6:	4641      	mov	r1, r8
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	9300      	str	r3, [sp, #0]
 8013cfc:	f7ff fc1d 	bl	801353a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 8013d00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    size_t input_offset =
 8013d02:	4682      	mov	sl, r0
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 8013d04:	465a      	mov	r2, fp
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	4641      	mov	r1, r8
 8013d0a:	462b      	mov	r3, r5
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f7ff fc14 	bl	801353a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    return current + actual_in;
 8013d12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    const Out actual_in = static_cast<Out>(in);
 8013d14:	f939 201a 	ldrsh.w	r2, [r9, sl, lsl #1]
    return current + actual_in;
 8013d18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013d1c:	4413      	add	r3, r2
    output_data[output_offset] =
 8013d1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013d20:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8013d24:	b134      	cbz	r4, 8013d34 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0xd8>
 8013d26:	465a      	mov	r2, fp
 8013d28:	4641      	mov	r1, r8
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f7ff fbe5 	bl	80134fa <_ZN6tflite9NextIndexIiEEbiPKiPT_.part.12>
  } while (NextIndex(input_num_dims, input_dims, input_iter));
 8013d30:	2800      	cmp	r0, #0
 8013d32:	d1de      	bne.n	8013cf2 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x96>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8013d34:	f8dd b014 	ldr.w	fp, [sp, #20]
 8013d38:	2401      	movs	r4, #1
 8013d3a:	2500      	movs	r5, #0
 8013d3c:	f04f 0900 	mov.w	r9, #0
 8013d40:	45cb      	cmp	fp, r9
 8013d42:	dd16      	ble.n	8013d72 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x116>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8013d44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    if (current > static_cast<size_t>(std::numeric_limits<int64_t>::max() /
 8013d46:	4622      	mov	r2, r4
 8013d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8013d50:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8013d54:	f858 a023 	ldr.w	sl, [r8, r3, lsl #2]
    if (current > static_cast<size_t>(std::numeric_limits<int64_t>::max() /
 8013d58:	462b      	mov	r3, r5
 8013d5a:	f7ec ff81 	bl	8000c60 <__aeabi_ldivmod>
 8013d5e:	4582      	cmp	sl, r0
 8013d60:	d861      	bhi.n	8013e26 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x1ca>
    num_elements_in_axis *= current;
 8013d62:	fb0a f305 	mul.w	r3, sl, r5
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8013d66:	f109 0901 	add.w	r9, r9, #1
    num_elements_in_axis *= current;
 8013d6a:	fba4 450a 	umull	r4, r5, r4, sl
 8013d6e:	441d      	add	r5, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8013d70:	e7e6      	b.n	8013d40 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0xe4>
  if (num_elements_in_axis == 0) {
 8013d72:	ea54 0305 	orrs.w	r3, r4, r5
 8013d76:	d0a0      	beq.n	8013cba <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x5e>
  if (!compute_sum) {
 8013d78:	9b03      	ldr	r3, [sp, #12]
 8013d7a:	bb8b      	cbnz	r3, 8013de0 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x184>
    TFLITE_DCHECK_GE(num_elements_in_axis, 0);
 8013d7c:	2c00      	cmp	r4, #0
 8013d7e:	f175 0300 	sbcs.w	r3, r5, #0
 8013d82:	da01      	bge.n	8013d88 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x12c>
 8013d84:	f002 ffde 	bl	8016d44 <abort>
 8013d88:	2d00      	cmp	r5, #0
 8013d8a:	d048      	beq.n	8013e1e <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x1c2>
 8013d8c:	fab5 f385 	clz	r3, r5
    shift = std::min(shift, 31 + output_shift);
 8013d90:	9a12      	ldr	r2, [sp, #72]	; 0x48
        63 - CountLeadingZeros(static_cast<uint64_t>(num_elements_in_axis));
 8013d92:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
        (static_cast<int64_t>(output_multiplier) << shift) /
 8013d96:	ea4f 7be6 	mov.w	fp, r6, asr #31
    shift = std::min(shift, 31 + output_shift);
 8013d9a:	f102 081f 	add.w	r8, r2, #31
        (static_cast<int64_t>(output_multiplier) << shift) /
 8013d9e:	4622      	mov	r2, r4
 8013da0:	f1b8 0f20 	cmp.w	r8, #32
 8013da4:	bfa8      	it	ge
 8013da6:	f04f 0820 	movge.w	r8, #32
 8013daa:	4598      	cmp	r8, r3
 8013dac:	bfa8      	it	ge
 8013dae:	4698      	movge	r8, r3
 8013db0:	f1a8 0320 	sub.w	r3, r8, #32
 8013db4:	f1c8 0120 	rsb	r1, r8, #32
 8013db8:	fa0b fc08 	lsl.w	ip, fp, r8
 8013dbc:	fa06 f008 	lsl.w	r0, r6, r8
 8013dc0:	fa06 f303 	lsl.w	r3, r6, r3
 8013dc4:	fa26 f101 	lsr.w	r1, r6, r1
 8013dc8:	ea4c 0c03 	orr.w	ip, ip, r3
 8013dcc:	462b      	mov	r3, r5
 8013dce:	ea4c 0101 	orr.w	r1, ip, r1
 8013dd2:	f7ec ff45 	bl	8000c60 <__aeabi_ldivmod>
    output_shift = output_shift - shift;
 8013dd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    output_multiplier = static_cast<int32_t>(
 8013dd8:	4606      	mov	r6, r0
    output_shift = output_shift - shift;
 8013dda:	eba3 0308 	sub.w	r3, r3, r8
 8013dde:	9312      	str	r3, [sp, #72]	; 0x48
        static_cast<U>(temp_sum[idx] - input_zero_point * num_elements_in_axis);
 8013de0:	9b02      	ldr	r3, [sp, #8]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013de2:	2500      	movs	r5, #0
    output_data[idx] = static_cast<T>(output);
 8013de4:	f647 79ff 	movw	r9, #32767	; 0x7fff
 8013de8:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8013e2c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x1d0>
        static_cast<U>(temp_sum[idx] - input_zero_point * num_elements_in_axis);
 8013dec:	435c      	muls	r4, r3
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013dee:	42af      	cmp	r7, r5
 8013df0:	f43f af63 	beq.w	8013cba <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x5e>
        static_cast<U>(temp_sum[idx] - input_zero_point * num_elements_in_axis);
 8013df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    int32_t output = MultiplyByQuantizedMultiplier(
 8013df6:	4631      	mov	r1, r6
 8013df8:	9a12      	ldr	r2, [sp, #72]	; 0x48
        static_cast<U>(temp_sum[idx] - input_zero_point * num_elements_in_axis);
 8013dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    int32_t output = MultiplyByQuantizedMultiplier(
 8013dfe:	1b00      	subs	r0, r0, r4
 8013e00:	f7f4 f962 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                         shifted_sum, output_multiplier, output_shift) +
 8013e04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013e06:	4418      	add	r0, r3
    output_data[idx] = static_cast<T>(output);
 8013e08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e0a:	4548      	cmp	r0, r9
 8013e0c:	bfa8      	it	ge
 8013e0e:	4648      	movge	r0, r9
 8013e10:	4540      	cmp	r0, r8
 8013e12:	bfb8      	it	lt
 8013e14:	4640      	movlt	r0, r8
 8013e16:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013e1a:	3501      	adds	r5, #1
 8013e1c:	e7e7      	b.n	8013dee <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x192>
 8013e1e:	fab4 f384 	clz	r3, r4
 8013e22:	3320      	adds	r3, #32
 8013e24:	e7b4      	b.n	8013d90 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x134>
      return false;
 8013e26:	2000      	movs	r0, #0
 8013e28:	e748      	b.n	8013cbc <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b+0x60>
 8013e2a:	bf00      	nop
 8013e2c:	ffff8000 	.word	0xffff8000

08013e30 <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb>:
TfLiteStatus QuantizedMeanOrSum(TfLiteContext* context, TfLiteNode* node,
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	4688      	mov	r8, r1
 8013e36:	b093      	sub	sp, #76	; 0x4c
 8013e38:	4606      	mov	r6, r0
 8013e3a:	4691      	mov	r9, r2
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8013e3c:	2200      	movs	r2, #0
TfLiteStatus QuantizedMeanOrSum(TfLiteContext* context, TfLiteNode* node,
 8013e3e:	469a      	mov	sl, r3
 8013e40:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8013e42:	f7fb ff3e 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
 8013e46:	2201      	movs	r2, #1
 8013e48:	4641      	mov	r1, r8
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8013e4a:	4605      	mov	r5, r0
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	f7fb ff38 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013e52:	2200      	movs	r2, #0
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
 8013e54:	4683      	mov	fp, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013e56:	4641      	mov	r1, r8
 8013e58:	4630      	mov	r0, r6
 8013e5a:	f7fb ff34 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteReducerParams* params =
 8013e5e:	f8d8 3014 	ldr.w	r3, [r8, #20]
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013e62:	4607      	mov	r7, r0
  TfLiteReducerParams* params =
 8013e64:	930f      	str	r3, [sp, #60]	; 0x3c
  TFLITE_DCHECK(tensor != nullptr);
 8013e66:	b90d      	cbnz	r5, 8013e6c <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0x3c>
 8013e68:	f002 ff6c 	bl	8016d44 <abort>
      tflite::micro::GetTensorData<T>(input), op_data->input_zp,
 8013e6c:	6923      	ldr	r3, [r4, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013e6e:	f8d5 8000 	ldr.w	r8, [r5]
 8013e72:	930e      	str	r3, [sp, #56]	; 0x38
      op_data->input_scale, &input->dims->data[0], input->dims->size,
 8013e74:	686b      	ldr	r3, [r5, #4]
  bool result = reference_ops::QuantizedMeanOrSumExtraArgs<T, int32_t>(
 8013e76:	1d1a      	adds	r2, r3, #4
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	9211      	str	r2, [sp, #68]	; 0x44
 8013e7c:	9310      	str	r3, [sp, #64]	; 0x40
  TFLITE_DCHECK(tensor != nullptr);
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	d0f2      	beq.n	8013e68 <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0x38>
      &output->dims->data[0], output->dims->size,
 8013e82:	6845      	ldr	r5, [r0, #4]
  bool result = reference_ops::QuantizedMeanOrSumExtraArgs<T, int32_t>(
 8013e84:	4658      	mov	r0, fp
 8013e86:	f7ff fd60 	bl	801394a <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
      resolved_axis, temp_sum, compute_sum);
 8013e8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013e8c:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 8013e90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013e94:	910c      	str	r1, [sp, #48]	; 0x30
 8013e96:	e9cd a30a 	strd	sl, r3, [sp, #40]	; 0x28
 8013e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e9c:	7819      	ldrb	r1, [r3, #0]
 8013e9e:	9108      	str	r1, [sp, #32]
 8013ea0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013ea2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013ea6:	f855 1b04 	ldr.w	r1, [r5], #4
 8013eaa:	4640      	mov	r0, r8
 8013eac:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8013eb0:	69a1      	ldr	r1, [r4, #24]
 8013eb2:	9103      	str	r1, [sp, #12]
 8013eb4:	6861      	ldr	r1, [r4, #4]
 8013eb6:	9102      	str	r1, [sp, #8]
 8013eb8:	6821      	ldr	r1, [r4, #0]
 8013eba:	9101      	str	r1, [sp, #4]
 8013ebc:	6839      	ldr	r1, [r7, #0]
 8013ebe:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8013ec2:	9100      	str	r1, [sp, #0]
 8013ec4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013ec6:	f7ff fec9 	bl	8013c5c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIslEEbPKT_lPKiiPS2_lilS6_iS6_ibPiS8_PT0_b>
  TF_LITE_ENSURE(context, result);
 8013eca:	b958      	cbnz	r0, 8013ee4 <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xb4>
 8013ecc:	4b06      	ldr	r3, [pc, #24]	; (8013ee8 <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xb8>)
 8013ece:	4630      	mov	r0, r6
 8013ed0:	6974      	ldr	r4, [r6, #20]
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	239e      	movs	r3, #158	; 0x9e
 8013ed6:	4a05      	ldr	r2, [pc, #20]	; (8013eec <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xbc>)
 8013ed8:	4905      	ldr	r1, [pc, #20]	; (8013ef0 <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xc0>)
 8013eda:	47a0      	blx	r4
 8013edc:	2001      	movs	r0, #1
}
 8013ede:	b013      	add	sp, #76	; 0x4c
 8013ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return kTfLiteOk;
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	e7fa      	b.n	8013ede <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb+0xae>
 8013ee8:	080fcd9a 	.word	0x080fcd9a
 8013eec:	080fcb5b 	.word	0x080fcb5b
 8013ef0:	080f93a5 	.word	0x080f93a5

08013ef4 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE>:

  return kTfLiteOk;
}

TfLiteStatus EvalMeanHelper(TfLiteContext* context, TfLiteNode* node,
                            OpDataReduce* op_data) {
 8013ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	460f      	mov	r7, r1
 8013efa:	4604      	mov	r4, r0
 8013efc:	b09d      	sub	sp, #116	; 0x74
 8013efe:	4692      	mov	sl, r2
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8013f00:	2200      	movs	r2, #0
 8013f02:	f7fb fede 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
 8013f06:	2201      	movs	r2, #1
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8013f08:	4606      	mov	r6, r0
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	f7fb fed8 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013f12:	4680      	mov	r8, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8013f14:	2200      	movs	r2, #0
 8013f16:	4639      	mov	r1, r7
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f7fb fed4 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8013f1e:	4605      	mov	r5, r0
  TfLiteReducerParams* params =
      reinterpret_cast<TfLiteReducerParams*>(node->builtin_data);

  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8013f20:	f8d8 0004 	ldr.w	r0, [r8, #4]
  TfLiteReducerParams* params =
 8013f24:	f8d7 9014 	ldr.w	r9, [r7, #20]
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8013f28:	f7f6 ff34 	bl	800ad94 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
  int temp_index[kMaxNumberOfAxis];
  int resolved_axis[kMaxNumberOfReducedAxis];

  switch (input->type) {
 8013f2c:	7a33      	ldrb	r3, [r6, #8]
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8013f2e:	4683      	mov	fp, r0
  switch (input->type) {
 8013f30:	2b07      	cmp	r3, #7
 8013f32:	f000 80c7 	beq.w	80140c4 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x1d0>
 8013f36:	2b09      	cmp	r3, #9
 8013f38:	f000 80b4 	beq.w	80140a4 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x1b0>
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	f040 80d1 	bne.w	80140e4 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x1f0>
    case kTfLiteFloat32: {
      tflite::MeanParams op_params;
      ResolveAxis(tflite::micro::GetTensorData<int>(axis), num_axis,
 8013f42:	4640      	mov	r0, r8
 8013f44:	f7ff fd01 	bl	801394a <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
 8013f48:	aa0b      	add	r2, sp, #44	; 0x2c
 8013f4a:	4659      	mov	r1, fp
 8013f4c:	f7ff fce5 	bl	801391a <_ZN6tflite11ResolveAxisEPKiiPNS_10MeanParamsE>
                  &op_params);

      // Special case mean implementation exists for 4D mean across axes 1
      // and 2.
      bool special_case_4d_axes_1_and_2 =
          input->dims->size == 4 && op_params.axis_count == 2 &&
 8013f50:	6873      	ldr	r3, [r6, #4]
 8013f52:	681f      	ldr	r7, [r3, #0]
 8013f54:	9307      	str	r3, [sp, #28]
 8013f56:	2f04      	cmp	r7, #4
 8013f58:	d123      	bne.n	8013fa2 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xae>
 8013f5a:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
 8013f5e:	2b02      	cmp	r3, #2
 8013f60:	d11f      	bne.n	8013fa2 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xae>
          ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8013f62:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
          input->dims->size == 4 && op_params.axis_count == 2 &&
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d115      	bne.n	8013f96 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xa2>
          ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8013f6a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013f6e:	2b02      	cmp	r3, #2
           (op_params.axis[0] == 2 && op_params.axis[1] == 1));
 8013f70:	bf14      	ite	ne
 8013f72:	2300      	movne	r3, #0
 8013f74:	2301      	moveq	r3, #1

      // Defer to specialized implementation for 4D Mean across axes 1 & 2.
      if (params->keep_dims && special_case_4d_axes_1_and_2) {
 8013f76:	f899 2000 	ldrb.w	r2, [r9]
 8013f7a:	b302      	cbz	r2, 8013fbe <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xca>
 8013f7c:	b1fb      	cbz	r3, 8013fbe <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xca>
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8013f7e:	4631      	mov	r1, r6
 8013f80:	a80e      	add	r0, sp, #56	; 0x38
 8013f82:	f7fb feae 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorData<float>(input),
                            tflite::micro::GetTensorShape(output),
 8013f86:	4629      	mov	r1, r5
 8013f88:	a815      	add	r0, sp, #84	; 0x54
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013f8a:	6834      	ldr	r4, [r6, #0]
 8013f8c:	f7fb fea9 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8013f90:	b94d      	cbnz	r5, 8013fa6 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xb2>
 8013f92:	f002 fed7 	bl	8016d44 <abort>
          ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8013f96:	2b02      	cmp	r3, #2
 8013f98:	d103      	bne.n	8013fa2 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xae>
           (op_params.axis[0] == 2 && op_params.axis[1] == 1));
 8013f9a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	e7e6      	b.n	8013f70 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x7c>
          input->dims->size == 4 && op_params.axis_count == 2 &&
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	e7e7      	b.n	8013f76 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x82>
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8013fa6:	682b      	ldr	r3, [r5, #0]
 8013fa8:	4622      	mov	r2, r4
 8013faa:	a90e      	add	r1, sp, #56	; 0x38
 8013fac:	a80b      	add	r0, sp, #44	; 0x2c
 8013fae:	9300      	str	r3, [sp, #0]
 8013fb0:	ab15      	add	r3, sp, #84	; 0x54
 8013fb2:	f7ff fae3 	bl	801357c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKfS6_Pf>
    default:
      TF_LITE_ENSURE_MSG(context, false,
                         "Currently, only float32, int8 or int16 input type "
                         "is supported.");
  }
  return kTfLiteOk;
 8013fb6:	2000      	movs	r0, #0
}
 8013fb8:	b01d      	add	sp, #116	; 0x74
 8013fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fbe:	2d00      	cmp	r5, #0
 8013fc0:	d0e7      	beq.n	8013f92 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x9e>
        TF_LITE_ENSURE(
 8013fc2:	686b      	ldr	r3, [r5, #4]
 8013fc4:	4640      	mov	r0, r8
 8013fc6:	f103 0a04 	add.w	sl, r3, #4
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	9308      	str	r3, [sp, #32]
 8013fce:	f7ff fcbc 	bl	801394a <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	4601      	mov	r1, r0
  size_t num_outputs = 1;
 8013fd6:	2301      	movs	r3, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8013fd8:	9808      	ldr	r0, [sp, #32]
 8013fda:	4290      	cmp	r0, r2
 8013fdc:	dc0d      	bgt.n	8013ffa <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x106>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013fde:	6832      	ldr	r2, [r6, #0]
  return reinterpret_cast<T*>(tensor->data.raw);
 8013fe0:	f8d5 8000 	ldr.w	r8, [r5]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013fe4:	9209      	str	r2, [sp, #36]	; 0x24
    output_data[idx] = T();
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	4645      	mov	r5, r8
 8013fea:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  return reinterpret_cast<T*>(tensor->data.raw);
 8013fee:	4646      	mov	r6, r8
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8013ff0:	429e      	cmp	r6, r3
 8013ff2:	d00c      	beq.n	801400e <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x11a>
    output_data[idx] = T();
 8013ff4:	f846 2b04 	str.w	r2, [r6], #4
 8013ff8:	e7fa      	b.n	8013ff0 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xfc>
    size_t current = static_cast<size_t>(output_dims[idx]);
 8013ffa:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 8013ffe:	fba3 8900 	umull	r8, r9, r3, r0
 8014002:	f1b9 0f00 	cmp.w	r9, #0
 8014006:	d143      	bne.n	8014090 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x19c>
    num_outputs *= current;
 8014008:	4343      	muls	r3, r0
  for (int idx = 0; idx < output_num_dims; ++idx) {
 801400a:	3201      	adds	r2, #1
 801400c:	e7e4      	b.n	8013fd8 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xe4>
  int num_resolved_axis = 0;
 801400e:	2300      	movs	r3, #0
 8014010:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8014014:	930a      	str	r3, [sp, #40]	; 0x28
  if (num_dims == 0) {
 8014016:	b13f      	cbz	r7, 8014028 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x134>
 8014018:	ab0a      	add	r3, sp, #40	; 0x28
 801401a:	465a      	mov	r2, fp
 801401c:	4638      	mov	r0, r7
 801401e:	e9cd 9300 	strd	r9, r3, [sp]
 8014022:	17d3      	asrs	r3, r2, #31
 8014024:	f7ff fa3b 	bl	801349e <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_.part.8>
 8014028:	9b07      	ldr	r3, [sp, #28]
                         output_data);
 801402a:	4652      	mov	r2, sl
 801402c:	f8cd 8014 	str.w	r8, [sp, #20]
 8014030:	f103 0b04 	add.w	fp, r3, #4
 8014034:	4b2e      	ldr	r3, [pc, #184]	; (80140f0 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x1fc>)
 8014036:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014038:	9304      	str	r3, [sp, #16]
 801403a:	ab15      	add	r3, sp, #84	; 0x54
 801403c:	4659      	mov	r1, fp
 801403e:	9303      	str	r3, [sp, #12]
 8014040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014042:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014046:	9b08      	ldr	r3, [sp, #32]
 8014048:	9300      	str	r3, [sp, #0]
 801404a:	463b      	mov	r3, r7
 801404c:	f7ff fc86 	bl	801395c <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_>
  if (!ReduceSumImpl<T, U>(input_data, input_dims, output_dims, input_num_dims,
 8014050:	b1f0      	cbz	r0, 8014090 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x19c>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8014052:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8014056:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8014058:	2301      	movs	r3, #1
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 801405a:	4594      	cmp	ip, r2
 801405c:	dd09      	ble.n	8014072 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x17e>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 801405e:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 8014062:	f85b 7021 	ldr.w	r7, [fp, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 8014066:	fba7 0103 	umull	r0, r1, r7, r3
 801406a:	b989      	cbnz	r1, 8014090 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x19c>
    num_elements_in_axis *= current;
 801406c:	437b      	muls	r3, r7
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 801406e:	3201      	adds	r2, #1
 8014070:	e7f3      	b.n	801405a <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x166>
  if (num_elements_in_axis > 0) {
 8014072:	2b00      	cmp	r3, #0
 8014074:	d09f      	beq.n	8013fb6 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xc2>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8014076:	42ae      	cmp	r6, r5
 8014078:	d09d      	beq.n	8013fb6 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xc2>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 801407a:	ee07 3a90 	vmov	s15, r3
 801407e:	edd5 6a00 	vldr	s13, [r5]
 8014082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014086:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[idx] =
 801408a:	ece5 7a01 	vstmia	r5!, {s15}
 801408e:	e7f2      	b.n	8014076 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x182>
 8014090:	4b18      	ldr	r3, [pc, #96]	; (80140f4 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x200>)
 8014092:	4620      	mov	r0, r4
 8014094:	4a18      	ldr	r2, [pc, #96]	; (80140f8 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x204>)
 8014096:	9300      	str	r3, [sp, #0]
 8014098:	23d8      	movs	r3, #216	; 0xd8
 801409a:	6965      	ldr	r5, [r4, #20]
 801409c:	4917      	ldr	r1, [pc, #92]	; (80140fc <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x208>)
 801409e:	47a8      	blx	r5
      TF_LITE_ENSURE_MSG(context, false,
 80140a0:	2001      	movs	r0, #1
 80140a2:	e789      	b.n	8013fb8 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xc4>
  QuantizedMeanOrSum<integer_type>(context, node, temp_index, resolved_axis,
 80140a4:	2500      	movs	r5, #0
  int32_t* temp_sum = static_cast<int32_t*>(
 80140a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80140a8:	f8da 1008 	ldr.w	r1, [sl, #8]
 80140ac:	4620      	mov	r0, r4
 80140ae:	4798      	blx	r3
  QuantizedMeanOrSum<integer_type>(context, node, temp_index, resolved_axis,
 80140b0:	ab0e      	add	r3, sp, #56	; 0x38
 80140b2:	9000      	str	r0, [sp, #0]
 80140b4:	aa15      	add	r2, sp, #84	; 0x54
 80140b6:	4639      	mov	r1, r7
 80140b8:	4620      	mov	r0, r4
 80140ba:	e9cd a501 	strd	sl, r5, [sp, #4]
 80140be:	f7ff fd6b 	bl	8013b98 <_ZN6tflite18QuantizedMeanOrSumIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb>
 80140c2:	e778      	b.n	8013fb6 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xc2>
 80140c4:	2500      	movs	r5, #0
  int32_t* temp_sum = static_cast<int32_t*>(
 80140c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80140c8:	f8da 1008 	ldr.w	r1, [sl, #8]
 80140cc:	4620      	mov	r0, r4
 80140ce:	4798      	blx	r3
  QuantizedMeanOrSum<integer_type>(context, node, temp_index, resolved_axis,
 80140d0:	ab0e      	add	r3, sp, #56	; 0x38
 80140d2:	9000      	str	r0, [sp, #0]
 80140d4:	aa15      	add	r2, sp, #84	; 0x54
 80140d6:	4639      	mov	r1, r7
 80140d8:	4620      	mov	r0, r4
 80140da:	e9cd a501 	strd	sl, r5, [sp, #4]
 80140de:	f7ff fea7 	bl	8013e30 <_ZN6tflite18QuantizedMeanOrSumIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePiS6_PlPNS_12OpDataReduceEb>
 80140e2:	e768      	b.n	8013fb6 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0xc2>
      TF_LITE_ENSURE_MSG(context, false,
 80140e4:	6963      	ldr	r3, [r4, #20]
 80140e6:	4620      	mov	r0, r4
 80140e8:	4905      	ldr	r1, [pc, #20]	; (8014100 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x20c>)
 80140ea:	4798      	blx	r3
 80140ec:	e7d8      	b.n	80140a0 <_ZN6tflite14EvalMeanHelperEP13TfLiteContextP10TfLiteNodePNS_12OpDataReduceE+0x1ac>
 80140ee:	bf00      	nop
 80140f0:	08013499 	.word	0x08013499
 80140f4:	080fcbd3 	.word	0x080fcbd3
 80140f8:	080fcb5b 	.word	0x080fcb5b
 80140fc:	080f93a5 	.word	0x080f93a5
 8014100:	080fcd1d 	.word	0x080fcd1d

08014104 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {
namespace {

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8014104:	b573      	push	{r0, r1, r4, r5, r6, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kReshapeInputTensor);
 8014106:	2200      	movs	r2, #0
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8014108:	4605      	mov	r5, r0
 801410a:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kReshapeInputTensor);
 801410c:	f7fb fdd9 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014110:	4604      	mov	r4, r0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 8014112:	2200      	movs	r2, #0
 8014114:	4631      	mov	r1, r6
 8014116:	4628      	mov	r0, r5
 8014118:	f7fb fdd5 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 801411c:	a901      	add	r1, sp, #4
      tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 801411e:	4606      	mov	r6, r0
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 8014120:	7a20      	ldrb	r0, [r4, #8]
 8014122:	f7f4 fe39 	bl	8008d98 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8014126:	4605      	mov	r5, r0
 8014128:	b958      	cbnz	r0, 8014142 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e>
  input_bytes *= ElementCount(*input->dims);
 801412a:	6860      	ldr	r0, [r4, #4]
 801412c:	f7f6 fe32 	bl	800ad94 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 8014130:	9a01      	ldr	r2, [sp, #4]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8014132:	6821      	ldr	r1, [r4, #0]
  input_bytes *= ElementCount(*input->dims);
 8014134:	4342      	muls	r2, r0
  if (input->data.raw != output->data.raw) {
 8014136:	6830      	ldr	r0, [r6, #0]
 8014138:	4281      	cmp	r1, r0
  input_bytes *= ElementCount(*input->dims);
 801413a:	9201      	str	r2, [sp, #4]
  if (input->data.raw != output->data.raw) {
 801413c:	d001      	beq.n	8014142 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e>
    // Otherwise perform reshape with copy.
    memcpy(output->data.raw, input->data.raw, input_bytes);
 801413e:	f002 fe88 	bl	8016e52 <memcpy>
  }
  return kTfLiteOk;
}
 8014142:	4628      	mov	r0, r5
 8014144:	b002      	add	sp, #8
 8014146:	bd70      	pop	{r4, r5, r6, pc}

08014148 <_ZN6tflite16Register_RESHAPEEv>:

}  // namespace

TFLMRegistration Register_RESHAPE() {
 8014148:	b513      	push	{r0, r1, r4, lr}
  return tflite::micro::RegisterOp(nullptr, PrepareReshapeReference, Eval);
 801414a:	2100      	movs	r1, #0
TFLMRegistration Register_RESHAPE() {
 801414c:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(nullptr, PrepareReshapeReference, Eval);
 801414e:	4b04      	ldr	r3, [pc, #16]	; (8014160 <_ZN6tflite16Register_RESHAPEEv+0x18>)
 8014150:	4a04      	ldr	r2, [pc, #16]	; (8014164 <_ZN6tflite16Register_RESHAPEEv+0x1c>)
 8014152:	e9cd 1100 	strd	r1, r1, [sp]
 8014156:	f7fb fd8d 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 801415a:	4620      	mov	r0, r4
 801415c:	b002      	add	sp, #8
 801415e:	bd10      	pop	{r4, pc}
 8014160:	08014105 	.word	0x08014105
 8014164:	0801434d 	.word	0x0801434d

08014168 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>:

namespace tflite {

namespace {

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8014168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);
 801416c:	68c6      	ldr	r6, [r0, #12]
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 801416e:	b08b      	sub	sp, #44	; 0x2c
 8014170:	4604      	mov	r4, r0

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kReshapeInputTensor);
 8014172:	2200      	movs	r2, #0
 8014174:	4630      	mov	r0, r6
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8014176:	468b      	mov	fp, r1
      micro_context->AllocateTempInputTensor(node, kReshapeInputTensor);
 8014178:	f7f5 ff7c 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 801417c:	4607      	mov	r7, r0
 801417e:	b958      	cbnz	r0, 8014198 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x30>
 8014180:	4b64      	ldr	r3, [pc, #400]	; (8014314 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 8014182:	6965      	ldr	r5, [r4, #20]
 8014184:	9300      	str	r3, [sp, #0]
 8014186:	2325      	movs	r3, #37	; 0x25
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kReshapeOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 8014188:	4a63      	ldr	r2, [pc, #396]	; (8014318 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 801418a:	4620      	mov	r0, r4
 801418c:	4963      	ldr	r1, [pc, #396]	; (801431c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 801418e:	47a8      	blx	r5
 8014190:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 8014192:	b00b      	add	sp, #44	; 0x2c
 8014194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      micro_context->AllocateTempOutputTensor(node, kReshapeOutputTensor);
 8014198:	2200      	movs	r2, #0
 801419a:	4659      	mov	r1, fp
 801419c:	4630      	mov	r0, r6
 801419e:	f7f5 ff7e 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 80141a2:	4605      	mov	r5, r0
 80141a4:	b920      	cbnz	r0, 80141b0 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x48>
 80141a6:	4b5e      	ldr	r3, [pc, #376]	; (8014320 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 80141a8:	6965      	ldr	r5, [r4, #20]
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	2328      	movs	r3, #40	; 0x28
 80141ae:	e7eb      	b.n	8014188 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x20>
  int num_input_elements = NumElements(input);
 80141b0:	68bb      	ldr	r3, [r7, #8]
  for (int i = 0; i < num_dims; ++i) {
 80141b2:	f04f 0a00 	mov.w	sl, #0
  int64_t count = 1;
 80141b6:	f04f 0801 	mov.w	r8, #1
 80141ba:	f04f 0900 	mov.w	r9, #0
  return NumElements(dims->data, dims->size);
 80141be:	1d1a      	adds	r2, r3, #4
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	9208      	str	r2, [sp, #32]
 80141c4:	9309      	str	r3, [sp, #36]	; 0x24
  for (int i = 0; i < num_dims; ++i) {
 80141c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c8:	4553      	cmp	r3, sl
 80141ca:	dd2a      	ble.n	8014222 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
    if (count <= 0) {
 80141cc:	f1b8 0f01 	cmp.w	r8, #1
 80141d0:	f179 0300 	sbcs.w	r3, r9, #0
 80141d4:	db25      	blt.n	8014222 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
    TF_LITE_ASSERT(dims[i] < std::numeric_limits<int>::max() / count);
 80141d6:	9b08      	ldr	r3, [sp, #32]
 80141d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80141dc:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80141e0:	4619      	mov	r1, r3
 80141e2:	17da      	asrs	r2, r3, #31
 80141e4:	9305      	str	r3, [sp, #20]
 80141e6:	464b      	mov	r3, r9
 80141e8:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80141ec:	4642      	mov	r2, r8
 80141ee:	2100      	movs	r1, #0
 80141f0:	f7ec fd36 	bl	8000c60 <__aeabi_ldivmod>
 80141f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80141f8:	4282      	cmp	r2, r0
 80141fa:	418b      	sbcs	r3, r1
 80141fc:	db05      	blt.n	801420a <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa2>
 80141fe:	4949      	ldr	r1, [pc, #292]	; (8014324 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 8014200:	4849      	ldr	r0, [pc, #292]	; (8014328 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 8014202:	f7f6 fd59 	bl	800acb8 <_Z11MicroPrintfPKcz>
 8014206:	f002 fd9d 	bl	8016d44 <abort>
    count *= dims[i];
 801420a:	9b07      	ldr	r3, [sp, #28]
  for (int i = 0; i < num_dims; ++i) {
 801420c:	f10a 0a01 	add.w	sl, sl, #1
    count *= dims[i];
 8014210:	9a05      	ldr	r2, [sp, #20]
 8014212:	fb08 f303 	mul.w	r3, r8, r3
 8014216:	fb02 3309 	mla	r3, r2, r9, r3
 801421a:	fba8 8902 	umull	r8, r9, r8, r2
 801421e:	4499      	add	r9, r3
 8014220:	e7d1      	b.n	80141c6 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5e>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8014222:	f8db 2000 	ldr.w	r2, [fp]
  int num_input_elements = NumElements(input);
 8014226:	46c1      	mov	r9, r8
  TfLiteIntArray* output_shape = output->dims;
 8014228:	68ab      	ldr	r3, [r5, #8]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 801422a:	b142      	cbz	r2, 801423e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd6>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 801422c:	6812      	ldr	r2, [r2, #0]
 801422e:	2a01      	cmp	r2, #1
 8014230:	d105      	bne.n	801423e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd6>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8014232:	681a      	ldr	r2, [r3, #0]
 8014234:	2a01      	cmp	r2, #1
 8014236:	d102      	bne.n	801423e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd6>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8014238:	685a      	ldr	r2, [r3, #4]
 801423a:	b902      	cbnz	r2, 801423e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd6>
    output_shape->size = 0;
 801423c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < output_shape->size; ++i) {
 801423e:	f853 0b04 	ldr.w	r0, [r3], #4
 8014242:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014246:	f04f 0801 	mov.w	r8, #1
 801424a:	2200      	movs	r2, #0
 801424c:	4290      	cmp	r0, r2
 801424e:	dd1a      	ble.n	8014286 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11e>
    int value = output_shape->data[i];
 8014250:	f853 1b04 	ldr.w	r1, [r3], #4
    if (value == -1) {
 8014254:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8014258:	d10f      	bne.n	801427a <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x112>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 801425a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801425e:	d010      	beq.n	8014282 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11a>
 8014260:	4b32      	ldr	r3, [pc, #200]	; (801432c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8014262:	6965      	ldr	r5, [r4, #20]
 8014264:	9301      	str	r3, [sp, #4]
 8014266:	4b32      	ldr	r3, [pc, #200]	; (8014330 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 8014268:	9300      	str	r3, [sp, #0]
 801426a:	233d      	movs	r3, #61	; 0x3d
 801426c:	e9cd a102 	strd	sl, r1, [sp, #8]
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8014270:	4a29      	ldr	r2, [pc, #164]	; (8014318 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8014272:	4620      	mov	r0, r4
 8014274:	492f      	ldr	r1, [pc, #188]	; (8014334 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 8014276:	47a8      	blx	r5
 8014278:	e78a      	b.n	8014190 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x28>
      num_output_elements *= value;
 801427a:	fb01 f808 	mul.w	r8, r1, r8
  for (int i = 0; i < output_shape->size; ++i) {
 801427e:	3201      	adds	r2, #1
 8014280:	e7e4      	b.n	801424c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xe4>
 8014282:	4692      	mov	sl, r2
 8014284:	e7fb      	b.n	801427e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x116>
  if (stretch_dim != -1) {
 8014286:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801428a:	d014      	beq.n	80142b6 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14e>
        tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 801428c:	2200      	movs	r2, #0
 801428e:	4659      	mov	r1, fp
 8014290:	4620      	mov	r0, r4
 8014292:	f7fb fd18 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
    TF_LITE_ENSURE_STATUS(tflite::micro::CreateWritableTensorDimsWithCopy(
 8014296:	4629      	mov	r1, r5
 8014298:	4602      	mov	r2, r0
 801429a:	4620      	mov	r0, r4
 801429c:	f7fb fd3e 	bl	800fd1c <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	f47f af76 	bne.w	8014192 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 80142a6:	68ab      	ldr	r3, [r5, #8]
 80142a8:	fb99 f2f8 	sdiv	r2, r9, r8
 80142ac:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    num_output_elements *= output_shape->data[stretch_dim];
 80142b0:	fb02 f808 	mul.w	r8, r2, r8
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 80142b4:	605a      	str	r2, [r3, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80142b6:	7838      	ldrb	r0, [r7, #0]
 80142b8:	782b      	ldrb	r3, [r5, #0]
 80142ba:	4283      	cmp	r3, r0
 80142bc:	d012      	beq.n	80142e4 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>
 80142be:	6966      	ldr	r6, [r4, #20]
 80142c0:	f7f3 fef6 	bl	80080b0 <TfLiteTypeGetName>
 80142c4:	4607      	mov	r7, r0
 80142c6:	7828      	ldrb	r0, [r5, #0]
 80142c8:	f7f3 fef2 	bl	80080b0 <TfLiteTypeGetName>
 80142cc:	4b1a      	ldr	r3, [pc, #104]	; (8014338 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 80142ce:	4a12      	ldr	r2, [pc, #72]	; (8014318 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80142d0:	9301      	str	r3, [sp, #4]
 80142d2:	4b1a      	ldr	r3, [pc, #104]	; (801433c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 80142d4:	491a      	ldr	r1, [pc, #104]	; (8014340 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 80142d6:	9300      	str	r3, [sp, #0]
 80142d8:	234d      	movs	r3, #77	; 0x4d
 80142da:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80142de:	4620      	mov	r0, r4
 80142e0:	47b0      	blx	r6
 80142e2:	e755      	b.n	8014190 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x28>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 80142e4:	45c1      	cmp	r9, r8
 80142e6:	d008      	beq.n	80142fa <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x192>
 80142e8:	4b16      	ldr	r3, [pc, #88]	; (8014344 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1dc>)
 80142ea:	6965      	ldr	r5, [r4, #20]
 80142ec:	9301      	str	r3, [sp, #4]
 80142ee:	4b16      	ldr	r3, [pc, #88]	; (8014348 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e0>)
 80142f0:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80142f4:	9300      	str	r3, [sp, #0]
 80142f6:	234e      	movs	r3, #78	; 0x4e
 80142f8:	e7ba      	b.n	8014270 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x108>
  micro_context->DeallocateTempTfLiteTensor(input);
 80142fa:	6833      	ldr	r3, [r6, #0]
 80142fc:	4639      	mov	r1, r7
 80142fe:	4630      	mov	r0, r6
 8014300:	699b      	ldr	r3, [r3, #24]
 8014302:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8014304:	6833      	ldr	r3, [r6, #0]
 8014306:	4630      	mov	r0, r6
 8014308:	4629      	mov	r1, r5
 801430a:	699b      	ldr	r3, [r3, #24]
 801430c:	4798      	blx	r3
  return kTfLiteOk;
 801430e:	2000      	movs	r0, #0
 8014310:	e73f      	b.n	8014192 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
 8014312:	bf00      	nop
 8014314:	080fbed7 	.word	0x080fbed7
 8014318:	080fcda1 	.word	0x080fcda1
 801431c:	080f93a5 	.word	0x080f93a5
 8014320:	080fbcfa 	.word	0x080fbcfa
 8014324:	080fbae8 	.word	0x080fbae8
 8014328:	080fc3f1 	.word	0x080fc3f1
 801432c:	080fcddf 	.word	0x080fcddf
 8014330:	080fcde2 	.word	0x080fcde2
 8014334:	080f982c 	.word	0x080f982c
 8014338:	080fbfbd 	.word	0x080fbfbd
 801433c:	080fbfca 	.word	0x080fbfca
 8014340:	080fc37f 	.word	0x080fc37f
 8014344:	080fcdee 	.word	0x080fcdee
 8014348:	080fce02 	.word	0x080fce02

0801434c <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus PrepareReshapeReference(TfLiteContext* context, TfLiteNode* node) {
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 801434c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus PrepareReshapeReference(TfLiteContext* context, TfLiteNode* node) {
 801434e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014350:	4605      	mov	r5, r0
 8014352:	b085      	sub	sp, #20
 8014354:	460c      	mov	r4, r1
 8014356:	b1ab      	cbz	r3, 8014384 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x38>
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	3b01      	subs	r3, #1
 801435c:	2b01      	cmp	r3, #1
 801435e:	d811      	bhi.n	8014384 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x38>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8014360:	684b      	ldr	r3, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8014362:	b9d3      	cbnz	r3, 801439a <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x4e>
 8014364:	696e      	ldr	r6, [r5, #20]
 8014366:	b103      	cbz	r3, 801436a <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x1e>
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2401      	movs	r4, #1
 801436c:	4a18      	ldr	r2, [pc, #96]	; (80143d0 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x84>)
 801436e:	4919      	ldr	r1, [pc, #100]	; (80143d4 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x88>)
 8014370:	4628      	mov	r0, r5
 8014372:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014376:	4b18      	ldr	r3, [pc, #96]	; (80143d8 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x8c>)
 8014378:	9301      	str	r3, [sp, #4]
 801437a:	4b18      	ldr	r3, [pc, #96]	; (80143dc <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x90>)
 801437c:	9300      	str	r3, [sp, #0]
 801437e:	2359      	movs	r3, #89	; 0x59
 8014380:	47b0      	blx	r6
 8014382:	e007      	b.n	8014394 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x48>
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8014384:	4b16      	ldr	r3, [pc, #88]	; (80143e0 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x94>)
 8014386:	4628      	mov	r0, r5
 8014388:	696c      	ldr	r4, [r5, #20]
 801438a:	9300      	str	r3, [sp, #0]
 801438c:	2358      	movs	r3, #88	; 0x58
 801438e:	4a10      	ldr	r2, [pc, #64]	; (80143d0 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x84>)
 8014390:	4914      	ldr	r1, [pc, #80]	; (80143e4 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x98>)
 8014392:	47a0      	blx	r4
 8014394:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
 8014396:	b005      	add	sp, #20
 8014398:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801439a:	681e      	ldr	r6, [r3, #0]
 801439c:	2e01      	cmp	r6, #1
 801439e:	d1e1      	bne.n	8014364 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x18>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 80143a0:	f7ff fee2 	bl	8014168 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80143a4:	2800      	cmp	r0, #0
 80143a6:	d0f6      	beq.n	8014396 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x4a>
 80143a8:	4621      	mov	r1, r4
 80143aa:	4628      	mov	r0, r5
 80143ac:	696f      	ldr	r7, [r5, #20]
 80143ae:	f7ff fedb 	bl	8014168 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80143b2:	2300      	movs	r3, #0
 80143b4:	4a06      	ldr	r2, [pc, #24]	; (80143d0 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x84>)
 80143b6:	4907      	ldr	r1, [pc, #28]	; (80143d4 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x88>)
 80143b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80143bc:	4b0a      	ldr	r3, [pc, #40]	; (80143e8 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x9c>)
 80143be:	4628      	mov	r0, r5
 80143c0:	9301      	str	r3, [sp, #4]
 80143c2:	4b0a      	ldr	r3, [pc, #40]	; (80143ec <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xa0>)
 80143c4:	9300      	str	r3, [sp, #0]
 80143c6:	235a      	movs	r3, #90	; 0x5a
 80143c8:	47b8      	blx	r7
 80143ca:	4630      	mov	r0, r6
 80143cc:	e7e3      	b.n	8014396 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x4a>
 80143ce:	bf00      	nop
 80143d0:	080fcda1 	.word	0x080fcda1
 80143d4:	080f982c 	.word	0x080f982c
 80143d8:	080fca44 	.word	0x080fca44
 80143dc:	080fc4a0 	.word	0x080fc4a0
 80143e0:	080fce15 	.word	0x080fce15
 80143e4:	080f93a5 	.word	0x080f93a5
 80143e8:	080fce42 	.word	0x080fce42
 80143ec:	080fce4c 	.word	0x080fce4c

080143f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80143f0:	b570      	push	{r4, r5, r6, lr}
 80143f2:	4604      	mov	r4, r0
 80143f4:	460e      	mov	r6, r1
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80143f6:	2200      	movs	r2, #0
 80143f8:	f7fb fc63 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80143fc:	2200      	movs	r2, #0
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80143fe:	4605      	mov	r5, r0
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8014400:	4631      	mov	r1, r6
 8014402:	4620      	mov	r0, r4
 8014404:	f7fb fc5f 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8014408:	4604      	mov	r4, r0
  if (output->type != kTfLiteInt32) {
 801440a:	7a00      	ldrb	r0, [r0, #8]
 801440c:	2802      	cmp	r0, #2
 801440e:	d008      	beq.n	8014422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x32>
    MicroPrintf("Output type %s (%d) not supported.",
 8014410:	f7f3 fe4e 	bl	80080b0 <TfLiteTypeGetName>
 8014414:	7a22      	ldrb	r2, [r4, #8]
 8014416:	4601      	mov	r1, r0
 8014418:	4809      	ldr	r0, [pc, #36]	; (8014440 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>)
 801441a:	f7f6 fc4d 	bl	800acb8 <_Z11MicroPrintfPKcz>
                TfLiteTypeGetName(output->type), output->type);
    return kTfLiteError;
 801441e:	2001      	movs	r0, #1
  } else {
    ExtractShape(input, tflite::micro::GetTensorData<int32_t>(output));
  }

  return kTfLiteOk;
}
 8014420:	bd70      	pop	{r4, r5, r6, pc}
  for (int i = 0; i < input->dims->size; ++i) {
 8014422:	686a      	ldr	r2, [r5, #4]
 8014424:	2300      	movs	r3, #0
 8014426:	6821      	ldr	r1, [r4, #0]
 8014428:	f852 4b04 	ldr.w	r4, [r2], #4
 801442c:	429c      	cmp	r4, r3
 801442e:	dd05      	ble.n	801443c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c>
    output_data[i] = input->dims->data[i];
 8014430:	f852 0b04 	ldr.w	r0, [r2], #4
 8014434:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  for (int i = 0; i < input->dims->size; ++i) {
 8014438:	3301      	adds	r3, #1
 801443a:	e7f7      	b.n	801442c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return kTfLiteOk;
 801443c:	2000      	movs	r0, #0
 801443e:	e7ef      	b.n	8014420 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30>
 8014440:	080fce69 	.word	0x080fce69

08014444 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8014444:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014446:	b530      	push	{r4, r5, lr}
 8014448:	b085      	sub	sp, #20
  return node->inputs == nullptr ? 0 : node->inputs->size;
 801444a:	b113      	cbz	r3, 8014452 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	2a01      	cmp	r2, #1
 8014450:	d010      	beq.n	8014474 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
 8014452:	6945      	ldr	r5, [r0, #20]
 8014454:	b103      	cbz	r3, 8014458 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2401      	movs	r4, #1
 801445a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801445e:	4b0f      	ldr	r3, [pc, #60]	; (801449c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>)
 8014460:	9301      	str	r3, [sp, #4]
 8014462:	4b0f      	ldr	r3, [pc, #60]	; (80144a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>)
 8014464:	9300      	str	r3, [sp, #0]
 8014466:	2327      	movs	r3, #39	; 0x27
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8014468:	4a0e      	ldr	r2, [pc, #56]	; (80144a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x60>)
 801446a:	490f      	ldr	r1, [pc, #60]	; (80144a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>)
 801446c:	47a8      	blx	r5
 801446e:	4620      	mov	r0, r4
}
 8014470:	b005      	add	sp, #20
 8014472:	bd30      	pop	{r4, r5, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8014474:	684b      	ldr	r3, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8014476:	b113      	cbz	r3, 801447e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 8014478:	681a      	ldr	r2, [r3, #0]
 801447a:	2a01      	cmp	r2, #1
 801447c:	d00b      	beq.n	8014496 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x52>
 801447e:	6945      	ldr	r5, [r0, #20]
 8014480:	b103      	cbz	r3, 8014484 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	2401      	movs	r4, #1
 8014486:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801448a:	4b04      	ldr	r3, [pc, #16]	; (801449c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>)
 801448c:	9301      	str	r3, [sp, #4]
 801448e:	4b07      	ldr	r3, [pc, #28]	; (80144ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>)
 8014490:	9300      	str	r3, [sp, #0]
 8014492:	2328      	movs	r3, #40	; 0x28
 8014494:	e7e8      	b.n	8014468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
 8014496:	2000      	movs	r0, #0
 8014498:	e7ea      	b.n	8014470 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
 801449a:	bf00      	nop
 801449c:	080fca44 	.word	0x080fca44
 80144a0:	080fc490 	.word	0x080fc490
 80144a4:	080fce8c 	.word	0x080fce8c
 80144a8:	080f982c 	.word	0x080f982c
 80144ac:	080fc4a0 	.word	0x080fc4a0

080144b0 <_ZN6tflite14Register_SHAPEEv>:

}  // namespace

TFLMRegistration Register_SHAPE() {
 80144b0:	b513      	push	{r0, r1, r4, lr}
  return tflite::micro::RegisterOp(nullptr, Prepare, Eval);
 80144b2:	2100      	movs	r1, #0
TFLMRegistration Register_SHAPE() {
 80144b4:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(nullptr, Prepare, Eval);
 80144b6:	4b04      	ldr	r3, [pc, #16]	; (80144c8 <_ZN6tflite14Register_SHAPEEv+0x18>)
 80144b8:	4a04      	ldr	r2, [pc, #16]	; (80144cc <_ZN6tflite14Register_SHAPEEv+0x1c>)
 80144ba:	e9cd 1100 	strd	r1, r1, [sp]
 80144be:	f7fb fbd9 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 80144c2:	4620      	mov	r0, r4
 80144c4:	b002      	add	sp, #8
 80144c6:	bd10      	pop	{r4, pc}
 80144c8:	080143f1 	.word	0x080143f1
 80144cc:	08014445 	.word	0x08014445

080144d0 <_ZN6tflite9LUTLookupEsPKs>:
  const uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 80144d0:	11c3      	asrs	r3, r0, #7
  const int16_t offset = value & 0x7f;
 80144d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  const uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 80144d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
  const int16_t base = lut[index];
 80144da:	b29b      	uxth	r3, r3
  const int16_t slope = lut[index + 1] - lut[index];
 80144dc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80144e0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80144e4:	884b      	ldrh	r3, [r1, #2]
  const int delta = (slope * offset + 64) >> 7;
 80144e6:	2140      	movs	r1, #64	; 0x40
  const int16_t slope = lut[index + 1] - lut[index];
 80144e8:	1a9b      	subs	r3, r3, r2
  const int delta = (slope * offset + 64) >> 7;
 80144ea:	fb13 1000 	smlabb	r0, r3, r0, r1
  return static_cast<int16_t>(base + delta);
 80144ee:	eb02 10e0 	add.w	r0, r2, r0, asr #7
}
 80144f2:	b200      	sxth	r0, r0
 80144f4:	4770      	bx	lr
	...

080144f8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 80144f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80144fc:	680d      	ldr	r5, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
 80144fe:	460e      	mov	r6, r1
 8014500:	461f      	mov	r7, r3
 8014502:	4683      	mov	fp, r0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014504:	3d01      	subs	r5, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014506:	4630      	mov	r0, r6
                    const RuntimeShape& output_shape, float* output_data) {
 8014508:	4614      	mov	r4, r2
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801450a:	461a      	mov	r2, r3
 801450c:	4629      	mov	r1, r5
                    const RuntimeShape& output_shape, float* output_data) {
 801450e:	ed2d 8b04 	vpush	{d8-d9}
 8014512:	b087      	sub	sp, #28

  for (int i = 0; i < outer_size; ++i) {
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8014514:	ed9f 9a30 	vldr	s18, [pc, #192]	; 80145d8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe0>
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014518:	f7fb fc40 	bl	800fd9c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801451c:	462b      	mov	r3, r5
 801451e:	463a      	mov	r2, r7
 8014520:	4629      	mov	r1, r5
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014522:	4682      	mov	sl, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014524:	4630      	mov	r0, r6
 8014526:	f7f7 ff93 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  for (int i = 0; i < outer_size; ++i) {
 801452a:	2700      	movs	r7, #0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801452c:	4606      	mov	r6, r0
 801452e:	ea4f 0980 	mov.w	r9, r0, lsl #2
 8014532:	9d14      	ldr	r5, [sp, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8014534:	4557      	cmp	r7, sl
 8014536:	da4a      	bge.n	80145ce <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd6>
    float max = std::numeric_limits<float>::lowest();
 8014538:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
 801453a:	2200      	movs	r2, #0
    float max = std::numeric_limits<float>::lowest();
 801453c:	ed8d 9a05 	vstr	s18, [sp, #20]
    for (int c = 0; c < depth; ++c) {
 8014540:	42b2      	cmp	r2, r6
 8014542:	da10      	bge.n	8014566 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x6e>
      max = std::max(max, input_data[i * depth + c]);
 8014544:	460b      	mov	r3, r1
      if (__a < __b)
 8014546:	eddd 7a05 	vldr	s15, [sp, #20]
      return __a;
 801454a:	a805      	add	r0, sp, #20
 801454c:	3104      	adds	r1, #4
      if (__a < __b)
 801454e:	ed93 7a00 	vldr	s14, [r3]
    for (int c = 0; c < depth; ++c) {
 8014552:	3201      	adds	r2, #1
 8014554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
 801455c:	bfd8      	it	le
 801455e:	4603      	movle	r3, r0
      max = std::max(max, input_data[i * depth + c]);
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
 8014564:	e7ec      	b.n	8014540 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x48>
 8014566:	462b      	mov	r3, r5
 8014568:	4622      	mov	r2, r4
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
 801456a:	f04f 0800 	mov.w	r8, #0
    float sum = 0.f;
 801456e:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 80145dc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe4>
    for (int c = 0; c < depth; ++c) {
 8014572:	45b0      	cmp	r8, r6
 8014574:	9302      	str	r3, [sp, #8]
 8014576:	da1a      	bge.n	80145ae <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb6>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8014578:	ecf2 8a01 	vldmia	r2!, {s17}
    for (int c = 0; c < depth; ++c) {
 801457c:	f108 0801 	add.w	r8, r8, #1
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8014580:	ed9d 0a05 	vldr	s0, [sp, #20]
 8014584:	9201      	str	r2, [sp, #4]
 8014586:	ee78 8ac0 	vsub.f32	s17, s17, s0
 801458a:	9203      	str	r2, [sp, #12]
                                   static_cast<float>(params.beta));
 801458c:	e9db 0100 	ldrd	r0, r1, [fp]
 8014590:	f7ec fb16 	bl	8000bc0 <__aeabi_d2f>
  { return __builtin_expf(__x); }
 8014594:	ee07 0a90 	vmov	s15, r0
 8014598:	ee28 0aa7 	vmul.f32	s0, s17, s15
 801459c:	f002 fa78 	bl	8016a90 <expf>
      output_data[i * depth + c] = exp_c;
 80145a0:	9b02      	ldr	r3, [sp, #8]
      sum += exp_c;
 80145a2:	ee38 8a00 	vadd.f32	s16, s16, s0
    for (int c = 0; c < depth; ++c) {
 80145a6:	9a01      	ldr	r2, [sp, #4]
      output_data[i * depth + c] = exp_c;
 80145a8:	eca3 0a01 	vstmia	r3!, {s0}
    for (int c = 0; c < depth; ++c) {
 80145ac:	e7e1      	b.n	8014572 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7a>
 80145ae:	462a      	mov	r2, r5
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 80145b0:	2300      	movs	r3, #0
 80145b2:	42b3      	cmp	r3, r6
 80145b4:	da07      	bge.n	80145c6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xce>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80145b6:	ed92 7a00 	vldr	s14, [r2]
    for (int c = 0; c < depth; ++c) {
 80145ba:	3301      	adds	r3, #1
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80145bc:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80145c0:	ece2 7a01 	vstmia	r2!, {s15}
    for (int c = 0; c < depth; ++c) {
 80145c4:	e7f5      	b.n	80145b2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xba>
  for (int i = 0; i < outer_size; ++i) {
 80145c6:	3701      	adds	r7, #1
 80145c8:	444d      	add	r5, r9
 80145ca:	444c      	add	r4, r9
 80145cc:	e7b2      	b.n	8014534 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 80145ce:	b007      	add	sp, #28
 80145d0:	ecbd 8b04 	vpop	{d8-d9}
 80145d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d8:	ff7fffff 	.word	0xff7fffff
 80145dc:	00000000 	.word	0x00000000

080145e0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 80145e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80145e4:	680c      	ldr	r4, [r1, #0]
                         int16_t* output_data) {
 80145e6:	460d      	mov	r5, r1
 80145e8:	b08d      	sub	sp, #52	; 0x34
 80145ea:	461f      	mov	r7, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80145ec:	3c01      	subs	r4, #1
                         int16_t* output_data) {
 80145ee:	4680      	mov	r8, r0
 80145f0:	4693      	mov	fp, r2
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80145f2:	4628      	mov	r0, r5
 80145f4:	461a      	mov	r2, r3
 80145f6:	4621      	mov	r1, r4
 80145f8:	f7fb fbd0 	bl	800fd9c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80145fc:	4623      	mov	r3, r4
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80145fe:	9003      	str	r0, [sp, #12]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014600:	4621      	mov	r1, r4
 8014602:	4628      	mov	r0, r5
 8014604:	463a      	mov	r2, r7
 8014606:	f7f7 ff23 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>

  for (int i = 0; i < outer_size; ++i) {
 801460a:	f04f 0900 	mov.w	r9, #0
 801460e:	0043      	lsls	r3, r0, #1
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014610:	4605      	mov	r5, r0
 8014612:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014614:	9302      	str	r3, [sp, #8]
  for (int i = 0; i < outer_size; ++i) {
 8014616:	9b03      	ldr	r3, [sp, #12]
 8014618:	4599      	cmp	r9, r3
 801461a:	f280 80ba 	bge.w	8014792 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1b2>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801461e:	a90c      	add	r1, sp, #48	; 0x30
 8014620:	f248 0300 	movw	r3, #32768	; 0x8000
 8014624:	4658      	mov	r0, fp
    for (int c = 0; c < depth; ++c) {
 8014626:	2200      	movs	r2, #0
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 8014628:	f821 3d12 	strh.w	r3, [r1, #-18]!
    for (int c = 0; c < depth; ++c) {
 801462c:	42aa      	cmp	r2, r5
 801462e:	da0e      	bge.n	801464e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x6e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014630:	4603      	mov	r3, r0
      if (__a < __b)
 8014632:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
 8014636:	3002      	adds	r0, #2
    for (int c = 0; c < depth; ++c) {
 8014638:	3201      	adds	r2, #1
 801463a:	f9b3 7000 	ldrsh.w	r7, [r3]
 801463e:	42b7      	cmp	r7, r6
      return __a;
 8014640:	bfd8      	it	le
 8014642:	460b      	movle	r3, r1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014648:	f8ad 301e 	strh.w	r3, [sp, #30]
    for (int c = 0; c < depth; ++c) {
 801464c:	e7ee      	b.n	801462c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4c>
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    for (int c = 0; c < depth; ++c) {
 801464e:	f04f 0a00 	mov.w	sl, #0
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8014652:	f647 77ff 	movw	r7, #32767	; 0x7fff
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8014656:	4656      	mov	r6, sl
    for (int c = 0; c < depth; ++c) {
 8014658:	45aa      	cmp	sl, r5
 801465a:	da24      	bge.n	80146a6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc6>
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801465c:	f93b 001a 	ldrsh.w	r0, [fp, sl, lsl #1]
 8014660:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
      input_diff, params.input_multiplier, params.input_left_shift);
 8014664:	e9d8 1202 	ldrd	r1, r2, [r8, #8]
 8014668:	1ac0      	subs	r0, r0, r3
 801466a:	f7f3 fd2d 	bl	80080c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
               static_cast<int32_t>(32767));
 801466e:	4b4a      	ldr	r3, [pc, #296]	; (8014798 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1b8>)
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8014670:	4438      	add	r0, r7
               static_cast<int32_t>(32767));
 8014672:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014676:	930b      	str	r3, [sp, #44]	; 0x2c
      if (__a < __b)
 8014678:	4298      	cmp	r0, r3
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801467a:	9009      	str	r0, [sp, #36]	; 0x24
               static_cast<int32_t>(32767));
 801467c:	920a      	str	r2, [sp, #40]	; 0x28
      return __a;
 801467e:	bfac      	ite	ge
 8014680:	ab09      	addge	r3, sp, #36	; 0x24
	return __b;
 8014682:	ab0b      	addlt	r3, sp, #44	; 0x2c
  return LUTLookup(sat_sym_scaled_diff, params.exp_lut);
 8014684:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
      if (__b < __a)
 8014688:	681a      	ldr	r2, [r3, #0]
 801468a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
 801468e:	bfa8      	it	ge
 8014690:	ab0a      	addge	r3, sp, #40	; 0x28
 8014692:	f9b3 0000 	ldrsh.w	r0, [r3]
 8014696:	f7ff ff1b 	bl	80144d0 <_ZN6tflite9LUTLookupEsPKs>
      exp_results_Q015[c] =
 801469a:	f824 001a 	strh.w	r0, [r4, sl, lsl #1]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
 801469e:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
 80146a0:	f10a 0a01 	add.w	sl, sl, #1
 80146a4:	e7d8      	b.n	8014658 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x78>
    return __builtin_clz(integer_input);
 80146a6:	fab6 f186 	clz	r1, r6

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80146aa:	17f3      	asrs	r3, r6, #31
 80146ac:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 80146b0:	1e48      	subs	r0, r1, #1
 80146b2:	f1a1 0c21 	sub.w	ip, r1, #33	; 0x21
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 80146b6:	b2cf      	uxtb	r7, r1
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80146b8:	fa06 fc0c 	lsl.w	ip, r6, ip
 80146bc:	f1c0 0120 	rsb	r1, r0, #32
 80146c0:	4083      	lsls	r3, r0
 80146c2:	fa26 f101 	lsr.w	r1, r6, r1
 80146c6:	ea43 030c 	orr.w	r3, r3, ip
 80146ca:	430b      	orrs	r3, r1
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
                 static_cast<int32_t>(32767)));
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 =
        LUTLookup(sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 80146cc:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	fa06 f300 	lsl.w	r3, r6, r0
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146dc:	f512 5200 	adds.w	r2, r2, #8192	; 0x2000
 80146e0:	f143 0300 	adc.w	r3, r3, #0
         (1 << 13)) >>
 80146e4:	0b92      	lsrs	r2, r2, #14
 80146e6:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
                 static_cast<int32_t>(32767)));
 80146ea:	4b2b      	ldr	r3, [pc, #172]	; (8014798 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1b8>)
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 80146ec:	f5a2 32c0 	sub.w	r2, r2, #98304	; 0x18000
                 static_cast<int32_t>(32767)));
 80146f0:	930a      	str	r3, [sp, #40]	; 0x28
      if (__a < __b)
 80146f2:	429a      	cmp	r2, r3
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 80146f4:	9208      	str	r2, [sp, #32]
                 static_cast<int32_t>(32767)));
 80146f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
      return __a;
 80146fa:	bfac      	ite	ge
 80146fc:	ab08      	addge	r3, sp, #32
	return __b;
 80146fe:	ab0a      	addlt	r3, sp, #40	; 0x28
 8014700:	920b      	str	r2, [sp, #44]	; 0x2c
      if (__b < __a)
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
 8014708:	bfa8      	it	ge
 801470a:	ab0b      	addge	r3, sp, #44	; 0x2c
        LUTLookup(sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801470c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8014710:	f7ff fede 	bl	80144d0 <_ZN6tflite9LUTLookupEsPKs>

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
      uint8_t right_shift = 31 - headroom_plus_one;
 8014714:	f1c7 031f 	rsb	r3, r7, #31
      int64_t round = 1 << (right_shift - 1);
 8014718:	2201      	movs	r2, #1
      uint8_t right_shift = 31 - headroom_plus_one;
 801471a:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
 801471c:	1e59      	subs	r1, r3, #1
 801471e:	408a      	lsls	r2, r1
    for (int c = 0; c < depth; ++c) {
 8014720:	2100      	movs	r1, #0
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8014722:	4616      	mov	r6, r2
 8014724:	17d7      	asrs	r7, r2, #31
 8014726:	e9cd 6704 	strd	r6, r7, [sp, #16]
    for (int c = 0; c < depth; ++c) {
 801472a:	42a9      	cmp	r1, r5
 801472c:	da2b      	bge.n	8014786 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1a6>
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801472e:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
                        round) >>
 8014732:	f1c3 0e20 	rsb	lr, r3, #32
 8014736:	f1b3 0c20 	subs.w	ip, r3, #32
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801473a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801473e:	fbc2 6780 	smlalbb	r6, r7, r2, r0
                        round) >>
 8014742:	fa26 f203 	lsr.w	r2, r6, r3
 8014746:	fa07 fe0e 	lsl.w	lr, r7, lr
 801474a:	bf58      	it	pl
 801474c:	fa47 fc0c 	asrpl.w	ip, r7, ip
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
                   static_cast<int32_t>(32767)));
 8014750:	f04f 0600 	mov.w	r6, #0
                        round) >>
 8014754:	ea42 020e 	orr.w	r2, r2, lr
                   static_cast<int32_t>(32767)));
 8014758:	960a      	str	r6, [sp, #40]	; 0x28
                        round) >>
 801475a:	bf58      	it	pl
 801475c:	ea42 020c 	orrpl.w	r2, r2, ip
      if (__a < __b)
 8014760:	42b2      	cmp	r2, r6
	return __b;
 8014762:	ae0a      	add	r6, sp, #40	; 0x28
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8014764:	9209      	str	r2, [sp, #36]	; 0x24
 8014766:	aa09      	add	r2, sp, #36	; 0x24
 8014768:	bfb8      	it	lt
 801476a:	4632      	movlt	r2, r6
                   static_cast<int32_t>(32767)));
 801476c:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8014770:	960b      	str	r6, [sp, #44]	; 0x2c
      if (__b < __a)
 8014772:	6816      	ldr	r6, [r2, #0]
 8014774:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
	return __b;
 8014778:	bfa8      	it	ge
 801477a:	4652      	movge	r2, sl
      output_data[i * depth + c] = static_cast<int16_t>(
 801477c:	6812      	ldr	r2, [r2, #0]
 801477e:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
    for (int c = 0; c < depth; ++c) {
 8014782:	3101      	adds	r1, #1
 8014784:	e7d1      	b.n	801472a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x14a>
 8014786:	9b02      	ldr	r3, [sp, #8]
  for (int i = 0; i < outer_size; ++i) {
 8014788:	f109 0901 	add.w	r9, r9, #1
 801478c:	441c      	add	r4, r3
 801478e:	449b      	add	fp, r3
 8014790:	e741      	b.n	8014616 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x36>
    }
  }
}
 8014792:	b00d      	add	sp, #52	; 0x34
 8014794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014798:	ffff8000 	.word	0xffff8000

0801479c <_ZN6tflite16Register_SOFTMAXEv>:
  }
}
}  // namespace

TFLMRegistration Register_SOFTMAX() {
  return tflite::micro::RegisterOp(SoftmaxInit, SoftmaxPrepare, SoftmaxEval);
 801479c:	2300      	movs	r3, #0
 801479e:	4a06      	ldr	r2, [pc, #24]	; (80147b8 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
TFLMRegistration Register_SOFTMAX() {
 80147a0:	b513      	push	{r0, r1, r4, lr}
 80147a2:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(SoftmaxInit, SoftmaxPrepare, SoftmaxEval);
 80147a4:	4905      	ldr	r1, [pc, #20]	; (80147bc <_ZN6tflite16Register_SOFTMAXEv+0x20>)
 80147a6:	e9cd 3300 	strd	r3, r3, [sp]
 80147aa:	4b05      	ldr	r3, [pc, #20]	; (80147c0 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 80147ac:	f7fb fa62 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 80147b0:	4620      	mov	r0, r4
 80147b2:	b002      	add	sp, #8
 80147b4:	bd10      	pop	{r4, pc}
 80147b6:	bf00      	nop
 80147b8:	0801506d 	.word	0x0801506d
 80147bc:	08014b3b 	.word	0x08014b3b
 80147c0:	08014a2d 	.word	0x08014a2d

080147c4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80147c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80147c8:	680d      	ldr	r5, [r1, #0]
inline void Softmax(const SoftmaxParams& params,
 80147ca:	b08d      	sub	sp, #52	; 0x34
 80147cc:	461f      	mov	r7, r3
  const int32_t input_beta_multiplier = params.input_multiplier;
 80147ce:	6883      	ldr	r3, [r0, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80147d0:	3d01      	subs	r5, #1
inline void Softmax(const SoftmaxParams& params,
 80147d2:	460e      	mov	r6, r1
  const int32_t input_beta_multiplier = params.input_multiplier;
 80147d4:	9300      	str	r3, [sp, #0]
inline void Softmax(const SoftmaxParams& params,
 80147d6:	4614      	mov	r4, r2
  const int32_t input_beta_left_shift = params.input_left_shift;
 80147d8:	68c3      	ldr	r3, [r0, #12]
  const int outer_size =
 80147da:	463a      	mov	r2, r7
 80147dc:	4629      	mov	r1, r5
  const int diff_min = params.diff_min;
 80147de:	f8d0 a018 	ldr.w	sl, [r0, #24]
  const int outer_size =
 80147e2:	4630      	mov	r0, r6
  const int32_t input_beta_left_shift = params.input_left_shift;
 80147e4:	9301      	str	r3, [sp, #4]
  const int outer_size =
 80147e6:	f7fb fad9 	bl	800fd9c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
 80147ea:	462b      	mov	r3, r5
  const int outer_size =
 80147ec:	9002      	str	r0, [sp, #8]
  const int depth =
 80147ee:	463a      	mov	r2, r7
 80147f0:	4629      	mov	r1, r5
 80147f2:	4630      	mov	r0, r6
 80147f4:	f7f7 fe2c 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80147f8:	4267      	negs	r7, r4
 80147fa:	0043      	lsls	r3, r0, #1
 80147fc:	4605      	mov	r5, r0
 80147fe:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  for (int i = 0; i < outer_size; ++i) {
 8014802:	f04f 0900 	mov.w	r9, #0
 8014806:	9303      	str	r3, [sp, #12]
 8014808:	9b02      	ldr	r3, [sp, #8]
 801480a:	4599      	cmp	r9, r3
 801480c:	da74      	bge.n	80148f8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x134>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801480e:	a90c      	add	r1, sp, #48	; 0x30
 8014810:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8014814:	4622      	mov	r2, r4
 8014816:	f801 3d11 	strb.w	r3, [r1, #-17]!
    for (int c = 0; c < depth; ++c) {
 801481a:	19d3      	adds	r3, r2, r7
 801481c:	429d      	cmp	r5, r3
 801481e:	dd0d      	ble.n	801483c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x78>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014820:	4613      	mov	r3, r2
      if (__a < __b)
 8014822:	f99d 001f 	ldrsb.w	r0, [sp, #31]
 8014826:	3201      	adds	r2, #1
 8014828:	f993 6000 	ldrsb.w	r6, [r3]
 801482c:	4286      	cmp	r6, r0
      return __a;
 801482e:	bfd8      	it	le
 8014830:	460b      	movle	r3, r1
 8014832:	f993 3000 	ldrsb.w	r3, [r3]
 8014836:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
 801483a:	e7ee      	b.n	801481a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x56>
 801483c:	46a3      	mov	fp, r4
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801483e:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
 8014840:	eb0b 0307 	add.w	r3, fp, r7
 8014844:	429d      	cmp	r5, r3
 8014846:	dd12      	ble.n	801486e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8014848:	f91b 0b01 	ldrsb.w	r0, [fp], #1
 801484c:	f99d 301f 	ldrsb.w	r3, [sp, #31]
      int32_t input_diff =
 8014850:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
 8014852:	4582      	cmp	sl, r0
 8014854:	dcf4      	bgt.n	8014840 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
                                           quantized_multiplier);
 8014856:	e9dd 1300 	ldrd	r1, r3, [sp]
 801485a:	4098      	lsls	r0, r3
 801485c:	f7f3 fe42 	bl	80084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8014860:	f7fb fb04 	bl	800fe6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8014864:	210c      	movs	r1, #12
 8014866:	f7f3 fe81 	bl	800856c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
  return a + b;
 801486a:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
 801486c:	e7e8      	b.n	8014840 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801486e:	aa08      	add	r2, sp, #32
 8014870:	4630      	mov	r0, r6
 8014872:	210c      	movs	r1, #12
    for (int c = 0; c < depth; ++c) {
 8014874:	2600      	movs	r6, #0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8014876:	f7fa fc0f 	bl	800f098 <_ZN6tflite13GetReciprocalEliPi>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801487a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801487e:	4683      	mov	fp, r0
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8014880:	f647 72ff 	movw	r2, #32767	; 0x7fff
    for (int c = 0; c < depth; ++c) {
 8014884:	42ae      	cmp	r6, r5
 8014886:	da30      	bge.n	80148ea <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8014888:	57a0      	ldrsb	r0, [r4, r6]
 801488a:	f99d 101f 	ldrsb.w	r1, [sp, #31]
      int32_t input_diff =
 801488e:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
 8014890:	4582      	cmp	sl, r0
 8014892:	dc27      	bgt.n	80148e4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x120>
 8014894:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8014898:	e9dd 1300 	ldrd	r1, r3, [sp]
 801489c:	4098      	lsls	r0, r3
 801489e:	f7f3 fe21 	bl	80084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80148a2:	f7fb fae3 	bl	800fe6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
            (shifted_scale * exp_in_0).raw(),
 80148a6:	4601      	mov	r1, r0
 80148a8:	4658      	mov	r0, fp
 80148aa:	f7fb faab 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80148ae:	9908      	ldr	r1, [sp, #32]
 80148b0:	310f      	adds	r1, #15
 80148b2:	f7f3 fe5b 	bl	800856c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
            unsat_output +
 80148b6:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 80148ba:	9a05      	ldr	r2, [sp, #20]
      if (__b < __a)
 80148bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        const int32_t shifted_output =
 80148c0:	9009      	str	r0, [sp, #36]	; 0x24
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 80148c2:	480f      	ldr	r0, [pc, #60]	; (8014900 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13c>)
      return __a;
 80148c4:	bfb4      	ite	lt
 80148c6:	a909      	addlt	r1, sp, #36	; 0x24
	return __b;
 80148c8:	a90a      	addge	r1, sp, #40	; 0x28
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 80148ca:	920a      	str	r2, [sp, #40]	; 0x28
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 80148cc:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__a < __b)
 80148ce:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
 80148d0:	9b04      	ldr	r3, [sp, #16]
      if (__a < __b)
 80148d2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
 80148d6:	bfb8      	it	lt
 80148d8:	a90b      	addlt	r1, sp, #44	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80148da:	6809      	ldr	r1, [r1, #0]
 80148dc:	f828 1016 	strh.w	r1, [r8, r6, lsl #1]
    for (int c = 0; c < depth; ++c) {
 80148e0:	3601      	adds	r6, #1
 80148e2:	e7cf      	b.n	8014884 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 80148e4:	f828 3016 	strh.w	r3, [r8, r6, lsl #1]
 80148e8:	e7fa      	b.n	80148e0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11c>
 80148ea:	9b03      	ldr	r3, [sp, #12]
  for (int i = 0; i < outer_size; ++i) {
 80148ec:	f109 0901 	add.w	r9, r9, #1
 80148f0:	442c      	add	r4, r5
 80148f2:	1b7f      	subs	r7, r7, r5
 80148f4:	4498      	add	r8, r3
 80148f6:	e787      	b.n	8014808 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x44>
}
 80148f8:	b00d      	add	sp, #52	; 0x34
 80148fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148fe:	bf00      	nop
 8014900:	ffff8000 	.word	0xffff8000

08014904 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8014904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014908:	680d      	ldr	r5, [r1, #0]
inline void Softmax(const SoftmaxParams& params,
 801490a:	b08b      	sub	sp, #44	; 0x2c
 801490c:	461f      	mov	r7, r3
  const int32_t input_beta_multiplier = params.input_multiplier;
 801490e:	6883      	ldr	r3, [r0, #8]
inline void Softmax(const SoftmaxParams& params,
 8014910:	460e      	mov	r6, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014912:	3d01      	subs	r5, #1
  const int32_t input_beta_multiplier = params.input_multiplier;
 8014914:	9300      	str	r3, [sp, #0]
inline void Softmax(const SoftmaxParams& params,
 8014916:	4614      	mov	r4, r2
  const int32_t input_beta_left_shift = params.input_left_shift;
 8014918:	68c3      	ldr	r3, [r0, #12]
  const int outer_size =
 801491a:	463a      	mov	r2, r7
 801491c:	4629      	mov	r1, r5
  const int diff_min = params.diff_min;
 801491e:	f8d0 9018 	ldr.w	r9, [r0, #24]
  const int outer_size =
 8014922:	4630      	mov	r0, r6
  const int32_t input_beta_left_shift = params.input_left_shift;
 8014924:	9301      	str	r3, [sp, #4]
  const int outer_size =
 8014926:	f7fb fa39 	bl	800fd9c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
 801492a:	462b      	mov	r3, r5
  const int outer_size =
 801492c:	9002      	str	r0, [sp, #8]
  const int depth =
 801492e:	463a      	mov	r2, r7
 8014930:	4629      	mov	r1, r5
 8014932:	4630      	mov	r0, r6
 8014934:	f7f7 fd8c 	bl	800c450 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014938:	4265      	negs	r5, r4
 801493a:	4680      	mov	r8, r0
 801493c:	9e14      	ldr	r6, [sp, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801493e:	2700      	movs	r7, #0
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8014940:	f04f 0a80 	mov.w	sl, #128	; 0x80
  for (int i = 0; i < outer_size; ++i) {
 8014944:	9b02      	ldr	r3, [sp, #8]
 8014946:	429f      	cmp	r7, r3
 8014948:	da6c      	bge.n	8014a24 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x120>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801494a:	4621      	mov	r1, r4
 801494c:	f88d a017 	strb.w	sl, [sp, #23]
    for (int c = 0; c < depth; ++c) {
 8014950:	194a      	adds	r2, r1, r5
 8014952:	4590      	cmp	r8, r2
 8014954:	dd0f      	ble.n	8014976 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x72>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014956:	460a      	mov	r2, r1
      if (__a < __b)
 8014958:	f99d 0017 	ldrsb.w	r0, [sp, #23]
      return __a;
 801495c:	f10d 0317 	add.w	r3, sp, #23
 8014960:	3101      	adds	r1, #1
      if (__a < __b)
 8014962:	f992 c000 	ldrsb.w	ip, [r2]
 8014966:	4584      	cmp	ip, r0
      return __a;
 8014968:	bfd8      	it	le
 801496a:	461a      	movle	r2, r3
 801496c:	f992 2000 	ldrsb.w	r2, [r2]
 8014970:	f88d 2017 	strb.w	r2, [sp, #23]
    for (int c = 0; c < depth; ++c) {
 8014974:	e7ec      	b.n	8014950 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4c>
 8014976:	4622      	mov	r2, r4
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8014978:	f04f 0b00 	mov.w	fp, #0
    for (int c = 0; c < depth; ++c) {
 801497c:	1951      	adds	r1, r2, r5
 801497e:	4588      	cmp	r8, r1
 8014980:	dd14      	ble.n	80149ac <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa8>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8014982:	f912 0b01 	ldrsb.w	r0, [r2], #1
 8014986:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32_t input_diff =
 801498a:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
 801498c:	4581      	cmp	r9, r0
 801498e:	dcf5      	bgt.n	801497c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x78>
 8014990:	9203      	str	r2, [sp, #12]
 8014992:	e9dd 1300 	ldrd	r1, r3, [sp]
 8014996:	4098      	lsls	r0, r3
 8014998:	f7f3 fda4 	bl	80084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801499c:	f7fb fa66 	bl	800fe6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80149a0:	210c      	movs	r1, #12
 80149a2:	f7f3 fde3 	bl	800856c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
    for (int c = 0; c < depth; ++c) {
 80149a6:	9a03      	ldr	r2, [sp, #12]
  return a + b;
 80149a8:	4483      	add	fp, r0
 80149aa:	e7e7      	b.n	801497c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x78>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80149ac:	aa06      	add	r2, sp, #24
 80149ae:	4658      	mov	r0, fp
 80149b0:	210c      	movs	r1, #12
 80149b2:	f7fa fb71 	bl	800f098 <_ZN6tflite13GetReciprocalEliPi>
    for (int c = 0; c < depth; ++c) {
 80149b6:	2200      	movs	r2, #0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80149b8:	4683      	mov	fp, r0
    for (int c = 0; c < depth; ++c) {
 80149ba:	4542      	cmp	r2, r8
 80149bc:	da2c      	bge.n	8014a18 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x114>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80149be:	56a0      	ldrsb	r0, [r4, r2]
 80149c0:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32_t input_diff =
 80149c4:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
 80149c6:	4581      	cmp	r9, r0
 80149c8:	dc23      	bgt.n	8014a12 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
 80149ca:	9203      	str	r2, [sp, #12]
 80149cc:	e9dd 1300 	ldrd	r1, r3, [sp]
 80149d0:	4098      	lsls	r0, r3
 80149d2:	f7f3 fd87 	bl	80084e4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80149d6:	f7fb fa49 	bl	800fe6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
            (shifted_scale * exp_in_0).raw(),
 80149da:	4601      	mov	r1, r0
 80149dc:	4658      	mov	r0, fp
 80149de:	f7fb fa11 	bl	800fe04 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80149e2:	9906      	ldr	r1, [sp, #24]
 80149e4:	3117      	adds	r1, #23
 80149e6:	f7f3 fdc1 	bl	800856c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 80149ea:	237f      	movs	r3, #127	; 0x7f
            unsat_output +
 80149ec:	3880      	subs	r0, #128	; 0x80
      if (__b < __a)
 80149ee:	9a03      	ldr	r2, [sp, #12]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 80149f0:	9308      	str	r3, [sp, #32]
 80149f2:	4298      	cmp	r0, r3
        const int32_t shifted_output =
 80149f4:	9007      	str	r0, [sp, #28]
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 80149f6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	return __b;
 80149fa:	bfcc      	ite	gt
 80149fc:	a908      	addgt	r1, sp, #32
      return __a;
 80149fe:	a907      	addle	r1, sp, #28
 8014a00:	9309      	str	r3, [sp, #36]	; 0x24
      if (__a < __b)
 8014a02:	6808      	ldr	r0, [r1, #0]
 8014a04:	4298      	cmp	r0, r3
	return __b;
 8014a06:	bfb8      	it	lt
 8014a08:	a909      	addlt	r1, sp, #36	; 0x24
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8014a0a:	6809      	ldr	r1, [r1, #0]
 8014a0c:	54b1      	strb	r1, [r6, r2]
    for (int c = 0; c < depth; ++c) {
 8014a0e:	3201      	adds	r2, #1
 8014a10:	e7d3      	b.n	80149ba <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xb6>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8014a12:	f806 a002 	strb.w	sl, [r6, r2]
 8014a16:	e7fa      	b.n	8014a0e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10a>
  for (int i = 0; i < outer_size; ++i) {
 8014a18:	3701      	adds	r7, #1
 8014a1a:	4446      	add	r6, r8
 8014a1c:	4444      	add	r4, r8
 8014a1e:	eba5 0508 	sub.w	r5, r5, r8
 8014a22:	e78f      	b.n	8014944 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x40>
}
 8014a24:	b00b      	add	sp, #44	; 0x2c
 8014a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014a2c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8014a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a2e:	460c      	mov	r4, r1
 8014a30:	4605      	mov	r5, r0
 8014a32:	b0ad      	sub	sp, #180	; 0xb4
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8014a34:	2200      	movs	r2, #0
 8014a36:	f7fb f944 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8014a3a:	4621      	mov	r1, r4
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8014a3c:	4607      	mov	r7, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8014a3e:	2200      	movs	r2, #0
 8014a40:	4628      	mov	r0, r5
 8014a42:	f7fb f940 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 8014a46:	6924      	ldr	r4, [r4, #16]
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8014a48:	4606      	mov	r6, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 8014a4a:	b90c      	cbnz	r4, 8014a50 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24>
 8014a4c:	f002 f97a 	bl	8016d44 <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 8014a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a52:	ad1e      	add	r5, sp, #120	; 0x78
 8014a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014a62:	e885 0003 	stmia.w	r5, {r0, r1}
  switch (input->type) {
 8014a66:	7a38      	ldrb	r0, [r7, #8]
 8014a68:	2807      	cmp	r0, #7
 8014a6a:	d019      	beq.n	8014aa0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 8014a6c:	2809      	cmp	r0, #9
 8014a6e:	d02b      	beq.n	8014ac8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9c>
 8014a70:	2801      	cmp	r0, #1
 8014a72:	d14e      	bne.n	8014b12 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
          op_data, tflite::micro::GetTensorShape(input),
 8014a74:	4639      	mov	r1, r7
 8014a76:	a802      	add	r0, sp, #8
 8014a78:	f7fb f933 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 8014a7c:	4631      	mov	r1, r6
 8014a7e:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014a80:	683c      	ldr	r4, [r7, #0]
 8014a82:	f7fb f92e 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8014a86:	2e00      	cmp	r6, #0
 8014a88:	d0e0      	beq.n	8014a4c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20>
      tflite::reference_ops::Softmax(
 8014a8a:	6833      	ldr	r3, [r6, #0]
 8014a8c:	4622      	mov	r2, r4
 8014a8e:	a902      	add	r1, sp, #8
 8014a90:	a81e      	add	r0, sp, #120	; 0x78
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	ab09      	add	r3, sp, #36	; 0x24
 8014a96:	f7ff fd2f 	bl	80144f8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      return kTfLiteOk;
 8014a9a:	2000      	movs	r0, #0
}
 8014a9c:	b02d      	add	sp, #180	; 0xb4
 8014a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        op_data, tflite::micro::GetTensorShape(input),
 8014aa0:	4639      	mov	r1, r7
 8014aa2:	a817      	add	r0, sp, #92	; 0x5c
 8014aa4:	f7fb f91d 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(output),
 8014aa8:	4631      	mov	r1, r6
 8014aaa:	a810      	add	r0, sp, #64	; 0x40
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014aac:	683c      	ldr	r4, [r7, #0]
 8014aae:	f7fb f918 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8014ab2:	2e00      	cmp	r6, #0
 8014ab4:	d0ca      	beq.n	8014a4c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20>
    tflite::reference_ops::SoftmaxInt16(
 8014ab6:	6833      	ldr	r3, [r6, #0]
 8014ab8:	4622      	mov	r2, r4
 8014aba:	a917      	add	r1, sp, #92	; 0x5c
 8014abc:	a81e      	add	r0, sp, #120	; 0x78
 8014abe:	9300      	str	r3, [sp, #0]
 8014ac0:	ab10      	add	r3, sp, #64	; 0x40
 8014ac2:	f7ff fd8d 	bl	80145e0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
 8014ac6:	e7e8      	b.n	8014a9a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
    if (output->type == kTfLiteInt16) {
 8014ac8:	7a33      	ldrb	r3, [r6, #8]
          op_data, tflite::micro::GetTensorShape(input),
 8014aca:	4639      	mov	r1, r7
 8014acc:	a817      	add	r0, sp, #92	; 0x5c
    if (output->type == kTfLiteInt16) {
 8014ace:	2b07      	cmp	r3, #7
 8014ad0:	d10f      	bne.n	8014af2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc6>
          op_data, tflite::micro::GetTensorShape(input),
 8014ad2:	f7fb f906 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 8014ad6:	4631      	mov	r1, r6
 8014ad8:	a810      	add	r0, sp, #64	; 0x40
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014ada:	683c      	ldr	r4, [r7, #0]
 8014adc:	f7fb f901 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014ae0:	6833      	ldr	r3, [r6, #0]
 8014ae2:	4622      	mov	r2, r4
 8014ae4:	a917      	add	r1, sp, #92	; 0x5c
 8014ae6:	9300      	str	r3, [sp, #0]
 8014ae8:	a81e      	add	r0, sp, #120	; 0x78
 8014aea:	ab10      	add	r3, sp, #64	; 0x40
 8014aec:	f7ff fe6a 	bl	80147c4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
 8014af0:	e7d3      	b.n	8014a9a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
          op_data, tflite::micro::GetTensorShape(input),
 8014af2:	f7fb f8f6 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 8014af6:	4631      	mov	r1, r6
 8014af8:	a810      	add	r0, sp, #64	; 0x40
 8014afa:	683c      	ldr	r4, [r7, #0]
 8014afc:	f7fb f8f1 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014b00:	6833      	ldr	r3, [r6, #0]
 8014b02:	4622      	mov	r2, r4
 8014b04:	a917      	add	r1, sp, #92	; 0x5c
 8014b06:	9300      	str	r3, [sp, #0]
 8014b08:	a81e      	add	r0, sp, #120	; 0x78
 8014b0a:	ab10      	add	r3, sp, #64	; 0x40
 8014b0c:	f7ff fefa 	bl	8014904 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
 8014b10:	e7c3      	b.n	8014a9a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8014b12:	f7f3 facd 	bl	80080b0 <TfLiteTypeGetName>
 8014b16:	7a3a      	ldrb	r2, [r7, #8]
 8014b18:	4601      	mov	r1, r0
 8014b1a:	4802      	ldr	r0, [pc, #8]	; (8014b24 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf8>)
 8014b1c:	f7f6 f8cc 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8014b20:	2001      	movs	r0, #1
 8014b22:	e7bb      	b.n	8014a9c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
 8014b24:	080fbb1a 	.word	0x080fbb1a

08014b28 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENUlfE0_4_FUNEf>:
        10.0f / range, std::numeric_limits<int16_t>::max(), 2.0f / range, 0,
        [](float value) { return std::exp(value); }, op_data->exp_lut);

    LUTPopulate<int16_t>(
        1.0f / range, std::numeric_limits<int16_t>::min(), 2.0f / range, 0,
        [](float value) { return 1.0f / (1.0f + value); },
 8014b28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014b2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b30:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014b34:	4770      	bx	lr

08014b36 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENUlfE_4_FUNEf>:
 8014b36:	f001 bfab 	b.w	8016a90 <expf>

08014b3a <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  }
  return kTfLiteOk;
}

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014b3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8014b3c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014b3e:	b90b      	cbnz	r3, 8014b44 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
 8014b40:	f002 f900 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8014b44:	2138      	movs	r1, #56	; 0x38
}
 8014b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8014b4a:	4718      	bx	r3

08014b4c <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs>:
inline void LUTPopulateInt16(FloatT input_scale, int32_t input_zero_point,
 8014b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b4e:	4615      	mov	r5, r2
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 8014b50:	4a51      	ldr	r2, [pc, #324]	; (8014c98 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x14c>)
  const FloatT step = (input_max - input_min) / nb_steps;
 8014b52:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014c9c <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x150>
  for (int i = 0; i < nb_steps; i++) {
 8014b56:	2600      	movs	r6, #0
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 8014b58:	1a13      	subs	r3, r2, r0
      output_scale * (std::numeric_limits<int16_t>::min() - output_zero_point);
 8014b5a:	1a52      	subs	r2, r2, r1
inline void LUTPopulateInt16(FloatT input_scale, int32_t input_zero_point,
 8014b5c:	ed2d 8b0c 	vpush	{d8-d13}
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 8014b60:	ee0a 3a90 	vmov	s21, r3
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 8014b64:	f647 73ff 	movw	r3, #32767	; 0x7fff
  const FloatT half_step = step / 2;
 8014b68:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
      if (__a < __b)
 8014b6c:	eddf ca4c 	vldr	s25, [pc, #304]	; 8014ca0 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x154>
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 8014b70:	1a18      	subs	r0, r3, r0
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 8014b72:	eef8 aaea 	vcvt.f32.s32	s21, s21
      output_scale * (std::numeric_limits<int16_t>::max() - output_zero_point);
 8014b76:	1a5b      	subs	r3, r3, r1
inline void LUTPopulateInt16(FloatT input_scale, int32_t input_zero_point,
 8014b78:	9c12      	ldr	r4, [sp, #72]	; 0x48
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 8014b7a:	ee0a 0a10 	vmov	s20, r0
 8014b7e:	eef0 9a6c 	vmov.f32	s19, s25
  const FloatT input_min =
 8014b82:	ee6a aa80 	vmul.f32	s21, s21, s0
 8014b86:	1ea7      	subs	r7, r4, #2
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 8014b88:	eeb8 aaca 	vcvt.f32.s32	s20, s20
      if (__b < __a)
 8014b8c:	ed9f da45 	vldr	s26, [pc, #276]	; 8014ca4 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x158>
  const FloatT input_max =
 8014b90:	ee2a aa00 	vmul.f32	s20, s20, s0
  const FloatT step = (input_max - input_min) / nb_steps;
 8014b94:	ee3a ba6a 	vsub.f32	s22, s20, s21
 8014b98:	ee2b ba27 	vmul.f32	s22, s22, s15
      output_scale * (std::numeric_limits<int16_t>::min() - output_zero_point);
 8014b9c:	ee07 2a90 	vmov	s15, r2
 8014ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      output_scale * (std::numeric_limits<int16_t>::max() - output_zero_point);
 8014ba4:	ee07 3a90 	vmov	s15, r3
  const FloatT half_step = step / 2;
 8014ba8:	ee2b 9a2b 	vmul.f32	s18, s22, s23
      output_scale * (std::numeric_limits<int16_t>::max() - output_zero_point);
 8014bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  const FloatT output_max =
 8014bb0:	ee67 7aa0 	vmul.f32	s15, s15, s1
      (output_max - output_min);
 8014bb4:	eee7 7a60 	vfms.f32	s15, s14, s1
  const FloatT output_scaling_inv =
 8014bb8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8014ca8 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x15c>
 8014bbc:	ee87 8a27 	vdiv.f32	s16, s14, s15
        LUTTransform<FloatT>(transform, transform_params, input_min + i * step);
 8014bc0:	ee07 6a90 	vmov	s15, r6
                                                 input_min + (i + 1) * step);
 8014bc4:	3601      	adds	r6, #1
        LUTTransform<FloatT>(transform, transform_params, input_min + i * step);
 8014bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bca:	eeb0 ca6a 	vmov.f32	s24, s21
 8014bce:	eea7 ca8b 	vfma.f32	s24, s15, s22
  return transform(value);
 8014bd2:	eeb0 0a4c 	vmov.f32	s0, s24
 8014bd6:	47a8      	blx	r5
 8014bd8:	eef0 8a40 	vmov.f32	s17, s0
 8014bdc:	ee3c 0a09 	vadd.f32	s0, s24, s18
 8014be0:	47a8      	blx	r5
                                                 input_min + (i + 1) * step);
 8014be2:	ee07 6a90 	vmov	s15, r6
  return transform(value);
 8014be6:	eeb0 ca40 	vmov.f32	s24, s0
                                                 input_min + (i + 1) * step);
 8014bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return transform(value);
 8014bee:	eeb0 0a6a 	vmov.f32	s0, s21
 8014bf2:	eea7 0a8b 	vfma.f32	s0, s15, s22
 8014bf6:	47a8      	blx	r5
    const FloatT sample_val = TfLiteRound(val * output_scaling_inv);
 8014bf8:	ee68 7a28 	vmul.f32	s15, s16, s17
    const FloatT midpoint_val = TfLiteRound(val_midpoint * output_scaling_inv);
 8014bfc:	ee28 ca0c 	vmul.f32	s24, s16, s24
  { return __builtin_roundf(__x); }
 8014c00:	fef8 7a67 	vrinta.f32	s15, s15
        TfLiteRound((val_next * output_scaling_inv +
 8014c04:	eeb0 7a67 	vmov.f32	s14, s15
 8014c08:	feb8 ca4c 	vrinta.f32	s24, s24
 8014c0c:	eea8 7a00 	vfma.f32	s14, s16, s0
 8014c10:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8014c14:	feb8 7a47 	vrinta.f32	s14, s14
    const FloatT midpoint_err = midpoint_interp_val - midpoint_val;
 8014c18:	ee37 7a4c 	vsub.f32	s14, s14, s24
    const FloatT bias = TfLiteRound(midpoint_err / 2);
 8014c1c:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8014c20:	feb8 7a47 	vrinta.f32	s14, s14
        std::max<FloatT>(sample_val - bias, table_min), table_max));
 8014c24:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (__a < __b)
 8014c28:	eef4 7aec 	vcmpe.f32	s15, s25
 8014c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c30:	d42b      	bmi.n	8014c8a <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x13e>
	return __b;
 8014c32:	eef4 7a4d 	vcmp.f32	s15, s26
 8014c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c3a:	fe7d 7a27 	vselgt.f32	s15, s26, s15
    lut[i] = static_cast<int16_t>(std::min<FloatT>(
 8014c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  for (int i = 0; i < nb_steps; i++) {
 8014c42:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    lut[i] = static_cast<int16_t>(std::min<FloatT>(
 8014c46:	ee17 3a90 	vmov	r3, s15
 8014c4a:	f827 3f02 	strh.w	r3, [r7, #2]!
  for (int i = 0; i < nb_steps; i++) {
 8014c4e:	d1b7      	bne.n	8014bc0 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x74>
  return transform(value);
 8014c50:	eeb0 0a4a 	vmov.f32	s0, s20
 8014c54:	47a8      	blx	r5
      std::max<FloatT>(TfLiteRound(LUTTransform<FloatT>(
 8014c56:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014c5a:	feb8 0a40 	vrinta.f32	s0, s0
      if (__a < __b)
 8014c5e:	eeb4 0ae9 	vcmpe.f32	s0, s19
 8014c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c66:	d413      	bmi.n	8014c90 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x144>
      if (__b < __a)
 8014c68:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014ca4 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x158>
	return __b;
 8014c6c:	eeb4 0a67 	vcmp.f32	s0, s15
 8014c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c74:	fe37 0a80 	vselgt.f32	s0, s15, s0
  lut[nb_steps] = static_cast<int16_t>(std::min<FloatT>(
 8014c78:	eebd 0ac0 	vcvt.s32.f32	s0, s0
}
 8014c7c:	ecbd 8b0c 	vpop	{d8-d13}
  lut[nb_steps] = static_cast<int16_t>(std::min<FloatT>(
 8014c80:	ee10 3a10 	vmov	r3, s0
 8014c84:	f8a4 3400 	strh.w	r3, [r4, #1024]	; 0x400
}
 8014c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __b;
 8014c8a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8014ca0 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x154>
 8014c8e:	e7d6      	b.n	8014c3e <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0xf2>
 8014c90:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014ca0 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x154>
 8014c94:	e7f0      	b.n	8014c78 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x12c>
 8014c96:	bf00      	nop
 8014c98:	ffff8000 	.word	0xffff8000
 8014c9c:	3b000000 	.word	0x3b000000
 8014ca0:	c7000000 	.word	0xc7000000
 8014ca4:	46fffe00 	.word	0x46fffe00
 8014ca8:	47800000 	.word	0x47800000
 8014cac:	00000000 	.word	0x00000000

08014cb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:
                                    SoftmaxParams* op_data) {
 8014cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb4:	4699      	mov	r9, r3
  if (input->type == kTfLiteInt16) {
 8014cb6:	780b      	ldrb	r3, [r1, #0]
                                    SoftmaxParams* op_data) {
 8014cb8:	b08b      	sub	sp, #44	; 0x2c
 8014cba:	4604      	mov	r4, r0
  if (input->type == kTfLiteInt16) {
 8014cbc:	2b07      	cmp	r3, #7
                                    SoftmaxParams* op_data) {
 8014cbe:	4688      	mov	r8, r1
 8014cc0:	4617      	mov	r7, r2
 8014cc2:	9e14      	ldr	r6, [sp, #80]	; 0x50
  if (input->type == kTfLiteInt16) {
 8014cc4:	d11d      	bne.n	8014d02 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x52>
        context, sizeof(int16_t) * kInt16LUTArraySize);
 8014cc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014cc8:	f240 4102 	movw	r1, #1026	; 0x402
 8014ccc:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8014cce:	b958      	cbnz	r0, 8014ce8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38>
 8014cd0:	4bad      	ldr	r3, [pc, #692]	; (8014f88 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	2327      	movs	r3, #39	; 0x27
 8014cd6:	6965      	ldr	r5, [r4, #20]
    TF_LITE_ENSURE(context,
 8014cd8:	4aac      	ldr	r2, [pc, #688]	; (8014f8c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 8014cda:	4620      	mov	r0, r4
 8014cdc:	49ac      	ldr	r1, [pc, #688]	; (8014f90 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8014cde:	47a8      	blx	r5
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 8014ce0:	2001      	movs	r0, #1
}
 8014ce2:	b00b      	add	sp, #44	; 0x2c
 8014ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 8014ce8:	62b0      	str	r0, [r6, #40]	; 0x28
        context, sizeof(int16_t) * kInt16LUTArraySize);
 8014cea:	f240 4102 	movw	r1, #1026	; 0x402
 8014cee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8014cf4:	b920      	cbnz	r0, 8014d00 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x50>
 8014cf6:	4ba7      	ldr	r3, [pc, #668]	; (8014f94 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8014cf8:	9300      	str	r3, [sp, #0]
 8014cfa:	232b      	movs	r3, #43	; 0x2b
 8014cfc:	6965      	ldr	r5, [r4, #20]
 8014cfe:	e7eb      	b.n	8014cd8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28>
    op_data->one_over_one_plus_x_lut =
 8014d00:	62f0      	str	r0, [r6, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8014d02:	783a      	ldrb	r2, [r7, #0]
 8014d04:	f898 3000 	ldrb.w	r3, [r8]
 8014d08:	2a07      	cmp	r2, #7
 8014d0a:	d108      	bne.n	8014d1e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6e>
    TF_LITE_ENSURE(context,
 8014d0c:	2b09      	cmp	r3, #9
 8014d0e:	d03e      	beq.n	8014d8e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xde>
 8014d10:	2b07      	cmp	r3, #7
 8014d12:	d013      	beq.n	8014d3c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x8c>
 8014d14:	4ba0      	ldr	r3, [pc, #640]	; (8014f98 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8014d16:	9300      	str	r3, [sp, #0]
 8014d18:	2332      	movs	r3, #50	; 0x32
 8014d1a:	6965      	ldr	r5, [r4, #20]
 8014d1c:	e7dc      	b.n	8014cd8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8014d1e:	429a      	cmp	r2, r3
 8014d20:	d035      	beq.n	8014d8e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xde>
 8014d22:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014d26:	4b9d      	ldr	r3, [pc, #628]	; (8014f9c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8014d28:	9301      	str	r3, [sp, #4]
 8014d2a:	4b9d      	ldr	r3, [pc, #628]	; (8014fa0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8014d2c:	9300      	str	r3, [sp, #0]
 8014d2e:	2334      	movs	r3, #52	; 0x34
 8014d30:	6965      	ldr	r5, [r4, #20]
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 8014d32:	4a96      	ldr	r2, [pc, #600]	; (8014f8c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 8014d34:	4620      	mov	r0, r4
 8014d36:	499b      	ldr	r1, [pc, #620]	; (8014fa4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8014d38:	47a8      	blx	r5
 8014d3a:	e7d1      	b.n	8014ce0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8014d3c:	693d      	ldr	r5, [r7, #16]
 8014d3e:	b14d      	cbz	r5, 8014d54 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa4>
 8014d40:	2300      	movs	r3, #0
 8014d42:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8014d46:	4b98      	ldr	r3, [pc, #608]	; (8014fa8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8014d48:	9301      	str	r3, [sp, #4]
 8014d4a:	4b98      	ldr	r3, [pc, #608]	; (8014fac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8014d4c:	9300      	str	r3, [sp, #0]
 8014d4e:	2339      	movs	r3, #57	; 0x39
 8014d50:	6965      	ldr	r5, [r4, #20]
 8014d52:	e7ee      	b.n	8014d32 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x82>
  detail::LUTPopulateInt16<float>(input_scale, input_zero_point, output_scale,
 8014d54:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8014d56:	4629      	mov	r1, r5
 8014d58:	4a95      	ldr	r2, [pc, #596]	; (8014fb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
 8014d5a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8014d5e:	9300      	str	r3, [sp, #0]
 8014d60:	462b      	mov	r3, r5
 8014d62:	eddf 0a94 	vldr	s1, [pc, #592]	; 8014fb4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8014d66:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8014fb8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>
 8014d6a:	f7ff feef 	bl	8014b4c <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs>
 8014d6e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8014d70:	4a92      	ldr	r2, [pc, #584]	; (8014fbc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8014d72:	4629      	mov	r1, r5
 8014d74:	9300      	str	r3, [sp, #0]
 8014d76:	462b      	mov	r3, r5
 8014d78:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8014fb4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8014d7c:	4890      	ldr	r0, [pc, #576]	; (8014fc0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8014d7e:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8014fc4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>
 8014d82:	f7ff fee3 	bl	8014b4c <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs>
    op_data->zero_point = output->params.zero_point;
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	61f3      	str	r3, [r6, #28]
    op_data->scale = output->params.scale;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	6233      	str	r3, [r6, #32]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8014d8e:	f898 5000 	ldrb.w	r5, [r8]
 8014d92:	2d09      	cmp	r5, #9
 8014d94:	d044      	beq.n	8014e20 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x170>
 8014d96:	2d07      	cmp	r5, #7
 8014d98:	f040 8136 	bne.w	8015008 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x358>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 8014d9c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014da0:	b14b      	cbz	r3, 8014db6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x106>
 8014da2:	2200      	movs	r2, #0
 8014da4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014da8:	4b7f      	ldr	r3, [pc, #508]	; (8014fa8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8014daa:	9301      	str	r3, [sp, #4]
 8014dac:	4b86      	ldr	r3, [pc, #536]	; (8014fc8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	235b      	movs	r3, #91	; 0x5b
 8014db2:	6965      	ldr	r5, [r4, #20]
 8014db4:	e7bd      	b.n	8014d32 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x82>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8014db6:	693a      	ldr	r2, [r7, #16]
 8014db8:	b142      	cbz	r2, 8014dcc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x11c>
 8014dba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014dbe:	4b7a      	ldr	r3, [pc, #488]	; (8014fa8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8014dc0:	9301      	str	r3, [sp, #4]
 8014dc2:	4b7a      	ldr	r3, [pc, #488]	; (8014fac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8014dc4:	9300      	str	r3, [sp, #0]
 8014dc6:	235c      	movs	r3, #92	; 0x5c
 8014dc8:	6965      	ldr	r5, [r4, #20]
 8014dca:	e7b2      	b.n	8014d32 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x82>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8014dcc:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014fcc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>
 8014dd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8014dd4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8014fd0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 8014dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de0:	bfcc      	ite	gt
 8014de2:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 8014de6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8014dea:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df2:	dd7d      	ble.n	8014ef0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x240>
 8014df4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8014df8:	2200      	movs	r2, #0
 8014dfa:	ee17 0a10 	vmov	r0, s14
 8014dfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e02:	f7eb fbc3 	bl	800058c <__aeabi_f2d>
 8014e06:	4b73      	ldr	r3, [pc, #460]	; (8014fd4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
 8014e08:	9301      	str	r3, [sp, #4]
 8014e0a:	4b73      	ldr	r3, [pc, #460]	; (8014fd8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
 8014e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e10:	9300      	str	r3, [sp, #0]
 8014e12:	235e      	movs	r3, #94	; 0x5e
 8014e14:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8014e16:	4a5d      	ldr	r2, [pc, #372]	; (8014f8c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 8014e18:	4620      	mov	r0, r4
 8014e1a:	4970      	ldr	r1, [pc, #448]	; (8014fdc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
 8014e1c:	47a8      	blx	r5
 8014e1e:	e75f      	b.n	8014ce0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30>
      if (output->type == kTfLiteInt16) {
 8014e20:	7838      	ldrb	r0, [r7, #0]
 8014e22:	2807      	cmp	r0, #7
 8014e24:	d132      	bne.n	8014e8c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1dc>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014e2c:	d009      	beq.n	8014e42 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x192>
 8014e2e:	4a64      	ldr	r2, [pc, #400]	; (8014fc0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8014e30:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014e34:	4b6a      	ldr	r3, [pc, #424]	; (8014fe0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
 8014e36:	9301      	str	r3, [sp, #4]
 8014e38:	4b5c      	ldr	r3, [pc, #368]	; (8014fac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8014e3a:	9300      	str	r3, [sp, #0]
 8014e3c:	2362      	movs	r3, #98	; 0x62
 8014e3e:	6965      	ldr	r5, [r4, #20]
 8014e40:	e777      	b.n	8014d32 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x82>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8014e42:	eddf 7a68 	vldr	s15, [pc, #416]	; 8014fe4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x334>
 8014e46:	ed97 7a03 	vldr	s14, [r7, #12]
 8014e4a:	eddf 6a67 	vldr	s13, [pc, #412]	; 8014fe8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x338>
 8014e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e56:	bfcc      	ite	gt
 8014e58:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 8014e5c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8014e60:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e68:	dd63      	ble.n	8014f32 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x282>
 8014e6a:	4b60      	ldr	r3, [pc, #384]	; (8014fec <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x33c>)
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	ee17 0a10 	vmov	r0, s14
 8014e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e76:	f7eb fb89 	bl	800058c <__aeabi_f2d>
 8014e7a:	4b5d      	ldr	r3, [pc, #372]	; (8014ff0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>)
 8014e7c:	9301      	str	r3, [sp, #4]
 8014e7e:	4b56      	ldr	r3, [pc, #344]	; (8014fd8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
 8014e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e84:	9300      	str	r3, [sp, #0]
 8014e86:	2364      	movs	r3, #100	; 0x64
 8014e88:	6965      	ldr	r5, [r4, #20]
 8014e8a:	e7c4      	b.n	8014e16 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x166>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8014e8c:	2809      	cmp	r0, #9
 8014e8e:	d012      	beq.n	8014eb6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x206>
 8014e90:	6966      	ldr	r6, [r4, #20]
 8014e92:	f7f3 f90d 	bl	80080b0 <TfLiteTypeGetName>
 8014e96:	4607      	mov	r7, r0
 8014e98:	4628      	mov	r0, r5
 8014e9a:	f7f3 f909 	bl	80080b0 <TfLiteTypeGetName>
 8014e9e:	4b55      	ldr	r3, [pc, #340]	; (8014ff4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x344>)
 8014ea0:	9301      	str	r3, [sp, #4]
 8014ea2:	4b3e      	ldr	r3, [pc, #248]	; (8014f9c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8014ea4:	9300      	str	r3, [sp, #0]
 8014ea6:	2366      	movs	r3, #102	; 0x66
 8014ea8:	e9cd 7002 	strd	r7, r0, [sp, #8]
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8014eac:	4a37      	ldr	r2, [pc, #220]	; (8014f8c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 8014eae:	4620      	mov	r0, r4
 8014eb0:	4951      	ldr	r1, [pc, #324]	; (8014ff8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x348>)
 8014eb2:	47b0      	blx	r6
 8014eb4:	e714      	b.n	8014ce0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8014ebc:	d00a      	beq.n	8014ed4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x224>
 8014ebe:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8014ec2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014ec6:	4b4d      	ldr	r3, [pc, #308]	; (8014ffc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x34c>)
 8014ec8:	9301      	str	r3, [sp, #4]
 8014eca:	4b38      	ldr	r3, [pc, #224]	; (8014fac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8014ecc:	9300      	str	r3, [sp, #0]
 8014ece:	2367      	movs	r3, #103	; 0x67
 8014ed0:	6965      	ldr	r5, [r4, #20]
 8014ed2:	e72e      	b.n	8014d32 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x82>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8014ed4:	ed97 7a03 	vldr	s14, [r7, #12]
 8014ed8:	eddf 7a49 	vldr	s15, [pc, #292]	; 8015000 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x350>
 8014edc:	eeb4 7a67 	vcmp.f32	s14, s15
 8014ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ee4:	d025      	beq.n	8014f32 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x282>
 8014ee6:	4b47      	ldr	r3, [pc, #284]	; (8015004 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x354>)
 8014ee8:	9300      	str	r3, [sp, #0]
 8014eea:	2368      	movs	r3, #104	; 0x68
 8014eec:	6965      	ldr	r5, [r4, #20]
 8014eee:	e6f3      	b.n	8014cd8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28>
          static_cast<double>(input->params.scale) *
 8014ef0:	f8d8 000c 	ldr.w	r0, [r8, #12]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8014ef4:	f106 0408 	add.w	r4, r6, #8
          static_cast<double>(input->params.scale) *
 8014ef8:	f7eb fb48 	bl	800058c <__aeabi_f2d>
 8014efc:	4682      	mov	sl, r0
 8014efe:	468b      	mov	fp, r1
          static_cast<double>(params->beta) /
 8014f00:	f8d9 0000 	ldr.w	r0, [r9]
 8014f04:	f7eb fb42 	bl	800058c <__aeabi_f2d>
          static_cast<double>(input->params.scale) *
 8014f08:	4602      	mov	r2, r0
 8014f0a:	460b      	mov	r3, r1
 8014f0c:	4650      	mov	r0, sl
 8014f0e:	4659      	mov	r1, fp
 8014f10:	f7eb fb94 	bl	800063c <__aeabi_dmul>
      double input_scale_beta_rescale =
 8014f14:	a31a      	add	r3, pc, #104	; (adr r3, 8014f80 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8014f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1a:	f7eb fcb9 	bl	8000890 <__aeabi_ddiv>
 8014f1e:	ec41 0b10 	vmov	d0, r0, r1
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8014f22:	a909      	add	r1, sp, #36	; 0x24
 8014f24:	4620      	mov	r0, r4
 8014f26:	f7f3 f99f 	bl	8008268 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      op_data->input_left_shift = input_left_shift;
 8014f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f2c:	60f3      	str	r3, [r6, #12]
  return kTfLiteOk;
 8014f2e:	2000      	movs	r0, #0
 8014f30:	e6d7      	b.n	8014ce2 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      tflite::PreprocessSoftmaxScaling(
 8014f32:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8014f36:	f106 0408 	add.w	r4, r6, #8
 8014f3a:	f7eb fb27 	bl	800058c <__aeabi_f2d>
 8014f3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014f42:	f8d9 0000 	ldr.w	r0, [r9]
 8014f46:	f7eb fb21 	bl	800058c <__aeabi_f2d>
 8014f4a:	aa09      	add	r2, sp, #36	; 0x24
 8014f4c:	ec41 0b10 	vmov	d0, r0, r1
 8014f50:	ed9d 1b06 	vldr	d1, [sp, #24]
 8014f54:	4621      	mov	r1, r4
 8014f56:	2005      	movs	r0, #5
 8014f58:	f7f3 fa1a 	bl	8008390 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8014f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8014f5e:	221f      	movs	r2, #31
 8014f60:	2005      	movs	r0, #5
      op_data->input_left_shift = input_left_shift;
 8014f62:	60f1      	str	r1, [r6, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8014f64:	f7f3 fa4c 	bl	8008400 <_ZN6tflite20CalculateInputRadiusEiii>
 8014f68:	f7eb fafe 	bl	8000568 <__aeabi_i2d>
 8014f6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
 8014f70:	4619      	mov	r1, r3
 8014f72:	f7eb fdfd 	bl	8000b70 <__aeabi_d2iz>
 8014f76:	61b0      	str	r0, [r6, #24]
 8014f78:	e7d9      	b.n	8014f2e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27e>
 8014f7a:	bf00      	nop
 8014f7c:	f3af 8000 	nop.w
 8014f80:	00140014 	.word	0x00140014
 8014f84:	3f240014 	.word	0x3f240014
 8014f88:	080fcf34 	.word	0x080fcf34
 8014f8c:	080fcef6 	.word	0x080fcef6
 8014f90:	080f93a5 	.word	0x080f93a5
 8014f94:	080fcf4b 	.word	0x080fcf4b
 8014f98:	080f98c2 	.word	0x080f98c2
 8014f9c:	080fbfbd 	.word	0x080fbfbd
 8014fa0:	080fbfca 	.word	0x080fbfca
 8014fa4:	080f982c 	.word	0x080f982c
 8014fa8:	080fc4d7 	.word	0x080fc4d7
 8014fac:	080fc874 	.word	0x080fc874
 8014fb0:	08014b37 	.word	0x08014b37
 8014fb4:	38000080 	.word	0x38000080
 8014fb8:	392000a0 	.word	0x392000a0
 8014fbc:	08014b29 	.word	0x08014b29
 8014fc0:	ffff8000 	.word	0xffff8000
 8014fc4:	37800080 	.word	0x37800080
 8014fc8:	080fcf6e 	.word	0x080fcf6e
 8014fcc:	38000000 	.word	0x38000000
 8014fd0:	3303126f 	.word	0x3303126f
 8014fd4:	080fcfa7 	.word	0x080fcfa7
 8014fd8:	080fcfb3 	.word	0x080fcfb3
 8014fdc:	080fcf87 	.word	0x080fcf87
 8014fe0:	080fcfc8 	.word	0x080fcfc8
 8014fe4:	37800000 	.word	0x37800000
 8014fe8:	3283126f 	.word	0x3283126f
 8014fec:	3ef00000 	.word	0x3ef00000
 8014ff0:	080fcfcf 	.word	0x080fcfcf
 8014ff4:	080fcfdb 	.word	0x080fcfdb
 8014ff8:	080fc37f 	.word	0x080fc37f
 8014ffc:	080fcfe7 	.word	0x080fcfe7
 8015000:	3b800000 	.word	0x3b800000
 8015004:	080fcfec 	.word	0x080fcfec
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8015008:	2d01      	cmp	r5, #1
 801500a:	d00f      	beq.n	801502c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x37c>
 801500c:	4628      	mov	r0, r5
 801500e:	6966      	ldr	r6, [r4, #20]
 8015010:	f7f3 f84e 	bl	80080b0 <TfLiteTypeGetName>
 8015014:	4605      	mov	r5, r0
 8015016:	2001      	movs	r0, #1
 8015018:	f7f3 f84a 	bl	80080b0 <TfLiteTypeGetName>
 801501c:	4b10      	ldr	r3, [pc, #64]	; (8015060 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3b0>)
 801501e:	9301      	str	r3, [sp, #4]
 8015020:	4b10      	ldr	r3, [pc, #64]	; (8015064 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3b4>)
 8015022:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8015026:	9300      	str	r3, [sp, #0]
 8015028:	2385      	movs	r3, #133	; 0x85
 801502a:	e73f      	b.n	8014eac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1fc>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801502c:	7838      	ldrb	r0, [r7, #0]
 801502e:	2801      	cmp	r0, #1
 8015030:	d00e      	beq.n	8015050 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a0>
 8015032:	6966      	ldr	r6, [r4, #20]
 8015034:	f7f3 f83c 	bl	80080b0 <TfLiteTypeGetName>
 8015038:	4607      	mov	r7, r0
 801503a:	4628      	mov	r0, r5
 801503c:	f7f3 f838 	bl	80080b0 <TfLiteTypeGetName>
 8015040:	4b07      	ldr	r3, [pc, #28]	; (8015060 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3b0>)
 8015042:	9301      	str	r3, [sp, #4]
 8015044:	4b08      	ldr	r3, [pc, #32]	; (8015068 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3b8>)
 8015046:	e9cd 7002 	strd	r7, r0, [sp, #8]
 801504a:	9300      	str	r3, [sp, #0]
 801504c:	2386      	movs	r3, #134	; 0x86
 801504e:	e72d      	b.n	8014eac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1fc>
    op_data->beta = static_cast<double>(params->beta);
 8015050:	f8d9 0000 	ldr.w	r0, [r9]
 8015054:	f7eb fa9a 	bl	800058c <__aeabi_f2d>
 8015058:	e9c6 0100 	strd	r0, r1, [r6]
 801505c:	e767      	b.n	8014f2e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27e>
 801505e:	bf00      	nop
 8015060:	080fd00e 	.word	0x080fd00e
 8015064:	080fbfca 	.word	0x080fbfca
 8015068:	080fbfbd 	.word	0x080fbfbd

0801506c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
  MicroContext* micro_context = GetMicroContext(context);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801506c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801506e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015072:	4605      	mov	r5, r0
 8015074:	b085      	sub	sp, #20
 8015076:	460f      	mov	r7, r1
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8015078:	b113      	cbz	r3, 8015080 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801507a:	681a      	ldr	r2, [r3, #0]
 801507c:	2a01      	cmp	r2, #1
 801507e:	d012      	beq.n	80150a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 8015080:	696e      	ldr	r6, [r5, #20]
 8015082:	b103      	cbz	r3, 8015086 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2401      	movs	r4, #1
 8015088:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801508c:	4b2e      	ldr	r3, [pc, #184]	; (8015148 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 801508e:	9301      	str	r3, [sp, #4]
 8015090:	4b2e      	ldr	r3, [pc, #184]	; (801514c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8015092:	9300      	str	r3, [sp, #0]
 8015094:	2394      	movs	r3, #148	; 0x94
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8015096:	4a2e      	ldr	r2, [pc, #184]	; (8015150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8015098:	4628      	mov	r0, r5
 801509a:	492e      	ldr	r1, [pc, #184]	; (8015154 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 801509c:	47b0      	blx	r6
      CalculateSoftmaxParams(context, input, output, params, op_data);

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return ret_val;
}
 801509e:	4620      	mov	r0, r4
 80150a0:	b005      	add	sp, #20
 80150a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80150a6:	684b      	ldr	r3, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 80150a8:	b113      	cbz	r3, 80150b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80150aa:	681c      	ldr	r4, [r3, #0]
 80150ac:	2c01      	cmp	r4, #1
 80150ae:	d00b      	beq.n	80150c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 80150b0:	696e      	ldr	r6, [r5, #20]
 80150b2:	b103      	cbz	r3, 80150b6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	2401      	movs	r4, #1
 80150b8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80150bc:	4b22      	ldr	r3, [pc, #136]	; (8015148 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 80150be:	9301      	str	r3, [sp, #4]
 80150c0:	4b25      	ldr	r3, [pc, #148]	; (8015158 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 80150c2:	9300      	str	r3, [sp, #0]
 80150c4:	2395      	movs	r3, #149	; 0x95
 80150c6:	e7e6      	b.n	8015096 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  MicroContext* micro_context = GetMicroContext(context);
 80150c8:	68c6      	ldr	r6, [r0, #12]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 80150ca:	2200      	movs	r2, #0
 80150cc:	4630      	mov	r0, r6
 80150ce:	f7f4 ffd1 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 80150d2:	4680      	mov	r8, r0
 80150d4:	b940      	cbnz	r0, 80150e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>
 80150d6:	4b21      	ldr	r3, [pc, #132]	; (801515c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 80150d8:	696e      	ldr	r6, [r5, #20]
 80150da:	9300      	str	r3, [sp, #0]
 80150dc:	2397      	movs	r3, #151	; 0x97
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80150de:	4a1c      	ldr	r2, [pc, #112]	; (8015150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 80150e0:	4628      	mov	r0, r5
 80150e2:	491f      	ldr	r1, [pc, #124]	; (8015160 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 80150e4:	47b0      	blx	r6
 80150e6:	e7da      	b.n	801509e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x32>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80150e8:	6883      	ldr	r3, [r0, #8]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	dc04      	bgt.n	80150fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 80150f0:	4b1c      	ldr	r3, [pc, #112]	; (8015164 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 80150f2:	696e      	ldr	r6, [r5, #20]
 80150f4:	9300      	str	r3, [sp, #0]
 80150f6:	2398      	movs	r3, #152	; 0x98
 80150f8:	e7f1      	b.n	80150de <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x72>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80150fa:	2200      	movs	r2, #0
 80150fc:	4639      	mov	r1, r7
 80150fe:	4630      	mov	r0, r6
 8015100:	f7f4 ffcd 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8015104:	4681      	mov	r9, r0
 8015106:	b920      	cbnz	r0, 8015112 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
 8015108:	4b17      	ldr	r3, [pc, #92]	; (8015168 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
 801510a:	696e      	ldr	r6, [r5, #20]
 801510c:	9300      	str	r3, [sp, #0]
 801510e:	239a      	movs	r3, #154	; 0x9a
 8015110:	e7e5      	b.n	80150de <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x72>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	b923      	cbnz	r3, 8015120 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 8015116:	4b15      	ldr	r3, [pc, #84]	; (801516c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x100>)
 8015118:	696e      	ldr	r6, [r5, #20]
 801511a:	9300      	str	r3, [sp, #0]
 801511c:	239c      	movs	r3, #156	; 0x9c
 801511e:	e7de      	b.n	80150de <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x72>
      CalculateSoftmaxParams(context, input, output, params, op_data);
 8015120:	9300      	str	r3, [sp, #0]
 8015122:	4602      	mov	r2, r0
 8015124:	697b      	ldr	r3, [r7, #20]
 8015126:	4641      	mov	r1, r8
 8015128:	4628      	mov	r0, r5
 801512a:	f7ff fdc1 	bl	8014cb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
  micro_context->DeallocateTempTfLiteTensor(input);
 801512e:	6833      	ldr	r3, [r6, #0]
 8015130:	4641      	mov	r1, r8
      CalculateSoftmaxParams(context, input, output, params, op_data);
 8015132:	4604      	mov	r4, r0
  micro_context->DeallocateTempTfLiteTensor(input);
 8015134:	699b      	ldr	r3, [r3, #24]
 8015136:	4630      	mov	r0, r6
 8015138:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 801513a:	6833      	ldr	r3, [r6, #0]
 801513c:	4649      	mov	r1, r9
 801513e:	4630      	mov	r0, r6
 8015140:	699b      	ldr	r3, [r3, #24]
 8015142:	4798      	blx	r3
  return ret_val;
 8015144:	e7ab      	b.n	801509e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x32>
 8015146:	bf00      	nop
 8015148:	080fca44 	.word	0x080fca44
 801514c:	080fc490 	.word	0x080fc490
 8015150:	080fcef6 	.word	0x080fcef6
 8015154:	080f982c 	.word	0x080f982c
 8015158:	080fc4a0 	.word	0x080fc4a0
 801515c:	080fbed7 	.word	0x080fbed7
 8015160:	080f93a5 	.word	0x080f93a5
 8015164:	080fcec1 	.word	0x080fcec1
 8015168:	080fbcfa 	.word	0x080fbcfa
 801516c:	080fcedb 	.word	0x080fcedb

08015170 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>:
}

inline void StridedSlicePadIndices(tflite::StridedSliceParams* p,
                                   int dim_count) {
  // Add indices and mask bits to fully include extra dimensions
  TFLITE_CHECK_LE(dim_count, 5);
 8015170:	2905      	cmp	r1, #5
                                   int dim_count) {
 8015172:	b570      	push	{r4, r5, r6, lr}
  TFLITE_CHECK_LE(dim_count, 5);
 8015174:	dd01      	ble.n	801517a <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
 8015176:	f001 fde5 	bl	8016d44 <abort>
  TFLITE_CHECK_GE(dim_count, p->start_indices_count);
 801517a:	f990 3000 	ldrsb.w	r3, [r0]
 801517e:	428b      	cmp	r3, r1
 8015180:	dcf9      	bgt.n	8015176 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->start_indices_count, p->stop_indices_count);
 8015182:	f990 2018 	ldrsb.w	r2, [r0, #24]
 8015186:	429a      	cmp	r2, r3
 8015188:	d1f5      	bne.n	8015176 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->stop_indices_count, p->strides_count);
 801518a:	f990 3030 	ldrsb.w	r3, [r0, #48]	; 0x30
 801518e:	4293      	cmp	r3, r2
 8015190:	d1f1      	bne.n	8015176 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
 8015192:	eb00 0483 	add.w	r4, r0, r3, lsl #2

  const int pad_count = dim_count - p->start_indices_count;

  // Pad indices at start, so move arrays by pad_count.
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
 8015196:	1e5d      	subs	r5, r3, #1
 8015198:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801519c:	1acb      	subs	r3, r1, r3
 801519e:	3404      	adds	r4, #4
 80151a0:	3204      	adds	r2, #4
 80151a2:	2d00      	cmp	r5, #0
 80151a4:	da0b      	bge.n	80151be <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x4e>
    p->strides[i + pad_count] = p->strides[i];
    p->start_indices[i + pad_count] = p->start_indices[i];
    p->stop_indices[i + pad_count] = p->stop_indices[i];
  }
  for (int i = 0; i < pad_count; ++i) {
 80151a6:	2200      	movs	r2, #0
 80151a8:	1d04      	adds	r4, r0, #4
    p->start_indices[i] = 0;
    p->stop_indices[i] = 1;
 80151aa:	2501      	movs	r5, #1
    p->start_indices[i] = 0;
 80151ac:	4616      	mov	r6, r2
  for (int i = 0; i < pad_count; ++i) {
 80151ae:	429a      	cmp	r2, r3
 80151b0:	da0f      	bge.n	80151d2 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x62>
    p->start_indices[i] = 0;
 80151b2:	f844 6b04 	str.w	r6, [r4], #4
  for (int i = 0; i < pad_count; ++i) {
 80151b6:	3201      	adds	r2, #1
    p->stop_indices[i] = 1;
 80151b8:	6165      	str	r5, [r4, #20]
    p->strides[i] = 1;
 80151ba:	62e5      	str	r5, [r4, #44]	; 0x2c
  for (int i = 0; i < pad_count; ++i) {
 80151bc:	e7f7      	b.n	80151ae <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x3e>
    p->strides[i + pad_count] = p->strides[i];
 80151be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
 80151c0:	3d01      	subs	r5, #1
    p->strides[i + pad_count] = p->strides[i];
 80151c2:	62d6      	str	r6, [r2, #44]	; 0x2c
    p->start_indices[i + pad_count] = p->start_indices[i];
 80151c4:	f854 6d04 	ldr.w	r6, [r4, #-4]!
 80151c8:	f842 6d04 	str.w	r6, [r2, #-4]!
    p->stop_indices[i + pad_count] = p->stop_indices[i];
 80151cc:	69a6      	ldr	r6, [r4, #24]
 80151ce:	6196      	str	r6, [r2, #24]
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
 80151d0:	e7e7      	b.n	80151a2 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x32>
  }

  // Pad masks with 0s or 1s as required.
  p->shrink_axis_mask <<= pad_count;
 80151d2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  p->begin_mask <<= pad_count;
  p->end_mask <<= pad_count;
  p->begin_mask |= (1 << pad_count) - 1;
  p->end_mask |= (1 << pad_count) - 1;

  p->start_indices_count = dim_count;
 80151d6:	b249      	sxtb	r1, r1
  p->begin_mask <<= pad_count;
 80151d8:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
  p->shrink_axis_mask <<= pad_count;
 80151dc:	409a      	lsls	r2, r3
  p->start_indices_count = dim_count;
 80151de:	7001      	strb	r1, [r0, #0]
  p->stop_indices_count = dim_count;
 80151e0:	7601      	strb	r1, [r0, #24]
  p->shrink_axis_mask <<= pad_count;
 80151e2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
 80151e6:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
  p->strides_count = dim_count;
 80151ea:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
  p->ellipsis_mask <<= pad_count;
 80151ee:	409a      	lsls	r2, r3
 80151f0:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
  p->new_axis_mask <<= pad_count;
 80151f4:	f8b0 204e 	ldrh.w	r2, [r0, #78]	; 0x4e
 80151f8:	409a      	lsls	r2, r3
 80151fa:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
  p->end_mask <<= pad_count;
 80151fe:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8015202:	fa02 f503 	lsl.w	r5, r2, r3
  p->begin_mask |= (1 << pad_count) - 1;
 8015206:	2201      	movs	r2, #1
 8015208:	409a      	lsls	r2, r3
  p->begin_mask <<= pad_count;
 801520a:	fa04 f303 	lsl.w	r3, r4, r3
  p->begin_mask |= (1 << pad_count) - 1;
 801520e:	3a01      	subs	r2, #1
 8015210:	b212      	sxth	r2, r2
 8015212:	4313      	orrs	r3, r2
  p->end_mask |= (1 << pad_count) - 1;
 8015214:	432a      	orrs	r2, r5
  p->begin_mask |= (1 << pad_count) - 1;
 8015216:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
  p->end_mask |= (1 << pad_count) - 1;
 801521a:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
}
 801521e:	bd70      	pop	{r4, r5, r6, pc}

08015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>:
// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size] (or [-1, axis_size -1] if stride < 0)
// that can be used to index directly into the data.
inline int StridedSliceStartForAxis(const tflite::StridedSliceParams& params,
                                    const RuntimeShape& input_shape,
                                    int32_t axis) {
 8015220:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK_GE(i, 0);
 8015222:	1e15      	subs	r5, r2, #0
 8015224:	da01      	bge.n	801522a <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0xa>
 8015226:	f001 fd8d 	bl	8016d44 <abort>
    TFLITE_DCHECK_LT(i, size_);
 801522a:	680b      	ldr	r3, [r1, #0]
 801522c:	429d      	cmp	r5, r3
 801522e:	dafa      	bge.n	8015226 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0x6>
    return dims_[i];
 8015230:	00ac      	lsls	r4, r5, #2
  const int32_t axis_size = input_shape.Dims(axis);
  int32_t start = params.start_indices[axis];
  const int32_t stride = params.strides[axis];
  const int32_t begin_mask = (params.begin_mask & 1 << axis);
 8015232:	2201      	movs	r2, #1
 8015234:	4421      	add	r1, r4
 8015236:	4404      	add	r4, r0
 8015238:	40aa      	lsls	r2, r5
 801523a:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 801523e:	684b      	ldr	r3, [r1, #4]
  int32_t start = params.start_indices[axis];
 8015240:	6861      	ldr	r1, [r4, #4]
  const int32_t begin_mask = (params.begin_mask & 1 << axis);
 8015242:	4002      	ands	r2, r0
  const int32_t stride = params.strides[axis];
 8015244:	6b64      	ldr	r4, [r4, #52]	; 0x34
  if (start < 0) {
 8015246:	2900      	cmp	r1, #0
    start += axis_size;
 8015248:	bfb8      	it	lt
 801524a:	18c9      	addlt	r1, r1, r3
  }
  if (stride > 0) {
 801524c:	2c00      	cmp	r4, #0
 801524e:	dd0a      	ble.n	8015266 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0x46>
  TFLITE_DCHECK(!(hi < lo));
 8015250:	2b00      	cmp	r3, #0
 8015252:	dbe8      	blt.n	8015226 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0x6>
  if (hi < v) return hi;
 8015254:	4299      	cmp	r1, r3
 8015256:	dc01      	bgt.n	801525c <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0x3c>
 8015258:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    start = Clamp(start, 0, axis_size);
  } else {
    start = Clamp(start, -1, axis_size - 1);
  }
  if (begin_mask) {
 801525c:	2a00      	cmp	r2, #0
    if (stride > 0) {
      start = 0;
 801525e:	bf18      	it	ne
 8015260:	2300      	movne	r3, #0
    } else {
      start = axis_size - 1;
    }
  }
  return start;
}
 8015262:	4618      	mov	r0, r3
 8015264:	bd38      	pop	{r3, r4, r5, pc}
    start = Clamp(start, -1, axis_size - 1);
 8015266:	3b01      	subs	r3, #1
  TFLITE_DCHECK(!(hi < lo));
 8015268:	1c58      	adds	r0, r3, #1
 801526a:	dbdc      	blt.n	8015226 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0x6>
  if (hi < v) return hi;
 801526c:	428b      	cmp	r3, r1
 801526e:	db05      	blt.n	801527c <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0x5c>
 8015270:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  if (begin_mask) {
 8015274:	2a00      	cmp	r2, #0
 8015276:	bf08      	it	eq
 8015278:	460b      	moveq	r3, r1
 801527a:	e7f2      	b.n	8015262 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0x42>
  if (hi < v) return hi;
 801527c:	4619      	mov	r1, r3
 801527e:	e7f9      	b.n	8015274 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl+0x54>

08015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>:

inline int StridedSliceEndForAxis(const tflite::StridedSliceParams& params,
                                  const RuntimeShape& input_shape, int axis,
                                  int start) {
 8015280:	b570      	push	{r4, r5, r6, lr}
  const auto shrink_axis_mask = params.shrink_axis_mask;
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
 8015282:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    TFLITE_DCHECK_GE(i, 0);
 8015286:	2a00      	cmp	r2, #0
 8015288:	fa45 f502 	asr.w	r5, r5, r2
 801528c:	f005 0501 	and.w	r5, r5, #1
 8015290:	da01      	bge.n	8015296 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x16>
 8015292:	f001 fd57 	bl	8016d44 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8015296:	680c      	ldr	r4, [r1, #0]
 8015298:	42a2      	cmp	r2, r4
 801529a:	dafa      	bge.n	8015292 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x12>
    return dims_[i];
 801529c:	0096      	lsls	r6, r2, #2
 801529e:	4431      	add	r1, r6
 80152a0:	684c      	ldr	r4, [r1, #4]
  const int axis_size = input_shape.Dims(axis);
  const bool offset = params.offset;
  if (shrink_axis) {
 80152a2:	b125      	cbz	r5, 80152ae <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x2e>
    if (start >= axis_size) {
 80152a4:	42a3      	cmp	r3, r4
 80152a6:	da00      	bge.n	80152aa <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x2a>
      return start;
    } else {
      return start + 1;
 80152a8:	3301      	adds	r3, #1
    } else {
      end = -1;
    }
  }
  return end;
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	bd70      	pop	{r4, r5, r6, pc}
  int end = indices[axis];
 80152ae:	4406      	add	r6, r0
  if (offset) {
 80152b0:	f890 5052 	ldrb.w	r5, [r0, #82]	; 0x52
  int end = indices[axis];
 80152b4:	69f1      	ldr	r1, [r6, #28]
  if (offset) {
 80152b6:	b105      	cbz	r5, 80152ba <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3a>
    end += start;
 80152b8:	4419      	add	r1, r3
  const int32_t stride = params.strides[axis];
 80152ba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
  if (end < 0) {
 80152be:	2900      	cmp	r1, #0
  const int32_t stride = params.strides[axis];
 80152c0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    end += axis_size;
 80152c2:	bfb8      	it	lt
 80152c4:	1909      	addlt	r1, r1, r4
  const int32_t end_mask = (params.end_mask & 1 << axis);
 80152c6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 80152ca:	2001      	movs	r0, #1
  if (stride > 0) {
 80152cc:	2d00      	cmp	r5, #0
  const int32_t end_mask = (params.end_mask & 1 << axis);
 80152ce:	fa00 f202 	lsl.w	r2, r0, r2
 80152d2:	ea02 0203 	and.w	r2, r2, r3
  if (stride > 0) {
 80152d6:	dd0d      	ble.n	80152f4 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x74>
  TFLITE_DCHECK(!(hi < lo));
 80152d8:	2c00      	cmp	r4, #0
 80152da:	dbda      	blt.n	8015292 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x12>
  if (hi < v) return hi;
 80152dc:	42a1      	cmp	r1, r4
 80152de:	dc11      	bgt.n	8015304 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x84>
 80152e0:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  if (end_mask) {
 80152e4:	2a00      	cmp	r2, #0
 80152e6:	d0e0      	beq.n	80152aa <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x2a>
      end = -1;
 80152e8:	2d00      	cmp	r5, #0
 80152ea:	bfcc      	ite	gt
 80152ec:	4623      	movgt	r3, r4
 80152ee:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80152f2:	e7da      	b.n	80152aa <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x2a>
    end = Clamp(end, -1, axis_size - 1);
 80152f4:	1e63      	subs	r3, r4, #1
  TFLITE_DCHECK(!(hi < lo));
 80152f6:	1c58      	adds	r0, r3, #1
 80152f8:	dbcb      	blt.n	8015292 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x12>
  if (hi < v) return hi;
 80152fa:	428b      	cmp	r3, r1
 80152fc:	dbf2      	blt.n	80152e4 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x64>
 80152fe:	ea41 73e1 	orr.w	r3, r1, r1, asr #31
 8015302:	e7ef      	b.n	80152e4 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x64>
 8015304:	4623      	mov	r3, r4
 8015306:	e7ed      	b.n	80152e4 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x64>

08015308 <_ZN6tflite22Register_STRIDED_SLICEEv>:
}

}  // namespace

TFLMRegistration Register_STRIDED_SLICE() {
  return tflite::micro::RegisterOp(StridedSliceInit, StridedSlicePrepare, Eval);
 8015308:	2300      	movs	r3, #0
 801530a:	4a06      	ldr	r2, [pc, #24]	; (8015324 <_ZN6tflite22Register_STRIDED_SLICEEv+0x1c>)
TFLMRegistration Register_STRIDED_SLICE() {
 801530c:	b513      	push	{r0, r1, r4, lr}
 801530e:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(StridedSliceInit, StridedSlicePrepare, Eval);
 8015310:	4905      	ldr	r1, [pc, #20]	; (8015328 <_ZN6tflite22Register_STRIDED_SLICEEv+0x20>)
 8015312:	e9cd 3300 	strd	r3, r3, [sp]
 8015316:	4b05      	ldr	r3, [pc, #20]	; (801532c <_ZN6tflite22Register_STRIDED_SLICEEv+0x24>)
 8015318:	f7fa fcac 	bl	800fc74 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 801531c:	4620      	mov	r0, r4
 801531e:	b002      	add	sp, #8
 8015320:	bd10      	pop	{r4, pc}
 8015322:	bf00      	nop
 8015324:	08015f85 	.word	0x08015f85
 8015328:	08015f71 	.word	0x08015f71
 801532c:	08015d89 	.word	0x08015d89

08015330 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>:
namespace tflite {

namespace reference_ops {

template <typename T>
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 8015330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015334:	b0af      	sub	sp, #188	; 0xbc
 8015336:	460e      	mov	r6, r1
 8015338:	4614      	mov	r4, r2
                         const RuntimeShape& unextended_output_shape,
                         SequentialTensorWriter<T>* writer) {
  ruy::profiler::ScopeLabel label("StridedSlice");

  // Note that the output_shape is not used herein.
  tflite::StridedSliceParams params_copy = op_params;
 801533a:	4601      	mov	r1, r0
 801533c:	2254      	movs	r2, #84	; 0x54
 801533e:	a819      	add	r0, sp, #100	; 0x64
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 8015340:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
 8015342:	f001 fd86 	bl	8016e52 <memcpy>

  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
 8015346:	6833      	ldr	r3, [r6, #0]
 8015348:	2b05      	cmp	r3, #5
 801534a:	dd01      	ble.n	8015350 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x20>
 801534c:	f001 fcfa 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
 8015350:	6823      	ldr	r3, [r4, #0]
 8015352:	2b05      	cmp	r3, #5
 8015354:	dcfa      	bgt.n	801534c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1c>
    return RuntimeShape(new_shape_size, shape, 1);
 8015356:	2301      	movs	r3, #1
 8015358:	4632      	mov	r2, r6
 801535a:	2105      	movs	r1, #5
 801535c:	a80b      	add	r0, sp, #44	; 0x2c
 801535e:	f7f3 f8a3 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 8015362:	2301      	movs	r3, #1
 8015364:	4622      	mov	r2, r4
 8015366:	2105      	movs	r1, #5
 8015368:	a812      	add	r0, sp, #72	; 0x48
 801536a:	f7f3 f89d 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(5, unextended_output_shape);

  // Reverse and pad to 5 dimensions because that is what the runtime code
  // requires (ie. all shapes must be 5D and are given backwards).
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
 801536e:	2105      	movs	r1, #5
 8015370:	a819      	add	r0, sp, #100	; 0x64
 8015372:	f7ff fefd 	bl	8015170 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>

  const int start_0 =
 8015376:	2200      	movs	r2, #0
 8015378:	a90b      	add	r1, sp, #44	; 0x2c
 801537a:	a819      	add	r0, sp, #100	; 0x64
 801537c:	f7ff ff50 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
      strided_slice::StridedSliceStartForAxis(params_copy, input_shape, 0);
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 8015380:	2200      	movs	r2, #0
 8015382:	4603      	mov	r3, r0
 8015384:	a90b      	add	r1, sp, #44	; 0x2c
  const int start_0 =
 8015386:	4604      	mov	r4, r0
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 8015388:	a819      	add	r0, sp, #100	; 0x64
 801538a:	f7ff ff79 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
      params_copy, input_shape, 0, start_0);
  const int start_1 =
 801538e:	2201      	movs	r2, #1
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 8015390:	9001      	str	r0, [sp, #4]
  const int start_1 =
 8015392:	a90b      	add	r1, sp, #44	; 0x2c
 8015394:	a819      	add	r0, sp, #100	; 0x64
 8015396:	f7ff ff43 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
      strided_slice::StridedSliceStartForAxis(params_copy, input_shape, 1);
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 801539a:	2201      	movs	r2, #1
 801539c:	4603      	mov	r3, r0
  const int start_1 =
 801539e:	9002      	str	r0, [sp, #8]
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80153a0:	a90b      	add	r1, sp, #44	; 0x2c
 80153a2:	a819      	add	r0, sp, #100	; 0x64
 80153a4:	f7ff ff6c 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
      params_copy, input_shape, 1, start_1);
  const int start_2 =
 80153a8:	2202      	movs	r2, #2
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80153aa:	9003      	str	r0, [sp, #12]
  const int start_2 =
 80153ac:	a90b      	add	r1, sp, #44	; 0x2c
 80153ae:	a819      	add	r0, sp, #100	; 0x64
 80153b0:	f7ff ff36 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
      strided_slice::StridedSliceStartForAxis(params_copy, input_shape, 2);
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80153b4:	2202      	movs	r2, #2
 80153b6:	4603      	mov	r3, r0
  const int start_2 =
 80153b8:	9004      	str	r0, [sp, #16]
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80153ba:	a90b      	add	r1, sp, #44	; 0x2c
 80153bc:	a819      	add	r0, sp, #100	; 0x64
 80153be:	f7ff ff5f 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
      params_copy, input_shape, 2, start_2);
  const int start_3 =
 80153c2:	2203      	movs	r2, #3
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80153c4:	9005      	str	r0, [sp, #20]
  const int start_3 =
 80153c6:	a90b      	add	r1, sp, #44	; 0x2c
 80153c8:	a819      	add	r0, sp, #100	; 0x64
 80153ca:	f7ff ff29 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
      strided_slice::StridedSliceStartForAxis(params_copy, input_shape, 3);
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 80153ce:	2203      	movs	r2, #3
 80153d0:	4603      	mov	r3, r0
  const int start_3 =
 80153d2:	9006      	str	r0, [sp, #24]
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 80153d4:	a90b      	add	r1, sp, #44	; 0x2c
 80153d6:	a819      	add	r0, sp, #100	; 0x64
 80153d8:	f7ff ff52 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
      params_copy, input_shape, 3, start_3);
  const int start_4 =
 80153dc:	2204      	movs	r2, #4
 80153de:	a90b      	add	r1, sp, #44	; 0x2c
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 80153e0:	4682      	mov	sl, r0
  const int start_4 =
 80153e2:	a819      	add	r0, sp, #100	; 0x64
 80153e4:	f7ff ff1c 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
      strided_slice::StridedSliceStartForAxis(params_copy, input_shape, 4);
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 80153e8:	2204      	movs	r2, #4
 80153ea:	4603      	mov	r3, r0
  const int start_4 =
 80153ec:	4681      	mov	r9, r0
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 80153ee:	a90b      	add	r1, sp, #44	; 0x2c
 80153f0:	a819      	add	r0, sp, #100	; 0x64
 80153f2:	f7ff ff45 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  // a variable of type 'const int *'
  // with an rvalue of type 'const int32_t *' (aka 'const long *').
  // reinterpret_cast is required to handle this casting.
  const int* shape = reinterpret_cast<const int*>(input_shape.DimsData());
  const int* stride = reinterpret_cast<const int*>(params_copy.strides);
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 80153f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 80153f8:	4683      	mov	fp, r0
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 80153fa:	9309      	str	r3, [sp, #36]	; 0x24
             offset_3 += stride[3]) {
          // When the stride is 1, the inner loop is equivalent to the
          // optimized slice inner loop. Otherwise, it is identical to the
          // strided_slice reference implementation inner loop.
          if (inner_stride_is_1) {
            const int len = stop_4 - start_4;
 80153fc:	eba0 0309 	sub.w	r3, r0, r9
 8015400:	9307      	str	r3, [sp, #28]
  SequentialTensorWriter(const T* input_data, T* output_data)
      : input_data_(input_data), output_ptr_(output_data) {}

  void Write(int position) { *output_ptr_++ = input_data_[position]; }
  void WriteN(int position, int len) {
    memcpy(output_ptr_, &input_data_[position], sizeof(T) * len);
 8015402:	009b      	lsls	r3, r3, #2
 8015404:	9308      	str	r3, [sp, #32]
    if (stride < 0) {
 8015406:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015408:	2b00      	cmp	r3, #0
      return index > end;
 801540a:	9b01      	ldr	r3, [sp, #4]
    if (stride < 0) {
 801540c:	da51      	bge.n	80154b2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x182>
      return index > end;
 801540e:	429c      	cmp	r4, r3
 8015410:	bfd4      	ite	le
 8015412:	2300      	movle	r3, #0
 8015414:	2301      	movgt	r3, #1
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 8015416:	2b00      	cmp	r3, #0
 8015418:	f000 808e 	beq.w	8015538 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x208>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 801541c:	9e02      	ldr	r6, [sp, #8]
    if (stride < 0) {
 801541e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015420:	2b00      	cmp	r3, #0
      return index > end;
 8015422:	9b03      	ldr	r3, [sp, #12]
    if (stride < 0) {
 8015424:	da4a      	bge.n	80154bc <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x18c>
      return index > end;
 8015426:	429e      	cmp	r6, r3
 8015428:	bfd4      	ite	le
 801542a:	2300      	movle	r3, #0
 801542c:	2301      	movgt	r3, #1
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 801542e:	2b00      	cmp	r3, #0
 8015430:	d07f      	beq.n	8015532 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x202>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015432:	9f04      	ldr	r7, [sp, #16]
    if (stride < 0) {
 8015434:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015436:	2b00      	cmp	r3, #0
      return index > end;
 8015438:	9b05      	ldr	r3, [sp, #20]
    if (stride < 0) {
 801543a:	da44      	bge.n	80154c6 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x196>
      return index > end;
 801543c:	429f      	cmp	r7, r3
 801543e:	bfd4      	ite	le
 8015440:	2300      	movle	r3, #0
 8015442:	2301      	movgt	r3, #1
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015444:	2b00      	cmp	r3, #0
 8015446:	d071      	beq.n	801552c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1fc>
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015448:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if (stride < 0) {
 801544c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801544e:	2b00      	cmp	r3, #0
 8015450:	da3e      	bge.n	80154d0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1a0>
      return index > end;
 8015452:	45d0      	cmp	r8, sl
 8015454:	bfd4      	ite	le
 8015456:	2300      	movle	r3, #0
 8015458:	2301      	movgt	r3, #1
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 801545a:	2b00      	cmp	r3, #0
 801545c:	d063      	beq.n	8015526 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1f6>
          if (inner_stride_is_1) {
 801545e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015460:	2901      	cmp	r1, #1
 8015462:	e9dd 3c0f 	ldrd	r3, ip, [sp, #60]	; 0x3c
 8015466:	e9dd 020d 	ldrd	r0, r2, [sp, #52]	; 0x34
 801546a:	d036      	beq.n	80154da <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1aa>
 801546c:	fb0c f303 	mul.w	r3, ip, r3
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
            if (len > 0) {
              writer->WriteN(index, len);
            }
          } else {
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 8015470:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015472:	46ce      	mov	lr, r9
 8015474:	435a      	muls	r2, r3
                 offset_4 += stride[4]) {
              int index = offset_4 + offset_3 * shape[4] +
                          offset_2 * shape[3] * shape[4] +
                          offset_1 * shape[2] * shape[3] * shape[4] +
                          offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015476:	4350      	muls	r0, r2
 8015478:	4360      	muls	r0, r4
  void Write(int position) { *output_ptr_++ = input_data_[position]; }
 801547a:	fb02 0206 	mla	r2, r2, r6, r0
 801547e:	fb03 2307 	mla	r3, r3, r7, r2
 8015482:	fb0c 3308 	mla	r3, ip, r8, r3
    if (stride < 0) {
 8015486:	2900      	cmp	r1, #0
 8015488:	da48      	bge.n	801551c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1ec>
      return index > end;
 801548a:	45de      	cmp	lr, fp
 801548c:	bfd4      	ite	le
 801548e:	2200      	movle	r2, #0
 8015490:	2201      	movgt	r2, #1
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 8015492:	2a00      	cmp	r2, #0
 8015494:	d03f      	beq.n	8015516 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1e6>
 8015496:	eb03 000e 	add.w	r0, r3, lr
 801549a:	682a      	ldr	r2, [r5, #0]
 801549c:	448e      	add	lr, r1
 801549e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80154a2:	6868      	ldr	r0, [r5, #4]
 80154a4:	6812      	ldr	r2, [r2, #0]
 80154a6:	f100 0c04 	add.w	ip, r0, #4
 80154aa:	f8c5 c004 	str.w	ip, [r5, #4]
 80154ae:	6002      	str	r2, [r0, #0]
 80154b0:	e7e9      	b.n	8015486 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x156>
      return index < end;
 80154b2:	429c      	cmp	r4, r3
 80154b4:	bfac      	ite	ge
 80154b6:	2300      	movge	r3, #0
 80154b8:	2301      	movlt	r3, #1
 80154ba:	e7ac      	b.n	8015416 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xe6>
 80154bc:	429e      	cmp	r6, r3
 80154be:	bfac      	ite	ge
 80154c0:	2300      	movge	r3, #0
 80154c2:	2301      	movlt	r3, #1
 80154c4:	e7b3      	b.n	801542e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xfe>
 80154c6:	429f      	cmp	r7, r3
 80154c8:	bfac      	ite	ge
 80154ca:	2300      	movge	r3, #0
 80154cc:	2301      	movlt	r3, #1
 80154ce:	e7b9      	b.n	8015444 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x114>
 80154d0:	45d0      	cmp	r8, sl
 80154d2:	bfac      	ite	ge
 80154d4:	2300      	movge	r3, #0
 80154d6:	2301      	movlt	r3, #1
 80154d8:	e7bf      	b.n	801545a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x12a>
            if (len > 0) {
 80154da:	9907      	ldr	r1, [sp, #28]
 80154dc:	2900      	cmp	r1, #0
 80154de:	dd1a      	ble.n	8015516 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1e6>
            int index = start_4 + offset_3 * shape[4] +
 80154e0:	fb0c 9108 	mla	r1, ip, r8, r9
                        offset_2 * shape[3] * shape[4] +
 80154e4:	fb03 fe07 	mul.w	lr, r3, r7
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 80154e8:	4360      	muls	r0, r4
            int index = start_4 + offset_3 * shape[4] +
 80154ea:	fb0c 1e0e 	mla	lr, ip, lr, r1
                        offset_1 * shape[2] * shape[3] * shape[4] +
 80154ee:	fb02 f106 	mul.w	r1, r2, r6
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 80154f2:	4342      	muls	r2, r0
    memcpy(output_ptr_, &input_data_[position], sizeof(T) * len);
 80154f4:	6868      	ldr	r0, [r5, #4]
                        offset_1 * shape[2] * shape[3] * shape[4] +
 80154f6:	4359      	muls	r1, r3
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 80154f8:	4353      	muls	r3, r2
 80154fa:	9a08      	ldr	r2, [sp, #32]
                        offset_2 * shape[3] * shape[4] +
 80154fc:	fb0c e101 	mla	r1, ip, r1, lr
            int index = start_4 + offset_3 * shape[4] +
 8015500:	fb0c 1303 	mla	r3, ip, r3, r1
 8015504:	6829      	ldr	r1, [r5, #0]
 8015506:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801550a:	f001 fca2 	bl	8016e52 <memcpy>
    output_ptr_ += len;
 801550e:	686b      	ldr	r3, [r5, #4]
 8015510:	9a08      	ldr	r2, [sp, #32]
 8015512:	4413      	add	r3, r2
 8015514:	606b      	str	r3, [r5, #4]
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015516:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015518:	4498      	add	r8, r3
 801551a:	e797      	b.n	801544c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x11c>
      return index < end;
 801551c:	45de      	cmp	lr, fp
 801551e:	bfac      	ite	ge
 8015520:	2200      	movge	r2, #0
 8015522:	2201      	movlt	r2, #1
 8015524:	e7b5      	b.n	8015492 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x162>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015526:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015528:	441f      	add	r7, r3
 801552a:	e783      	b.n	8015434 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x104>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 801552c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801552e:	441e      	add	r6, r3
 8015530:	e775      	b.n	801541e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xee>
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 8015532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015534:	441c      	add	r4, r3
 8015536:	e766      	b.n	8015406 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xd6>
          }
        }
      }
    }
  }
}
 8015538:	b02f      	add	sp, #188	; 0xbc
 801553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801553e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 801553e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015542:	b0ad      	sub	sp, #180	; 0xb4
 8015544:	460e      	mov	r6, r1
 8015546:	4614      	mov	r4, r2
  tflite::StridedSliceParams params_copy = op_params;
 8015548:	4601      	mov	r1, r0
 801554a:	2254      	movs	r2, #84	; 0x54
 801554c:	a817      	add	r0, sp, #92	; 0x5c
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 801554e:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
 8015550:	f001 fc7f 	bl	8016e52 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
 8015554:	6833      	ldr	r3, [r6, #0]
 8015556:	2b05      	cmp	r3, #5
 8015558:	dd01      	ble.n	801555e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x20>
 801555a:	f001 fbf3 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
 801555e:	6823      	ldr	r3, [r4, #0]
 8015560:	2b05      	cmp	r3, #5
 8015562:	dcfa      	bgt.n	801555a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1c>
 8015564:	2301      	movs	r3, #1
 8015566:	4632      	mov	r2, r6
 8015568:	2105      	movs	r1, #5
 801556a:	a809      	add	r0, sp, #36	; 0x24
 801556c:	f7f2 ff9c 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 8015570:	2301      	movs	r3, #1
 8015572:	4622      	mov	r2, r4
 8015574:	2105      	movs	r1, #5
 8015576:	a810      	add	r0, sp, #64	; 0x40
 8015578:	f7f2 ff96 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
 801557c:	2105      	movs	r1, #5
 801557e:	a817      	add	r0, sp, #92	; 0x5c
 8015580:	f7ff fdf6 	bl	8015170 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 =
 8015584:	2200      	movs	r2, #0
 8015586:	a909      	add	r1, sp, #36	; 0x24
 8015588:	a817      	add	r0, sp, #92	; 0x5c
 801558a:	f7ff fe49 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 801558e:	2200      	movs	r2, #0
 8015590:	4603      	mov	r3, r0
 8015592:	a909      	add	r1, sp, #36	; 0x24
  const int start_0 =
 8015594:	4604      	mov	r4, r0
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 8015596:	a817      	add	r0, sp, #92	; 0x5c
 8015598:	f7ff fe72 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 =
 801559c:	2201      	movs	r2, #1
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 801559e:	9000      	str	r0, [sp, #0]
  const int start_1 =
 80155a0:	a909      	add	r1, sp, #36	; 0x24
 80155a2:	a817      	add	r0, sp, #92	; 0x5c
 80155a4:	f7ff fe3c 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80155a8:	2201      	movs	r2, #1
 80155aa:	4603      	mov	r3, r0
  const int start_1 =
 80155ac:	9001      	str	r0, [sp, #4]
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80155ae:	a909      	add	r1, sp, #36	; 0x24
 80155b0:	a817      	add	r0, sp, #92	; 0x5c
 80155b2:	f7ff fe65 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 =
 80155b6:	2202      	movs	r2, #2
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80155b8:	9002      	str	r0, [sp, #8]
  const int start_2 =
 80155ba:	a909      	add	r1, sp, #36	; 0x24
 80155bc:	a817      	add	r0, sp, #92	; 0x5c
 80155be:	f7ff fe2f 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80155c2:	2202      	movs	r2, #2
 80155c4:	4603      	mov	r3, r0
  const int start_2 =
 80155c6:	9003      	str	r0, [sp, #12]
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80155c8:	a909      	add	r1, sp, #36	; 0x24
 80155ca:	a817      	add	r0, sp, #92	; 0x5c
 80155cc:	f7ff fe58 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 =
 80155d0:	2203      	movs	r2, #3
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80155d2:	9004      	str	r0, [sp, #16]
  const int start_3 =
 80155d4:	a909      	add	r1, sp, #36	; 0x24
 80155d6:	a817      	add	r0, sp, #92	; 0x5c
 80155d8:	f7ff fe22 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 80155dc:	2203      	movs	r2, #3
 80155de:	4603      	mov	r3, r0
  const int start_3 =
 80155e0:	9005      	str	r0, [sp, #20]
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 80155e2:	a909      	add	r1, sp, #36	; 0x24
 80155e4:	a817      	add	r0, sp, #92	; 0x5c
 80155e6:	f7ff fe4b 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 =
 80155ea:	2204      	movs	r2, #4
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 80155ec:	9006      	str	r0, [sp, #24]
  const int start_4 =
 80155ee:	a909      	add	r1, sp, #36	; 0x24
 80155f0:	a817      	add	r0, sp, #92	; 0x5c
 80155f2:	f7ff fe15 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
 80155f6:	4681      	mov	r9, r0
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 80155f8:	4603      	mov	r3, r0
 80155fa:	2204      	movs	r2, #4
 80155fc:	a909      	add	r1, sp, #36	; 0x24
 80155fe:	a817      	add	r0, sp, #92	; 0x5c
 8015600:	f7ff fe3e 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 8015604:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015606:	4682      	mov	sl, r0
            const int len = stop_4 - start_4;
 8015608:	eba0 0b09 	sub.w	fp, r0, r9
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 801560c:	9307      	str	r3, [sp, #28]
    if (stride < 0) {
 801560e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015610:	2b00      	cmp	r3, #0
      return index > end;
 8015612:	9b00      	ldr	r3, [sp, #0]
    if (stride < 0) {
 8015614:	da52      	bge.n	80156bc <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x17e>
      return index > end;
 8015616:	429c      	cmp	r4, r3
 8015618:	bfd4      	ite	le
 801561a:	2300      	movle	r3, #0
 801561c:	2301      	movgt	r3, #1
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 801561e:	2b00      	cmp	r3, #0
 8015620:	f000 8097 	beq.w	8015752 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x214>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015624:	9e01      	ldr	r6, [sp, #4]
    if (stride < 0) {
 8015626:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015628:	2b00      	cmp	r3, #0
      return index > end;
 801562a:	9b02      	ldr	r3, [sp, #8]
    if (stride < 0) {
 801562c:	da4b      	bge.n	80156c6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x188>
      return index > end;
 801562e:	429e      	cmp	r6, r3
 8015630:	bfd4      	ite	le
 8015632:	2300      	movle	r3, #0
 8015634:	2301      	movgt	r3, #1
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015636:	2b00      	cmp	r3, #0
 8015638:	f000 8088 	beq.w	801574c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x20e>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 801563c:	9f03      	ldr	r7, [sp, #12]
    if (stride < 0) {
 801563e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015640:	2b00      	cmp	r3, #0
      return index > end;
 8015642:	9b04      	ldr	r3, [sp, #16]
    if (stride < 0) {
 8015644:	da44      	bge.n	80156d0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x192>
      return index > end;
 8015646:	429f      	cmp	r7, r3
 8015648:	bfd4      	ite	le
 801564a:	2300      	movle	r3, #0
 801564c:	2301      	movgt	r3, #1
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 801564e:	2b00      	cmp	r3, #0
 8015650:	d079      	beq.n	8015746 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x208>
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015652:	f8dd 8014 	ldr.w	r8, [sp, #20]
    if (stride < 0) {
 8015656:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015658:	2b00      	cmp	r3, #0
      return index > end;
 801565a:	9b06      	ldr	r3, [sp, #24]
    if (stride < 0) {
 801565c:	da3d      	bge.n	80156da <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x19c>
      return index > end;
 801565e:	4598      	cmp	r8, r3
 8015660:	bfd4      	ite	le
 8015662:	2300      	movle	r3, #0
 8015664:	2301      	movgt	r3, #1
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015666:	2b00      	cmp	r3, #0
 8015668:	d06a      	beq.n	8015740 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x202>
          if (inner_stride_is_1) {
 801566a:	9b07      	ldr	r3, [sp, #28]
 801566c:	2b01      	cmp	r3, #1
 801566e:	d139      	bne.n	80156e4 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1a6>
            if (len > 0) {
 8015670:	f1bb 0f00 	cmp.w	fp, #0
 8015674:	dd1f      	ble.n	80156b6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x178>
                        offset_1 * shape[2] * shape[3] * shape[4] +
 8015676:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
                        offset_2 * shape[3] * shape[4] +
 801567a:	e9dd 300d 	ldrd	r3, r0, [sp, #52]	; 0x34
            int index = start_4 + offset_3 * shape[4] +
 801567e:	fb08 9100 	mla	r1, r8, r0, r9
                        offset_2 * shape[3] * shape[4] +
 8015682:	fb07 f203 	mul.w	r2, r7, r3
            int index = start_4 + offset_3 * shape[4] +
 8015686:	fb00 1202 	mla	r2, r0, r2, r1
                        offset_1 * shape[2] * shape[3] * shape[4] +
 801568a:	fb06 f10c 	mul.w	r1, r6, ip
 801568e:	4359      	muls	r1, r3
                        offset_2 * shape[3] * shape[4] +
 8015690:	fb00 2101 	mla	r1, r0, r1, r2
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015696:	4362      	muls	r2, r4
 8015698:	fb0c fc02 	mul.w	ip, ip, r2
    memcpy(output_ptr_, &input_data_[position], sizeof(T) * len);
 801569c:	465a      	mov	r2, fp
 801569e:	fb03 f30c 	mul.w	r3, r3, ip
            int index = start_4 + offset_3 * shape[4] +
 80156a2:	fb00 1303 	mla	r3, r0, r3, r1
 80156a6:	6829      	ldr	r1, [r5, #0]
 80156a8:	6868      	ldr	r0, [r5, #4]
 80156aa:	4419      	add	r1, r3
 80156ac:	f001 fbd1 	bl	8016e52 <memcpy>
    output_ptr_ += len;
 80156b0:	686b      	ldr	r3, [r5, #4]
 80156b2:	445b      	add	r3, fp
 80156b4:	606b      	str	r3, [r5, #4]
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 80156b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80156b8:	4498      	add	r8, r3
 80156ba:	e7cc      	b.n	8015656 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x118>
      return index < end;
 80156bc:	429c      	cmp	r4, r3
 80156be:	bfac      	ite	ge
 80156c0:	2300      	movge	r3, #0
 80156c2:	2301      	movlt	r3, #1
 80156c4:	e7ab      	b.n	801561e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xe0>
 80156c6:	429e      	cmp	r6, r3
 80156c8:	bfac      	ite	ge
 80156ca:	2300      	movge	r3, #0
 80156cc:	2301      	movlt	r3, #1
 80156ce:	e7b2      	b.n	8015636 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xf8>
 80156d0:	429f      	cmp	r7, r3
 80156d2:	bfac      	ite	ge
 80156d4:	2300      	movge	r3, #0
 80156d6:	2301      	movlt	r3, #1
 80156d8:	e7b9      	b.n	801564e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x110>
 80156da:	4598      	cmp	r8, r3
 80156dc:	bfac      	ite	ge
 80156de:	2300      	movge	r3, #0
 80156e0:	2301      	movlt	r3, #1
 80156e2:	e7c0      	b.n	8015666 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x128>
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 80156e4:	464a      	mov	r2, r9
    if (stride < 0) {
 80156e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	da24      	bge.n	8015736 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1f8>
      return index > end;
 80156ec:	4552      	cmp	r2, sl
 80156ee:	bfd4      	ite	le
 80156f0:	2300      	movle	r3, #0
 80156f2:	2301      	movgt	r3, #1
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d0de      	beq.n	80156b6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x178>
                          offset_1 * shape[2] * shape[3] * shape[4] +
 80156f8:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
                          offset_2 * shape[3] * shape[4] +
 80156fc:	e9dd 3c0d 	ldrd	r3, ip, [sp, #52]	; 0x34
 8015700:	fb07 f003 	mul.w	r0, r7, r3
              int index = offset_4 + offset_3 * shape[4] +
 8015704:	fb08 210c 	mla	r1, r8, ip, r2
 8015708:	fb0c 1100 	mla	r1, ip, r0, r1
                          offset_1 * shape[2] * shape[3] * shape[4] +
 801570c:	fb06 f00e 	mul.w	r0, r6, lr
 8015710:	4358      	muls	r0, r3
                          offset_2 * shape[3] * shape[4] +
 8015712:	fb0c 1000 	mla	r0, ip, r0, r1
                          offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015716:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015718:	4361      	muls	r1, r4
 801571a:	fb0e f101 	mul.w	r1, lr, r1
 801571e:	434b      	muls	r3, r1
  void Write(int position) { *output_ptr_++ = input_data_[position]; }
 8015720:	6869      	ldr	r1, [r5, #4]
              int index = offset_4 + offset_3 * shape[4] +
 8015722:	fb0c 0003 	mla	r0, ip, r3, r0
 8015726:	1c4b      	adds	r3, r1, #1
 8015728:	606b      	str	r3, [r5, #4]
 801572a:	682b      	ldr	r3, [r5, #0]
 801572c:	561b      	ldrsb	r3, [r3, r0]
 801572e:	700b      	strb	r3, [r1, #0]
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 8015730:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015732:	441a      	add	r2, r3
 8015734:	e7d7      	b.n	80156e6 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1a8>
      return index < end;
 8015736:	4552      	cmp	r2, sl
 8015738:	bfac      	ite	ge
 801573a:	2300      	movge	r3, #0
 801573c:	2301      	movlt	r3, #1
 801573e:	e7d9      	b.n	80156f4 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1b6>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015740:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015742:	441f      	add	r7, r3
 8015744:	e77b      	b.n	801563e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x100>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015746:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015748:	441e      	add	r6, r3
 801574a:	e76c      	b.n	8015626 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xe8>
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 801574c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801574e:	441c      	add	r4, r3
 8015750:	e75d      	b.n	801560e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xd0>
}
 8015752:	b02d      	add	sp, #180	; 0xb4
 8015754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015758 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 8015758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801575c:	b0af      	sub	sp, #188	; 0xbc
 801575e:	460e      	mov	r6, r1
 8015760:	4614      	mov	r4, r2
  tflite::StridedSliceParams params_copy = op_params;
 8015762:	4601      	mov	r1, r0
 8015764:	2254      	movs	r2, #84	; 0x54
 8015766:	a819      	add	r0, sp, #100	; 0x64
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 8015768:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
 801576a:	f001 fb72 	bl	8016e52 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
 801576e:	6833      	ldr	r3, [r6, #0]
 8015770:	2b05      	cmp	r3, #5
 8015772:	dd01      	ble.n	8015778 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x20>
 8015774:	f001 fae6 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
 8015778:	6823      	ldr	r3, [r4, #0]
 801577a:	2b05      	cmp	r3, #5
 801577c:	dcfa      	bgt.n	8015774 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1c>
 801577e:	2301      	movs	r3, #1
 8015780:	4632      	mov	r2, r6
 8015782:	2105      	movs	r1, #5
 8015784:	a80b      	add	r0, sp, #44	; 0x2c
 8015786:	f7f2 fe8f 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 801578a:	2301      	movs	r3, #1
 801578c:	4622      	mov	r2, r4
 801578e:	2105      	movs	r1, #5
 8015790:	a812      	add	r0, sp, #72	; 0x48
 8015792:	f7f2 fe89 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
 8015796:	2105      	movs	r1, #5
 8015798:	a819      	add	r0, sp, #100	; 0x64
 801579a:	f7ff fce9 	bl	8015170 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 =
 801579e:	2200      	movs	r2, #0
 80157a0:	a90b      	add	r1, sp, #44	; 0x2c
 80157a2:	a819      	add	r0, sp, #100	; 0x64
 80157a4:	f7ff fd3c 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 80157a8:	2200      	movs	r2, #0
 80157aa:	4603      	mov	r3, r0
 80157ac:	a90b      	add	r1, sp, #44	; 0x2c
  const int start_0 =
 80157ae:	4604      	mov	r4, r0
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 80157b0:	a819      	add	r0, sp, #100	; 0x64
 80157b2:	f7ff fd65 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 =
 80157b6:	2201      	movs	r2, #1
 80157b8:	a90b      	add	r1, sp, #44	; 0x2c
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 80157ba:	4683      	mov	fp, r0
  const int start_1 =
 80157bc:	a819      	add	r0, sp, #100	; 0x64
 80157be:	f7ff fd2f 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80157c2:	2201      	movs	r2, #1
 80157c4:	4603      	mov	r3, r0
  const int start_1 =
 80157c6:	9001      	str	r0, [sp, #4]
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80157c8:	a90b      	add	r1, sp, #44	; 0x2c
 80157ca:	a819      	add	r0, sp, #100	; 0x64
 80157cc:	f7ff fd58 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 =
 80157d0:	2202      	movs	r2, #2
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80157d2:	9002      	str	r0, [sp, #8]
  const int start_2 =
 80157d4:	a90b      	add	r1, sp, #44	; 0x2c
 80157d6:	a819      	add	r0, sp, #100	; 0x64
 80157d8:	f7ff fd22 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80157dc:	2202      	movs	r2, #2
 80157de:	4603      	mov	r3, r0
  const int start_2 =
 80157e0:	9003      	str	r0, [sp, #12]
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80157e2:	a90b      	add	r1, sp, #44	; 0x2c
 80157e4:	a819      	add	r0, sp, #100	; 0x64
 80157e6:	f7ff fd4b 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 =
 80157ea:	2203      	movs	r2, #3
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80157ec:	9004      	str	r0, [sp, #16]
  const int start_3 =
 80157ee:	a90b      	add	r1, sp, #44	; 0x2c
 80157f0:	a819      	add	r0, sp, #100	; 0x64
 80157f2:	f7ff fd15 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 80157f6:	2203      	movs	r2, #3
 80157f8:	4603      	mov	r3, r0
  const int start_3 =
 80157fa:	9005      	str	r0, [sp, #20]
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 80157fc:	a90b      	add	r1, sp, #44	; 0x2c
 80157fe:	a819      	add	r0, sp, #100	; 0x64
 8015800:	f7ff fd3e 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 =
 8015804:	2204      	movs	r2, #4
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 8015806:	9006      	str	r0, [sp, #24]
  const int start_4 =
 8015808:	a90b      	add	r1, sp, #44	; 0x2c
 801580a:	a819      	add	r0, sp, #100	; 0x64
 801580c:	f7ff fd08 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015810:	2204      	movs	r2, #4
 8015812:	4603      	mov	r3, r0
  const int start_4 =
 8015814:	4681      	mov	r9, r0
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015816:	a90b      	add	r1, sp, #44	; 0x2c
 8015818:	a819      	add	r0, sp, #100	; 0x64
 801581a:	f7ff fd31 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 801581e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015820:	4682      	mov	sl, r0
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 8015822:	9309      	str	r3, [sp, #36]	; 0x24
            const int len = stop_4 - start_4;
 8015824:	eba0 0309 	sub.w	r3, r0, r9
 8015828:	9307      	str	r3, [sp, #28]
    memcpy(output_ptr_, &input_data_[position], sizeof(T) * len);
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	9308      	str	r3, [sp, #32]
    if (stride < 0) {
 801582e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015830:	2b00      	cmp	r3, #0
 8015832:	da54      	bge.n	80158de <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x186>
      return index > end;
 8015834:	455c      	cmp	r4, fp
 8015836:	bfd4      	ite	le
 8015838:	2300      	movle	r3, #0
 801583a:	2301      	movgt	r3, #1
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 801583c:	2b00      	cmp	r3, #0
 801583e:	f000 8091 	beq.w	8015964 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x20c>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015842:	9e01      	ldr	r6, [sp, #4]
    if (stride < 0) {
 8015844:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015846:	2b00      	cmp	r3, #0
      return index > end;
 8015848:	9b02      	ldr	r3, [sp, #8]
    if (stride < 0) {
 801584a:	da4d      	bge.n	80158e8 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x190>
      return index > end;
 801584c:	429e      	cmp	r6, r3
 801584e:	bfd4      	ite	le
 8015850:	2300      	movle	r3, #0
 8015852:	2301      	movgt	r3, #1
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015854:	2b00      	cmp	r3, #0
 8015856:	f000 8082 	beq.w	801595e <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x206>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 801585a:	9f03      	ldr	r7, [sp, #12]
    if (stride < 0) {
 801585c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801585e:	2b00      	cmp	r3, #0
      return index > end;
 8015860:	9b04      	ldr	r3, [sp, #16]
    if (stride < 0) {
 8015862:	da46      	bge.n	80158f2 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x19a>
      return index > end;
 8015864:	429f      	cmp	r7, r3
 8015866:	bfd4      	ite	le
 8015868:	2300      	movle	r3, #0
 801586a:	2301      	movgt	r3, #1
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 801586c:	2b00      	cmp	r3, #0
 801586e:	d073      	beq.n	8015958 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x200>
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015870:	f8dd 8014 	ldr.w	r8, [sp, #20]
    if (stride < 0) {
 8015874:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015876:	2b00      	cmp	r3, #0
      return index > end;
 8015878:	9b06      	ldr	r3, [sp, #24]
    if (stride < 0) {
 801587a:	da3f      	bge.n	80158fc <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1a4>
      return index > end;
 801587c:	4598      	cmp	r8, r3
 801587e:	bfd4      	ite	le
 8015880:	2300      	movle	r3, #0
 8015882:	2301      	movgt	r3, #1
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015884:	2b00      	cmp	r3, #0
 8015886:	d064      	beq.n	8015952 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1fa>
          if (inner_stride_is_1) {
 8015888:	9809      	ldr	r0, [sp, #36]	; 0x24
 801588a:	2801      	cmp	r0, #1
 801588c:	e9dd 3c0f 	ldrd	r3, ip, [sp, #60]	; 0x3c
 8015890:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8015894:	d037      	beq.n	8015906 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1ae>
 8015896:	fb0c fe03 	mul.w	lr, ip, r3
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 801589a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801589c:	464b      	mov	r3, r9
 801589e:	fb0e f202 	mul.w	r2, lr, r2
                          offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 80158a2:	4351      	muls	r1, r2
 80158a4:	4361      	muls	r1, r4
  void Write(int position) { *output_ptr_++ = input_data_[position]; }
 80158a6:	fb02 1106 	mla	r1, r2, r6, r1
 80158aa:	fb0e 1107 	mla	r1, lr, r7, r1
 80158ae:	fb0c 1108 	mla	r1, ip, r8, r1
    if (stride < 0) {
 80158b2:	2800      	cmp	r0, #0
 80158b4:	da48      	bge.n	8015948 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1f0>
      return index > end;
 80158b6:	4553      	cmp	r3, sl
 80158b8:	bfd4      	ite	le
 80158ba:	2200      	movle	r2, #0
 80158bc:	2201      	movgt	r2, #1
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 80158be:	2a00      	cmp	r2, #0
 80158c0:	d03f      	beq.n	8015942 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1ea>
 80158c2:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80158c6:	eb01 0e03 	add.w	lr, r1, r3
 80158ca:	4403      	add	r3, r0
 80158cc:	f10c 0202 	add.w	r2, ip, #2
 80158d0:	606a      	str	r2, [r5, #4]
 80158d2:	682a      	ldr	r2, [r5, #0]
 80158d4:	f932 201e 	ldrsh.w	r2, [r2, lr, lsl #1]
 80158d8:	f8ac 2000 	strh.w	r2, [ip]
 80158dc:	e7e9      	b.n	80158b2 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x15a>
      return index < end;
 80158de:	455c      	cmp	r4, fp
 80158e0:	bfac      	ite	ge
 80158e2:	2300      	movge	r3, #0
 80158e4:	2301      	movlt	r3, #1
 80158e6:	e7a9      	b.n	801583c <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xe4>
 80158e8:	429e      	cmp	r6, r3
 80158ea:	bfac      	ite	ge
 80158ec:	2300      	movge	r3, #0
 80158ee:	2301      	movlt	r3, #1
 80158f0:	e7b0      	b.n	8015854 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xfc>
 80158f2:	429f      	cmp	r7, r3
 80158f4:	bfac      	ite	ge
 80158f6:	2300      	movge	r3, #0
 80158f8:	2301      	movlt	r3, #1
 80158fa:	e7b7      	b.n	801586c <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x114>
 80158fc:	4598      	cmp	r8, r3
 80158fe:	bfac      	ite	ge
 8015900:	2300      	movge	r3, #0
 8015902:	2301      	movlt	r3, #1
 8015904:	e7be      	b.n	8015884 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x12c>
            if (len > 0) {
 8015906:	9807      	ldr	r0, [sp, #28]
 8015908:	2800      	cmp	r0, #0
 801590a:	dd1a      	ble.n	8015942 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1ea>
            int index = start_4 + offset_3 * shape[4] +
 801590c:	fb0c 9008 	mla	r0, ip, r8, r9
                        offset_2 * shape[3] * shape[4] +
 8015910:	fb03 fe07 	mul.w	lr, r3, r7
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015914:	4361      	muls	r1, r4
            int index = start_4 + offset_3 * shape[4] +
 8015916:	fb0c 0e0e 	mla	lr, ip, lr, r0
                        offset_1 * shape[2] * shape[3] * shape[4] +
 801591a:	fb02 f006 	mul.w	r0, r2, r6
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 801591e:	4351      	muls	r1, r2
    memcpy(output_ptr_, &input_data_[position], sizeof(T) * len);
 8015920:	9a08      	ldr	r2, [sp, #32]
                        offset_1 * shape[2] * shape[3] * shape[4] +
 8015922:	4358      	muls	r0, r3
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015924:	4359      	muls	r1, r3
 8015926:	682b      	ldr	r3, [r5, #0]
                        offset_2 * shape[3] * shape[4] +
 8015928:	fb0c e000 	mla	r0, ip, r0, lr
            int index = start_4 + offset_3 * shape[4] +
 801592c:	fb0c 0101 	mla	r1, ip, r1, r0
 8015930:	6868      	ldr	r0, [r5, #4]
 8015932:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8015936:	f001 fa8c 	bl	8016e52 <memcpy>
    output_ptr_ += len;
 801593a:	686b      	ldr	r3, [r5, #4]
 801593c:	9a08      	ldr	r2, [sp, #32]
 801593e:	4413      	add	r3, r2
 8015940:	606b      	str	r3, [r5, #4]
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015942:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015944:	4498      	add	r8, r3
 8015946:	e795      	b.n	8015874 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x11c>
      return index < end;
 8015948:	4553      	cmp	r3, sl
 801594a:	bfac      	ite	ge
 801594c:	2200      	movge	r2, #0
 801594e:	2201      	movlt	r2, #1
 8015950:	e7b5      	b.n	80158be <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x166>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015952:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015954:	441f      	add	r7, r3
 8015956:	e781      	b.n	801585c <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x104>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015958:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801595a:	441e      	add	r6, r3
 801595c:	e772      	b.n	8015844 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xec>
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 801595e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015960:	441c      	add	r4, r3
 8015962:	e764      	b.n	801582e <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xd6>
}
 8015964:	b02f      	add	sp, #188	; 0xbc
 8015966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801596a <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 801596a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801596e:	b0af      	sub	sp, #188	; 0xbc
 8015970:	460e      	mov	r6, r1
 8015972:	4614      	mov	r4, r2
  tflite::StridedSliceParams params_copy = op_params;
 8015974:	4601      	mov	r1, r0
 8015976:	2254      	movs	r2, #84	; 0x54
 8015978:	a819      	add	r0, sp, #100	; 0x64
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 801597a:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
 801597c:	f001 fa69 	bl	8016e52 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
 8015980:	6833      	ldr	r3, [r6, #0]
 8015982:	2b05      	cmp	r3, #5
 8015984:	dd01      	ble.n	801598a <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x20>
 8015986:	f001 f9dd 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
 801598a:	6823      	ldr	r3, [r4, #0]
 801598c:	2b05      	cmp	r3, #5
 801598e:	dcfa      	bgt.n	8015986 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1c>
 8015990:	2301      	movs	r3, #1
 8015992:	4632      	mov	r2, r6
 8015994:	2105      	movs	r1, #5
 8015996:	a80b      	add	r0, sp, #44	; 0x2c
 8015998:	f7f2 fd86 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 801599c:	2301      	movs	r3, #1
 801599e:	4622      	mov	r2, r4
 80159a0:	2105      	movs	r1, #5
 80159a2:	a812      	add	r0, sp, #72	; 0x48
 80159a4:	f7f2 fd80 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
 80159a8:	2105      	movs	r1, #5
 80159aa:	a819      	add	r0, sp, #100	; 0x64
 80159ac:	f7ff fbe0 	bl	8015170 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 =
 80159b0:	2200      	movs	r2, #0
 80159b2:	a90b      	add	r1, sp, #44	; 0x2c
 80159b4:	a819      	add	r0, sp, #100	; 0x64
 80159b6:	f7ff fc33 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 80159ba:	2200      	movs	r2, #0
 80159bc:	4603      	mov	r3, r0
 80159be:	a90b      	add	r1, sp, #44	; 0x2c
  const int start_0 =
 80159c0:	4604      	mov	r4, r0
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 80159c2:	a819      	add	r0, sp, #100	; 0x64
 80159c4:	f7ff fc5c 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 =
 80159c8:	2201      	movs	r2, #1
 80159ca:	a90b      	add	r1, sp, #44	; 0x2c
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 80159cc:	4683      	mov	fp, r0
  const int start_1 =
 80159ce:	a819      	add	r0, sp, #100	; 0x64
 80159d0:	f7ff fc26 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80159d4:	2201      	movs	r2, #1
 80159d6:	4603      	mov	r3, r0
  const int start_1 =
 80159d8:	9000      	str	r0, [sp, #0]
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80159da:	a90b      	add	r1, sp, #44	; 0x2c
 80159dc:	a819      	add	r0, sp, #100	; 0x64
 80159de:	f7ff fc4f 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 =
 80159e2:	2202      	movs	r2, #2
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 80159e4:	9001      	str	r0, [sp, #4]
  const int start_2 =
 80159e6:	a90b      	add	r1, sp, #44	; 0x2c
 80159e8:	a819      	add	r0, sp, #100	; 0x64
 80159ea:	f7ff fc19 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80159ee:	2202      	movs	r2, #2
 80159f0:	4603      	mov	r3, r0
  const int start_2 =
 80159f2:	9002      	str	r0, [sp, #8]
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80159f4:	a90b      	add	r1, sp, #44	; 0x2c
 80159f6:	a819      	add	r0, sp, #100	; 0x64
 80159f8:	f7ff fc42 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 =
 80159fc:	2203      	movs	r2, #3
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 80159fe:	9003      	str	r0, [sp, #12]
  const int start_3 =
 8015a00:	a90b      	add	r1, sp, #44	; 0x2c
 8015a02:	a819      	add	r0, sp, #100	; 0x64
 8015a04:	f7ff fc0c 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 8015a08:	2203      	movs	r2, #3
 8015a0a:	4603      	mov	r3, r0
  const int start_3 =
 8015a0c:	9004      	str	r0, [sp, #16]
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 8015a0e:	a90b      	add	r1, sp, #44	; 0x2c
 8015a10:	a819      	add	r0, sp, #100	; 0x64
 8015a12:	f7ff fc35 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 =
 8015a16:	2204      	movs	r2, #4
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 8015a18:	9005      	str	r0, [sp, #20]
  const int start_4 =
 8015a1a:	a90b      	add	r1, sp, #44	; 0x2c
 8015a1c:	a819      	add	r0, sp, #100	; 0x64
 8015a1e:	f7ff fbff 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015a22:	2204      	movs	r2, #4
 8015a24:	4603      	mov	r3, r0
  const int start_4 =
 8015a26:	4681      	mov	r9, r0
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015a28:	a90b      	add	r1, sp, #44	; 0x2c
 8015a2a:	a819      	add	r0, sp, #100	; 0x64
 8015a2c:	f7ff fc28 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 8015a30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015a32:	4682      	mov	sl, r0
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 8015a34:	9308      	str	r3, [sp, #32]
            const int len = stop_4 - start_4;
 8015a36:	eba0 0309 	sub.w	r3, r0, r9
 8015a3a:	9306      	str	r3, [sp, #24]
    memcpy(output_ptr_, &input_data_[position], sizeof(T) * len);
 8015a3c:	009b      	lsls	r3, r3, #2
 8015a3e:	9307      	str	r3, [sp, #28]
    if (stride < 0) {
 8015a40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	da55      	bge.n	8015af2 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x188>
      return index > end;
 8015a46:	455c      	cmp	r4, fp
 8015a48:	bfd4      	ite	le
 8015a4a:	2300      	movle	r3, #0
 8015a4c:	2301      	movgt	r3, #1
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	f000 8092 	beq.w	8015b78 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x20e>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015a54:	9e00      	ldr	r6, [sp, #0]
    if (stride < 0) {
 8015a56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015a58:	2b00      	cmp	r3, #0
      return index > end;
 8015a5a:	9b01      	ldr	r3, [sp, #4]
    if (stride < 0) {
 8015a5c:	da4e      	bge.n	8015afc <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x192>
      return index > end;
 8015a5e:	429e      	cmp	r6, r3
 8015a60:	bfd4      	ite	le
 8015a62:	2300      	movle	r3, #0
 8015a64:	2301      	movgt	r3, #1
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	f000 8083 	beq.w	8015b72 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x208>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015a6c:	9f02      	ldr	r7, [sp, #8]
    if (stride < 0) {
 8015a6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015a70:	2b00      	cmp	r3, #0
      return index > end;
 8015a72:	9b03      	ldr	r3, [sp, #12]
    if (stride < 0) {
 8015a74:	da47      	bge.n	8015b06 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x19c>
      return index > end;
 8015a76:	429f      	cmp	r7, r3
 8015a78:	bfd4      	ite	le
 8015a7a:	2300      	movle	r3, #0
 8015a7c:	2301      	movgt	r3, #1
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d074      	beq.n	8015b6c <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x202>
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015a82:	f8dd 8010 	ldr.w	r8, [sp, #16]
    if (stride < 0) {
 8015a86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015a88:	2b00      	cmp	r3, #0
      return index > end;
 8015a8a:	9b05      	ldr	r3, [sp, #20]
    if (stride < 0) {
 8015a8c:	da40      	bge.n	8015b10 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1a6>
      return index > end;
 8015a8e:	4598      	cmp	r8, r3
 8015a90:	bfd4      	ite	le
 8015a92:	2300      	movle	r3, #0
 8015a94:	2301      	movgt	r3, #1
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d065      	beq.n	8015b66 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1fc>
          if (inner_stride_is_1) {
 8015a9a:	9a08      	ldr	r2, [sp, #32]
 8015a9c:	2a01      	cmp	r2, #1
 8015a9e:	e9dd 3c0f 	ldrd	r3, ip, [sp, #60]	; 0x3c
 8015aa2:	e9dd 100d 	ldrd	r1, r0, [sp, #52]	; 0x34
 8015aa6:	d038      	beq.n	8015b1a <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1b0>
 8015aa8:	fb0c fe03 	mul.w	lr, ip, r3
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 8015aac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015aae:	464b      	mov	r3, r9
 8015ab0:	fb0e f000 	mul.w	r0, lr, r0
                          offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015ab4:	4341      	muls	r1, r0
 8015ab6:	4361      	muls	r1, r4
  void Write(int position) { *output_ptr_++ = input_data_[position]; }
 8015ab8:	fb00 1106 	mla	r1, r0, r6, r1
 8015abc:	fb0e 1107 	mla	r1, lr, r7, r1
 8015ac0:	fb0c 1108 	mla	r1, ip, r8, r1
 8015ac4:	9109      	str	r1, [sp, #36]	; 0x24
    if (stride < 0) {
 8015ac6:	2a00      	cmp	r2, #0
 8015ac8:	da48      	bge.n	8015b5c <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1f2>
      return index > end;
 8015aca:	4553      	cmp	r3, sl
 8015acc:	bfd4      	ite	le
 8015ace:	2000      	movle	r0, #0
 8015ad0:	2001      	movgt	r0, #1
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 8015ad2:	2800      	cmp	r0, #0
 8015ad4:	d03f      	beq.n	8015b56 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1ec>
 8015ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ad8:	6868      	ldr	r0, [r5, #4]
 8015ada:	eb01 0e03 	add.w	lr, r1, r3
 8015ade:	6829      	ldr	r1, [r5, #0]
 8015ae0:	f100 0c04 	add.w	ip, r0, #4
 8015ae4:	4413      	add	r3, r2
 8015ae6:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 8015aea:	f8c5 c004 	str.w	ip, [r5, #4]
 8015aee:	6001      	str	r1, [r0, #0]
 8015af0:	e7e9      	b.n	8015ac6 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x15c>
      return index < end;
 8015af2:	455c      	cmp	r4, fp
 8015af4:	bfac      	ite	ge
 8015af6:	2300      	movge	r3, #0
 8015af8:	2301      	movlt	r3, #1
 8015afa:	e7a8      	b.n	8015a4e <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xe4>
 8015afc:	429e      	cmp	r6, r3
 8015afe:	bfac      	ite	ge
 8015b00:	2300      	movge	r3, #0
 8015b02:	2301      	movlt	r3, #1
 8015b04:	e7af      	b.n	8015a66 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xfc>
 8015b06:	429f      	cmp	r7, r3
 8015b08:	bfac      	ite	ge
 8015b0a:	2300      	movge	r3, #0
 8015b0c:	2301      	movlt	r3, #1
 8015b0e:	e7b6      	b.n	8015a7e <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x114>
 8015b10:	4598      	cmp	r8, r3
 8015b12:	bfac      	ite	ge
 8015b14:	2300      	movge	r3, #0
 8015b16:	2301      	movlt	r3, #1
 8015b18:	e7bd      	b.n	8015a96 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x12c>
            if (len > 0) {
 8015b1a:	9a06      	ldr	r2, [sp, #24]
 8015b1c:	2a00      	cmp	r2, #0
 8015b1e:	dd1a      	ble.n	8015b56 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1ec>
            int index = start_4 + offset_3 * shape[4] +
 8015b20:	fb0c 9208 	mla	r2, ip, r8, r9
                        offset_2 * shape[3] * shape[4] +
 8015b24:	fb03 fe07 	mul.w	lr, r3, r7
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015b28:	4361      	muls	r1, r4
            int index = start_4 + offset_3 * shape[4] +
 8015b2a:	fb0c 2e0e 	mla	lr, ip, lr, r2
                        offset_1 * shape[2] * shape[3] * shape[4] +
 8015b2e:	fb00 f206 	mul.w	r2, r0, r6
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015b32:	4341      	muls	r1, r0
    memcpy(output_ptr_, &input_data_[position], sizeof(T) * len);
 8015b34:	6868      	ldr	r0, [r5, #4]
                        offset_1 * shape[2] * shape[3] * shape[4] +
 8015b36:	435a      	muls	r2, r3
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015b38:	4359      	muls	r1, r3
 8015b3a:	682b      	ldr	r3, [r5, #0]
                        offset_2 * shape[3] * shape[4] +
 8015b3c:	fb0c e202 	mla	r2, ip, r2, lr
            int index = start_4 + offset_3 * shape[4] +
 8015b40:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b44:	9a07      	ldr	r2, [sp, #28]
 8015b46:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8015b4a:	f001 f982 	bl	8016e52 <memcpy>
    output_ptr_ += len;
 8015b4e:	686b      	ldr	r3, [r5, #4]
 8015b50:	9a07      	ldr	r2, [sp, #28]
 8015b52:	4413      	add	r3, r2
 8015b54:	606b      	str	r3, [r5, #4]
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015b56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015b58:	4498      	add	r8, r3
 8015b5a:	e794      	b.n	8015a86 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x11c>
      return index < end;
 8015b5c:	4553      	cmp	r3, sl
 8015b5e:	bfac      	ite	ge
 8015b60:	2000      	movge	r0, #0
 8015b62:	2001      	movlt	r0, #1
 8015b64:	e7b5      	b.n	8015ad2 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x168>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015b66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015b68:	441f      	add	r7, r3
 8015b6a:	e780      	b.n	8015a6e <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x104>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015b6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015b6e:	441e      	add	r6, r3
 8015b70:	e771      	b.n	8015a56 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xec>
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 8015b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015b74:	441c      	add	r4, r3
 8015b76:	e763      	b.n	8015a40 <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xd6>
}
 8015b78:	b02f      	add	sp, #188	; 0xbc
 8015b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015b7e <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 8015b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b82:	b0ad      	sub	sp, #180	; 0xb4
 8015b84:	460e      	mov	r6, r1
 8015b86:	4614      	mov	r4, r2
  tflite::StridedSliceParams params_copy = op_params;
 8015b88:	4601      	mov	r1, r0
 8015b8a:	2254      	movs	r2, #84	; 0x54
 8015b8c:	a817      	add	r0, sp, #92	; 0x5c
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 8015b8e:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
 8015b90:	f001 f95f 	bl	8016e52 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
 8015b94:	6833      	ldr	r3, [r6, #0]
 8015b96:	2b05      	cmp	r3, #5
 8015b98:	dd01      	ble.n	8015b9e <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x20>
 8015b9a:	f001 f8d3 	bl	8016d44 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
 8015b9e:	6823      	ldr	r3, [r4, #0]
 8015ba0:	2b05      	cmp	r3, #5
 8015ba2:	dcfa      	bgt.n	8015b9a <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1c>
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	4632      	mov	r2, r6
 8015ba8:	2105      	movs	r1, #5
 8015baa:	a809      	add	r0, sp, #36	; 0x24
 8015bac:	f7f2 fc7c 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	4622      	mov	r2, r4
 8015bb4:	2105      	movs	r1, #5
 8015bb6:	a810      	add	r0, sp, #64	; 0x40
 8015bb8:	f7f2 fc76 	bl	80084a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
 8015bbc:	2105      	movs	r1, #5
 8015bbe:	a817      	add	r0, sp, #92	; 0x5c
 8015bc0:	f7ff fad6 	bl	8015170 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 =
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	a909      	add	r1, sp, #36	; 0x24
 8015bc8:	a817      	add	r0, sp, #92	; 0x5c
 8015bca:	f7ff fb29 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 8015bce:	2200      	movs	r2, #0
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	a909      	add	r1, sp, #36	; 0x24
  const int start_0 =
 8015bd4:	4604      	mov	r4, r0
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 8015bd6:	a817      	add	r0, sp, #92	; 0x5c
 8015bd8:	f7ff fb52 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 =
 8015bdc:	2201      	movs	r2, #1
  const int stop_0 = strided_slice::StridedSliceEndForAxis(
 8015bde:	9000      	str	r0, [sp, #0]
  const int start_1 =
 8015be0:	a909      	add	r1, sp, #36	; 0x24
 8015be2:	a817      	add	r0, sp, #92	; 0x5c
 8015be4:	f7ff fb1c 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 8015be8:	2201      	movs	r2, #1
 8015bea:	4603      	mov	r3, r0
  const int start_1 =
 8015bec:	9001      	str	r0, [sp, #4]
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 8015bee:	a909      	add	r1, sp, #36	; 0x24
 8015bf0:	a817      	add	r0, sp, #92	; 0x5c
 8015bf2:	f7ff fb45 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 =
 8015bf6:	2202      	movs	r2, #2
  const int stop_1 = strided_slice::StridedSliceEndForAxis(
 8015bf8:	9002      	str	r0, [sp, #8]
  const int start_2 =
 8015bfa:	a909      	add	r1, sp, #36	; 0x24
 8015bfc:	a817      	add	r0, sp, #92	; 0x5c
 8015bfe:	f7ff fb0f 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 8015c02:	2202      	movs	r2, #2
 8015c04:	4603      	mov	r3, r0
  const int start_2 =
 8015c06:	9003      	str	r0, [sp, #12]
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 8015c08:	a909      	add	r1, sp, #36	; 0x24
 8015c0a:	a817      	add	r0, sp, #92	; 0x5c
 8015c0c:	f7ff fb38 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 =
 8015c10:	2203      	movs	r2, #3
  const int stop_2 = strided_slice::StridedSliceEndForAxis(
 8015c12:	9004      	str	r0, [sp, #16]
  const int start_3 =
 8015c14:	a909      	add	r1, sp, #36	; 0x24
 8015c16:	a817      	add	r0, sp, #92	; 0x5c
 8015c18:	f7ff fb02 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 8015c1c:	2203      	movs	r2, #3
 8015c1e:	4603      	mov	r3, r0
  const int start_3 =
 8015c20:	9005      	str	r0, [sp, #20]
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 8015c22:	a909      	add	r1, sp, #36	; 0x24
 8015c24:	a817      	add	r0, sp, #92	; 0x5c
 8015c26:	f7ff fb2b 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 =
 8015c2a:	2204      	movs	r2, #4
  const int stop_3 = strided_slice::StridedSliceEndForAxis(
 8015c2c:	9006      	str	r0, [sp, #24]
  const int start_4 =
 8015c2e:	a909      	add	r1, sp, #36	; 0x24
 8015c30:	a817      	add	r0, sp, #92	; 0x5c
 8015c32:	f7ff faf5 	bl	8015220 <_ZN6tflite13strided_slice24StridedSliceStartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEl>
 8015c36:	4681      	mov	r9, r0
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015c38:	4603      	mov	r3, r0
 8015c3a:	2204      	movs	r2, #4
 8015c3c:	a909      	add	r1, sp, #36	; 0x24
 8015c3e:	a817      	add	r0, sp, #92	; 0x5c
 8015c40:	f7ff fb1e 	bl	8015280 <_ZN6tflite13strided_slice22StridedSliceEndForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 8015c44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  const int stop_4 = strided_slice::StridedSliceEndForAxis(
 8015c46:	4682      	mov	sl, r0
            const int len = stop_4 - start_4;
 8015c48:	eba0 0b09 	sub.w	fp, r0, r9
  const bool inner_stride_is_1 = params_copy.strides[4] == 1;
 8015c4c:	9307      	str	r3, [sp, #28]
    if (stride < 0) {
 8015c4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015c50:	2b00      	cmp	r3, #0
      return index > end;
 8015c52:	9b00      	ldr	r3, [sp, #0]
    if (stride < 0) {
 8015c54:	da53      	bge.n	8015cfe <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x180>
      return index > end;
 8015c56:	429c      	cmp	r4, r3
 8015c58:	bfd4      	ite	le
 8015c5a:	2300      	movle	r3, #0
 8015c5c:	2301      	movgt	r3, #1
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f000 808e 	beq.w	8015d80 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x202>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015c64:	9e01      	ldr	r6, [sp, #4]
    if (stride < 0) {
 8015c66:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015c68:	2b00      	cmp	r3, #0
      return index > end;
 8015c6a:	9b02      	ldr	r3, [sp, #8]
    if (stride < 0) {
 8015c6c:	da4c      	bge.n	8015d08 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x18a>
      return index > end;
 8015c6e:	429e      	cmp	r6, r3
 8015c70:	bfd4      	ite	le
 8015c72:	2300      	movle	r3, #0
 8015c74:	2301      	movgt	r3, #1
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d07f      	beq.n	8015d7a <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1fc>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015c7a:	9f03      	ldr	r7, [sp, #12]
    if (stride < 0) {
 8015c7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015c7e:	2b00      	cmp	r3, #0
      return index > end;
 8015c80:	9b04      	ldr	r3, [sp, #16]
    if (stride < 0) {
 8015c82:	da46      	bge.n	8015d12 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x194>
      return index > end;
 8015c84:	429f      	cmp	r7, r3
 8015c86:	bfd4      	ite	le
 8015c88:	2300      	movle	r3, #0
 8015c8a:	2301      	movgt	r3, #1
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d071      	beq.n	8015d74 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1f6>
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015c90:	f8dd 8014 	ldr.w	r8, [sp, #20]
    if (stride < 0) {
 8015c94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015c96:	2b00      	cmp	r3, #0
      return index > end;
 8015c98:	9b06      	ldr	r3, [sp, #24]
    if (stride < 0) {
 8015c9a:	da3f      	bge.n	8015d1c <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x19e>
      return index > end;
 8015c9c:	4598      	cmp	r8, r3
 8015c9e:	bfd4      	ite	le
 8015ca0:	2300      	movle	r3, #0
 8015ca2:	2301      	movgt	r3, #1
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d062      	beq.n	8015d6e <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1f0>
          if (inner_stride_is_1) {
 8015ca8:	9807      	ldr	r0, [sp, #28]
 8015caa:	2801      	cmp	r0, #1
 8015cac:	e9dd 3c0d 	ldrd	r3, ip, [sp, #52]	; 0x34
 8015cb0:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 8015cb4:	d037      	beq.n	8015d26 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1a8>
 8015cb6:	fb0c fe03 	mul.w	lr, ip, r3
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 8015cba:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8015cbc:	464b      	mov	r3, r9
 8015cbe:	fb0e f202 	mul.w	r2, lr, r2
                          offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015cc2:	4351      	muls	r1, r2
 8015cc4:	4361      	muls	r1, r4
  void Write(int position) { *output_ptr_++ = input_data_[position]; }
 8015cc6:	fb02 1106 	mla	r1, r2, r6, r1
 8015cca:	fb0e 1107 	mla	r1, lr, r7, r1
 8015cce:	fb0c 1108 	mla	r1, ip, r8, r1
    if (stride < 0) {
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	da46      	bge.n	8015d64 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1e6>
      return index > end;
 8015cd6:	4553      	cmp	r3, sl
 8015cd8:	bfd4      	ite	le
 8015cda:	2200      	movle	r2, #0
 8015cdc:	2201      	movgt	r2, #1
            for (int offset_4 = start_4; lc(stop_4, stride[4], offset_4);
 8015cde:	2a00      	cmp	r2, #0
 8015ce0:	d03d      	beq.n	8015d5e <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1e0>
 8015ce2:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015ce6:	eb01 0e03 	add.w	lr, r1, r3
 8015cea:	4403      	add	r3, r0
 8015cec:	f10c 0201 	add.w	r2, ip, #1
 8015cf0:	606a      	str	r2, [r5, #4]
 8015cf2:	682a      	ldr	r2, [r5, #0]
 8015cf4:	f812 200e 	ldrb.w	r2, [r2, lr]
 8015cf8:	f88c 2000 	strb.w	r2, [ip]
 8015cfc:	e7e9      	b.n	8015cd2 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x154>
      return index < end;
 8015cfe:	429c      	cmp	r4, r3
 8015d00:	bfac      	ite	ge
 8015d02:	2300      	movge	r3, #0
 8015d04:	2301      	movlt	r3, #1
 8015d06:	e7aa      	b.n	8015c5e <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xe0>
 8015d08:	429e      	cmp	r6, r3
 8015d0a:	bfac      	ite	ge
 8015d0c:	2300      	movge	r3, #0
 8015d0e:	2301      	movlt	r3, #1
 8015d10:	e7b1      	b.n	8015c76 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xf8>
 8015d12:	429f      	cmp	r7, r3
 8015d14:	bfac      	ite	ge
 8015d16:	2300      	movge	r3, #0
 8015d18:	2301      	movlt	r3, #1
 8015d1a:	e7b7      	b.n	8015c8c <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x10e>
 8015d1c:	4598      	cmp	r8, r3
 8015d1e:	bfac      	ite	ge
 8015d20:	2300      	movge	r3, #0
 8015d22:	2301      	movlt	r3, #1
 8015d24:	e7be      	b.n	8015ca4 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x126>
            if (len > 0) {
 8015d26:	f1bb 0f00 	cmp.w	fp, #0
 8015d2a:	dd18      	ble.n	8015d5e <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x1e0>
            int index = start_4 + offset_3 * shape[4] +
 8015d2c:	fb0c 9008 	mla	r0, ip, r8, r9
                        offset_2 * shape[3] * shape[4] +
 8015d30:	fb03 fe07 	mul.w	lr, r3, r7
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015d34:	4361      	muls	r1, r4
            int index = start_4 + offset_3 * shape[4] +
 8015d36:	fb0c 0e0e 	mla	lr, ip, lr, r0
                        offset_1 * shape[2] * shape[3] * shape[4] +
 8015d3a:	fb02 f006 	mul.w	r0, r2, r6
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015d3e:	4351      	muls	r1, r2
    memcpy(output_ptr_, &input_data_[position], sizeof(T) * len);
 8015d40:	465a      	mov	r2, fp
                        offset_1 * shape[2] * shape[3] * shape[4] +
 8015d42:	4358      	muls	r0, r3
                        offset_0 * shape[1] * shape[2] * shape[3] * shape[4];
 8015d44:	4359      	muls	r1, r3
 8015d46:	682b      	ldr	r3, [r5, #0]
                        offset_2 * shape[3] * shape[4] +
 8015d48:	fb0c e000 	mla	r0, ip, r0, lr
            int index = start_4 + offset_3 * shape[4] +
 8015d4c:	fb0c 0101 	mla	r1, ip, r1, r0
 8015d50:	6868      	ldr	r0, [r5, #4]
 8015d52:	4419      	add	r1, r3
 8015d54:	f001 f87d 	bl	8016e52 <memcpy>
    output_ptr_ += len;
 8015d58:	686b      	ldr	r3, [r5, #4]
 8015d5a:	445b      	add	r3, fp
 8015d5c:	606b      	str	r3, [r5, #4]
        for (int offset_3 = start_3; lc(stop_3, stride[3], offset_3);
 8015d5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015d60:	4498      	add	r8, r3
 8015d62:	e797      	b.n	8015c94 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x116>
      return index < end;
 8015d64:	4553      	cmp	r3, sl
 8015d66:	bfac      	ite	ge
 8015d68:	2200      	movge	r2, #0
 8015d6a:	2201      	movlt	r2, #1
 8015d6c:	e7b7      	b.n	8015cde <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0x160>
      for (int offset_2 = start_2; lc(stop_2, stride[2], offset_2);
 8015d6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015d70:	441f      	add	r7, r3
 8015d72:	e783      	b.n	8015c7c <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xfe>
    for (int offset_1 = start_1; lc(stop_1, stride[1], offset_1);
 8015d74:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015d76:	441e      	add	r6, r3
 8015d78:	e775      	b.n	8015c66 <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xe8>
  for (int offset_0 = start_0; lc(stop_0, stride[0], offset_0);
 8015d7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015d7c:	441c      	add	r4, r3
 8015d7e:	e766      	b.n	8015c4e <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE+0xd0>
}
 8015d80:	b02d      	add	sp, #180	; 0xb4
 8015d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015d88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015d88:	b5f0      	push	{r4, r5, r6, r7, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8015d8a:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015d8c:	b0ab      	sub	sp, #172	; 0xac
 8015d8e:	4607      	mov	r7, r0
 8015d90:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 8015d92:	b90e      	cbnz	r6, 8015d98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10>
 8015d94:	f000 ffd6 	bl	8016d44 <abort>
      tflite::micro::GetEvalInput(context, node, kStridedSliceInputTensor);
 8015d98:	2200      	movs	r2, #0
 8015d9a:	f7f9 ff92 	bl	800fcc2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kStridedSliceOutputTensor);
 8015d9e:	4629      	mov	r1, r5
      tflite::micro::GetEvalInput(context, node, kStridedSliceInputTensor);
 8015da0:	4604      	mov	r4, r0
      tflite::micro::GetEvalOutput(context, node, kStridedSliceOutputTensor);
 8015da2:	2200      	movs	r2, #0
 8015da4:	4638      	mov	r0, r7
 8015da6:	f7f9 ff8e 	bl	800fcc6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (output->type) {
 8015daa:	7a03      	ldrb	r3, [r0, #8]
      tflite::micro::GetEvalOutput(context, node, kStridedSliceOutputTensor);
 8015dac:	4605      	mov	r5, r0
  switch (output->type) {
 8015dae:	3b01      	subs	r3, #1
 8015db0:	2b08      	cmp	r3, #8
 8015db2:	d871      	bhi.n	8015e98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
 8015db4:	e8df f003 	tbb	[pc, r3]
 8015db8:	70704605 	.word	0x70704605
 8015dbc:	70315b70 	.word	0x70315b70
 8015dc0:	1c          	.byte	0x1c
 8015dc1:	00          	.byte	0x00
                                  tflite::micro::GetTensorShape(input),
 8015dc2:	4621      	mov	r1, r4
 8015dc4:	4668      	mov	r0, sp
 8015dc6:	f7f9 ff8c 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8015dca:	2c00      	cmp	r4, #0
 8015dcc:	d0e2      	beq.n	8015d94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc>
                                  tflite::micro::GetTensorShape(output),
 8015dce:	4629      	mov	r1, r5
 8015dd0:	a823      	add	r0, sp, #140	; 0x8c
  return reinterpret_cast<const T*>(tensor->data.raw);
 8015dd2:	6824      	ldr	r4, [r4, #0]
 8015dd4:	f7f9 ff85 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 8015dd8:	682b      	ldr	r3, [r5, #0]
                         const RuntimeShape& unextended_input_shape,
                         const T* input_data,
                         const RuntimeShape& unextended_output_shape,
                         T* output_data) {
  SequentialTensorWriter<T> writer(input_data, output_data);
  StridedSlice<T>(op_params, unextended_input_shape, unextended_output_shape,
 8015dda:	aa23      	add	r2, sp, #140	; 0x8c
 8015ddc:	4669      	mov	r1, sp
 8015dde:	4630      	mov	r0, r6
      : input_data_(input_data), output_ptr_(output_data) {}
 8015de0:	e9cd 431c 	strd	r4, r3, [sp, #112]	; 0x70
 8015de4:	ab1c      	add	r3, sp, #112	; 0x70
 8015de6:	f7ff faa3 	bl	8015330 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>
  return kTfLiteOk;
 8015dea:	2000      	movs	r0, #0
}
 8015dec:	b02b      	add	sp, #172	; 0xac
 8015dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  tflite::micro::GetTensorShape(input),
 8015df0:	4621      	mov	r1, r4
 8015df2:	a807      	add	r0, sp, #28
 8015df4:	f7f9 ff75 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8015df8:	2c00      	cmp	r4, #0
 8015dfa:	d0cb      	beq.n	8015d94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc>
                                  tflite::micro::GetTensorShape(output),
 8015dfc:	4629      	mov	r1, r5
 8015dfe:	a823      	add	r0, sp, #140	; 0x8c
  return reinterpret_cast<const T*>(tensor->data.raw);
 8015e00:	6824      	ldr	r4, [r4, #0]
 8015e02:	f7f9 ff6e 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 8015e06:	682b      	ldr	r3, [r5, #0]
 8015e08:	aa23      	add	r2, sp, #140	; 0x8c
 8015e0a:	a907      	add	r1, sp, #28
 8015e0c:	4630      	mov	r0, r6
 8015e0e:	e9cd 431c 	strd	r4, r3, [sp, #112]	; 0x70
 8015e12:	ab1c      	add	r3, sp, #112	; 0x70
 8015e14:	f7ff fb93 	bl	801553e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>
 8015e18:	e7e7      	b.n	8015dea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62>
          op_params, tflite::micro::GetTensorShape(input),
 8015e1a:	4621      	mov	r1, r4
 8015e1c:	a80e      	add	r0, sp, #56	; 0x38
 8015e1e:	f7f9 ff60 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8015e22:	2c00      	cmp	r4, #0
 8015e24:	d0b6      	beq.n	8015d94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc>
          tflite::micro::GetTensorShape(output),
 8015e26:	4629      	mov	r1, r5
 8015e28:	a823      	add	r0, sp, #140	; 0x8c
  return reinterpret_cast<const T*>(tensor->data.raw);
 8015e2a:	6824      	ldr	r4, [r4, #0]
 8015e2c:	f7f9 ff59 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 8015e30:	682b      	ldr	r3, [r5, #0]
 8015e32:	aa23      	add	r2, sp, #140	; 0x8c
 8015e34:	a90e      	add	r1, sp, #56	; 0x38
 8015e36:	4630      	mov	r0, r6
 8015e38:	e9cd 431c 	strd	r4, r3, [sp, #112]	; 0x70
 8015e3c:	ab1c      	add	r3, sp, #112	; 0x70
 8015e3e:	f7ff fc8b 	bl	8015758 <_ZN6tflite13reference_ops12StridedSliceIsEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>
 8015e42:	e7d2      	b.n	8015dea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62>
          op_params, tflite::micro::GetTensorShape(input),
 8015e44:	4621      	mov	r1, r4
 8015e46:	a815      	add	r0, sp, #84	; 0x54
 8015e48:	f7f9 ff4b 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8015e4c:	2c00      	cmp	r4, #0
 8015e4e:	d0a1      	beq.n	8015d94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc>
          tflite::micro::GetTensorShape(output),
 8015e50:	4629      	mov	r1, r5
 8015e52:	a823      	add	r0, sp, #140	; 0x8c
  return reinterpret_cast<const T*>(tensor->data.raw);
 8015e54:	6824      	ldr	r4, [r4, #0]
 8015e56:	f7f9 ff44 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 8015e5a:	682b      	ldr	r3, [r5, #0]
 8015e5c:	aa23      	add	r2, sp, #140	; 0x8c
 8015e5e:	a915      	add	r1, sp, #84	; 0x54
 8015e60:	4630      	mov	r0, r6
 8015e62:	e9cd 431c 	strd	r4, r3, [sp, #112]	; 0x70
 8015e66:	ab1c      	add	r3, sp, #112	; 0x70
 8015e68:	f7ff fd7f 	bl	801596a <_ZN6tflite13reference_ops12StridedSliceIlEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>
 8015e6c:	e7bd      	b.n	8015dea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62>
                                  tflite::micro::GetTensorShape(input),
 8015e6e:	4621      	mov	r1, r4
 8015e70:	a81c      	add	r0, sp, #112	; 0x70
 8015e72:	f7f9 ff36 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8015e76:	2c00      	cmp	r4, #0
 8015e78:	d08c      	beq.n	8015d94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc>
                                  tflite::micro::GetTensorShape(output),
 8015e7a:	4629      	mov	r1, r5
 8015e7c:	a823      	add	r0, sp, #140	; 0x8c
  return reinterpret_cast<const T*>(tensor->data.raw);
 8015e7e:	6824      	ldr	r4, [r4, #0]
 8015e80:	f7f9 ff2f 	bl	800fce2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
 8015e84:	682b      	ldr	r3, [r5, #0]
 8015e86:	aa23      	add	r2, sp, #140	; 0x8c
 8015e88:	a91c      	add	r1, sp, #112	; 0x70
 8015e8a:	4630      	mov	r0, r6
 8015e8c:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
 8015e90:	ab15      	add	r3, sp, #84	; 0x54
 8015e92:	f7ff fe74 	bl	8015b7e <_ZN6tflite13reference_ops12StridedSliceIbEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeES7_PNS_22SequentialTensorWriterIT_EE>
 8015e96:	e7a8      	b.n	8015dea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8015e98:	7a20      	ldrb	r0, [r4, #8]
 8015e9a:	f7f2 f909 	bl	80080b0 <TfLiteTypeGetName>
 8015e9e:	7a22      	ldrb	r2, [r4, #8]
 8015ea0:	4601      	mov	r1, r0
 8015ea2:	4802      	ldr	r0, [pc, #8]	; (8015eac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x124>)
 8015ea4:	f7f4 ff08 	bl	800acb8 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8015ea8:	2001      	movs	r0, #1
 8015eaa:	e79f      	b.n	8015dec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
 8015eac:	080fbb1a 	.word	0x080fbb1a

08015eb0 <_ZN6tflite12_GLOBAL__N_123BuildStridedSliceParamsEPNS0_19StridedSliceContextE>:
// This Op only supports 1-4D cases and since we use the reference 4D
// implementation, the 1-3D tensors are mapped to 4D.
const int kMaxDim = 4;

tflite::StridedSliceParams BuildStridedSliceParams(
    StridedSliceContext* op_context) {
 8015eb0:	b570      	push	{r4, r5, r6, lr}
 8015eb2:	460c      	mov	r4, r1
  tflite::StridedSliceParams op_params{};
 8015eb4:	2254      	movs	r2, #84	; 0x54
 8015eb6:	2100      	movs	r1, #0
 8015eb8:	f000 ffd6 	bl	8016e68 <memset>
  op_params.start_indices_count = op_context->dims;
 8015ebc:	69e6      	ldr	r6, [r4, #28]
  tflite::StridedSliceParams op_params{};
 8015ebe:	4603      	mov	r3, r0
  op_params.stop_indices_count = op_context->dims;
  op_params.strides_count = op_context->dims;

  for (int i = 0; i < op_context->dims; ++i) {
 8015ec0:	2100      	movs	r1, #0
  op_params.start_indices_count = op_context->dims;
 8015ec2:	b272      	sxtb	r2, r6
 8015ec4:	7002      	strb	r2, [r0, #0]
  op_params.stop_indices_count = op_context->dims;
 8015ec6:	7602      	strb	r2, [r0, #24]
  op_params.strides_count = op_context->dims;
 8015ec8:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  for (int i = 0; i < op_context->dims; ++i) {
 8015ecc:	428e      	cmp	r6, r1
 8015ece:	dd13      	ble.n	8015ef8 <_ZN6tflite12_GLOBAL__N_123BuildStridedSliceParamsEPNS0_19StridedSliceContextE+0x48>
    op_params.start_indices[i] = GetTensorData<int32_t>(op_context->begin)[i];
 8015ed0:	68e2      	ldr	r2, [r4, #12]
 8015ed2:	b102      	cbz	r2, 8015ed6 <_ZN6tflite12_GLOBAL__N_123BuildStridedSliceParamsEPNS0_19StridedSliceContextE+0x26>
 8015ed4:	6852      	ldr	r2, [r2, #4]
 8015ed6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8015eda:	008d      	lsls	r5, r1, #2
 8015edc:	f840 2f04 	str.w	r2, [r0, #4]!
    op_params.stop_indices[i] = GetTensorData<int32_t>(op_context->end)[i];
 8015ee0:	6922      	ldr	r2, [r4, #16]
 8015ee2:	b102      	cbz	r2, 8015ee6 <_ZN6tflite12_GLOBAL__N_123BuildStridedSliceParamsEPNS0_19StridedSliceContextE+0x36>
 8015ee4:	6852      	ldr	r2, [r2, #4]
 8015ee6:	5952      	ldr	r2, [r2, r5]
 8015ee8:	6182      	str	r2, [r0, #24]
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
 8015eea:	6962      	ldr	r2, [r4, #20]
 8015eec:	b102      	cbz	r2, 8015ef0 <_ZN6tflite12_GLOBAL__N_123BuildStridedSliceParamsEPNS0_19StridedSliceContextE+0x40>
 8015eee:	6852      	ldr	r2, [r2, #4]
 8015ef0:	5952      	ldr	r2, [r2, r5]
  for (int i = 0; i < op_context->dims; ++i) {
 8015ef2:	3101      	adds	r1, #1
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
 8015ef4:	6302      	str	r2, [r0, #48]	; 0x30
  for (int i = 0; i < op_context->dims; ++i) {
 8015ef6:	e7e9      	b.n	8015ecc <_ZN6tflite12_GLOBAL__N_123BuildStridedSliceParamsEPNS0_19StridedSliceContextE+0x1c>
  }

  op_params.begin_mask = op_context->params->begin_mask;
 8015ef8:	6822      	ldr	r2, [r4, #0]
  op_params.ellipsis_mask = 0;
  op_params.end_mask = op_context->params->end_mask;
  op_params.new_axis_mask = 0;
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
  return op_params;
}
 8015efa:	4618      	mov	r0, r3
  op_params.begin_mask = op_context->params->begin_mask;
 8015efc:	6811      	ldr	r1, [r2, #0]
 8015efe:	f8a3 1048 	strh.w	r1, [r3, #72]	; 0x48
  op_params.end_mask = op_context->params->end_mask;
 8015f02:	6851      	ldr	r1, [r2, #4]
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
 8015f04:	6912      	ldr	r2, [r2, #16]
  op_params.end_mask = op_context->params->end_mask;
 8015f06:	f8a3 104c 	strh.w	r1, [r3, #76]	; 0x4c
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
 8015f0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8015f0e:	bd70      	pop	{r4, r5, r6, pc}

08015f10 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>:

// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size] (or [-1, axis_size -1] if stride < 0)
// that can be used to index directly into the data.
inline int StartForAxis(const tflite::StridedSliceParams& params,
                        const RuntimeShape& input_shape, int axis) {
 8015f10:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK_GE(i, 0);
 8015f12:	1e15      	subs	r5, r2, #0
 8015f14:	da01      	bge.n	8015f1a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0xa>
 8015f16:	f000 ff15 	bl	8016d44 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8015f1a:	680b      	ldr	r3, [r1, #0]
 8015f1c:	429d      	cmp	r5, r3
 8015f1e:	dafa      	bge.n	8015f16 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x6>
    return dims_[i];
 8015f20:	00ac      	lsls	r4, r5, #2
 8015f22:	4421      	add	r1, r4
 8015f24:	684b      	ldr	r3, [r1, #4]
  const auto begin_mask = params.begin_mask;
  const auto* start_indices = params.start_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
  if (axis_size == 0) {
 8015f26:	b1f3      	cbz	r3, 8015f66 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x56>
  }
  // Begin with the specified index.
  int start = start_indices[axis];

  // begin_mask override
  if (begin_mask & 1 << axis) {
 8015f28:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
  int start = start_indices[axis];
 8015f2c:	4404      	add	r4, r0
  if (begin_mask & 1 << axis) {
 8015f2e:	412a      	asrs	r2, r5
  int start = start_indices[axis];
 8015f30:	6861      	ldr	r1, [r4, #4]
 8015f32:	6b64      	ldr	r4, [r4, #52]	; 0x34
  if (begin_mask & 1 << axis) {
 8015f34:	07d0      	lsls	r0, r2, #31
 8015f36:	d50b      	bpl.n	8015f50 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x40>
    if (strides[axis] > 0) {
 8015f38:	2c00      	cmp	r4, #0
 8015f3a:	dc16      	bgt.n	8015f6a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x5a>
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = std::numeric_limits<int>::lowest();
    } else {
      // Backward iteration - use the last element.
      start = std::numeric_limits<int>::max();
 8015f3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  if (strides[axis] > 0) {
    // Forward iteration
    start = Clamp(start, 0, axis_size);
  } else {
    // Backward iteration
    start = Clamp(start, -1, axis_size - 1);
 8015f40:	3b01      	subs	r3, #1
  TFLITE_DCHECK(!(hi < lo));
 8015f42:	1c5a      	adds	r2, r3, #1
 8015f44:	dbe7      	blt.n	8015f16 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x6>
  if (hi < v) return hi;
 8015f46:	428b      	cmp	r3, r1
 8015f48:	bfa8      	it	ge
 8015f4a:	ea41 73e1 	orrge.w	r3, r1, r1, asr #31
 8015f4e:	e00a      	b.n	8015f66 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x56>
  if (start < 0) {
 8015f50:	2900      	cmp	r1, #0
 8015f52:	da00      	bge.n	8015f56 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x46>
    start += axis_size;
 8015f54:	4419      	add	r1, r3
  if (strides[axis] > 0) {
 8015f56:	2c00      	cmp	r4, #0
 8015f58:	ddf2      	ble.n	8015f40 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x30>
  TFLITE_DCHECK(!(hi < lo));
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	dbdb      	blt.n	8015f16 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x6>
  if (hi < v) return hi;
 8015f5e:	4299      	cmp	r1, r3
 8015f60:	dc01      	bgt.n	8015f66 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x56>
 8015f62:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  }

  return start;
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	bd38      	pop	{r3, r4, r5, pc}
      start = std::numeric_limits<int>::lowest();
 8015f6a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015f6e:	e7f1      	b.n	8015f54 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x44>

08015f70 <_ZN6tflite16StridedSliceInitEP13TfLiteContextPKcj>:

}  // namespace

void* StridedSliceInit(TfLiteContext* context, const char* buffer,
                       size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015f70:	6b83      	ldr	r3, [r0, #56]	; 0x38
                       size_t length) {
 8015f72:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015f74:	b90b      	cbnz	r3, 8015f7a <_ZN6tflite16StridedSliceInitEP13TfLiteContextPKcj+0xa>
 8015f76:	f000 fee5 	bl	8016d44 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(StridedSliceParams));
 8015f7a:	2154      	movs	r1, #84	; 0x54
}
 8015f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(StridedSliceParams));
 8015f80:	4718      	bx	r3
	...

08015f84 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus StridedSlicePrepare(TfLiteContext* context, TfLiteNode* node) {
 8015f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8015f88:	690f      	ldr	r7, [r1, #16]
TfLiteStatus StridedSlicePrepare(TfLiteContext* context, TfLiteNode* node) {
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	460d      	mov	r5, r1
 8015f8e:	ed2d 8b02 	vpush	{d8}
 8015f92:	b0c5      	sub	sp, #276	; 0x114
  TFLITE_DCHECK(node->user_data != nullptr);
 8015f94:	b90f      	cbnz	r7, 8015f9a <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8015f96:	f000 fed5 	bl	8016d44 <abort>
  StridedSliceParams* op_params =
      static_cast<StridedSliceParams*>(node->user_data);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
 8015f9a:	680b      	ldr	r3, [r1, #0]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8015f9c:	b113      	cbz	r3, 8015fa4 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x20>
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	2a04      	cmp	r2, #4
 8015fa2:	d015      	beq.n	8015fd0 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x4c>
 8015fa4:	6965      	ldr	r5, [r4, #20]
 8015fa6:	b103      	cbz	r3, 8015faa <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2204      	movs	r2, #4
 8015fac:	4991      	ldr	r1, [pc, #580]	; (80161f4 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 8015fae:	4620      	mov	r0, r4
 8015fb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015fb4:	4b90      	ldr	r3, [pc, #576]	; (80161f8 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 8015fb6:	4a91      	ldr	r2, [pc, #580]	; (80161fc <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 8015fb8:	9301      	str	r3, [sp, #4]
 8015fba:	4b91      	ldr	r3, [pc, #580]	; (8016200 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 8015fbc:	9300      	str	r3, [sp, #0]
 8015fbe:	238b      	movs	r3, #139	; 0x8b
 8015fc0:	47a8      	blx	r5
 8015fc2:	2501      	movs	r5, #1
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
                     "input dim should not exceed 4");
  auto params = BuildStridedSliceParams(&op_context);
  memcpy(op_params, &params, sizeof(StridedSliceParams));
  return CheckOutputSize(context, &op_context);
}
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	b045      	add	sp, #276	; 0x114
 8015fc8:	ecbd 8b02 	vpop	{d8}
 8015fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8015fd0:	684b      	ldr	r3, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8015fd2:	b113      	cbz	r3, 8015fda <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x56>
 8015fd4:	681e      	ldr	r6, [r3, #0]
 8015fd6:	2e01      	cmp	r6, #1
 8015fd8:	d00f      	beq.n	8015ffa <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x76>
 8015fda:	6966      	ldr	r6, [r4, #20]
 8015fdc:	b103      	cbz	r3, 8015fe0 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	2501      	movs	r5, #1
 8015fe2:	4a86      	ldr	r2, [pc, #536]	; (80161fc <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 8015fe4:	4983      	ldr	r1, [pc, #524]	; (80161f4 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8015fec:	4b85      	ldr	r3, [pc, #532]	; (8016204 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 8015fee:	9301      	str	r3, [sp, #4]
 8015ff0:	4b85      	ldr	r3, [pc, #532]	; (8016208 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	238c      	movs	r3, #140	; 0x8c
 8015ff6:	47b0      	blx	r6
 8015ff8:	e7e4      	b.n	8015fc4 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x40>
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
 8015ffa:	694b      	ldr	r3, [r1, #20]
        micro_context->AllocateTempInputTensor(node, kStridedSliceInputTensor);
 8015ffc:	2200      	movs	r2, #0
    micro_context = GetMicroContext(context);
 8015ffe:	68c0      	ldr	r0, [r0, #12]
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
 8016000:	9312      	str	r3, [sp, #72]	; 0x48
    micro_context = GetMicroContext(context);
 8016002:	9013      	str	r0, [sp, #76]	; 0x4c
        micro_context->AllocateTempInputTensor(node, kStridedSliceInputTensor);
 8016004:	f7f4 f836 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
        micro_context->AllocateTempInputTensor(node, kStridedSliceBeginTensor);
 8016008:	4632      	mov	r2, r6
    input =
 801600a:	9014      	str	r0, [sp, #80]	; 0x50
        micro_context->AllocateTempInputTensor(node, kStridedSliceBeginTensor);
 801600c:	4629      	mov	r1, r5
 801600e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016010:	f7f4 f830 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
    end = micro_context->AllocateTempInputTensor(node, kStridedSliceEndTensor);
 8016014:	2202      	movs	r2, #2
    begin =
 8016016:	9015      	str	r0, [sp, #84]	; 0x54
    end = micro_context->AllocateTempInputTensor(node, kStridedSliceEndTensor);
 8016018:	4629      	mov	r1, r5
 801601a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801601c:	f7f4 f82a 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
    strides = micro_context->AllocateTempInputTensor(
 8016020:	2203      	movs	r2, #3
    end = micro_context->AllocateTempInputTensor(node, kStridedSliceEndTensor);
 8016022:	9016      	str	r0, [sp, #88]	; 0x58
    strides = micro_context->AllocateTempInputTensor(
 8016024:	4629      	mov	r1, r5
 8016026:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016028:	f7f4 f824 	bl	800a074 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
    output = micro_context->AllocateTempOutputTensor(node,
 801602c:	2200      	movs	r2, #0
    strides = micro_context->AllocateTempInputTensor(
 801602e:	9017      	str	r0, [sp, #92]	; 0x5c
    output = micro_context->AllocateTempOutputTensor(node,
 8016030:	4629      	mov	r1, r5
 8016032:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016034:	f7f4 f833 	bl	800a09e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
    dims = NumDimensions(input);
 8016038:	9b14      	ldr	r3, [sp, #80]	; 0x50
    output = micro_context->AllocateTempOutputTensor(node,
 801603a:	9018      	str	r0, [sp, #96]	; 0x60
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801603c:	689b      	ldr	r3, [r3, #8]
 801603e:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
 8016040:	2b04      	cmp	r3, #4
    dims = NumDimensions(input);
 8016042:	9319      	str	r3, [sp, #100]	; 0x64
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
 8016044:	dd1e      	ble.n	8016084 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x100>
 8016046:	6963      	ldr	r3, [r4, #20]
 8016048:	4970      	ldr	r1, [pc, #448]	; (801620c <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x288>)
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
 801604a:	4620      	mov	r0, r4
 801604c:	4798      	blx	r3
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
 801604e:	2501      	movs	r5, #1
    micro_context->DeallocateTempTfLiteTensor(input);
 8016050:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016052:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016054:	6803      	ldr	r3, [r0, #0]
 8016056:	699b      	ldr	r3, [r3, #24]
 8016058:	4798      	blx	r3
    micro_context->DeallocateTempTfLiteTensor(begin);
 801605a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801605c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801605e:	6803      	ldr	r3, [r0, #0]
 8016060:	699b      	ldr	r3, [r3, #24]
 8016062:	4798      	blx	r3
    micro_context->DeallocateTempTfLiteTensor(end);
 8016064:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016066:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016068:	6803      	ldr	r3, [r0, #0]
 801606a:	699b      	ldr	r3, [r3, #24]
 801606c:	4798      	blx	r3
    micro_context->DeallocateTempTfLiteTensor(strides);
 801606e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016070:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016072:	6803      	ldr	r3, [r0, #0]
 8016074:	699b      	ldr	r3, [r3, #24]
 8016076:	4798      	blx	r3
    micro_context->DeallocateTempTfLiteTensor(output);
 8016078:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801607a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801607c:	6803      	ldr	r3, [r0, #0]
 801607e:	699b      	ldr	r3, [r3, #24]
 8016080:	4798      	blx	r3
 8016082:	e79f      	b.n	8015fc4 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x40>
  auto params = BuildStridedSliceParams(&op_context);
 8016084:	a912      	add	r1, sp, #72	; 0x48
 8016086:	a81a      	add	r0, sp, #104	; 0x68
 8016088:	f7ff ff12 	bl	8015eb0 <_ZN6tflite12_GLOBAL__N_123BuildStridedSliceParamsEPNS0_19StridedSliceContextE>
  auto op_params = BuildStridedSliceParams(op_context);
 801608c:	f10d 08bc 	add.w	r8, sp, #188	; 0xbc
  memcpy(op_params, &params, sizeof(StridedSliceParams));
 8016090:	2254      	movs	r2, #84	; 0x54
 8016092:	a91a      	add	r1, sp, #104	; 0x68
 8016094:	4638      	mov	r0, r7
  auto input_shape = GetTensorShape(op_context->input);
 8016096:	af0b      	add	r7, sp, #44	; 0x2c
  memcpy(op_params, &params, sizeof(StridedSliceParams));
 8016098:	f000 fedb 	bl	8016e52 <memcpy>
  TfLiteIntArray* output_shape = op_context->output->dims;
 801609c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  auto op_params = BuildStridedSliceParams(op_context);
 801609e:	a912      	add	r1, sp, #72	; 0x48
 80160a0:	4640      	mov	r0, r8
  TfLiteIntArray* output_shape = op_context->output->dims;
 80160a2:	f8d3 b008 	ldr.w	fp, [r3, #8]
  auto op_params = BuildStridedSliceParams(op_context);
 80160a6:	f7ff ff03 	bl	8015eb0 <_ZN6tflite12_GLOBAL__N_123BuildStridedSliceParamsEPNS0_19StridedSliceContextE>
  auto input_shape = GetTensorShape(op_context->input);
 80160aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80160ac:	4638      	mov	r0, r7
 80160ae:	f7f2 f9e8 	bl	8008482 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  for (int idx = 0; idx < op_context->dims; ++idx) {
 80160b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  int shape_size = 0;
 80160b4:	2600      	movs	r6, #0
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
 80160b6:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
  for (int idx = 0; idx < op_context->dims; ++idx) {
 80160ba:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
 80160bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160be:	4635      	mov	r5, r6
    int32_t begin = StartForAxis(op_params, input_shape, idx);
 80160c0:	9704      	str	r7, [sp, #16]
 80160c2:	9308      	str	r3, [sp, #32]
  if (axis_size == 0) {
    return 0;
  }

  // Begin with the specified index
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
 80160c4:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 80160c8:	9306      	str	r3, [sp, #24]
  if (shrink_axis) {
    return start_for_axis + 1;
  }

  // end_mask override
  if (end_mask & (1 << axis)) {
 80160ca:	f8bd 3108 	ldrh.w	r3, [sp, #264]	; 0x108
 80160ce:	9307      	str	r3, [sp, #28]
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
 80160d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  for (int idx = 0; idx < op_context->dims; ++idx) {
 80160d2:	9a05      	ldr	r2, [sp, #20]
 80160d4:	42aa      	cmp	r2, r5
 80160d6:	dd7e      	ble.n	80161d6 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x252>
 80160d8:	f1ba 0f00 	cmp.w	sl, #0
 80160dc:	d00b      	beq.n	80160f6 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x172>
 80160de:	f8da 2004 	ldr.w	r2, [sl, #4]
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
 80160e2:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80160e6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80160ea:	ee08 2a10 	vmov	s16, r2
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
 80160ee:	b922      	cbnz	r2, 80160fa <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x176>
 80160f0:	6963      	ldr	r3, [r4, #20]
 80160f2:	4947      	ldr	r1, [pc, #284]	; (8016210 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 80160f4:	e7a9      	b.n	801604a <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0xc6>
 80160f6:	4652      	mov	r2, sl
 80160f8:	e7f3      	b.n	80160e2 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x15e>
    int32_t begin = StartForAxis(op_params, input_shape, idx);
 80160fa:	462a      	mov	r2, r5
 80160fc:	9904      	ldr	r1, [sp, #16]
 80160fe:	4640      	mov	r0, r8
 8016100:	9309      	str	r3, [sp, #36]	; 0x24
 8016102:	f7ff ff05 	bl	8015f10 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8016106:	9b08      	ldr	r3, [sp, #32]
 8016108:	429d      	cmp	r5, r3
 801610a:	f6bf af44 	bge.w	8015f96 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x12>
    return dims_[i];
 801610e:	9b04      	ldr	r3, [sp, #16]
 8016110:	eb03 0209 	add.w	r2, r3, r9
  if (axis_size == 0) {
 8016114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016116:	6852      	ldr	r2, [r2, #4]
 8016118:	b122      	cbz	r2, 8016124 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
 801611a:	9906      	ldr	r1, [sp, #24]
 801611c:	4129      	asrs	r1, r5
  if (shrink_axis) {
 801611e:	07c9      	lsls	r1, r1, #31
 8016120:	d52b      	bpl.n	801617a <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x1f6>
    return start_for_axis + 1;
 8016122:	1c42      	adds	r2, r0, #1
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
 8016124:	6919      	ldr	r1, [r3, #16]
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
 8016126:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
 801612a:	4129      	asrs	r1, r5
    if (shrink_axis) {
 801612c:	f011 0101 	ands.w	r1, r1, #1
      end = begin + 1;
 8016130:	bf18      	it	ne
 8016132:	1c42      	addne	r2, r0, #1
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
 8016134:	1a12      	subs	r2, r2, r0
 8016136:	ee07 2a90 	vmov	s15, r2
 801613a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801613e:	ee87 7a88 	vdiv.f32	s14, s15, s16
  { return __builtin_ceilf(__x); }
 8016142:	fefa 7a47 	vrintp.f32	s15, s14
    if (!shrink_axis) {
 8016146:	2900      	cmp	r1, #0
 8016148:	d143      	bne.n	80161d2 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x24e>
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
 801614a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
 801614e:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
 8016152:	6849      	ldr	r1, [r1, #4]
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
 8016154:	ee17 2a90 	vmov	r2, s15
    dim_shape = dim_shape < 0 ? 0 : dim_shape;
 8016158:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
 801615c:	428a      	cmp	r2, r1
 801615e:	d037      	beq.n	80161d0 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x24c>
 8016160:	4b2c      	ldr	r3, [pc, #176]	; (8016214 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x290>)
 8016162:	6965      	ldr	r5, [r4, #20]
 8016164:	9301      	str	r3, [sp, #4]
 8016166:	4b2c      	ldr	r3, [pc, #176]	; (8016218 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 8016168:	9300      	str	r3, [sp, #0]
 801616a:	2377      	movs	r3, #119	; 0x77
 801616c:	e9cd 1202 	strd	r1, r2, [sp, #8]
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
 8016170:	4a22      	ldr	r2, [pc, #136]	; (80161fc <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 8016172:	4620      	mov	r0, r4
 8016174:	491f      	ldr	r1, [pc, #124]	; (80161f4 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 8016176:	47a8      	blx	r5
 8016178:	e769      	b.n	801604e <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0xca>
  if (end_mask & (1 << axis)) {
 801617a:	9f07      	ldr	r7, [sp, #28]
 801617c:	44c1      	add	r9, r8
 801617e:	fa47 fe05 	asr.w	lr, r7, r5
  int stop = stop_indices[axis];
 8016182:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8016186:	f8d9 c034 	ldr.w	ip, [r9, #52]	; 0x34
  if (end_mask & (1 << axis)) {
 801618a:	f01e 0f01 	tst.w	lr, #1
 801618e:	d006      	beq.n	801619e <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x21a>
    if (strides[axis] > 0) {
 8016190:	f1bc 0f00 	cmp.w	ip, #0
 8016194:	dc10      	bgt.n	80161b8 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x234>
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = std::numeric_limits<int>::max();
    } else {
      // Backward iteration - use the first element.
      stop = std::numeric_limits<int>::lowest();
 8016196:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    }
  }

  // Handle negative indices
  if (stop < 0) {
    stop += axis_size;
 801619a:	4411      	add	r1, r2
 801619c:	e001      	b.n	80161a2 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x21e>
  if (stop < 0) {
 801619e:	2900      	cmp	r1, #0
 80161a0:	dbfb      	blt.n	801619a <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x216>
  }

  // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.
  if (strides[axis] > 0) {
 80161a2:	f1bc 0f00 	cmp.w	ip, #0
 80161a6:	dd0a      	ble.n	80161be <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x23a>
  TFLITE_DCHECK(!(hi < lo));
 80161a8:	2a00      	cmp	r2, #0
 80161aa:	f6ff aef4 	blt.w	8015f96 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x12>
  if (hi < v) return hi;
 80161ae:	4291      	cmp	r1, r2
 80161b0:	dcb8      	bgt.n	8016124 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
 80161b2:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 80161b6:	e7b5      	b.n	8016124 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
      stop = std::numeric_limits<int>::max();
 80161b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80161bc:	e7f4      	b.n	80161a8 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x224>
    // Forward iteration
    stop = Clamp(stop, 0, axis_size);
  } else {
    // Backward iteration
    stop = Clamp(stop, -1, axis_size - 1);
 80161be:	3a01      	subs	r2, #1
  TFLITE_DCHECK(!(hi < lo));
 80161c0:	1c57      	adds	r7, r2, #1
 80161c2:	f6ff aee8 	blt.w	8015f96 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x12>
  if (hi < v) return hi;
 80161c6:	4291      	cmp	r1, r2
 80161c8:	bfd8      	it	le
 80161ca:	ea41 72e1 	orrle.w	r2, r1, r1, asr #31
 80161ce:	e7a9      	b.n	8016124 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
      shape_size++;
 80161d0:	3601      	adds	r6, #1
  for (int idx = 0; idx < op_context->dims; ++idx) {
 80161d2:	3501      	adds	r5, #1
 80161d4:	e77d      	b.n	80160d2 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x14e>
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
 80161d6:	f8db 3000 	ldr.w	r3, [fp]
 80161da:	429e      	cmp	r6, r3
 80161dc:	d008      	beq.n	80161f0 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 80161de:	6965      	ldr	r5, [r4, #20]
 80161e0:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80161e4:	4b0d      	ldr	r3, [pc, #52]	; (801621c <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x298>)
 80161e6:	9301      	str	r3, [sp, #4]
 80161e8:	4b0d      	ldr	r3, [pc, #52]	; (8016220 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 80161ea:	9300      	str	r3, [sp, #0]
 80161ec:	237b      	movs	r3, #123	; 0x7b
 80161ee:	e7bf      	b.n	8016170 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0x1ec>
  return kTfLiteOk;
 80161f0:	2500      	movs	r5, #0
  return CheckOutputSize(context, &op_context);
 80161f2:	e72d      	b.n	8016050 <_ZN6tflite19StridedSlicePrepareEP13TfLiteContextP10TfLiteNode+0xcc>
 80161f4:	080f982c 	.word	0x080f982c
 80161f8:	080fd0c1 	.word	0x080fd0c1
 80161fc:	080fd01d 	.word	0x080fd01d
 8016200:	080fc490 	.word	0x080fc490
 8016204:	080fca44 	.word	0x080fca44
 8016208:	080fc4a0 	.word	0x080fc4a0
 801620c:	080fd061 	.word	0x080fd061
 8016210:	080fd0c3 	.word	0x080fd0c3
 8016214:	080fd127 	.word	0x080fd127
 8016218:	080fd131 	.word	0x080fd131
 801621c:	080fd150 	.word	0x080fd150
 8016220:	080fd15b 	.word	0x080fd15b

08016224 <_ZNK6tflite19GreedyMemoryPlanner21preserves_all_tensorsEv>:
  }

  // Returns False because the GreedyMemoryPlanner doesn't preserves all tensors
  // after invocation. Do to the fact that tensors that tensor data for tensors
  // that aren't being used during a phase of invocation are overwritten.
  bool preserves_all_tensors() const override { return false; }
 8016224:	2000      	movs	r0, #0
 8016226:	4770      	bx	lr

08016228 <_ZN6tflite19GreedyMemoryPlanner4InitEPhi>:
}

GreedyMemoryPlanner::GreedyMemoryPlanner() {}

TfLiteStatus GreedyMemoryPlanner::Init(unsigned char* scratch_buffer,
                                       int scratch_buffer_size) {
 8016228:	4603      	mov	r3, r0
  // Reset internal states
  buffer_count_ = 0;
 801622a:	2000      	movs	r0, #0
                                       int scratch_buffer_size) {
 801622c:	b510      	push	{r4, lr}
  need_to_calculate_offsets_ = true;
 801622e:	2401      	movs	r4, #1

  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();

  unsigned char* next_free = scratch_buffer;
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8016230:	60d9      	str	r1, [r3, #12]
  buffer_count_ = 0;
 8016232:	6098      	str	r0, [r3, #8]
  need_to_calculate_offsets_ = true;
 8016234:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8016238:	2428      	movs	r4, #40	; 0x28
 801623a:	fbb2 f2f4 	udiv	r2, r2, r4
  next_free += sizeof(BufferRequirements) * max_buffer_count_;

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
  next_free += sizeof(int) * max_buffer_count_;
 801623e:	0094      	lsls	r4, r2, #2
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8016240:	605a      	str	r2, [r3, #4]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8016242:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8016246:	6119      	str	r1, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8016248:	4421      	add	r1, r4

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 801624a:	6159      	str	r1, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 801624c:	4421      	add	r1, r4

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
  next_free += sizeof(ListEntry) * max_buffer_count_;
 801624e:	240c      	movs	r4, #12
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8016250:	6199      	str	r1, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8016252:	fb04 1102 	mla	r1, r4, r2, r1

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8016256:	6259      	str	r1, [r3, #36]	; 0x24
  return kTfLiteOk;
}
 8016258:	bd10      	pop	{r4, pc}

0801625a <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
 801625a:	4770      	bx	lr

0801625c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii>:
  return kTfLiteOk;
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used,
                                            int offline_offset) {
 801625c:	b570      	push	{r4, r5, r6, lr}
  BufferRequirements* current = &requirements_[buffer_count_];
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 801625e:	6805      	ldr	r5, [r0, #0]
 8016260:	68ad      	ldr	r5, [r5, #8]
  BufferRequirements* current = &requirements_[buffer_count_];
 8016262:	e9d0 6402 	ldrd	r6, r4, [r0, #8]
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 8016266:	47a8      	blx	r5
 8016268:	b920      	cbnz	r0, 8016274 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x18>
    return kTfLiteError;
  }
  current->offline_offset = offline_offset;
 801626a:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 801626e:	9b04      	ldr	r3, [sp, #16]
 8016270:	6063      	str	r3, [r4, #4]
  return kTfLiteOk;
}
 8016272:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
 8016274:	2001      	movs	r0, #1
 8016276:	e7fc      	b.n	8016272 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x16>

08016278 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8016278:	6880      	ldr	r0, [r0, #8]
 801627a:	4770      	bx	lr

0801627c <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 801627c:	b510      	push	{r4, lr}
 801627e:	4604      	mov	r4, r0
}
 8016280:	212c      	movs	r1, #44	; 0x2c
 8016282:	f000 fad4 	bl	801682e <_ZdlPvj>
 8016286:	4620      	mov	r0, r4
 8016288:	bd10      	pop	{r4, pc}
	...

0801628c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii>:
                                            int last_time_used) {
 801628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801628e:	468c      	mov	ip, r1
  if (buffer_count_ >= max_buffer_count_) {
 8016290:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 8016294:	428c      	cmp	r4, r1
 8016296:	db04      	blt.n	80162a2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x16>
    MicroPrintf("Too many buffers (max is %d)", max_buffer_count_);
 8016298:	480a      	ldr	r0, [pc, #40]	; (80162c4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x38>)
 801629a:	f7f4 fd0d 	bl	800acb8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 801629e:	2001      	movs	r0, #1
}
 80162a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
 80162a2:	68c7      	ldr	r7, [r0, #12]
 80162a4:	0126      	lsls	r6, r4, #4
  ++buffer_count_;
 80162a6:	3401      	adds	r4, #1
  BufferRequirements* current = &requirements_[buffer_count_];
 80162a8:	19bd      	adds	r5, r7, r6
  current->size = size;
 80162aa:	f847 c006 	str.w	ip, [r7, r6]
  current->last_time_used = last_time_used;
 80162ae:	e9c5 2302 	strd	r2, r3, [r5, #8]
  current->offline_offset = kOnlinePlannedBuffer;
 80162b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162b6:	606b      	str	r3, [r5, #4]
  need_to_calculate_offsets_ = true;
 80162b8:	2301      	movs	r3, #1
  ++buffer_count_;
 80162ba:	6084      	str	r4, [r0, #8]
  need_to_calculate_offsets_ = true;
 80162bc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  return kTfLiteOk;
 80162c0:	2000      	movs	r0, #0
 80162c2:	e7ed      	b.n	80162a0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x14>
 80162c4:	080fd1e1 	.word	0x080fd1e1

080162c8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
 80162c8:	4694      	mov	ip, r2
 80162ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162cc:	4604      	mov	r4, r0
 80162ce:	460b      	mov	r3, r1
    for (int i = 1; i < size; ++i) {
 80162d0:	2501      	movs	r5, #1
    any_swapped = false;
 80162d2:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
 80162d4:	4565      	cmp	r5, ip
 80162d6:	da0e      	bge.n	80162f6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2e>
      if (values[i - 1] < values[i]) {
 80162d8:	6827      	ldr	r7, [r4, #0]
    for (int i = 1; i < size; ++i) {
 80162da:	3501      	adds	r5, #1
      if (values[i - 1] < values[i]) {
 80162dc:	f854 2f04 	ldr.w	r2, [r4, #4]!
 80162e0:	4297      	cmp	r7, r2
        values[i] = value_temp;
 80162e2:	bfbf      	itttt	lt
 80162e4:	e944 2701 	strdlt	r2, r7, [r4, #-4]
        ids[i - 1] = ids[i];
 80162e8:	e9d3 2600 	ldrdlt	r2, r6, [r3]
        ids[i] = id_temp;
 80162ec:	e9c3 6200 	strdlt	r6, r2, [r3]
        any_swapped = true;
 80162f0:	2601      	movlt	r6, #1
 80162f2:	3304      	adds	r3, #4
    for (int i = 1; i < size; ++i) {
 80162f4:	e7ee      	b.n	80162d4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
  do {
 80162f6:	2e00      	cmp	r6, #0
 80162f8:	d1e8      	bne.n	80162cc <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x4>
}
 80162fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080162fc <_ZN6tflite19GreedyMemoryPlannerC1Ev>:
GreedyMemoryPlanner::GreedyMemoryPlanner() {}
 80162fc:	4b01      	ldr	r3, [pc, #4]	; (8016304 <_ZN6tflite19GreedyMemoryPlannerC1Ev+0x8>)
 80162fe:	6003      	str	r3, [r0, #0]
 8016300:	4770      	bx	lr
 8016302:	bf00      	nop
 8016304:	080fd208 	.word	0x080fd208

08016308 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
 8016308:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
 801630a:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
 801630c:	68c1      	ldr	r1, [r0, #12]
 801630e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 8016312:	6888      	ldr	r0, [r1, #8]
 8016314:	4298      	cmp	r0, r3
 8016316:	dc05      	bgt.n	8016324 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
 8016318:	68c8      	ldr	r0, [r1, #12]
 801631a:	4290      	cmp	r0, r2
 801631c:	bfb4      	ite	lt
 801631e:	2000      	movlt	r0, #0
 8016320:	2001      	movge	r0, #1
}
 8016322:	bd10      	pop	{r4, pc}
    return false;
 8016324:	2000      	movs	r0, #0
 8016326:	e7fc      	b.n	8016322 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

08016328 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
 8016328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801632c:	4605      	mov	r5, r0
 801632e:	4616      	mov	r6, r2
 8016330:	461f      	mov	r7, r3
  if (start == nullptr) {
 8016332:	b9a1      	cbnz	r1, 801635e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8016334:	6a04      	ldr	r4, [r0, #32]
 8016336:	69ab      	ldr	r3, [r5, #24]
 8016338:	220c      	movs	r2, #12
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 801633a:	f04f 080c 	mov.w	r8, #12
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 801633e:	fb02 3404 	mla	r4, r2, r4, r3
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8016342:	463b      	mov	r3, r7
 8016344:	4632      	mov	r2, r6
 8016346:	4621      	mov	r1, r4
 8016348:	4628      	mov	r0, r5
 801634a:	f7ff ffdd 	bl	8016308 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 801634e:	b950      	cbnz	r0, 8016366 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (candidate_next_entry->next_entry_index == -1) {
 8016350:	68a4      	ldr	r4, [r4, #8]
 8016352:	1c63      	adds	r3, r4, #1
 8016354:	d00a      	beq.n	801636c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x44>
    candidate_next_entry =
 8016356:	69ab      	ldr	r3, [r5, #24]
 8016358:	fb08 3404 	mla	r4, r8, r4, r3
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 801635c:	e7f1      	b.n	8016342 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1a>
    if (start->next_entry_index == -1) {
 801635e:	688c      	ldr	r4, [r1, #8]
 8016360:	1c62      	adds	r2, r4, #1
 8016362:	d1e8      	bne.n	8016336 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0xe>
      return nullptr;
 8016364:	2400      	movs	r4, #0
}
 8016366:	4620      	mov	r0, r4
 8016368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return nullptr;
 801636c:	4604      	mov	r4, r0
 801636e:	e7fa      	b.n	8016366 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>

08016370 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8016370:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8016374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016378:	4604      	mov	r4, r0
 801637a:	b087      	sub	sp, #28
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 801637c:	2b00      	cmp	r3, #0
 801637e:	f000 80ae 	beq.w	80164de <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
 8016382:	6885      	ldr	r5, [r0, #8]
 8016384:	2d00      	cmp	r5, #0
 8016386:	f000 80aa 	beq.w	80164de <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
  need_to_calculate_offsets_ = false;
 801638a:	2300      	movs	r3, #0
 801638c:	e9d0 c704 	ldrd	ip, r7, [r0, #16]
  int idx_from_head = 0;
 8016390:	461a      	mov	r2, r3
  need_to_calculate_offsets_ = false;
 8016392:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
 8016396:	f8d4 e008 	ldr.w	lr, [r4, #8]
 801639a:	0096      	lsls	r6, r2, #2
 801639c:	459e      	cmp	lr, r3
 801639e:	eb0c 0006 	add.w	r0, ip, r6
 80163a2:	eb07 0106 	add.w	r1, r7, r6
 80163a6:	dd1d      	ble.n	80163e4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 80163a8:	0119      	lsls	r1, r3, #4
 80163aa:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80163ae:	eb0e 0001 	add.w	r0, lr, r1
 80163b2:	f85e e001 	ldr.w	lr, [lr, r1]
 80163b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80163b8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80163bc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80163c0:	d108      	bne.n	80163d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x64>
      idx_from_tail--;
 80163c2:	3d01      	subs	r5, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 80163c4:	f84c e025 	str.w	lr, [ip, r5, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
 80163c8:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
      buffer_offsets_[i] = -1;
 80163cc:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
 80163d0:	3301      	adds	r3, #1
 80163d2:	e7e0      	b.n	8016396 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x26>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 80163d4:	f84c e006 	str.w	lr, [ip, r6]
      idx_from_head++;
 80163d8:	3201      	adds	r2, #1
      buffer_ids_sorted_[idx_from_head] = i;
 80163da:	51bb      	str	r3, [r7, r6]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 80163dc:	6840      	ldr	r0, [r0, #4]
 80163de:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80163e2:	e7f5      	b.n	80163d0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x60>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80163e4:	ebae 0202 	sub.w	r2, lr, r2
  for (int i = 1; i < buffer_count_; ++i) {
 80163e8:	f04f 0801 	mov.w	r8, #1
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80163ec:	f7ff ff6c 	bl	80162c8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  next_free_entry_ = 1;
 80163f0:	2301      	movs	r3, #1
 80163f2:	2200      	movs	r2, #0
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80163f4:	69a7      	ldr	r7, [r4, #24]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 80163f6:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80163fa:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80163fe:	f8d4 a018 	ldr.w	sl, [r4, #24]
  next_free_entry_ = 1;
 8016402:	e9c4 3207 	strd	r3, r2, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 8016406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801640a:	60bb      	str	r3, [r7, #8]
  int buffer_id = buffer_ids_sorted_[0];
 801640c:	6963      	ldr	r3, [r4, #20]
 801640e:	681b      	ldr	r3, [r3, #0]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8016410:	eb09 1103 	add.w	r1, r9, r3, lsl #4
  first_entry->requirements_index = buffer_id;
 8016414:	607b      	str	r3, [r7, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8016416:	6849      	ldr	r1, [r1, #4]
 8016418:	3101      	adds	r1, #1
 801641a:	6961      	ldr	r1, [r4, #20]
    buffer_offsets_[buffer_id] = 0;
 801641c:	bf08      	it	eq
 801641e:	f84b 2023 	streq.w	r2, [fp, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
 8016422:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8016426:	9105      	str	r1, [sp, #20]
 8016428:	603b      	str	r3, [r7, #0]
  for (int i = 1; i < buffer_count_; ++i) {
 801642a:	68a3      	ldr	r3, [r4, #8]
 801642c:	4543      	cmp	r3, r8
 801642e:	dd56      	ble.n	80164de <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    buffer_id = buffer_ids_sorted_[i];
 8016430:	9b05      	ldr	r3, [sp, #20]
 8016432:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 8016436:	011a      	lsls	r2, r3, #4
    buffer_id = buffer_ids_sorted_[i];
 8016438:	9301      	str	r3, [sp, #4]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 801643a:	eb09 0302 	add.w	r3, r9, r2
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 801643e:	685d      	ldr	r5, [r3, #4]
 8016440:	1c69      	adds	r1, r5, #1
 8016442:	d11f      	bne.n	8016484 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
    const int wanted_size = wanted_requirements->size;
 8016444:	f859 2002 	ldr.w	r2, [r9, r2]
      ListEntry* prior_entry = nullptr;
 8016448:	2600      	movs	r6, #0
    const int wanted_size = wanted_requirements->size;
 801644a:	9202      	str	r2, [sp, #8]
    int candidate_offset = 0;
 801644c:	4635      	mov	r5, r6
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 801644e:	689a      	ldr	r2, [r3, #8]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8016450:	68db      	ldr	r3, [r3, #12]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8016452:	9203      	str	r2, [sp, #12]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8016454:	9304      	str	r3, [sp, #16]
            prior_entry, wanted_first_time_used, wanted_last_time_used);
 8016456:	4631      	mov	r1, r6
 8016458:	4620      	mov	r0, r4
 801645a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801645e:	f7ff ff63 	bl	8016328 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
 8016462:	b146      	cbz	r6, 8016476 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
              &requirements_[prior_entry->requirements_index];
 8016464:	6873      	ldr	r3, [r6, #4]
          const int prior_entry_offset =
 8016466:	6832      	ldr	r2, [r6, #0]
              prior_entry->offset + candidate_requirements->size;
 8016468:	011b      	lsls	r3, r3, #4
          const int prior_entry_offset =
 801646a:	f859 3003 	ldr.w	r3, [r9, r3]
 801646e:	4413      	add	r3, r2
 8016470:	429d      	cmp	r5, r3
 8016472:	bfb8      	it	lt
 8016474:	461d      	movlt	r5, r3
        if (next_entry == nullptr) {
 8016476:	b128      	cbz	r0, 8016484 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
        const int gap = next_entry->offset - candidate_offset;
 8016478:	6803      	ldr	r3, [r0, #0]
 801647a:	4606      	mov	r6, r0
        if (gap >= wanted_size) {
 801647c:	9a02      	ldr	r2, [sp, #8]
        const int gap = next_entry->offset - candidate_offset;
 801647e:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
 8016480:	429a      	cmp	r2, r3
 8016482:	dce8      	bgt.n	8016456 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
    buffer_offsets_[buffer_id] = candidate_offset;
 8016484:	9b01      	ldr	r3, [sp, #4]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 8016486:	220c      	movs	r2, #12
    buffer_offsets_[buffer_id] = candidate_offset;
 8016488:	f84b 5023 	str.w	r5, [fp, r3, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 801648c:	69e3      	ldr	r3, [r4, #28]
 801648e:	fb02 f103 	mul.w	r1, r2, r3
    new_entry->offset = candidate_offset;
 8016492:	f84a 5001 	str.w	r5, [sl, r1]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 8016496:	eb0a 0201 	add.w	r2, sl, r1
    new_entry->requirements_index = buffer_id;
 801649a:	9901      	ldr	r1, [sp, #4]
 801649c:	6051      	str	r1, [r2, #4]
    ++next_free_entry_;
 801649e:	1c59      	adds	r1, r3, #1
 80164a0:	61e1      	str	r1, [r4, #28]
    if (first_entry->offset > candidate_offset) {
 80164a2:	6839      	ldr	r1, [r7, #0]
 80164a4:	428d      	cmp	r5, r1
 80164a6:	da06      	bge.n	80164b6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x146>
      first_entry->next_entry_index = first_entry_index_;
 80164a8:	6a21      	ldr	r1, [r4, #32]
      first_entry_index_ = new_entry_index;
 80164aa:	4617      	mov	r7, r2
      first_entry->next_entry_index = first_entry_index_;
 80164ac:	6091      	str	r1, [r2, #8]
      first_entry_index_ = new_entry_index;
 80164ae:	6223      	str	r3, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
 80164b0:	f108 0801 	add.w	r8, r8, #1
 80164b4:	e7b9      	b.n	801642a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xba>
    if (first_entry->offset > candidate_offset) {
 80164b6:	4639      	mov	r1, r7
        const int next_entry_index = current_entry->next_entry_index;
 80164b8:	6888      	ldr	r0, [r1, #8]
        if (next_entry_index == -1) {
 80164ba:	1c46      	adds	r6, r0, #1
 80164bc:	d104      	bne.n	80164c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x158>
          current_entry->next_entry_index = new_entry_index;
 80164be:	608b      	str	r3, [r1, #8]
          new_entry->next_entry_index = -1;
 80164c0:	6090      	str	r0, [r2, #8]
 80164c2:	e7f5      	b.n	80164b0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
        if (next_entry->offset > candidate_offset) {
 80164c4:	4661      	mov	r1, ip
 80164c6:	e7f7      	b.n	80164b8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x148>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 80164c8:	260c      	movs	r6, #12
 80164ca:	4346      	muls	r6, r0
 80164cc:	eb0a 0c06 	add.w	ip, sl, r6
        if (next_entry->offset > candidate_offset) {
 80164d0:	f85a 6006 	ldr.w	r6, [sl, r6]
 80164d4:	42b5      	cmp	r5, r6
 80164d6:	daf5      	bge.n	80164c4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x154>
          new_entry->next_entry_index = current_entry->next_entry_index;
 80164d8:	6090      	str	r0, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
 80164da:	608b      	str	r3, [r1, #8]
 80164dc:	e7e8      	b.n	80164b0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
}
 80164de:	b007      	add	sp, #28
 80164e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164e4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 80164e4:	b570      	push	{r4, r5, r6, lr}
 80164e6:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
 80164e8:	f7ff ff42 	bl	8016370 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 80164ec:	68a0      	ldr	r0, [r4, #8]
 80164ee:	b1a8      	cbz	r0, 801651c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 80164f0:	69a5      	ldr	r5, [r4, #24]
 80164f2:	220c      	movs	r2, #12
 80164f4:	6a23      	ldr	r3, [r4, #32]
  size_t max_size = 0;
 80164f6:	2000      	movs	r0, #0
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 80164f8:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
 80164fc:	b173      	cbz	r3, 801651c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
 80164fe:	6859      	ldr	r1, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
 8016500:	68e6      	ldr	r6, [r4, #12]
 8016502:	0109      	lsls	r1, r1, #4
 8016504:	5871      	ldr	r1, [r6, r1]
 8016506:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
 8016508:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
 801650a:	4431      	add	r1, r6
 801650c:	4288      	cmp	r0, r1
 801650e:	bf38      	it	cc
 8016510:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
 8016512:	1c59      	adds	r1, r3, #1
 8016514:	d002      	beq.n	801651c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 8016516:	fb02 5303 	mla	r3, r2, r3, r5
 801651a:	e7ef      	b.n	80164fc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
 801651c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016520 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv>:
void GreedyMemoryPlanner::PrintMemoryPlan() {
 8016520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (int i = 0; i < buffer_count_; ++i) {
 8016524:	2500      	movs	r5, #0
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 8016526:	4f58      	ldr	r7, [pc, #352]	; (8016688 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x168>)
void GreedyMemoryPlanner::PrintMemoryPlan() {
 8016528:	b09d      	sub	sp, #116	; 0x74
 801652a:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
 801652c:	f7ff ff20 	bl	8016370 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  for (int i = 0; i < buffer_count_; ++i) {
 8016530:	68a6      	ldr	r6, [r4, #8]
 8016532:	42ae      	cmp	r6, r5
 8016534:	dd22      	ble.n	801657c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x5c>
  if (i < 10) {
 8016536:	2d09      	cmp	r5, #9
 8016538:	dc14      	bgt.n	8016564 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x44>
 801653a:	f105 0130 	add.w	r1, r5, #48	; 0x30
 801653e:	b2c9      	uxtb	r1, r1
                GetOrdinalCharacter(i), i, requirements_[i].size,
 8016540:	68e2      	ldr	r2, [r4, #12]
 8016542:	012b      	lsls	r3, r5, #4
 8016544:	18d0      	adds	r0, r2, r3
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 8016546:	68c6      	ldr	r6, [r0, #12]
 8016548:	9602      	str	r6, [sp, #8]
 801654a:	6880      	ldr	r0, [r0, #8]
 801654c:	9001      	str	r0, [sp, #4]
 801654e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016550:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016554:	9000      	str	r0, [sp, #0]
 8016556:	4638      	mov	r0, r7
 8016558:	58d3      	ldr	r3, [r2, r3]
 801655a:	462a      	mov	r2, r5
 801655c:	f7f4 fbac 	bl	800acb8 <_Z11MicroPrintfPKcz>
  for (int i = 0; i < buffer_count_; ++i) {
 8016560:	3501      	adds	r5, #1
 8016562:	e7e5      	b.n	8016530 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x10>
  } else if (i < 36) {
 8016564:	2d23      	cmp	r5, #35	; 0x23
 8016566:	dc02      	bgt.n	801656e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x4e>
 8016568:	f105 0157 	add.w	r1, r5, #87	; 0x57
 801656c:	e7e7      	b.n	801653e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1e>
  } else if (i < 62) {
 801656e:	2d3d      	cmp	r5, #61	; 0x3d
 8016570:	dc02      	bgt.n	8016578 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x58>
 8016572:	f105 011d 	add.w	r1, r5, #29
 8016576:	e7e2      	b.n	801653e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1e>
  return '*';
 8016578:	212a      	movs	r1, #42	; 0x2a
 801657a:	e7e1      	b.n	8016540 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x20>
  for (int i = 0; i < buffer_count_; ++i) {
 801657c:	2300      	movs	r3, #0
  int max_size = kLineWidth;
 801657e:	2750      	movs	r7, #80	; 0x50
  int max_time = 0;
 8016580:	4698      	mov	r8, r3
  for (int i = 0; i < buffer_count_; ++i) {
 8016582:	429e      	cmp	r6, r3
 8016584:	dd10      	ble.n	80165a8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x88>
    BufferRequirements* requirements = &requirements_[i];
 8016586:	0119      	lsls	r1, r3, #4
 8016588:	68e0      	ldr	r0, [r4, #12]
    const int offset = buffer_offsets_[i];
 801658a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    BufferRequirements* requirements = &requirements_[i];
 801658c:	1845      	adds	r5, r0, r1
    const int size = offset + requirements->size;
 801658e:	5841      	ldr	r1, [r0, r1]
 8016590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
 8016594:	3301      	adds	r3, #1
    const int size = offset + requirements->size;
 8016596:	440a      	add	r2, r1
 8016598:	4297      	cmp	r7, r2
 801659a:	bfb8      	it	lt
 801659c:	4617      	movlt	r7, r2
 801659e:	68ea      	ldr	r2, [r5, #12]
 80165a0:	4590      	cmp	r8, r2
 80165a2:	bfb8      	it	lt
 80165a4:	4690      	movlt	r8, r2
  for (int i = 0; i < buffer_count_; ++i) {
 80165a6:	e7ec      	b.n	8016582 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x62>
  for (int t = 0; t <= max_time; ++t) {
 80165a8:	2600      	movs	r6, #0
    for (int c = 0; c < kLineWidth; ++c) {
 80165aa:	2000      	movs	r0, #0
      line[c] = '.';
 80165ac:	ab07      	add	r3, sp, #28
 80165ae:	222e      	movs	r2, #46	; 0x2e
 80165b0:	54c2      	strb	r2, [r0, r3]
    for (int c = 0; c < kLineWidth; ++c) {
 80165b2:	3001      	adds	r0, #1
 80165b4:	2850      	cmp	r0, #80	; 0x50
 80165b6:	d1fb      	bne.n	80165b0 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x90>
    for (int i = 0; i < buffer_count_; ++i) {
 80165b8:	68a2      	ldr	r2, [r4, #8]
 80165ba:	9205      	str	r2, [sp, #20]
 80165bc:	2200      	movs	r2, #0
    int memory_use = 0;
 80165be:	4694      	mov	ip, r2
    for (int i = 0; i < buffer_count_; ++i) {
 80165c0:	9905      	ldr	r1, [sp, #20]
 80165c2:	4291      	cmp	r1, r2
 80165c4:	dd46      	ble.n	8016654 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x134>
      BufferRequirements* requirements = &requirements_[i];
 80165c6:	0115      	lsls	r5, r2, #4
 80165c8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80165cc:	eb0e 0905 	add.w	r9, lr, r5
      if ((t < requirements->first_time_used) ||
 80165d0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80165d4:	42b1      	cmp	r1, r6
 80165d6:	dc3b      	bgt.n	8016650 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x130>
 80165d8:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80165dc:	42b1      	cmp	r1, r6
 80165de:	db37      	blt.n	8016650 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x130>
      const int offset = buffer_offsets_[i];
 80165e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80165e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
      if (offset == -1) {
 80165e6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80165ea:	d031      	beq.n	8016650 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x130>
      const int size = requirements->size;
 80165ec:	f85e e005 	ldr.w	lr, [lr, r5]
      const int line_start = (offset * kLineWidth) / max_size;
 80165f0:	fb00 f501 	mul.w	r5, r0, r1
 80165f4:	f102 0957 	add.w	r9, r2, #87	; 0x57
 80165f8:	f102 0a30 	add.w	sl, r2, #48	; 0x30
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 80165fc:	4471      	add	r1, lr
      memory_use += size;
 80165fe:	44f4      	add	ip, lr
 8016600:	f102 0e1d 	add.w	lr, r2, #29
 8016604:	fa5f f989 	uxtb.w	r9, r9
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 8016608:	4341      	muls	r1, r0
 801660a:	fa5f fa8a 	uxtb.w	sl, sl
 801660e:	fa5f fe8e 	uxtb.w	lr, lr
      const int line_start = (offset * kLineWidth) / max_size;
 8016612:	fb95 f5f7 	sdiv	r5, r5, r7
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 8016616:	fb91 f1f7 	sdiv	r1, r1, r7
      for (int n = line_start; n < line_end; ++n) {
 801661a:	428d      	cmp	r5, r1
 801661c:	da18      	bge.n	8016650 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x130>
        if (line[n] == '.') {
 801661e:	f813 b005 	ldrb.w	fp, [r3, r5]
 8016622:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
 8016626:	d110      	bne.n	801664a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x12a>
  if (i < 10) {
 8016628:	2a09      	cmp	r2, #9
 801662a:	dc04      	bgt.n	8016636 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x116>
 801662c:	46d3      	mov	fp, sl
          line[n] = '!';
 801662e:	f803 b005 	strb.w	fp, [r3, r5]
      for (int n = line_start; n < line_end; ++n) {
 8016632:	3501      	adds	r5, #1
 8016634:	e7f1      	b.n	801661a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xfa>
  } else if (i < 36) {
 8016636:	2a23      	cmp	r2, #35	; 0x23
 8016638:	dc01      	bgt.n	801663e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x11e>
 801663a:	46cb      	mov	fp, r9
 801663c:	e7f7      	b.n	801662e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x10e>
  } else if (i < 62) {
 801663e:	2a3d      	cmp	r2, #61	; 0x3d
 8016640:	bfd4      	ite	le
 8016642:	46f3      	movle	fp, lr
 8016644:	f04f 0b2a 	movgt.w	fp, #42	; 0x2a
 8016648:	e7f1      	b.n	801662e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x10e>
          line[n] = '!';
 801664a:	f04f 0b21 	mov.w	fp, #33	; 0x21
 801664e:	e7ee      	b.n	801662e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x10e>
    for (int i = 0; i < buffer_count_; ++i) {
 8016650:	3201      	adds	r2, #1
 8016652:	e7b5      	b.n	80165c0 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xa0>
    line[kLineWidth] = 0;
 8016654:	2200      	movs	r2, #0
                (memory_use + 1023) / 1024);
 8016656:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 801665a:	480c      	ldr	r0, [pc, #48]	; (801668c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x16c>)
    line[kLineWidth] = 0;
 801665c:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 8016660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016664:	490a      	ldr	r1, [pc, #40]	; (8016690 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x170>)
 8016666:	fb9c f2f2 	sdiv	r2, ip, r2
 801666a:	2e09      	cmp	r6, #9
 801666c:	bfd8      	it	le
 801666e:	4601      	movle	r1, r0
 8016670:	9200      	str	r2, [sp, #0]
 8016672:	4632      	mov	r2, r6
  for (int t = 0; t <= max_time; ++t) {
 8016674:	3601      	adds	r6, #1
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 8016676:	4807      	ldr	r0, [pc, #28]	; (8016694 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x174>)
 8016678:	f7f4 fb1e 	bl	800acb8 <_Z11MicroPrintfPKcz>
  for (int t = 0; t <= max_time; ++t) {
 801667c:	45b0      	cmp	r8, r6
 801667e:	da94      	bge.n	80165aa <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x8a>
}
 8016680:	b01d      	add	sp, #116	; 0x74
 8016682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016686:	bf00      	nop
 8016688:	080fd16e 	.word	0x080fd16e
 801668c:	080fad0e 	.word	0x080fad0e
 8016690:	08018413 	.word	0x08018413
 8016694:	080fd1a9 	.word	0x080fd1a9

08016698 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
 8016698:	b570      	push	{r4, r5, r6, lr}
 801669a:	460c      	mov	r4, r1
 801669c:	4605      	mov	r5, r0
 801669e:	4616      	mov	r6, r2
  CalculateOffsetsIfNeeded();
 80166a0:	f7ff fe66 	bl	8016370 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 80166a4:	2c00      	cmp	r4, #0
 80166a6:	db02      	blt.n	80166ae <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x16>
 80166a8:	68ab      	ldr	r3, [r5, #8]
 80166aa:	42a3      	cmp	r3, r4
 80166ac:	dc06      	bgt.n	80166bc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x24>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
 80166ae:	4806      	ldr	r0, [pc, #24]	; (80166c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x30>)
 80166b0:	4621      	mov	r1, r4
 80166b2:	68aa      	ldr	r2, [r5, #8]
 80166b4:	f7f4 fb00 	bl	800acb8 <_Z11MicroPrintfPKcz>
 80166b8:	2001      	movs	r0, #1
                buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
 80166ba:	bd70      	pop	{r4, r5, r6, pc}
  *offset = buffer_offsets_[buffer_index];
 80166bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  return kTfLiteOk;
 80166be:	2000      	movs	r0, #0
  *offset = buffer_offsets_[buffer_index];
 80166c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80166c4:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 80166c6:	e7f8      	b.n	80166ba <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x22>
 80166c8:	080fd1b8 	.word	0x080fd1b8

080166cc <_ZN6tflite18MicroMemoryPlanner9AddBufferEiiii>:
  // This is to support offline memory planning from the flatbuffer metadata.
  // By default, it returns an error.
  virtual TfLiteStatus AddBuffer(int size, int first_time_used,
                                 int last_time_used, int offline_offset) {
    return kTfLiteError;
  }
 80166cc:	2001      	movs	r0, #1
 80166ce:	4770      	bx	lr

080166d0 <_ZN6tflite18MicroMemoryPlanner4InitEPhi>:
  // The default implementation is for the memory planner that does not need
  // scratch buffer and simply returns ok.
  virtual TfLiteStatus Init(unsigned char* scratch_buffer,
                            int scratch_buffer_size) {
    return kTfLiteOk;
  }
 80166d0:	2000      	movs	r0, #0
 80166d2:	4770      	bx	lr

080166d4 <_ZN6tflite18MicroMemoryPlanner15PrintMemoryPlanEv>:
  // after invocation, and False if it doesn't.
  virtual bool preserves_all_tensors() const = 0;

  virtual void PrintMemoryPlan() {
    // Default does nothing.
  }
 80166d4:	4770      	bx	lr

080166d6 <_ZNK6tflite19LinearMemoryPlanner21preserves_all_tensorsEv>:
  int GetBufferCount() override;
  TfLiteStatus GetOffsetForBuffer(int buffer_index, int* offset) override;

  // Returns True because the LinearMemoryPlanner preserves all tensors after
  // invocation.
  bool preserves_all_tensors() const override { return true; }
 80166d6:	2001      	movs	r0, #1
 80166d8:	4770      	bx	lr

080166da <_ZN6tflite19LinearMemoryPlannerD1Ev>:

namespace tflite {

LinearMemoryPlanner::LinearMemoryPlanner()
    : current_buffer_count_(0), next_free_offset_(0) {}
LinearMemoryPlanner::~LinearMemoryPlanner() {}
 80166da:	4770      	bx	lr

080166dc <_ZN6tflite19LinearMemoryPlanner20GetMaximumMemorySizeEv>:
  next_free_offset_ += size;
  ++current_buffer_count_;
  return kTfLiteOk;
}

size_t LinearMemoryPlanner::GetMaximumMemorySize() { return next_free_offset_; }
 80166dc:	f241 0308 	movw	r3, #4104	; 0x1008
 80166e0:	58c0      	ldr	r0, [r0, r3]
 80166e2:	4770      	bx	lr

080166e4 <_ZN6tflite19LinearMemoryPlanner14GetBufferCountEv>:

int LinearMemoryPlanner::GetBufferCount() { return current_buffer_count_; }
 80166e4:	f241 0304 	movw	r3, #4100	; 0x1004
 80166e8:	58c0      	ldr	r0, [r0, r3]
 80166ea:	4770      	bx	lr

080166ec <_ZN6tflite19LinearMemoryPlannerD0Ev>:
LinearMemoryPlanner::~LinearMemoryPlanner() {}
 80166ec:	b510      	push	{r4, lr}
 80166ee:	4604      	mov	r4, r0
 80166f0:	f241 010c 	movw	r1, #4108	; 0x100c
 80166f4:	f000 f89b 	bl	801682e <_ZdlPvj>
 80166f8:	4620      	mov	r0, r4
 80166fa:	bd10      	pop	{r4, pc}

080166fc <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii>:
  if (current_buffer_count_ >= kMaxBufferCount) {
 80166fc:	f241 0204 	movw	r2, #4100	; 0x1004
 8016700:	5883      	ldr	r3, [r0, r2]
 8016702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
                                            int last_time_used) {
 8016706:	b570      	push	{r4, r5, r6, lr}
  if (current_buffer_count_ >= kMaxBufferCount) {
 8016708:	db06      	blt.n	8016718 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x1c>
    MicroPrintf("Too many buffers (max is %d)", kMaxBufferCount);
 801670a:	4809      	ldr	r0, [pc, #36]	; (8016730 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x34>)
 801670c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016710:	f7f4 fad2 	bl	800acb8 <_Z11MicroPrintfPKcz>
 8016714:	2001      	movs	r0, #1
}
 8016716:	bd70      	pop	{r4, r5, r6, pc}
  buffer_offsets_[current_buffer_count_] = next_free_offset_;
 8016718:	f241 0408 	movw	r4, #4104	; 0x1008
 801671c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
  ++current_buffer_count_;
 8016720:	3301      	adds	r3, #1
  buffer_offsets_[current_buffer_count_] = next_free_offset_;
 8016722:	5905      	ldr	r5, [r0, r4]
  next_free_offset_ += size;
 8016724:	4429      	add	r1, r5
  buffer_offsets_[current_buffer_count_] = next_free_offset_;
 8016726:	6075      	str	r5, [r6, #4]
  next_free_offset_ += size;
 8016728:	5101      	str	r1, [r0, r4]
  ++current_buffer_count_;
 801672a:	5083      	str	r3, [r0, r2]
  return kTfLiteOk;
 801672c:	2000      	movs	r0, #0
 801672e:	e7f2      	b.n	8016716 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x1a>
 8016730:	080fd1e1 	.word	0x080fd1e1

08016734 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus LinearMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
 8016734:	b508      	push	{r3, lr}
  if ((buffer_index < 0) || (buffer_index >= current_buffer_count_)) {
 8016736:	2900      	cmp	r1, #0
 8016738:	f241 0304 	movw	r3, #4100	; 0x1004
 801673c:	58c3      	ldr	r3, [r0, r3]
 801673e:	db01      	blt.n	8016744 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x10>
 8016740:	4299      	cmp	r1, r3
 8016742:	db05      	blt.n	8016750 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x1c>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
 8016744:	4805      	ldr	r0, [pc, #20]	; (801675c <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x28>)
 8016746:	461a      	mov	r2, r3
 8016748:	f7f4 fab6 	bl	800acb8 <_Z11MicroPrintfPKcz>
 801674c:	2001      	movs	r0, #1
                current_buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
 801674e:	bd08      	pop	{r3, pc}
  *offset = buffer_offsets_[buffer_index];
 8016750:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8016754:	6843      	ldr	r3, [r0, #4]
  return kTfLiteOk;
 8016756:	2000      	movs	r0, #0
  *offset = buffer_offsets_[buffer_index];
 8016758:	6013      	str	r3, [r2, #0]
  return kTfLiteOk;
 801675a:	e7f8      	b.n	801674e <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x1a>
 801675c:	080fd1b8 	.word	0x080fd1b8

08016760 <_ZN6tflite19LinearMemoryPlannerC1Ev>:
    : current_buffer_count_(0), next_free_offset_(0) {}
 8016760:	4a04      	ldr	r2, [pc, #16]	; (8016774 <_ZN6tflite19LinearMemoryPlannerC1Ev+0x14>)
 8016762:	f241 0104 	movw	r1, #4100	; 0x1004
 8016766:	6002      	str	r2, [r0, #0]
 8016768:	2200      	movs	r2, #0
 801676a:	5042      	str	r2, [r0, r1]
 801676c:	f241 0108 	movw	r1, #4104	; 0x1008
 8016770:	5042      	str	r2, [r0, r1]
 8016772:	4770      	bx	lr
 8016774:	080fd238 	.word	0x080fd238

08016778 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>:
#include "tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "tensorflow/lite/micro/tflite_bridge/micro_error_reporter.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type) {
 8016778:	b538      	push	{r3, r4, r5, lr}
 801677a:	4604      	mov	r4, r0
 801677c:	460d      	mov	r5, r1
  return ConvertTensorType(tensor_type, type, tflite::GetMicroErrorReporter());
 801677e:	f000 f827 	bl	80167d0 <_ZN6tflite21GetMicroErrorReporterEv>
 8016782:	4602      	mov	r2, r0
 8016784:	4629      	mov	r1, r5
 8016786:	4620      	mov	r0, r4
}
 8016788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return ConvertTensorType(tensor_type, type, tflite::GetMicroErrorReporter());
 801678c:	f7f0 bf5e 	b.w	800764c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>

08016790 <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>:

TfLiteStatus CallBuiltinParseFunction(TfLiteBridgeBuiltinParseFunction parser,
                                      const Operator* op,
                                      BuiltinDataAllocator* allocator,
                                      void** builtin_data) {
 8016790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016794:	460d      	mov	r5, r1
 8016796:	4604      	mov	r4, r0
 8016798:	4616      	mov	r6, r2
 801679a:	461f      	mov	r7, r3
  return parser(op, tflite::GetMicroErrorReporter(), allocator, builtin_data);
 801679c:	f000 f818 	bl	80167d0 <_ZN6tflite21GetMicroErrorReporterEv>
 80167a0:	46a4      	mov	ip, r4
 80167a2:	463b      	mov	r3, r7
 80167a4:	4632      	mov	r2, r6
 80167a6:	4601      	mov	r1, r0
 80167a8:	4628      	mov	r0, r5
}
 80167aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return parser(op, tflite::GetMicroErrorReporter(), allocator, builtin_data);
 80167ae:	4760      	bx	ip

080167b0 <_ZN6tflite18MicroErrorReporterD1Ev>:
namespace tflite {
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();
class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 80167b0:	4770      	bx	lr

080167b2 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 80167b2:	4608      	mov	r0, r1
  VMicroPrintf(format, args);
 80167b4:	4611      	mov	r1, r2
int MicroErrorReporter::Report(const char* format, va_list args) {
 80167b6:	b508      	push	{r3, lr}
  VMicroPrintf(format, args);
 80167b8:	f7f4 fa74 	bl	800aca4 <_Z12VMicroPrintfPKcSt9__va_list>
  return 0;
}
 80167bc:	2000      	movs	r0, #0
 80167be:	bd08      	pop	{r3, pc}

080167c0 <_ZN6tflite18MicroErrorReporterD0Ev>:
 80167c0:	b510      	push	{r4, lr}
 80167c2:	4604      	mov	r4, r0
 80167c4:	2104      	movs	r1, #4
 80167c6:	f000 f832 	bl	801682e <_ZdlPvj>
 80167ca:	4620      	mov	r0, r4
 80167cc:	bd10      	pop	{r4, pc}
	...

080167d0 <_ZN6tflite21GetMicroErrorReporterEv>:
  if (error_reporter_ == nullptr) {
 80167d0:	4b04      	ldr	r3, [pc, #16]	; (80167e4 <_ZN6tflite21GetMicroErrorReporterEv+0x14>)
 80167d2:	681a      	ldr	r2, [r3, #0]
 80167d4:	b91a      	cbnz	r2, 80167de <_ZN6tflite21GetMicroErrorReporterEv+0xe>
class MicroErrorReporter : public ErrorReporter {
 80167d6:	4a04      	ldr	r2, [pc, #16]	; (80167e8 <_ZN6tflite21GetMicroErrorReporterEv+0x18>)
 80167d8:	4904      	ldr	r1, [pc, #16]	; (80167ec <_ZN6tflite21GetMicroErrorReporterEv+0x1c>)
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
 80167da:	601a      	str	r2, [r3, #0]
 80167dc:	6011      	str	r1, [r2, #0]
}
 80167de:	6818      	ldr	r0, [r3, #0]
 80167e0:	4770      	bx	lr
 80167e2:	bf00      	nop
 80167e4:	2004d930 	.word	0x2004d930
 80167e8:	2004d934 	.word	0x2004d934
 80167ec:	080fd268 	.word	0x080fd268

080167f0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 80167f0:	b508      	push	{r3, lr}
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 80167f2:	b908      	cbnz	r0, 80167f8 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x8>
 80167f4:	f000 faa6 	bl	8016d44 <abort>
    return data_ - ReadScalar<soffset_t>(data_);
 80167f8:	6803      	ldr	r3, [r0, #0]
 80167fa:	1ac3      	subs	r3, r0, r3
 80167fc:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80167fe:	2a0a      	cmp	r2, #10
 8016800:	d909      	bls.n	8016816 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x26>
 8016802:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8016804:	b102      	cbz	r2, 8016808 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x18>
 8016806:	5882      	ldr	r2, [r0, r2]
 8016808:	889b      	ldrh	r3, [r3, #4]
 801680a:	b153      	cbz	r3, 8016822 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x32>
 801680c:	56c0      	ldrsb	r0, [r0, r3]

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 801680e:	4290      	cmp	r0, r2
 8016810:	bfb8      	it	lt
 8016812:	4610      	movlt	r0, r2
}
 8016814:	bd08      	pop	{r3, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8016816:	2a04      	cmp	r2, #4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8016818:	f04f 0200 	mov.w	r2, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 801681c:	d8f4      	bhi.n	8016808 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x18>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 801681e:	4610      	mov	r0, r2
 8016820:	e7f5      	b.n	801680e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1e>
 8016822:	4618      	mov	r0, r3
 8016824:	e7f3      	b.n	801680e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1e>

08016826 <_ZdaPv>:
 8016826:	f000 b82d 	b.w	8016884 <_ZdlPv>

0801682a <_Znaj>:
 801682a:	f000 b802 	b.w	8016832 <_Znwj>

0801682e <_ZdlPvj>:
 801682e:	f000 b829 	b.w	8016884 <_ZdlPv>

08016832 <_Znwj>:
 8016832:	b510      	push	{r4, lr}
 8016834:	2800      	cmp	r0, #0
 8016836:	bf14      	ite	ne
 8016838:	4604      	movne	r4, r0
 801683a:	2401      	moveq	r4, #1
 801683c:	4620      	mov	r0, r4
 801683e:	f000 fae9 	bl	8016e14 <malloc>
 8016842:	b930      	cbnz	r0, 8016852 <_Znwj+0x20>
 8016844:	f000 f816 	bl	8016874 <_ZSt15get_new_handlerv>
 8016848:	b908      	cbnz	r0, 801684e <_Znwj+0x1c>
 801684a:	f000 fa7b 	bl	8016d44 <abort>
 801684e:	4780      	blx	r0
 8016850:	e7f4      	b.n	801683c <_Znwj+0xa>
 8016852:	bd10      	pop	{r4, pc}

08016854 <__cxa_guard_acquire>:
 8016854:	6803      	ldr	r3, [r0, #0]
 8016856:	07db      	lsls	r3, r3, #31
 8016858:	d406      	bmi.n	8016868 <__cxa_guard_acquire+0x14>
 801685a:	7843      	ldrb	r3, [r0, #1]
 801685c:	b103      	cbz	r3, 8016860 <__cxa_guard_acquire+0xc>
 801685e:	deff      	udf	#255	; 0xff
 8016860:	2301      	movs	r3, #1
 8016862:	7043      	strb	r3, [r0, #1]
 8016864:	4618      	mov	r0, r3
 8016866:	4770      	bx	lr
 8016868:	2000      	movs	r0, #0
 801686a:	4770      	bx	lr

0801686c <__cxa_guard_release>:
 801686c:	2301      	movs	r3, #1
 801686e:	6003      	str	r3, [r0, #0]
 8016870:	4770      	bx	lr
	...

08016874 <_ZSt15get_new_handlerv>:
 8016874:	4b02      	ldr	r3, [pc, #8]	; (8016880 <_ZSt15get_new_handlerv+0xc>)
 8016876:	6818      	ldr	r0, [r3, #0]
 8016878:	f3bf 8f5b 	dmb	ish
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop
 8016880:	2004d938 	.word	0x2004d938

08016884 <_ZdlPv>:
 8016884:	f000 bace 	b.w	8016e24 <free>

08016888 <floor>:
 8016888:	ec51 0b10 	vmov	r0, r1, d0
 801688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016890:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016894:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016898:	2e13      	cmp	r6, #19
 801689a:	460c      	mov	r4, r1
 801689c:	ee10 5a10 	vmov	r5, s0
 80168a0:	4680      	mov	r8, r0
 80168a2:	dc34      	bgt.n	801690e <floor+0x86>
 80168a4:	2e00      	cmp	r6, #0
 80168a6:	da16      	bge.n	80168d6 <floor+0x4e>
 80168a8:	a335      	add	r3, pc, #212	; (adr r3, 8016980 <floor+0xf8>)
 80168aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ae:	f7e9 fd0f 	bl	80002d0 <__adddf3>
 80168b2:	2200      	movs	r2, #0
 80168b4:	2300      	movs	r3, #0
 80168b6:	f7ea f951 	bl	8000b5c <__aeabi_dcmpgt>
 80168ba:	b148      	cbz	r0, 80168d0 <floor+0x48>
 80168bc:	2c00      	cmp	r4, #0
 80168be:	da59      	bge.n	8016974 <floor+0xec>
 80168c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80168c4:	4a30      	ldr	r2, [pc, #192]	; (8016988 <floor+0x100>)
 80168c6:	432b      	orrs	r3, r5
 80168c8:	2500      	movs	r5, #0
 80168ca:	42ab      	cmp	r3, r5
 80168cc:	bf18      	it	ne
 80168ce:	4614      	movne	r4, r2
 80168d0:	4621      	mov	r1, r4
 80168d2:	4628      	mov	r0, r5
 80168d4:	e025      	b.n	8016922 <floor+0x9a>
 80168d6:	4f2d      	ldr	r7, [pc, #180]	; (801698c <floor+0x104>)
 80168d8:	4137      	asrs	r7, r6
 80168da:	ea01 0307 	and.w	r3, r1, r7
 80168de:	4303      	orrs	r3, r0
 80168e0:	d01f      	beq.n	8016922 <floor+0x9a>
 80168e2:	a327      	add	r3, pc, #156	; (adr r3, 8016980 <floor+0xf8>)
 80168e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e8:	f7e9 fcf2 	bl	80002d0 <__adddf3>
 80168ec:	2200      	movs	r2, #0
 80168ee:	2300      	movs	r3, #0
 80168f0:	f7ea f934 	bl	8000b5c <__aeabi_dcmpgt>
 80168f4:	2800      	cmp	r0, #0
 80168f6:	d0eb      	beq.n	80168d0 <floor+0x48>
 80168f8:	2c00      	cmp	r4, #0
 80168fa:	bfbe      	ittt	lt
 80168fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016900:	fa43 f606 	asrlt.w	r6, r3, r6
 8016904:	19a4      	addlt	r4, r4, r6
 8016906:	ea24 0407 	bic.w	r4, r4, r7
 801690a:	2500      	movs	r5, #0
 801690c:	e7e0      	b.n	80168d0 <floor+0x48>
 801690e:	2e33      	cmp	r6, #51	; 0x33
 8016910:	dd0b      	ble.n	801692a <floor+0xa2>
 8016912:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016916:	d104      	bne.n	8016922 <floor+0x9a>
 8016918:	ee10 2a10 	vmov	r2, s0
 801691c:	460b      	mov	r3, r1
 801691e:	f7e9 fcd7 	bl	80002d0 <__adddf3>
 8016922:	ec41 0b10 	vmov	d0, r0, r1
 8016926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801692a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801692e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016932:	fa23 f707 	lsr.w	r7, r3, r7
 8016936:	4207      	tst	r7, r0
 8016938:	d0f3      	beq.n	8016922 <floor+0x9a>
 801693a:	a311      	add	r3, pc, #68	; (adr r3, 8016980 <floor+0xf8>)
 801693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016940:	f7e9 fcc6 	bl	80002d0 <__adddf3>
 8016944:	2200      	movs	r2, #0
 8016946:	2300      	movs	r3, #0
 8016948:	f7ea f908 	bl	8000b5c <__aeabi_dcmpgt>
 801694c:	2800      	cmp	r0, #0
 801694e:	d0bf      	beq.n	80168d0 <floor+0x48>
 8016950:	2c00      	cmp	r4, #0
 8016952:	da02      	bge.n	801695a <floor+0xd2>
 8016954:	2e14      	cmp	r6, #20
 8016956:	d103      	bne.n	8016960 <floor+0xd8>
 8016958:	3401      	adds	r4, #1
 801695a:	ea25 0507 	bic.w	r5, r5, r7
 801695e:	e7b7      	b.n	80168d0 <floor+0x48>
 8016960:	2301      	movs	r3, #1
 8016962:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016966:	fa03 f606 	lsl.w	r6, r3, r6
 801696a:	4435      	add	r5, r6
 801696c:	4545      	cmp	r5, r8
 801696e:	bf38      	it	cc
 8016970:	18e4      	addcc	r4, r4, r3
 8016972:	e7f2      	b.n	801695a <floor+0xd2>
 8016974:	2500      	movs	r5, #0
 8016976:	462c      	mov	r4, r5
 8016978:	e7aa      	b.n	80168d0 <floor+0x48>
 801697a:	bf00      	nop
 801697c:	f3af 8000 	nop.w
 8016980:	8800759c 	.word	0x8800759c
 8016984:	7e37e43c 	.word	0x7e37e43c
 8016988:	bff00000 	.word	0xbff00000
 801698c:	000fffff 	.word	0x000fffff

08016990 <frexp>:
 8016990:	b570      	push	{r4, r5, r6, lr}
 8016992:	2100      	movs	r1, #0
 8016994:	ec55 4b10 	vmov	r4, r5, d0
 8016998:	6001      	str	r1, [r0, #0]
 801699a:	4916      	ldr	r1, [pc, #88]	; (80169f4 <frexp+0x64>)
 801699c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80169a0:	428b      	cmp	r3, r1
 80169a2:	4606      	mov	r6, r0
 80169a4:	462a      	mov	r2, r5
 80169a6:	dc22      	bgt.n	80169ee <frexp+0x5e>
 80169a8:	ee10 1a10 	vmov	r1, s0
 80169ac:	4319      	orrs	r1, r3
 80169ae:	d01e      	beq.n	80169ee <frexp+0x5e>
 80169b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80169b4:	da0d      	bge.n	80169d2 <frexp+0x42>
 80169b6:	2200      	movs	r2, #0
 80169b8:	4b0f      	ldr	r3, [pc, #60]	; (80169f8 <frexp+0x68>)
 80169ba:	ee10 0a10 	vmov	r0, s0
 80169be:	4629      	mov	r1, r5
 80169c0:	f7e9 fe3c 	bl	800063c <__aeabi_dmul>
 80169c4:	460a      	mov	r2, r1
 80169c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80169ca:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80169ce:	4604      	mov	r4, r0
 80169d0:	6031      	str	r1, [r6, #0]
 80169d2:	6831      	ldr	r1, [r6, #0]
 80169d4:	151b      	asrs	r3, r3, #20
 80169d6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80169da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80169de:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80169e2:	440b      	add	r3, r1
 80169e4:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80169e8:	6033      	str	r3, [r6, #0]
 80169ea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80169ee:	ec45 4b10 	vmov	d0, r4, r5
 80169f2:	bd70      	pop	{r4, r5, r6, pc}
 80169f4:	7fefffff 	.word	0x7fefffff
 80169f8:	43500000 	.word	0x43500000

080169fc <round>:
 80169fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169fe:	ec57 6b10 	vmov	r6, r7, d0
 8016a02:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8016a06:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8016a0a:	2c13      	cmp	r4, #19
 8016a0c:	463b      	mov	r3, r7
 8016a0e:	463d      	mov	r5, r7
 8016a10:	dc17      	bgt.n	8016a42 <round+0x46>
 8016a12:	2c00      	cmp	r4, #0
 8016a14:	da09      	bge.n	8016a2a <round+0x2e>
 8016a16:	3401      	adds	r4, #1
 8016a18:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8016a1c:	d103      	bne.n	8016a26 <round+0x2a>
 8016a1e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016a22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016a26:	2100      	movs	r1, #0
 8016a28:	e02c      	b.n	8016a84 <round+0x88>
 8016a2a:	4a18      	ldr	r2, [pc, #96]	; (8016a8c <round+0x90>)
 8016a2c:	4122      	asrs	r2, r4
 8016a2e:	4217      	tst	r7, r2
 8016a30:	d100      	bne.n	8016a34 <round+0x38>
 8016a32:	b19e      	cbz	r6, 8016a5c <round+0x60>
 8016a34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016a38:	4123      	asrs	r3, r4
 8016a3a:	442b      	add	r3, r5
 8016a3c:	ea23 0302 	bic.w	r3, r3, r2
 8016a40:	e7f1      	b.n	8016a26 <round+0x2a>
 8016a42:	2c33      	cmp	r4, #51	; 0x33
 8016a44:	dd0d      	ble.n	8016a62 <round+0x66>
 8016a46:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8016a4a:	d107      	bne.n	8016a5c <round+0x60>
 8016a4c:	4630      	mov	r0, r6
 8016a4e:	4639      	mov	r1, r7
 8016a50:	ee10 2a10 	vmov	r2, s0
 8016a54:	f7e9 fc3c 	bl	80002d0 <__adddf3>
 8016a58:	4606      	mov	r6, r0
 8016a5a:	460f      	mov	r7, r1
 8016a5c:	ec47 6b10 	vmov	d0, r6, r7
 8016a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a62:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8016a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a6a:	40d0      	lsrs	r0, r2
 8016a6c:	4206      	tst	r6, r0
 8016a6e:	d0f5      	beq.n	8016a5c <round+0x60>
 8016a70:	2201      	movs	r2, #1
 8016a72:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8016a76:	fa02 f404 	lsl.w	r4, r2, r4
 8016a7a:	1931      	adds	r1, r6, r4
 8016a7c:	bf28      	it	cs
 8016a7e:	189b      	addcs	r3, r3, r2
 8016a80:	ea21 0100 	bic.w	r1, r1, r0
 8016a84:	461f      	mov	r7, r3
 8016a86:	460e      	mov	r6, r1
 8016a88:	e7e8      	b.n	8016a5c <round+0x60>
 8016a8a:	bf00      	nop
 8016a8c:	000fffff 	.word	0x000fffff

08016a90 <expf>:
 8016a90:	b530      	push	{r4, r5, lr}
 8016a92:	ed2d 8b02 	vpush	{d8}
 8016a96:	4d35      	ldr	r5, [pc, #212]	; (8016b6c <expf+0xdc>)
 8016a98:	b08b      	sub	sp, #44	; 0x2c
 8016a9a:	eeb0 8a40 	vmov.f32	s16, s0
 8016a9e:	f000 f871 	bl	8016b84 <__ieee754_expf>
 8016aa2:	f995 3000 	ldrsb.w	r3, [r5]
 8016aa6:	3301      	adds	r3, #1
 8016aa8:	ee10 4a10 	vmov	r4, s0
 8016aac:	d030      	beq.n	8016b10 <expf+0x80>
 8016aae:	eeb0 0a48 	vmov.f32	s0, s16
 8016ab2:	f000 f93d 	bl	8016d30 <finitef>
 8016ab6:	b358      	cbz	r0, 8016b10 <expf+0x80>
 8016ab8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8016b70 <expf+0xe0>
 8016abc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac4:	dd35      	ble.n	8016b32 <expf+0xa2>
 8016ac6:	2303      	movs	r3, #3
 8016ac8:	9300      	str	r3, [sp, #0]
 8016aca:	4b2a      	ldr	r3, [pc, #168]	; (8016b74 <expf+0xe4>)
 8016acc:	9301      	str	r3, [sp, #4]
 8016ace:	ee18 0a10 	vmov	r0, s16
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	9308      	str	r3, [sp, #32]
 8016ad6:	f7e9 fd59 	bl	800058c <__aeabi_f2d>
 8016ada:	f995 3000 	ldrsb.w	r3, [r5]
 8016ade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ae6:	b9cb      	cbnz	r3, 8016b1c <expf+0x8c>
 8016ae8:	4b23      	ldr	r3, [pc, #140]	; (8016b78 <expf+0xe8>)
 8016aea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016aee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016af2:	4668      	mov	r0, sp
 8016af4:	f000 f91a 	bl	8016d2c <matherr>
 8016af8:	b1b0      	cbz	r0, 8016b28 <expf+0x98>
 8016afa:	9b08      	ldr	r3, [sp, #32]
 8016afc:	b11b      	cbz	r3, 8016b06 <expf+0x76>
 8016afe:	f000 f94d 	bl	8016d9c <__errno>
 8016b02:	9b08      	ldr	r3, [sp, #32]
 8016b04:	6003      	str	r3, [r0, #0]
 8016b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b0a:	f7ea f859 	bl	8000bc0 <__aeabi_d2f>
 8016b0e:	4604      	mov	r4, r0
 8016b10:	ee00 4a10 	vmov	s0, r4
 8016b14:	b00b      	add	sp, #44	; 0x2c
 8016b16:	ecbd 8b02 	vpop	{d8}
 8016b1a:	bd30      	pop	{r4, r5, pc}
 8016b1c:	4917      	ldr	r1, [pc, #92]	; (8016b7c <expf+0xec>)
 8016b1e:	2000      	movs	r0, #0
 8016b20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016b24:	2b02      	cmp	r3, #2
 8016b26:	d1e4      	bne.n	8016af2 <expf+0x62>
 8016b28:	f000 f938 	bl	8016d9c <__errno>
 8016b2c:	2322      	movs	r3, #34	; 0x22
 8016b2e:	6003      	str	r3, [r0, #0]
 8016b30:	e7e3      	b.n	8016afa <expf+0x6a>
 8016b32:	eddf 7a13 	vldr	s15, [pc, #76]	; 8016b80 <expf+0xf0>
 8016b36:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b3e:	d5e7      	bpl.n	8016b10 <expf+0x80>
 8016b40:	2304      	movs	r3, #4
 8016b42:	9300      	str	r3, [sp, #0]
 8016b44:	4b0b      	ldr	r3, [pc, #44]	; (8016b74 <expf+0xe4>)
 8016b46:	9301      	str	r3, [sp, #4]
 8016b48:	ee18 0a10 	vmov	r0, s16
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	9308      	str	r3, [sp, #32]
 8016b50:	f7e9 fd1c 	bl	800058c <__aeabi_f2d>
 8016b54:	2300      	movs	r3, #0
 8016b56:	2200      	movs	r2, #0
 8016b58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016b64:	f995 3000 	ldrsb.w	r3, [r5]
 8016b68:	e7dc      	b.n	8016b24 <expf+0x94>
 8016b6a:	bf00      	nop
 8016b6c:	20000024 	.word	0x20000024
 8016b70:	42b17180 	.word	0x42b17180
 8016b74:	080fd274 	.word	0x080fd274
 8016b78:	47efffff 	.word	0x47efffff
 8016b7c:	7ff00000 	.word	0x7ff00000
 8016b80:	c2cff1b5 	.word	0xc2cff1b5

08016b84 <__ieee754_expf>:
 8016b84:	ee10 2a10 	vmov	r2, s0
 8016b88:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016b8c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016b90:	d902      	bls.n	8016b98 <__ieee754_expf+0x14>
 8016b92:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016b96:	4770      	bx	lr
 8016b98:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8016b9c:	d106      	bne.n	8016bac <__ieee754_expf+0x28>
 8016b9e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8016ce4 <__ieee754_expf+0x160>
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	bf18      	it	ne
 8016ba6:	eeb0 0a67 	vmovne.f32	s0, s15
 8016baa:	4770      	bx	lr
 8016bac:	484e      	ldr	r0, [pc, #312]	; (8016ce8 <__ieee754_expf+0x164>)
 8016bae:	4282      	cmp	r2, r0
 8016bb0:	dd04      	ble.n	8016bbc <__ieee754_expf+0x38>
 8016bb2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8016cec <__ieee754_expf+0x168>
 8016bb6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016bba:	4770      	bx	lr
 8016bbc:	2a00      	cmp	r2, #0
 8016bbe:	da03      	bge.n	8016bc8 <__ieee754_expf+0x44>
 8016bc0:	4a4b      	ldr	r2, [pc, #300]	; (8016cf0 <__ieee754_expf+0x16c>)
 8016bc2:	4291      	cmp	r1, r2
 8016bc4:	f200 808a 	bhi.w	8016cdc <__ieee754_expf+0x158>
 8016bc8:	4a4a      	ldr	r2, [pc, #296]	; (8016cf4 <__ieee754_expf+0x170>)
 8016bca:	4291      	cmp	r1, r2
 8016bcc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016bd0:	d954      	bls.n	8016c7c <__ieee754_expf+0xf8>
 8016bd2:	4a49      	ldr	r2, [pc, #292]	; (8016cf8 <__ieee754_expf+0x174>)
 8016bd4:	4291      	cmp	r1, r2
 8016bd6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8016bda:	d836      	bhi.n	8016c4a <__ieee754_expf+0xc6>
 8016bdc:	4947      	ldr	r1, [pc, #284]	; (8016cfc <__ieee754_expf+0x178>)
 8016bde:	4411      	add	r1, r2
 8016be0:	ed91 7a00 	vldr	s14, [r1]
 8016be4:	4946      	ldr	r1, [pc, #280]	; (8016d00 <__ieee754_expf+0x17c>)
 8016be6:	440a      	add	r2, r1
 8016be8:	edd2 7a00 	vldr	s15, [r2]
 8016bec:	ee30 7a47 	vsub.f32	s14, s0, s14
 8016bf0:	f1c3 0201 	rsb	r2, r3, #1
 8016bf4:	1ad2      	subs	r2, r2, r3
 8016bf6:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016bfa:	ee60 6a00 	vmul.f32	s13, s0, s0
 8016bfe:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016d04 <__ieee754_expf+0x180>
 8016c02:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8016d08 <__ieee754_expf+0x184>
 8016c06:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8016c0a:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016d0c <__ieee754_expf+0x188>
 8016c0e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8016c12:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8016d10 <__ieee754_expf+0x18c>
 8016c16:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8016c1a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8016d14 <__ieee754_expf+0x190>
 8016c1e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8016c22:	eeb0 5a40 	vmov.f32	s10, s0
 8016c26:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8016c2a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016c2e:	eef0 6a45 	vmov.f32	s13, s10
 8016c32:	ee20 5a05 	vmul.f32	s10, s0, s10
 8016c36:	bb92      	cbnz	r2, 8016c9e <__ieee754_expf+0x11a>
 8016c38:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8016c3c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8016c40:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016c44:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016c48:	4770      	bx	lr
 8016c4a:	4b33      	ldr	r3, [pc, #204]	; (8016d18 <__ieee754_expf+0x194>)
 8016c4c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016d1c <__ieee754_expf+0x198>
 8016c50:	4413      	add	r3, r2
 8016c52:	edd3 7a00 	vldr	s15, [r3]
 8016c56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016c5a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8016d20 <__ieee754_expf+0x19c>
 8016c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c62:	ee17 2a90 	vmov	r2, s15
 8016c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c6a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8016c72:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016d24 <__ieee754_expf+0x1a0>
 8016c76:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016c7a:	e7bc      	b.n	8016bf6 <__ieee754_expf+0x72>
 8016c7c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8016c80:	d20b      	bcs.n	8016c9a <__ieee754_expf+0x116>
 8016c82:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8016cec <__ieee754_expf+0x168>
 8016c86:	ee70 6a26 	vadd.f32	s13, s0, s13
 8016c8a:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c92:	dd02      	ble.n	8016c9a <__ieee754_expf+0x116>
 8016c94:	ee30 0a06 	vadd.f32	s0, s0, s12
 8016c98:	4770      	bx	lr
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	e7ad      	b.n	8016bfa <__ieee754_expf+0x76>
 8016c9e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8016ca2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8016ca6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8016caa:	bfb8      	it	lt
 8016cac:	3264      	addlt	r2, #100	; 0x64
 8016cae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016cb2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016cb6:	ee76 7a40 	vsub.f32	s15, s12, s0
 8016cba:	ee17 3a90 	vmov	r3, s15
 8016cbe:	bfab      	itete	ge
 8016cc0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8016cc4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016cc8:	ee00 3a10 	vmovge	s0, r3
 8016ccc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8016d28 <__ieee754_expf+0x1a4>
 8016cd0:	bfbc      	itt	lt
 8016cd2:	ee00 3a10 	vmovlt	s0, r3
 8016cd6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8016cda:	4770      	bx	lr
 8016cdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016ce4 <__ieee754_expf+0x160>
 8016ce0:	4770      	bx	lr
 8016ce2:	bf00      	nop
 8016ce4:	00000000 	.word	0x00000000
 8016ce8:	42b17217 	.word	0x42b17217
 8016cec:	7149f2ca 	.word	0x7149f2ca
 8016cf0:	42cff1b5 	.word	0x42cff1b5
 8016cf4:	3eb17218 	.word	0x3eb17218
 8016cf8:	3f851591 	.word	0x3f851591
 8016cfc:	080fd284 	.word	0x080fd284
 8016d00:	080fd28c 	.word	0x080fd28c
 8016d04:	3331bb4c 	.word	0x3331bb4c
 8016d08:	b5ddea0e 	.word	0xb5ddea0e
 8016d0c:	388ab355 	.word	0x388ab355
 8016d10:	bb360b61 	.word	0xbb360b61
 8016d14:	3e2aaaab 	.word	0x3e2aaaab
 8016d18:	080fd27c 	.word	0x080fd27c
 8016d1c:	3fb8aa3b 	.word	0x3fb8aa3b
 8016d20:	3f317180 	.word	0x3f317180
 8016d24:	3717f7d1 	.word	0x3717f7d1
 8016d28:	0d800000 	.word	0x0d800000

08016d2c <matherr>:
 8016d2c:	2000      	movs	r0, #0
 8016d2e:	4770      	bx	lr

08016d30 <finitef>:
 8016d30:	ee10 3a10 	vmov	r3, s0
 8016d34:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8016d38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016d3c:	bfac      	ite	ge
 8016d3e:	2000      	movge	r0, #0
 8016d40:	2001      	movlt	r0, #1
 8016d42:	4770      	bx	lr

08016d44 <abort>:
 8016d44:	b508      	push	{r3, lr}
 8016d46:	2006      	movs	r0, #6
 8016d48:	f000 fc48 	bl	80175dc <raise>
 8016d4c:	2001      	movs	r0, #1
 8016d4e:	f7ed fbbb 	bl	80044c8 <_exit>
	...

08016d54 <__assert_func>:
 8016d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d56:	461c      	mov	r4, r3
 8016d58:	4b09      	ldr	r3, [pc, #36]	; (8016d80 <__assert_func+0x2c>)
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	4605      	mov	r5, r0
 8016d5e:	68d8      	ldr	r0, [r3, #12]
 8016d60:	b152      	cbz	r2, 8016d78 <__assert_func+0x24>
 8016d62:	4b08      	ldr	r3, [pc, #32]	; (8016d84 <__assert_func+0x30>)
 8016d64:	9100      	str	r1, [sp, #0]
 8016d66:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016d6a:	4907      	ldr	r1, [pc, #28]	; (8016d88 <__assert_func+0x34>)
 8016d6c:	462b      	mov	r3, r5
 8016d6e:	4622      	mov	r2, r4
 8016d70:	f000 f81a 	bl	8016da8 <fiprintf>
 8016d74:	f7ff ffe6 	bl	8016d44 <abort>
 8016d78:	4b04      	ldr	r3, [pc, #16]	; (8016d8c <__assert_func+0x38>)
 8016d7a:	461a      	mov	r2, r3
 8016d7c:	e7f2      	b.n	8016d64 <__assert_func+0x10>
 8016d7e:	bf00      	nop
 8016d80:	20000028 	.word	0x20000028
 8016d84:	080fd294 	.word	0x080fd294
 8016d88:	080fd2a1 	.word	0x080fd2a1
 8016d8c:	08018413 	.word	0x08018413

08016d90 <atexit>:
 8016d90:	2300      	movs	r3, #0
 8016d92:	4601      	mov	r1, r0
 8016d94:	461a      	mov	r2, r3
 8016d96:	4618      	mov	r0, r3
 8016d98:	f000 bd16 	b.w	80177c8 <__register_exitproc>

08016d9c <__errno>:
 8016d9c:	4b01      	ldr	r3, [pc, #4]	; (8016da4 <__errno+0x8>)
 8016d9e:	6818      	ldr	r0, [r3, #0]
 8016da0:	4770      	bx	lr
 8016da2:	bf00      	nop
 8016da4:	20000028 	.word	0x20000028

08016da8 <fiprintf>:
 8016da8:	b40e      	push	{r1, r2, r3}
 8016daa:	b503      	push	{r0, r1, lr}
 8016dac:	4601      	mov	r1, r0
 8016dae:	ab03      	add	r3, sp, #12
 8016db0:	4805      	ldr	r0, [pc, #20]	; (8016dc8 <fiprintf+0x20>)
 8016db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016db6:	6800      	ldr	r0, [r0, #0]
 8016db8:	9301      	str	r3, [sp, #4]
 8016dba:	f000 f92f 	bl	801701c <_vfiprintf_r>
 8016dbe:	b002      	add	sp, #8
 8016dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016dc4:	b003      	add	sp, #12
 8016dc6:	4770      	bx	lr
 8016dc8:	20000028 	.word	0x20000028

08016dcc <__libc_init_array>:
 8016dcc:	b570      	push	{r4, r5, r6, lr}
 8016dce:	4e0d      	ldr	r6, [pc, #52]	; (8016e04 <__libc_init_array+0x38>)
 8016dd0:	4c0d      	ldr	r4, [pc, #52]	; (8016e08 <__libc_init_array+0x3c>)
 8016dd2:	1ba4      	subs	r4, r4, r6
 8016dd4:	10a4      	asrs	r4, r4, #2
 8016dd6:	2500      	movs	r5, #0
 8016dd8:	42a5      	cmp	r5, r4
 8016dda:	d109      	bne.n	8016df0 <__libc_init_array+0x24>
 8016ddc:	4e0b      	ldr	r6, [pc, #44]	; (8016e0c <__libc_init_array+0x40>)
 8016dde:	4c0c      	ldr	r4, [pc, #48]	; (8016e10 <__libc_init_array+0x44>)
 8016de0:	f000 ffe2 	bl	8017da8 <_init>
 8016de4:	1ba4      	subs	r4, r4, r6
 8016de6:	10a4      	asrs	r4, r4, #2
 8016de8:	2500      	movs	r5, #0
 8016dea:	42a5      	cmp	r5, r4
 8016dec:	d105      	bne.n	8016dfa <__libc_init_array+0x2e>
 8016dee:	bd70      	pop	{r4, r5, r6, pc}
 8016df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016df4:	4798      	blx	r3
 8016df6:	3501      	adds	r5, #1
 8016df8:	e7ee      	b.n	8016dd8 <__libc_init_array+0xc>
 8016dfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016dfe:	4798      	blx	r3
 8016e00:	3501      	adds	r5, #1
 8016e02:	e7f2      	b.n	8016dea <__libc_init_array+0x1e>
 8016e04:	080fd370 	.word	0x080fd370
 8016e08:	080fd370 	.word	0x080fd370
 8016e0c:	080fd370 	.word	0x080fd370
 8016e10:	080fd378 	.word	0x080fd378

08016e14 <malloc>:
 8016e14:	4b02      	ldr	r3, [pc, #8]	; (8016e20 <malloc+0xc>)
 8016e16:	4601      	mov	r1, r0
 8016e18:	6818      	ldr	r0, [r3, #0]
 8016e1a:	f000 b87b 	b.w	8016f14 <_malloc_r>
 8016e1e:	bf00      	nop
 8016e20:	20000028 	.word	0x20000028

08016e24 <free>:
 8016e24:	4b02      	ldr	r3, [pc, #8]	; (8016e30 <free+0xc>)
 8016e26:	4601      	mov	r1, r0
 8016e28:	6818      	ldr	r0, [r3, #0]
 8016e2a:	f000 b825 	b.w	8016e78 <_free_r>
 8016e2e:	bf00      	nop
 8016e30:	20000028 	.word	0x20000028

08016e34 <memcmp>:
 8016e34:	b530      	push	{r4, r5, lr}
 8016e36:	2400      	movs	r4, #0
 8016e38:	42a2      	cmp	r2, r4
 8016e3a:	d101      	bne.n	8016e40 <memcmp+0xc>
 8016e3c:	2000      	movs	r0, #0
 8016e3e:	e007      	b.n	8016e50 <memcmp+0x1c>
 8016e40:	5d03      	ldrb	r3, [r0, r4]
 8016e42:	3401      	adds	r4, #1
 8016e44:	190d      	adds	r5, r1, r4
 8016e46:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016e4a:	42ab      	cmp	r3, r5
 8016e4c:	d0f4      	beq.n	8016e38 <memcmp+0x4>
 8016e4e:	1b58      	subs	r0, r3, r5
 8016e50:	bd30      	pop	{r4, r5, pc}

08016e52 <memcpy>:
 8016e52:	b510      	push	{r4, lr}
 8016e54:	1e43      	subs	r3, r0, #1
 8016e56:	440a      	add	r2, r1
 8016e58:	4291      	cmp	r1, r2
 8016e5a:	d100      	bne.n	8016e5e <memcpy+0xc>
 8016e5c:	bd10      	pop	{r4, pc}
 8016e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e66:	e7f7      	b.n	8016e58 <memcpy+0x6>

08016e68 <memset>:
 8016e68:	4402      	add	r2, r0
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	d100      	bne.n	8016e72 <memset+0xa>
 8016e70:	4770      	bx	lr
 8016e72:	f803 1b01 	strb.w	r1, [r3], #1
 8016e76:	e7f9      	b.n	8016e6c <memset+0x4>

08016e78 <_free_r>:
 8016e78:	b538      	push	{r3, r4, r5, lr}
 8016e7a:	4605      	mov	r5, r0
 8016e7c:	2900      	cmp	r1, #0
 8016e7e:	d045      	beq.n	8016f0c <_free_r+0x94>
 8016e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e84:	1f0c      	subs	r4, r1, #4
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	bfb8      	it	lt
 8016e8a:	18e4      	addlt	r4, r4, r3
 8016e8c:	f000 fede 	bl	8017c4c <__malloc_lock>
 8016e90:	4a1f      	ldr	r2, [pc, #124]	; (8016f10 <_free_r+0x98>)
 8016e92:	6813      	ldr	r3, [r2, #0]
 8016e94:	4610      	mov	r0, r2
 8016e96:	b933      	cbnz	r3, 8016ea6 <_free_r+0x2e>
 8016e98:	6063      	str	r3, [r4, #4]
 8016e9a:	6014      	str	r4, [r2, #0]
 8016e9c:	4628      	mov	r0, r5
 8016e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ea2:	f000 bed4 	b.w	8017c4e <__malloc_unlock>
 8016ea6:	42a3      	cmp	r3, r4
 8016ea8:	d90c      	bls.n	8016ec4 <_free_r+0x4c>
 8016eaa:	6821      	ldr	r1, [r4, #0]
 8016eac:	1862      	adds	r2, r4, r1
 8016eae:	4293      	cmp	r3, r2
 8016eb0:	bf04      	itt	eq
 8016eb2:	681a      	ldreq	r2, [r3, #0]
 8016eb4:	685b      	ldreq	r3, [r3, #4]
 8016eb6:	6063      	str	r3, [r4, #4]
 8016eb8:	bf04      	itt	eq
 8016eba:	1852      	addeq	r2, r2, r1
 8016ebc:	6022      	streq	r2, [r4, #0]
 8016ebe:	6004      	str	r4, [r0, #0]
 8016ec0:	e7ec      	b.n	8016e9c <_free_r+0x24>
 8016ec2:	4613      	mov	r3, r2
 8016ec4:	685a      	ldr	r2, [r3, #4]
 8016ec6:	b10a      	cbz	r2, 8016ecc <_free_r+0x54>
 8016ec8:	42a2      	cmp	r2, r4
 8016eca:	d9fa      	bls.n	8016ec2 <_free_r+0x4a>
 8016ecc:	6819      	ldr	r1, [r3, #0]
 8016ece:	1858      	adds	r0, r3, r1
 8016ed0:	42a0      	cmp	r0, r4
 8016ed2:	d10b      	bne.n	8016eec <_free_r+0x74>
 8016ed4:	6820      	ldr	r0, [r4, #0]
 8016ed6:	4401      	add	r1, r0
 8016ed8:	1858      	adds	r0, r3, r1
 8016eda:	4282      	cmp	r2, r0
 8016edc:	6019      	str	r1, [r3, #0]
 8016ede:	d1dd      	bne.n	8016e9c <_free_r+0x24>
 8016ee0:	6810      	ldr	r0, [r2, #0]
 8016ee2:	6852      	ldr	r2, [r2, #4]
 8016ee4:	605a      	str	r2, [r3, #4]
 8016ee6:	4401      	add	r1, r0
 8016ee8:	6019      	str	r1, [r3, #0]
 8016eea:	e7d7      	b.n	8016e9c <_free_r+0x24>
 8016eec:	d902      	bls.n	8016ef4 <_free_r+0x7c>
 8016eee:	230c      	movs	r3, #12
 8016ef0:	602b      	str	r3, [r5, #0]
 8016ef2:	e7d3      	b.n	8016e9c <_free_r+0x24>
 8016ef4:	6820      	ldr	r0, [r4, #0]
 8016ef6:	1821      	adds	r1, r4, r0
 8016ef8:	428a      	cmp	r2, r1
 8016efa:	bf04      	itt	eq
 8016efc:	6811      	ldreq	r1, [r2, #0]
 8016efe:	6852      	ldreq	r2, [r2, #4]
 8016f00:	6062      	str	r2, [r4, #4]
 8016f02:	bf04      	itt	eq
 8016f04:	1809      	addeq	r1, r1, r0
 8016f06:	6021      	streq	r1, [r4, #0]
 8016f08:	605c      	str	r4, [r3, #4]
 8016f0a:	e7c7      	b.n	8016e9c <_free_r+0x24>
 8016f0c:	bd38      	pop	{r3, r4, r5, pc}
 8016f0e:	bf00      	nop
 8016f10:	2004d93c 	.word	0x2004d93c

08016f14 <_malloc_r>:
 8016f14:	b570      	push	{r4, r5, r6, lr}
 8016f16:	1ccd      	adds	r5, r1, #3
 8016f18:	f025 0503 	bic.w	r5, r5, #3
 8016f1c:	3508      	adds	r5, #8
 8016f1e:	2d0c      	cmp	r5, #12
 8016f20:	bf38      	it	cc
 8016f22:	250c      	movcc	r5, #12
 8016f24:	2d00      	cmp	r5, #0
 8016f26:	4606      	mov	r6, r0
 8016f28:	db01      	blt.n	8016f2e <_malloc_r+0x1a>
 8016f2a:	42a9      	cmp	r1, r5
 8016f2c:	d903      	bls.n	8016f36 <_malloc_r+0x22>
 8016f2e:	230c      	movs	r3, #12
 8016f30:	6033      	str	r3, [r6, #0]
 8016f32:	2000      	movs	r0, #0
 8016f34:	bd70      	pop	{r4, r5, r6, pc}
 8016f36:	f000 fe89 	bl	8017c4c <__malloc_lock>
 8016f3a:	4a21      	ldr	r2, [pc, #132]	; (8016fc0 <_malloc_r+0xac>)
 8016f3c:	6814      	ldr	r4, [r2, #0]
 8016f3e:	4621      	mov	r1, r4
 8016f40:	b991      	cbnz	r1, 8016f68 <_malloc_r+0x54>
 8016f42:	4c20      	ldr	r4, [pc, #128]	; (8016fc4 <_malloc_r+0xb0>)
 8016f44:	6823      	ldr	r3, [r4, #0]
 8016f46:	b91b      	cbnz	r3, 8016f50 <_malloc_r+0x3c>
 8016f48:	4630      	mov	r0, r6
 8016f4a:	f000 fb0f 	bl	801756c <_sbrk_r>
 8016f4e:	6020      	str	r0, [r4, #0]
 8016f50:	4629      	mov	r1, r5
 8016f52:	4630      	mov	r0, r6
 8016f54:	f000 fb0a 	bl	801756c <_sbrk_r>
 8016f58:	1c43      	adds	r3, r0, #1
 8016f5a:	d124      	bne.n	8016fa6 <_malloc_r+0x92>
 8016f5c:	230c      	movs	r3, #12
 8016f5e:	6033      	str	r3, [r6, #0]
 8016f60:	4630      	mov	r0, r6
 8016f62:	f000 fe74 	bl	8017c4e <__malloc_unlock>
 8016f66:	e7e4      	b.n	8016f32 <_malloc_r+0x1e>
 8016f68:	680b      	ldr	r3, [r1, #0]
 8016f6a:	1b5b      	subs	r3, r3, r5
 8016f6c:	d418      	bmi.n	8016fa0 <_malloc_r+0x8c>
 8016f6e:	2b0b      	cmp	r3, #11
 8016f70:	d90f      	bls.n	8016f92 <_malloc_r+0x7e>
 8016f72:	600b      	str	r3, [r1, #0]
 8016f74:	50cd      	str	r5, [r1, r3]
 8016f76:	18cc      	adds	r4, r1, r3
 8016f78:	4630      	mov	r0, r6
 8016f7a:	f000 fe68 	bl	8017c4e <__malloc_unlock>
 8016f7e:	f104 000b 	add.w	r0, r4, #11
 8016f82:	1d23      	adds	r3, r4, #4
 8016f84:	f020 0007 	bic.w	r0, r0, #7
 8016f88:	1ac3      	subs	r3, r0, r3
 8016f8a:	d0d3      	beq.n	8016f34 <_malloc_r+0x20>
 8016f8c:	425a      	negs	r2, r3
 8016f8e:	50e2      	str	r2, [r4, r3]
 8016f90:	e7d0      	b.n	8016f34 <_malloc_r+0x20>
 8016f92:	428c      	cmp	r4, r1
 8016f94:	684b      	ldr	r3, [r1, #4]
 8016f96:	bf16      	itet	ne
 8016f98:	6063      	strne	r3, [r4, #4]
 8016f9a:	6013      	streq	r3, [r2, #0]
 8016f9c:	460c      	movne	r4, r1
 8016f9e:	e7eb      	b.n	8016f78 <_malloc_r+0x64>
 8016fa0:	460c      	mov	r4, r1
 8016fa2:	6849      	ldr	r1, [r1, #4]
 8016fa4:	e7cc      	b.n	8016f40 <_malloc_r+0x2c>
 8016fa6:	1cc4      	adds	r4, r0, #3
 8016fa8:	f024 0403 	bic.w	r4, r4, #3
 8016fac:	42a0      	cmp	r0, r4
 8016fae:	d005      	beq.n	8016fbc <_malloc_r+0xa8>
 8016fb0:	1a21      	subs	r1, r4, r0
 8016fb2:	4630      	mov	r0, r6
 8016fb4:	f000 fada 	bl	801756c <_sbrk_r>
 8016fb8:	3001      	adds	r0, #1
 8016fba:	d0cf      	beq.n	8016f5c <_malloc_r+0x48>
 8016fbc:	6025      	str	r5, [r4, #0]
 8016fbe:	e7db      	b.n	8016f78 <_malloc_r+0x64>
 8016fc0:	2004d93c 	.word	0x2004d93c
 8016fc4:	2004d940 	.word	0x2004d940

08016fc8 <__sfputc_r>:
 8016fc8:	6893      	ldr	r3, [r2, #8]
 8016fca:	3b01      	subs	r3, #1
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	b410      	push	{r4}
 8016fd0:	6093      	str	r3, [r2, #8]
 8016fd2:	da08      	bge.n	8016fe6 <__sfputc_r+0x1e>
 8016fd4:	6994      	ldr	r4, [r2, #24]
 8016fd6:	42a3      	cmp	r3, r4
 8016fd8:	db01      	blt.n	8016fde <__sfputc_r+0x16>
 8016fda:	290a      	cmp	r1, #10
 8016fdc:	d103      	bne.n	8016fe6 <__sfputc_r+0x1e>
 8016fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fe2:	f000 bb31 	b.w	8017648 <__swbuf_r>
 8016fe6:	6813      	ldr	r3, [r2, #0]
 8016fe8:	1c58      	adds	r0, r3, #1
 8016fea:	6010      	str	r0, [r2, #0]
 8016fec:	7019      	strb	r1, [r3, #0]
 8016fee:	4608      	mov	r0, r1
 8016ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ff4:	4770      	bx	lr

08016ff6 <__sfputs_r>:
 8016ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ff8:	4606      	mov	r6, r0
 8016ffa:	460f      	mov	r7, r1
 8016ffc:	4614      	mov	r4, r2
 8016ffe:	18d5      	adds	r5, r2, r3
 8017000:	42ac      	cmp	r4, r5
 8017002:	d101      	bne.n	8017008 <__sfputs_r+0x12>
 8017004:	2000      	movs	r0, #0
 8017006:	e007      	b.n	8017018 <__sfputs_r+0x22>
 8017008:	463a      	mov	r2, r7
 801700a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801700e:	4630      	mov	r0, r6
 8017010:	f7ff ffda 	bl	8016fc8 <__sfputc_r>
 8017014:	1c43      	adds	r3, r0, #1
 8017016:	d1f3      	bne.n	8017000 <__sfputs_r+0xa>
 8017018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801701c <_vfiprintf_r>:
 801701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017020:	460c      	mov	r4, r1
 8017022:	b09d      	sub	sp, #116	; 0x74
 8017024:	4617      	mov	r7, r2
 8017026:	461d      	mov	r5, r3
 8017028:	4606      	mov	r6, r0
 801702a:	b118      	cbz	r0, 8017034 <_vfiprintf_r+0x18>
 801702c:	6983      	ldr	r3, [r0, #24]
 801702e:	b90b      	cbnz	r3, 8017034 <_vfiprintf_r+0x18>
 8017030:	f000 fd1e 	bl	8017a70 <__sinit>
 8017034:	4b7c      	ldr	r3, [pc, #496]	; (8017228 <_vfiprintf_r+0x20c>)
 8017036:	429c      	cmp	r4, r3
 8017038:	d158      	bne.n	80170ec <_vfiprintf_r+0xd0>
 801703a:	6874      	ldr	r4, [r6, #4]
 801703c:	89a3      	ldrh	r3, [r4, #12]
 801703e:	0718      	lsls	r0, r3, #28
 8017040:	d55e      	bpl.n	8017100 <_vfiprintf_r+0xe4>
 8017042:	6923      	ldr	r3, [r4, #16]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d05b      	beq.n	8017100 <_vfiprintf_r+0xe4>
 8017048:	2300      	movs	r3, #0
 801704a:	9309      	str	r3, [sp, #36]	; 0x24
 801704c:	2320      	movs	r3, #32
 801704e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017052:	2330      	movs	r3, #48	; 0x30
 8017054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017058:	9503      	str	r5, [sp, #12]
 801705a:	f04f 0b01 	mov.w	fp, #1
 801705e:	46b8      	mov	r8, r7
 8017060:	4645      	mov	r5, r8
 8017062:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017066:	b10b      	cbz	r3, 801706c <_vfiprintf_r+0x50>
 8017068:	2b25      	cmp	r3, #37	; 0x25
 801706a:	d154      	bne.n	8017116 <_vfiprintf_r+0xfa>
 801706c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017070:	d00b      	beq.n	801708a <_vfiprintf_r+0x6e>
 8017072:	4653      	mov	r3, sl
 8017074:	463a      	mov	r2, r7
 8017076:	4621      	mov	r1, r4
 8017078:	4630      	mov	r0, r6
 801707a:	f7ff ffbc 	bl	8016ff6 <__sfputs_r>
 801707e:	3001      	adds	r0, #1
 8017080:	f000 80c2 	beq.w	8017208 <_vfiprintf_r+0x1ec>
 8017084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017086:	4453      	add	r3, sl
 8017088:	9309      	str	r3, [sp, #36]	; 0x24
 801708a:	f898 3000 	ldrb.w	r3, [r8]
 801708e:	2b00      	cmp	r3, #0
 8017090:	f000 80ba 	beq.w	8017208 <_vfiprintf_r+0x1ec>
 8017094:	2300      	movs	r3, #0
 8017096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801709a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801709e:	9304      	str	r3, [sp, #16]
 80170a0:	9307      	str	r3, [sp, #28]
 80170a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80170a6:	931a      	str	r3, [sp, #104]	; 0x68
 80170a8:	46a8      	mov	r8, r5
 80170aa:	2205      	movs	r2, #5
 80170ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80170b0:	485e      	ldr	r0, [pc, #376]	; (801722c <_vfiprintf_r+0x210>)
 80170b2:	f7e9 f8ad 	bl	8000210 <memchr>
 80170b6:	9b04      	ldr	r3, [sp, #16]
 80170b8:	bb78      	cbnz	r0, 801711a <_vfiprintf_r+0xfe>
 80170ba:	06d9      	lsls	r1, r3, #27
 80170bc:	bf44      	itt	mi
 80170be:	2220      	movmi	r2, #32
 80170c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80170c4:	071a      	lsls	r2, r3, #28
 80170c6:	bf44      	itt	mi
 80170c8:	222b      	movmi	r2, #43	; 0x2b
 80170ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80170ce:	782a      	ldrb	r2, [r5, #0]
 80170d0:	2a2a      	cmp	r2, #42	; 0x2a
 80170d2:	d02a      	beq.n	801712a <_vfiprintf_r+0x10e>
 80170d4:	9a07      	ldr	r2, [sp, #28]
 80170d6:	46a8      	mov	r8, r5
 80170d8:	2000      	movs	r0, #0
 80170da:	250a      	movs	r5, #10
 80170dc:	4641      	mov	r1, r8
 80170de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170e2:	3b30      	subs	r3, #48	; 0x30
 80170e4:	2b09      	cmp	r3, #9
 80170e6:	d969      	bls.n	80171bc <_vfiprintf_r+0x1a0>
 80170e8:	b360      	cbz	r0, 8017144 <_vfiprintf_r+0x128>
 80170ea:	e024      	b.n	8017136 <_vfiprintf_r+0x11a>
 80170ec:	4b50      	ldr	r3, [pc, #320]	; (8017230 <_vfiprintf_r+0x214>)
 80170ee:	429c      	cmp	r4, r3
 80170f0:	d101      	bne.n	80170f6 <_vfiprintf_r+0xda>
 80170f2:	68b4      	ldr	r4, [r6, #8]
 80170f4:	e7a2      	b.n	801703c <_vfiprintf_r+0x20>
 80170f6:	4b4f      	ldr	r3, [pc, #316]	; (8017234 <_vfiprintf_r+0x218>)
 80170f8:	429c      	cmp	r4, r3
 80170fa:	bf08      	it	eq
 80170fc:	68f4      	ldreq	r4, [r6, #12]
 80170fe:	e79d      	b.n	801703c <_vfiprintf_r+0x20>
 8017100:	4621      	mov	r1, r4
 8017102:	4630      	mov	r0, r6
 8017104:	f000 faf2 	bl	80176ec <__swsetup_r>
 8017108:	2800      	cmp	r0, #0
 801710a:	d09d      	beq.n	8017048 <_vfiprintf_r+0x2c>
 801710c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017110:	b01d      	add	sp, #116	; 0x74
 8017112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017116:	46a8      	mov	r8, r5
 8017118:	e7a2      	b.n	8017060 <_vfiprintf_r+0x44>
 801711a:	4a44      	ldr	r2, [pc, #272]	; (801722c <_vfiprintf_r+0x210>)
 801711c:	1a80      	subs	r0, r0, r2
 801711e:	fa0b f000 	lsl.w	r0, fp, r0
 8017122:	4318      	orrs	r0, r3
 8017124:	9004      	str	r0, [sp, #16]
 8017126:	4645      	mov	r5, r8
 8017128:	e7be      	b.n	80170a8 <_vfiprintf_r+0x8c>
 801712a:	9a03      	ldr	r2, [sp, #12]
 801712c:	1d11      	adds	r1, r2, #4
 801712e:	6812      	ldr	r2, [r2, #0]
 8017130:	9103      	str	r1, [sp, #12]
 8017132:	2a00      	cmp	r2, #0
 8017134:	db01      	blt.n	801713a <_vfiprintf_r+0x11e>
 8017136:	9207      	str	r2, [sp, #28]
 8017138:	e004      	b.n	8017144 <_vfiprintf_r+0x128>
 801713a:	4252      	negs	r2, r2
 801713c:	f043 0302 	orr.w	r3, r3, #2
 8017140:	9207      	str	r2, [sp, #28]
 8017142:	9304      	str	r3, [sp, #16]
 8017144:	f898 3000 	ldrb.w	r3, [r8]
 8017148:	2b2e      	cmp	r3, #46	; 0x2e
 801714a:	d10e      	bne.n	801716a <_vfiprintf_r+0x14e>
 801714c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017150:	2b2a      	cmp	r3, #42	; 0x2a
 8017152:	d138      	bne.n	80171c6 <_vfiprintf_r+0x1aa>
 8017154:	9b03      	ldr	r3, [sp, #12]
 8017156:	1d1a      	adds	r2, r3, #4
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	9203      	str	r2, [sp, #12]
 801715c:	2b00      	cmp	r3, #0
 801715e:	bfb8      	it	lt
 8017160:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017164:	f108 0802 	add.w	r8, r8, #2
 8017168:	9305      	str	r3, [sp, #20]
 801716a:	4d33      	ldr	r5, [pc, #204]	; (8017238 <_vfiprintf_r+0x21c>)
 801716c:	f898 1000 	ldrb.w	r1, [r8]
 8017170:	2203      	movs	r2, #3
 8017172:	4628      	mov	r0, r5
 8017174:	f7e9 f84c 	bl	8000210 <memchr>
 8017178:	b140      	cbz	r0, 801718c <_vfiprintf_r+0x170>
 801717a:	2340      	movs	r3, #64	; 0x40
 801717c:	1b40      	subs	r0, r0, r5
 801717e:	fa03 f000 	lsl.w	r0, r3, r0
 8017182:	9b04      	ldr	r3, [sp, #16]
 8017184:	4303      	orrs	r3, r0
 8017186:	f108 0801 	add.w	r8, r8, #1
 801718a:	9304      	str	r3, [sp, #16]
 801718c:	f898 1000 	ldrb.w	r1, [r8]
 8017190:	482a      	ldr	r0, [pc, #168]	; (801723c <_vfiprintf_r+0x220>)
 8017192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017196:	2206      	movs	r2, #6
 8017198:	f108 0701 	add.w	r7, r8, #1
 801719c:	f7e9 f838 	bl	8000210 <memchr>
 80171a0:	2800      	cmp	r0, #0
 80171a2:	d037      	beq.n	8017214 <_vfiprintf_r+0x1f8>
 80171a4:	4b26      	ldr	r3, [pc, #152]	; (8017240 <_vfiprintf_r+0x224>)
 80171a6:	bb1b      	cbnz	r3, 80171f0 <_vfiprintf_r+0x1d4>
 80171a8:	9b03      	ldr	r3, [sp, #12]
 80171aa:	3307      	adds	r3, #7
 80171ac:	f023 0307 	bic.w	r3, r3, #7
 80171b0:	3308      	adds	r3, #8
 80171b2:	9303      	str	r3, [sp, #12]
 80171b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171b6:	444b      	add	r3, r9
 80171b8:	9309      	str	r3, [sp, #36]	; 0x24
 80171ba:	e750      	b.n	801705e <_vfiprintf_r+0x42>
 80171bc:	fb05 3202 	mla	r2, r5, r2, r3
 80171c0:	2001      	movs	r0, #1
 80171c2:	4688      	mov	r8, r1
 80171c4:	e78a      	b.n	80170dc <_vfiprintf_r+0xc0>
 80171c6:	2300      	movs	r3, #0
 80171c8:	f108 0801 	add.w	r8, r8, #1
 80171cc:	9305      	str	r3, [sp, #20]
 80171ce:	4619      	mov	r1, r3
 80171d0:	250a      	movs	r5, #10
 80171d2:	4640      	mov	r0, r8
 80171d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171d8:	3a30      	subs	r2, #48	; 0x30
 80171da:	2a09      	cmp	r2, #9
 80171dc:	d903      	bls.n	80171e6 <_vfiprintf_r+0x1ca>
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d0c3      	beq.n	801716a <_vfiprintf_r+0x14e>
 80171e2:	9105      	str	r1, [sp, #20]
 80171e4:	e7c1      	b.n	801716a <_vfiprintf_r+0x14e>
 80171e6:	fb05 2101 	mla	r1, r5, r1, r2
 80171ea:	2301      	movs	r3, #1
 80171ec:	4680      	mov	r8, r0
 80171ee:	e7f0      	b.n	80171d2 <_vfiprintf_r+0x1b6>
 80171f0:	ab03      	add	r3, sp, #12
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	4622      	mov	r2, r4
 80171f6:	4b13      	ldr	r3, [pc, #76]	; (8017244 <_vfiprintf_r+0x228>)
 80171f8:	a904      	add	r1, sp, #16
 80171fa:	4630      	mov	r0, r6
 80171fc:	f3af 8000 	nop.w
 8017200:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8017204:	4681      	mov	r9, r0
 8017206:	d1d5      	bne.n	80171b4 <_vfiprintf_r+0x198>
 8017208:	89a3      	ldrh	r3, [r4, #12]
 801720a:	065b      	lsls	r3, r3, #25
 801720c:	f53f af7e 	bmi.w	801710c <_vfiprintf_r+0xf0>
 8017210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017212:	e77d      	b.n	8017110 <_vfiprintf_r+0xf4>
 8017214:	ab03      	add	r3, sp, #12
 8017216:	9300      	str	r3, [sp, #0]
 8017218:	4622      	mov	r2, r4
 801721a:	4b0a      	ldr	r3, [pc, #40]	; (8017244 <_vfiprintf_r+0x228>)
 801721c:	a904      	add	r1, sp, #16
 801721e:	4630      	mov	r0, r6
 8017220:	f000 f892 	bl	8017348 <_printf_i>
 8017224:	e7ec      	b.n	8017200 <_vfiprintf_r+0x1e4>
 8017226:	bf00      	nop
 8017228:	080fd328 	.word	0x080fd328
 801722c:	080fd2d4 	.word	0x080fd2d4
 8017230:	080fd348 	.word	0x080fd348
 8017234:	080fd308 	.word	0x080fd308
 8017238:	080fd2da 	.word	0x080fd2da
 801723c:	080fd2de 	.word	0x080fd2de
 8017240:	00000000 	.word	0x00000000
 8017244:	08016ff7 	.word	0x08016ff7

08017248 <vfiprintf>:
 8017248:	4613      	mov	r3, r2
 801724a:	460a      	mov	r2, r1
 801724c:	4601      	mov	r1, r0
 801724e:	4802      	ldr	r0, [pc, #8]	; (8017258 <vfiprintf+0x10>)
 8017250:	6800      	ldr	r0, [r0, #0]
 8017252:	f7ff bee3 	b.w	801701c <_vfiprintf_r>
 8017256:	bf00      	nop
 8017258:	20000028 	.word	0x20000028

0801725c <_printf_common>:
 801725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017260:	4691      	mov	r9, r2
 8017262:	461f      	mov	r7, r3
 8017264:	688a      	ldr	r2, [r1, #8]
 8017266:	690b      	ldr	r3, [r1, #16]
 8017268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801726c:	4293      	cmp	r3, r2
 801726e:	bfb8      	it	lt
 8017270:	4613      	movlt	r3, r2
 8017272:	f8c9 3000 	str.w	r3, [r9]
 8017276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801727a:	4606      	mov	r6, r0
 801727c:	460c      	mov	r4, r1
 801727e:	b112      	cbz	r2, 8017286 <_printf_common+0x2a>
 8017280:	3301      	adds	r3, #1
 8017282:	f8c9 3000 	str.w	r3, [r9]
 8017286:	6823      	ldr	r3, [r4, #0]
 8017288:	0699      	lsls	r1, r3, #26
 801728a:	bf42      	ittt	mi
 801728c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017290:	3302      	addmi	r3, #2
 8017292:	f8c9 3000 	strmi.w	r3, [r9]
 8017296:	6825      	ldr	r5, [r4, #0]
 8017298:	f015 0506 	ands.w	r5, r5, #6
 801729c:	d107      	bne.n	80172ae <_printf_common+0x52>
 801729e:	f104 0a19 	add.w	sl, r4, #25
 80172a2:	68e3      	ldr	r3, [r4, #12]
 80172a4:	f8d9 2000 	ldr.w	r2, [r9]
 80172a8:	1a9b      	subs	r3, r3, r2
 80172aa:	42ab      	cmp	r3, r5
 80172ac:	dc28      	bgt.n	8017300 <_printf_common+0xa4>
 80172ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80172b2:	6822      	ldr	r2, [r4, #0]
 80172b4:	3300      	adds	r3, #0
 80172b6:	bf18      	it	ne
 80172b8:	2301      	movne	r3, #1
 80172ba:	0692      	lsls	r2, r2, #26
 80172bc:	d42d      	bmi.n	801731a <_printf_common+0xbe>
 80172be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80172c2:	4639      	mov	r1, r7
 80172c4:	4630      	mov	r0, r6
 80172c6:	47c0      	blx	r8
 80172c8:	3001      	adds	r0, #1
 80172ca:	d020      	beq.n	801730e <_printf_common+0xb2>
 80172cc:	6823      	ldr	r3, [r4, #0]
 80172ce:	68e5      	ldr	r5, [r4, #12]
 80172d0:	f8d9 2000 	ldr.w	r2, [r9]
 80172d4:	f003 0306 	and.w	r3, r3, #6
 80172d8:	2b04      	cmp	r3, #4
 80172da:	bf08      	it	eq
 80172dc:	1aad      	subeq	r5, r5, r2
 80172de:	68a3      	ldr	r3, [r4, #8]
 80172e0:	6922      	ldr	r2, [r4, #16]
 80172e2:	bf0c      	ite	eq
 80172e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172e8:	2500      	movne	r5, #0
 80172ea:	4293      	cmp	r3, r2
 80172ec:	bfc4      	itt	gt
 80172ee:	1a9b      	subgt	r3, r3, r2
 80172f0:	18ed      	addgt	r5, r5, r3
 80172f2:	f04f 0900 	mov.w	r9, #0
 80172f6:	341a      	adds	r4, #26
 80172f8:	454d      	cmp	r5, r9
 80172fa:	d11a      	bne.n	8017332 <_printf_common+0xd6>
 80172fc:	2000      	movs	r0, #0
 80172fe:	e008      	b.n	8017312 <_printf_common+0xb6>
 8017300:	2301      	movs	r3, #1
 8017302:	4652      	mov	r2, sl
 8017304:	4639      	mov	r1, r7
 8017306:	4630      	mov	r0, r6
 8017308:	47c0      	blx	r8
 801730a:	3001      	adds	r0, #1
 801730c:	d103      	bne.n	8017316 <_printf_common+0xba>
 801730e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017316:	3501      	adds	r5, #1
 8017318:	e7c3      	b.n	80172a2 <_printf_common+0x46>
 801731a:	18e1      	adds	r1, r4, r3
 801731c:	1c5a      	adds	r2, r3, #1
 801731e:	2030      	movs	r0, #48	; 0x30
 8017320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017324:	4422      	add	r2, r4
 8017326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801732a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801732e:	3302      	adds	r3, #2
 8017330:	e7c5      	b.n	80172be <_printf_common+0x62>
 8017332:	2301      	movs	r3, #1
 8017334:	4622      	mov	r2, r4
 8017336:	4639      	mov	r1, r7
 8017338:	4630      	mov	r0, r6
 801733a:	47c0      	blx	r8
 801733c:	3001      	adds	r0, #1
 801733e:	d0e6      	beq.n	801730e <_printf_common+0xb2>
 8017340:	f109 0901 	add.w	r9, r9, #1
 8017344:	e7d8      	b.n	80172f8 <_printf_common+0x9c>
	...

08017348 <_printf_i>:
 8017348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801734c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017350:	460c      	mov	r4, r1
 8017352:	7e09      	ldrb	r1, [r1, #24]
 8017354:	b085      	sub	sp, #20
 8017356:	296e      	cmp	r1, #110	; 0x6e
 8017358:	4617      	mov	r7, r2
 801735a:	4606      	mov	r6, r0
 801735c:	4698      	mov	r8, r3
 801735e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017360:	f000 80b3 	beq.w	80174ca <_printf_i+0x182>
 8017364:	d822      	bhi.n	80173ac <_printf_i+0x64>
 8017366:	2963      	cmp	r1, #99	; 0x63
 8017368:	d036      	beq.n	80173d8 <_printf_i+0x90>
 801736a:	d80a      	bhi.n	8017382 <_printf_i+0x3a>
 801736c:	2900      	cmp	r1, #0
 801736e:	f000 80b9 	beq.w	80174e4 <_printf_i+0x19c>
 8017372:	2958      	cmp	r1, #88	; 0x58
 8017374:	f000 8083 	beq.w	801747e <_printf_i+0x136>
 8017378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801737c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017380:	e032      	b.n	80173e8 <_printf_i+0xa0>
 8017382:	2964      	cmp	r1, #100	; 0x64
 8017384:	d001      	beq.n	801738a <_printf_i+0x42>
 8017386:	2969      	cmp	r1, #105	; 0x69
 8017388:	d1f6      	bne.n	8017378 <_printf_i+0x30>
 801738a:	6820      	ldr	r0, [r4, #0]
 801738c:	6813      	ldr	r3, [r2, #0]
 801738e:	0605      	lsls	r5, r0, #24
 8017390:	f103 0104 	add.w	r1, r3, #4
 8017394:	d52a      	bpl.n	80173ec <_printf_i+0xa4>
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	6011      	str	r1, [r2, #0]
 801739a:	2b00      	cmp	r3, #0
 801739c:	da03      	bge.n	80173a6 <_printf_i+0x5e>
 801739e:	222d      	movs	r2, #45	; 0x2d
 80173a0:	425b      	negs	r3, r3
 80173a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80173a6:	486f      	ldr	r0, [pc, #444]	; (8017564 <_printf_i+0x21c>)
 80173a8:	220a      	movs	r2, #10
 80173aa:	e039      	b.n	8017420 <_printf_i+0xd8>
 80173ac:	2973      	cmp	r1, #115	; 0x73
 80173ae:	f000 809d 	beq.w	80174ec <_printf_i+0x1a4>
 80173b2:	d808      	bhi.n	80173c6 <_printf_i+0x7e>
 80173b4:	296f      	cmp	r1, #111	; 0x6f
 80173b6:	d020      	beq.n	80173fa <_printf_i+0xb2>
 80173b8:	2970      	cmp	r1, #112	; 0x70
 80173ba:	d1dd      	bne.n	8017378 <_printf_i+0x30>
 80173bc:	6823      	ldr	r3, [r4, #0]
 80173be:	f043 0320 	orr.w	r3, r3, #32
 80173c2:	6023      	str	r3, [r4, #0]
 80173c4:	e003      	b.n	80173ce <_printf_i+0x86>
 80173c6:	2975      	cmp	r1, #117	; 0x75
 80173c8:	d017      	beq.n	80173fa <_printf_i+0xb2>
 80173ca:	2978      	cmp	r1, #120	; 0x78
 80173cc:	d1d4      	bne.n	8017378 <_printf_i+0x30>
 80173ce:	2378      	movs	r3, #120	; 0x78
 80173d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80173d4:	4864      	ldr	r0, [pc, #400]	; (8017568 <_printf_i+0x220>)
 80173d6:	e055      	b.n	8017484 <_printf_i+0x13c>
 80173d8:	6813      	ldr	r3, [r2, #0]
 80173da:	1d19      	adds	r1, r3, #4
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	6011      	str	r1, [r2, #0]
 80173e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173e8:	2301      	movs	r3, #1
 80173ea:	e08c      	b.n	8017506 <_printf_i+0x1be>
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	6011      	str	r1, [r2, #0]
 80173f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80173f4:	bf18      	it	ne
 80173f6:	b21b      	sxthne	r3, r3
 80173f8:	e7cf      	b.n	801739a <_printf_i+0x52>
 80173fa:	6813      	ldr	r3, [r2, #0]
 80173fc:	6825      	ldr	r5, [r4, #0]
 80173fe:	1d18      	adds	r0, r3, #4
 8017400:	6010      	str	r0, [r2, #0]
 8017402:	0628      	lsls	r0, r5, #24
 8017404:	d501      	bpl.n	801740a <_printf_i+0xc2>
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	e002      	b.n	8017410 <_printf_i+0xc8>
 801740a:	0668      	lsls	r0, r5, #25
 801740c:	d5fb      	bpl.n	8017406 <_printf_i+0xbe>
 801740e:	881b      	ldrh	r3, [r3, #0]
 8017410:	4854      	ldr	r0, [pc, #336]	; (8017564 <_printf_i+0x21c>)
 8017412:	296f      	cmp	r1, #111	; 0x6f
 8017414:	bf14      	ite	ne
 8017416:	220a      	movne	r2, #10
 8017418:	2208      	moveq	r2, #8
 801741a:	2100      	movs	r1, #0
 801741c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017420:	6865      	ldr	r5, [r4, #4]
 8017422:	60a5      	str	r5, [r4, #8]
 8017424:	2d00      	cmp	r5, #0
 8017426:	f2c0 8095 	blt.w	8017554 <_printf_i+0x20c>
 801742a:	6821      	ldr	r1, [r4, #0]
 801742c:	f021 0104 	bic.w	r1, r1, #4
 8017430:	6021      	str	r1, [r4, #0]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d13d      	bne.n	80174b2 <_printf_i+0x16a>
 8017436:	2d00      	cmp	r5, #0
 8017438:	f040 808e 	bne.w	8017558 <_printf_i+0x210>
 801743c:	4665      	mov	r5, ip
 801743e:	2a08      	cmp	r2, #8
 8017440:	d10b      	bne.n	801745a <_printf_i+0x112>
 8017442:	6823      	ldr	r3, [r4, #0]
 8017444:	07db      	lsls	r3, r3, #31
 8017446:	d508      	bpl.n	801745a <_printf_i+0x112>
 8017448:	6923      	ldr	r3, [r4, #16]
 801744a:	6862      	ldr	r2, [r4, #4]
 801744c:	429a      	cmp	r2, r3
 801744e:	bfde      	ittt	le
 8017450:	2330      	movle	r3, #48	; 0x30
 8017452:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017456:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801745a:	ebac 0305 	sub.w	r3, ip, r5
 801745e:	6123      	str	r3, [r4, #16]
 8017460:	f8cd 8000 	str.w	r8, [sp]
 8017464:	463b      	mov	r3, r7
 8017466:	aa03      	add	r2, sp, #12
 8017468:	4621      	mov	r1, r4
 801746a:	4630      	mov	r0, r6
 801746c:	f7ff fef6 	bl	801725c <_printf_common>
 8017470:	3001      	adds	r0, #1
 8017472:	d14d      	bne.n	8017510 <_printf_i+0x1c8>
 8017474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017478:	b005      	add	sp, #20
 801747a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801747e:	4839      	ldr	r0, [pc, #228]	; (8017564 <_printf_i+0x21c>)
 8017480:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017484:	6813      	ldr	r3, [r2, #0]
 8017486:	6821      	ldr	r1, [r4, #0]
 8017488:	1d1d      	adds	r5, r3, #4
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	6015      	str	r5, [r2, #0]
 801748e:	060a      	lsls	r2, r1, #24
 8017490:	d50b      	bpl.n	80174aa <_printf_i+0x162>
 8017492:	07ca      	lsls	r2, r1, #31
 8017494:	bf44      	itt	mi
 8017496:	f041 0120 	orrmi.w	r1, r1, #32
 801749a:	6021      	strmi	r1, [r4, #0]
 801749c:	b91b      	cbnz	r3, 80174a6 <_printf_i+0x15e>
 801749e:	6822      	ldr	r2, [r4, #0]
 80174a0:	f022 0220 	bic.w	r2, r2, #32
 80174a4:	6022      	str	r2, [r4, #0]
 80174a6:	2210      	movs	r2, #16
 80174a8:	e7b7      	b.n	801741a <_printf_i+0xd2>
 80174aa:	064d      	lsls	r5, r1, #25
 80174ac:	bf48      	it	mi
 80174ae:	b29b      	uxthmi	r3, r3
 80174b0:	e7ef      	b.n	8017492 <_printf_i+0x14a>
 80174b2:	4665      	mov	r5, ip
 80174b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80174b8:	fb02 3311 	mls	r3, r2, r1, r3
 80174bc:	5cc3      	ldrb	r3, [r0, r3]
 80174be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80174c2:	460b      	mov	r3, r1
 80174c4:	2900      	cmp	r1, #0
 80174c6:	d1f5      	bne.n	80174b4 <_printf_i+0x16c>
 80174c8:	e7b9      	b.n	801743e <_printf_i+0xf6>
 80174ca:	6813      	ldr	r3, [r2, #0]
 80174cc:	6825      	ldr	r5, [r4, #0]
 80174ce:	6961      	ldr	r1, [r4, #20]
 80174d0:	1d18      	adds	r0, r3, #4
 80174d2:	6010      	str	r0, [r2, #0]
 80174d4:	0628      	lsls	r0, r5, #24
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	d501      	bpl.n	80174de <_printf_i+0x196>
 80174da:	6019      	str	r1, [r3, #0]
 80174dc:	e002      	b.n	80174e4 <_printf_i+0x19c>
 80174de:	066a      	lsls	r2, r5, #25
 80174e0:	d5fb      	bpl.n	80174da <_printf_i+0x192>
 80174e2:	8019      	strh	r1, [r3, #0]
 80174e4:	2300      	movs	r3, #0
 80174e6:	6123      	str	r3, [r4, #16]
 80174e8:	4665      	mov	r5, ip
 80174ea:	e7b9      	b.n	8017460 <_printf_i+0x118>
 80174ec:	6813      	ldr	r3, [r2, #0]
 80174ee:	1d19      	adds	r1, r3, #4
 80174f0:	6011      	str	r1, [r2, #0]
 80174f2:	681d      	ldr	r5, [r3, #0]
 80174f4:	6862      	ldr	r2, [r4, #4]
 80174f6:	2100      	movs	r1, #0
 80174f8:	4628      	mov	r0, r5
 80174fa:	f7e8 fe89 	bl	8000210 <memchr>
 80174fe:	b108      	cbz	r0, 8017504 <_printf_i+0x1bc>
 8017500:	1b40      	subs	r0, r0, r5
 8017502:	6060      	str	r0, [r4, #4]
 8017504:	6863      	ldr	r3, [r4, #4]
 8017506:	6123      	str	r3, [r4, #16]
 8017508:	2300      	movs	r3, #0
 801750a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801750e:	e7a7      	b.n	8017460 <_printf_i+0x118>
 8017510:	6923      	ldr	r3, [r4, #16]
 8017512:	462a      	mov	r2, r5
 8017514:	4639      	mov	r1, r7
 8017516:	4630      	mov	r0, r6
 8017518:	47c0      	blx	r8
 801751a:	3001      	adds	r0, #1
 801751c:	d0aa      	beq.n	8017474 <_printf_i+0x12c>
 801751e:	6823      	ldr	r3, [r4, #0]
 8017520:	079b      	lsls	r3, r3, #30
 8017522:	d413      	bmi.n	801754c <_printf_i+0x204>
 8017524:	68e0      	ldr	r0, [r4, #12]
 8017526:	9b03      	ldr	r3, [sp, #12]
 8017528:	4298      	cmp	r0, r3
 801752a:	bfb8      	it	lt
 801752c:	4618      	movlt	r0, r3
 801752e:	e7a3      	b.n	8017478 <_printf_i+0x130>
 8017530:	2301      	movs	r3, #1
 8017532:	464a      	mov	r2, r9
 8017534:	4639      	mov	r1, r7
 8017536:	4630      	mov	r0, r6
 8017538:	47c0      	blx	r8
 801753a:	3001      	adds	r0, #1
 801753c:	d09a      	beq.n	8017474 <_printf_i+0x12c>
 801753e:	3501      	adds	r5, #1
 8017540:	68e3      	ldr	r3, [r4, #12]
 8017542:	9a03      	ldr	r2, [sp, #12]
 8017544:	1a9b      	subs	r3, r3, r2
 8017546:	42ab      	cmp	r3, r5
 8017548:	dcf2      	bgt.n	8017530 <_printf_i+0x1e8>
 801754a:	e7eb      	b.n	8017524 <_printf_i+0x1dc>
 801754c:	2500      	movs	r5, #0
 801754e:	f104 0919 	add.w	r9, r4, #25
 8017552:	e7f5      	b.n	8017540 <_printf_i+0x1f8>
 8017554:	2b00      	cmp	r3, #0
 8017556:	d1ac      	bne.n	80174b2 <_printf_i+0x16a>
 8017558:	7803      	ldrb	r3, [r0, #0]
 801755a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801755e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017562:	e76c      	b.n	801743e <_printf_i+0xf6>
 8017564:	080fd2e5 	.word	0x080fd2e5
 8017568:	080fd2f6 	.word	0x080fd2f6

0801756c <_sbrk_r>:
 801756c:	b538      	push	{r3, r4, r5, lr}
 801756e:	4c06      	ldr	r4, [pc, #24]	; (8017588 <_sbrk_r+0x1c>)
 8017570:	2300      	movs	r3, #0
 8017572:	4605      	mov	r5, r0
 8017574:	4608      	mov	r0, r1
 8017576:	6023      	str	r3, [r4, #0]
 8017578:	f7ec ffc6 	bl	8004508 <_sbrk>
 801757c:	1c43      	adds	r3, r0, #1
 801757e:	d102      	bne.n	8017586 <_sbrk_r+0x1a>
 8017580:	6823      	ldr	r3, [r4, #0]
 8017582:	b103      	cbz	r3, 8017586 <_sbrk_r+0x1a>
 8017584:	602b      	str	r3, [r5, #0]
 8017586:	bd38      	pop	{r3, r4, r5, pc}
 8017588:	2004da0c 	.word	0x2004da0c

0801758c <_raise_r>:
 801758c:	291f      	cmp	r1, #31
 801758e:	b538      	push	{r3, r4, r5, lr}
 8017590:	4604      	mov	r4, r0
 8017592:	460d      	mov	r5, r1
 8017594:	d904      	bls.n	80175a0 <_raise_r+0x14>
 8017596:	2316      	movs	r3, #22
 8017598:	6003      	str	r3, [r0, #0]
 801759a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801759e:	bd38      	pop	{r3, r4, r5, pc}
 80175a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80175a2:	b112      	cbz	r2, 80175aa <_raise_r+0x1e>
 80175a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80175a8:	b94b      	cbnz	r3, 80175be <_raise_r+0x32>
 80175aa:	4620      	mov	r0, r4
 80175ac:	f000 f830 	bl	8017610 <_getpid_r>
 80175b0:	462a      	mov	r2, r5
 80175b2:	4601      	mov	r1, r0
 80175b4:	4620      	mov	r0, r4
 80175b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175ba:	f000 b817 	b.w	80175ec <_kill_r>
 80175be:	2b01      	cmp	r3, #1
 80175c0:	d00a      	beq.n	80175d8 <_raise_r+0x4c>
 80175c2:	1c59      	adds	r1, r3, #1
 80175c4:	d103      	bne.n	80175ce <_raise_r+0x42>
 80175c6:	2316      	movs	r3, #22
 80175c8:	6003      	str	r3, [r0, #0]
 80175ca:	2001      	movs	r0, #1
 80175cc:	e7e7      	b.n	801759e <_raise_r+0x12>
 80175ce:	2400      	movs	r4, #0
 80175d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80175d4:	4628      	mov	r0, r5
 80175d6:	4798      	blx	r3
 80175d8:	2000      	movs	r0, #0
 80175da:	e7e0      	b.n	801759e <_raise_r+0x12>

080175dc <raise>:
 80175dc:	4b02      	ldr	r3, [pc, #8]	; (80175e8 <raise+0xc>)
 80175de:	4601      	mov	r1, r0
 80175e0:	6818      	ldr	r0, [r3, #0]
 80175e2:	f7ff bfd3 	b.w	801758c <_raise_r>
 80175e6:	bf00      	nop
 80175e8:	20000028 	.word	0x20000028

080175ec <_kill_r>:
 80175ec:	b538      	push	{r3, r4, r5, lr}
 80175ee:	4c07      	ldr	r4, [pc, #28]	; (801760c <_kill_r+0x20>)
 80175f0:	2300      	movs	r3, #0
 80175f2:	4605      	mov	r5, r0
 80175f4:	4608      	mov	r0, r1
 80175f6:	4611      	mov	r1, r2
 80175f8:	6023      	str	r3, [r4, #0]
 80175fa:	f7ec ff5d 	bl	80044b8 <_kill>
 80175fe:	1c43      	adds	r3, r0, #1
 8017600:	d102      	bne.n	8017608 <_kill_r+0x1c>
 8017602:	6823      	ldr	r3, [r4, #0]
 8017604:	b103      	cbz	r3, 8017608 <_kill_r+0x1c>
 8017606:	602b      	str	r3, [r5, #0]
 8017608:	bd38      	pop	{r3, r4, r5, pc}
 801760a:	bf00      	nop
 801760c:	2004da0c 	.word	0x2004da0c

08017610 <_getpid_r>:
 8017610:	f7ec bf50 	b.w	80044b4 <_getpid>

08017614 <strcpy>:
 8017614:	4603      	mov	r3, r0
 8017616:	f811 2b01 	ldrb.w	r2, [r1], #1
 801761a:	f803 2b01 	strb.w	r2, [r3], #1
 801761e:	2a00      	cmp	r2, #0
 8017620:	d1f9      	bne.n	8017616 <strcpy+0x2>
 8017622:	4770      	bx	lr

08017624 <strncmp>:
 8017624:	b510      	push	{r4, lr}
 8017626:	b16a      	cbz	r2, 8017644 <strncmp+0x20>
 8017628:	3901      	subs	r1, #1
 801762a:	1884      	adds	r4, r0, r2
 801762c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017630:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017634:	4293      	cmp	r3, r2
 8017636:	d103      	bne.n	8017640 <strncmp+0x1c>
 8017638:	42a0      	cmp	r0, r4
 801763a:	d001      	beq.n	8017640 <strncmp+0x1c>
 801763c:	2b00      	cmp	r3, #0
 801763e:	d1f5      	bne.n	801762c <strncmp+0x8>
 8017640:	1a98      	subs	r0, r3, r2
 8017642:	bd10      	pop	{r4, pc}
 8017644:	4610      	mov	r0, r2
 8017646:	e7fc      	b.n	8017642 <strncmp+0x1e>

08017648 <__swbuf_r>:
 8017648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801764a:	460e      	mov	r6, r1
 801764c:	4614      	mov	r4, r2
 801764e:	4605      	mov	r5, r0
 8017650:	b118      	cbz	r0, 801765a <__swbuf_r+0x12>
 8017652:	6983      	ldr	r3, [r0, #24]
 8017654:	b90b      	cbnz	r3, 801765a <__swbuf_r+0x12>
 8017656:	f000 fa0b 	bl	8017a70 <__sinit>
 801765a:	4b21      	ldr	r3, [pc, #132]	; (80176e0 <__swbuf_r+0x98>)
 801765c:	429c      	cmp	r4, r3
 801765e:	d12a      	bne.n	80176b6 <__swbuf_r+0x6e>
 8017660:	686c      	ldr	r4, [r5, #4]
 8017662:	69a3      	ldr	r3, [r4, #24]
 8017664:	60a3      	str	r3, [r4, #8]
 8017666:	89a3      	ldrh	r3, [r4, #12]
 8017668:	071a      	lsls	r2, r3, #28
 801766a:	d52e      	bpl.n	80176ca <__swbuf_r+0x82>
 801766c:	6923      	ldr	r3, [r4, #16]
 801766e:	b363      	cbz	r3, 80176ca <__swbuf_r+0x82>
 8017670:	6923      	ldr	r3, [r4, #16]
 8017672:	6820      	ldr	r0, [r4, #0]
 8017674:	1ac0      	subs	r0, r0, r3
 8017676:	6963      	ldr	r3, [r4, #20]
 8017678:	b2f6      	uxtb	r6, r6
 801767a:	4283      	cmp	r3, r0
 801767c:	4637      	mov	r7, r6
 801767e:	dc04      	bgt.n	801768a <__swbuf_r+0x42>
 8017680:	4621      	mov	r1, r4
 8017682:	4628      	mov	r0, r5
 8017684:	f000 f98a 	bl	801799c <_fflush_r>
 8017688:	bb28      	cbnz	r0, 80176d6 <__swbuf_r+0x8e>
 801768a:	68a3      	ldr	r3, [r4, #8]
 801768c:	3b01      	subs	r3, #1
 801768e:	60a3      	str	r3, [r4, #8]
 8017690:	6823      	ldr	r3, [r4, #0]
 8017692:	1c5a      	adds	r2, r3, #1
 8017694:	6022      	str	r2, [r4, #0]
 8017696:	701e      	strb	r6, [r3, #0]
 8017698:	6963      	ldr	r3, [r4, #20]
 801769a:	3001      	adds	r0, #1
 801769c:	4283      	cmp	r3, r0
 801769e:	d004      	beq.n	80176aa <__swbuf_r+0x62>
 80176a0:	89a3      	ldrh	r3, [r4, #12]
 80176a2:	07db      	lsls	r3, r3, #31
 80176a4:	d519      	bpl.n	80176da <__swbuf_r+0x92>
 80176a6:	2e0a      	cmp	r6, #10
 80176a8:	d117      	bne.n	80176da <__swbuf_r+0x92>
 80176aa:	4621      	mov	r1, r4
 80176ac:	4628      	mov	r0, r5
 80176ae:	f000 f975 	bl	801799c <_fflush_r>
 80176b2:	b190      	cbz	r0, 80176da <__swbuf_r+0x92>
 80176b4:	e00f      	b.n	80176d6 <__swbuf_r+0x8e>
 80176b6:	4b0b      	ldr	r3, [pc, #44]	; (80176e4 <__swbuf_r+0x9c>)
 80176b8:	429c      	cmp	r4, r3
 80176ba:	d101      	bne.n	80176c0 <__swbuf_r+0x78>
 80176bc:	68ac      	ldr	r4, [r5, #8]
 80176be:	e7d0      	b.n	8017662 <__swbuf_r+0x1a>
 80176c0:	4b09      	ldr	r3, [pc, #36]	; (80176e8 <__swbuf_r+0xa0>)
 80176c2:	429c      	cmp	r4, r3
 80176c4:	bf08      	it	eq
 80176c6:	68ec      	ldreq	r4, [r5, #12]
 80176c8:	e7cb      	b.n	8017662 <__swbuf_r+0x1a>
 80176ca:	4621      	mov	r1, r4
 80176cc:	4628      	mov	r0, r5
 80176ce:	f000 f80d 	bl	80176ec <__swsetup_r>
 80176d2:	2800      	cmp	r0, #0
 80176d4:	d0cc      	beq.n	8017670 <__swbuf_r+0x28>
 80176d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80176da:	4638      	mov	r0, r7
 80176dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176de:	bf00      	nop
 80176e0:	080fd328 	.word	0x080fd328
 80176e4:	080fd348 	.word	0x080fd348
 80176e8:	080fd308 	.word	0x080fd308

080176ec <__swsetup_r>:
 80176ec:	4b32      	ldr	r3, [pc, #200]	; (80177b8 <__swsetup_r+0xcc>)
 80176ee:	b570      	push	{r4, r5, r6, lr}
 80176f0:	681d      	ldr	r5, [r3, #0]
 80176f2:	4606      	mov	r6, r0
 80176f4:	460c      	mov	r4, r1
 80176f6:	b125      	cbz	r5, 8017702 <__swsetup_r+0x16>
 80176f8:	69ab      	ldr	r3, [r5, #24]
 80176fa:	b913      	cbnz	r3, 8017702 <__swsetup_r+0x16>
 80176fc:	4628      	mov	r0, r5
 80176fe:	f000 f9b7 	bl	8017a70 <__sinit>
 8017702:	4b2e      	ldr	r3, [pc, #184]	; (80177bc <__swsetup_r+0xd0>)
 8017704:	429c      	cmp	r4, r3
 8017706:	d10f      	bne.n	8017728 <__swsetup_r+0x3c>
 8017708:	686c      	ldr	r4, [r5, #4]
 801770a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801770e:	b29a      	uxth	r2, r3
 8017710:	0715      	lsls	r5, r2, #28
 8017712:	d42c      	bmi.n	801776e <__swsetup_r+0x82>
 8017714:	06d0      	lsls	r0, r2, #27
 8017716:	d411      	bmi.n	801773c <__swsetup_r+0x50>
 8017718:	2209      	movs	r2, #9
 801771a:	6032      	str	r2, [r6, #0]
 801771c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017720:	81a3      	strh	r3, [r4, #12]
 8017722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017726:	e03e      	b.n	80177a6 <__swsetup_r+0xba>
 8017728:	4b25      	ldr	r3, [pc, #148]	; (80177c0 <__swsetup_r+0xd4>)
 801772a:	429c      	cmp	r4, r3
 801772c:	d101      	bne.n	8017732 <__swsetup_r+0x46>
 801772e:	68ac      	ldr	r4, [r5, #8]
 8017730:	e7eb      	b.n	801770a <__swsetup_r+0x1e>
 8017732:	4b24      	ldr	r3, [pc, #144]	; (80177c4 <__swsetup_r+0xd8>)
 8017734:	429c      	cmp	r4, r3
 8017736:	bf08      	it	eq
 8017738:	68ec      	ldreq	r4, [r5, #12]
 801773a:	e7e6      	b.n	801770a <__swsetup_r+0x1e>
 801773c:	0751      	lsls	r1, r2, #29
 801773e:	d512      	bpl.n	8017766 <__swsetup_r+0x7a>
 8017740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017742:	b141      	cbz	r1, 8017756 <__swsetup_r+0x6a>
 8017744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017748:	4299      	cmp	r1, r3
 801774a:	d002      	beq.n	8017752 <__swsetup_r+0x66>
 801774c:	4630      	mov	r0, r6
 801774e:	f7ff fb93 	bl	8016e78 <_free_r>
 8017752:	2300      	movs	r3, #0
 8017754:	6363      	str	r3, [r4, #52]	; 0x34
 8017756:	89a3      	ldrh	r3, [r4, #12]
 8017758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801775c:	81a3      	strh	r3, [r4, #12]
 801775e:	2300      	movs	r3, #0
 8017760:	6063      	str	r3, [r4, #4]
 8017762:	6923      	ldr	r3, [r4, #16]
 8017764:	6023      	str	r3, [r4, #0]
 8017766:	89a3      	ldrh	r3, [r4, #12]
 8017768:	f043 0308 	orr.w	r3, r3, #8
 801776c:	81a3      	strh	r3, [r4, #12]
 801776e:	6923      	ldr	r3, [r4, #16]
 8017770:	b94b      	cbnz	r3, 8017786 <__swsetup_r+0x9a>
 8017772:	89a3      	ldrh	r3, [r4, #12]
 8017774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801777c:	d003      	beq.n	8017786 <__swsetup_r+0x9a>
 801777e:	4621      	mov	r1, r4
 8017780:	4630      	mov	r0, r6
 8017782:	f000 fa23 	bl	8017bcc <__smakebuf_r>
 8017786:	89a2      	ldrh	r2, [r4, #12]
 8017788:	f012 0301 	ands.w	r3, r2, #1
 801778c:	d00c      	beq.n	80177a8 <__swsetup_r+0xbc>
 801778e:	2300      	movs	r3, #0
 8017790:	60a3      	str	r3, [r4, #8]
 8017792:	6963      	ldr	r3, [r4, #20]
 8017794:	425b      	negs	r3, r3
 8017796:	61a3      	str	r3, [r4, #24]
 8017798:	6923      	ldr	r3, [r4, #16]
 801779a:	b953      	cbnz	r3, 80177b2 <__swsetup_r+0xc6>
 801779c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80177a4:	d1ba      	bne.n	801771c <__swsetup_r+0x30>
 80177a6:	bd70      	pop	{r4, r5, r6, pc}
 80177a8:	0792      	lsls	r2, r2, #30
 80177aa:	bf58      	it	pl
 80177ac:	6963      	ldrpl	r3, [r4, #20]
 80177ae:	60a3      	str	r3, [r4, #8]
 80177b0:	e7f2      	b.n	8017798 <__swsetup_r+0xac>
 80177b2:	2000      	movs	r0, #0
 80177b4:	e7f7      	b.n	80177a6 <__swsetup_r+0xba>
 80177b6:	bf00      	nop
 80177b8:	20000028 	.word	0x20000028
 80177bc:	080fd328 	.word	0x080fd328
 80177c0:	080fd348 	.word	0x080fd348
 80177c4:	080fd308 	.word	0x080fd308

080177c8 <__register_exitproc>:
 80177c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177cc:	4d2c      	ldr	r5, [pc, #176]	; (8017880 <__register_exitproc+0xb8>)
 80177ce:	682c      	ldr	r4, [r5, #0]
 80177d0:	4607      	mov	r7, r0
 80177d2:	460e      	mov	r6, r1
 80177d4:	4691      	mov	r9, r2
 80177d6:	4698      	mov	r8, r3
 80177d8:	b934      	cbnz	r4, 80177e8 <__register_exitproc+0x20>
 80177da:	4b2a      	ldr	r3, [pc, #168]	; (8017884 <__register_exitproc+0xbc>)
 80177dc:	4c2a      	ldr	r4, [pc, #168]	; (8017888 <__register_exitproc+0xc0>)
 80177de:	602c      	str	r4, [r5, #0]
 80177e0:	b113      	cbz	r3, 80177e8 <__register_exitproc+0x20>
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80177e8:	6863      	ldr	r3, [r4, #4]
 80177ea:	2b1f      	cmp	r3, #31
 80177ec:	dd3d      	ble.n	801786a <__register_exitproc+0xa2>
 80177ee:	4b27      	ldr	r3, [pc, #156]	; (801788c <__register_exitproc+0xc4>)
 80177f0:	b91b      	cbnz	r3, 80177fa <__register_exitproc+0x32>
 80177f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177fa:	208c      	movs	r0, #140	; 0x8c
 80177fc:	f7ff fb0a 	bl	8016e14 <malloc>
 8017800:	4604      	mov	r4, r0
 8017802:	2800      	cmp	r0, #0
 8017804:	d0f5      	beq.n	80177f2 <__register_exitproc+0x2a>
 8017806:	2300      	movs	r3, #0
 8017808:	682a      	ldr	r2, [r5, #0]
 801780a:	6002      	str	r2, [r0, #0]
 801780c:	6043      	str	r3, [r0, #4]
 801780e:	6028      	str	r0, [r5, #0]
 8017810:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8017814:	b30f      	cbz	r7, 801785a <__register_exitproc+0x92>
 8017816:	f44f 7084 	mov.w	r0, #264	; 0x108
 801781a:	f7ff fafb 	bl	8016e14 <malloc>
 801781e:	2800      	cmp	r0, #0
 8017820:	d0e7      	beq.n	80177f2 <__register_exitproc+0x2a>
 8017822:	2300      	movs	r3, #0
 8017824:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8017828:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801782c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8017830:	6862      	ldr	r2, [r4, #4]
 8017832:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8017836:	2301      	movs	r3, #1
 8017838:	4093      	lsls	r3, r2
 801783a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801783e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8017842:	431a      	orrs	r2, r3
 8017844:	2f02      	cmp	r7, #2
 8017846:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801784a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801784e:	bf02      	ittt	eq
 8017850:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8017854:	4313      	orreq	r3, r2
 8017856:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801785a:	6863      	ldr	r3, [r4, #4]
 801785c:	1c5a      	adds	r2, r3, #1
 801785e:	3302      	adds	r3, #2
 8017860:	6062      	str	r2, [r4, #4]
 8017862:	2000      	movs	r0, #0
 8017864:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8017868:	e7c5      	b.n	80177f6 <__register_exitproc+0x2e>
 801786a:	2f00      	cmp	r7, #0
 801786c:	d0f5      	beq.n	801785a <__register_exitproc+0x92>
 801786e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8017872:	2800      	cmp	r0, #0
 8017874:	d1dc      	bne.n	8017830 <__register_exitproc+0x68>
 8017876:	4b05      	ldr	r3, [pc, #20]	; (801788c <__register_exitproc+0xc4>)
 8017878:	2b00      	cmp	r3, #0
 801787a:	d0ba      	beq.n	80177f2 <__register_exitproc+0x2a>
 801787c:	e7cb      	b.n	8017816 <__register_exitproc+0x4e>
 801787e:	bf00      	nop
 8017880:	2004d9d0 	.word	0x2004d9d0
 8017884:	00000000 	.word	0x00000000
 8017888:	2004d944 	.word	0x2004d944
 801788c:	08016e15 	.word	0x08016e15

08017890 <__sflush_r>:
 8017890:	898a      	ldrh	r2, [r1, #12]
 8017892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017896:	4605      	mov	r5, r0
 8017898:	0710      	lsls	r0, r2, #28
 801789a:	460c      	mov	r4, r1
 801789c:	d458      	bmi.n	8017950 <__sflush_r+0xc0>
 801789e:	684b      	ldr	r3, [r1, #4]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	dc05      	bgt.n	80178b0 <__sflush_r+0x20>
 80178a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	dc02      	bgt.n	80178b0 <__sflush_r+0x20>
 80178aa:	2000      	movs	r0, #0
 80178ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178b2:	2e00      	cmp	r6, #0
 80178b4:	d0f9      	beq.n	80178aa <__sflush_r+0x1a>
 80178b6:	2300      	movs	r3, #0
 80178b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80178bc:	682f      	ldr	r7, [r5, #0]
 80178be:	6a21      	ldr	r1, [r4, #32]
 80178c0:	602b      	str	r3, [r5, #0]
 80178c2:	d032      	beq.n	801792a <__sflush_r+0x9a>
 80178c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80178c6:	89a3      	ldrh	r3, [r4, #12]
 80178c8:	075a      	lsls	r2, r3, #29
 80178ca:	d505      	bpl.n	80178d8 <__sflush_r+0x48>
 80178cc:	6863      	ldr	r3, [r4, #4]
 80178ce:	1ac0      	subs	r0, r0, r3
 80178d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178d2:	b10b      	cbz	r3, 80178d8 <__sflush_r+0x48>
 80178d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80178d6:	1ac0      	subs	r0, r0, r3
 80178d8:	2300      	movs	r3, #0
 80178da:	4602      	mov	r2, r0
 80178dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178de:	6a21      	ldr	r1, [r4, #32]
 80178e0:	4628      	mov	r0, r5
 80178e2:	47b0      	blx	r6
 80178e4:	1c43      	adds	r3, r0, #1
 80178e6:	89a3      	ldrh	r3, [r4, #12]
 80178e8:	d106      	bne.n	80178f8 <__sflush_r+0x68>
 80178ea:	6829      	ldr	r1, [r5, #0]
 80178ec:	291d      	cmp	r1, #29
 80178ee:	d848      	bhi.n	8017982 <__sflush_r+0xf2>
 80178f0:	4a29      	ldr	r2, [pc, #164]	; (8017998 <__sflush_r+0x108>)
 80178f2:	40ca      	lsrs	r2, r1
 80178f4:	07d6      	lsls	r6, r2, #31
 80178f6:	d544      	bpl.n	8017982 <__sflush_r+0xf2>
 80178f8:	2200      	movs	r2, #0
 80178fa:	6062      	str	r2, [r4, #4]
 80178fc:	04d9      	lsls	r1, r3, #19
 80178fe:	6922      	ldr	r2, [r4, #16]
 8017900:	6022      	str	r2, [r4, #0]
 8017902:	d504      	bpl.n	801790e <__sflush_r+0x7e>
 8017904:	1c42      	adds	r2, r0, #1
 8017906:	d101      	bne.n	801790c <__sflush_r+0x7c>
 8017908:	682b      	ldr	r3, [r5, #0]
 801790a:	b903      	cbnz	r3, 801790e <__sflush_r+0x7e>
 801790c:	6560      	str	r0, [r4, #84]	; 0x54
 801790e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017910:	602f      	str	r7, [r5, #0]
 8017912:	2900      	cmp	r1, #0
 8017914:	d0c9      	beq.n	80178aa <__sflush_r+0x1a>
 8017916:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801791a:	4299      	cmp	r1, r3
 801791c:	d002      	beq.n	8017924 <__sflush_r+0x94>
 801791e:	4628      	mov	r0, r5
 8017920:	f7ff faaa 	bl	8016e78 <_free_r>
 8017924:	2000      	movs	r0, #0
 8017926:	6360      	str	r0, [r4, #52]	; 0x34
 8017928:	e7c0      	b.n	80178ac <__sflush_r+0x1c>
 801792a:	2301      	movs	r3, #1
 801792c:	4628      	mov	r0, r5
 801792e:	47b0      	blx	r6
 8017930:	1c41      	adds	r1, r0, #1
 8017932:	d1c8      	bne.n	80178c6 <__sflush_r+0x36>
 8017934:	682b      	ldr	r3, [r5, #0]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d0c5      	beq.n	80178c6 <__sflush_r+0x36>
 801793a:	2b1d      	cmp	r3, #29
 801793c:	d001      	beq.n	8017942 <__sflush_r+0xb2>
 801793e:	2b16      	cmp	r3, #22
 8017940:	d101      	bne.n	8017946 <__sflush_r+0xb6>
 8017942:	602f      	str	r7, [r5, #0]
 8017944:	e7b1      	b.n	80178aa <__sflush_r+0x1a>
 8017946:	89a3      	ldrh	r3, [r4, #12]
 8017948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801794c:	81a3      	strh	r3, [r4, #12]
 801794e:	e7ad      	b.n	80178ac <__sflush_r+0x1c>
 8017950:	690f      	ldr	r7, [r1, #16]
 8017952:	2f00      	cmp	r7, #0
 8017954:	d0a9      	beq.n	80178aa <__sflush_r+0x1a>
 8017956:	0793      	lsls	r3, r2, #30
 8017958:	680e      	ldr	r6, [r1, #0]
 801795a:	bf08      	it	eq
 801795c:	694b      	ldreq	r3, [r1, #20]
 801795e:	600f      	str	r7, [r1, #0]
 8017960:	bf18      	it	ne
 8017962:	2300      	movne	r3, #0
 8017964:	eba6 0807 	sub.w	r8, r6, r7
 8017968:	608b      	str	r3, [r1, #8]
 801796a:	f1b8 0f00 	cmp.w	r8, #0
 801796e:	dd9c      	ble.n	80178aa <__sflush_r+0x1a>
 8017970:	4643      	mov	r3, r8
 8017972:	463a      	mov	r2, r7
 8017974:	6a21      	ldr	r1, [r4, #32]
 8017976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017978:	4628      	mov	r0, r5
 801797a:	47b0      	blx	r6
 801797c:	2800      	cmp	r0, #0
 801797e:	dc06      	bgt.n	801798e <__sflush_r+0xfe>
 8017980:	89a3      	ldrh	r3, [r4, #12]
 8017982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017986:	81a3      	strh	r3, [r4, #12]
 8017988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801798c:	e78e      	b.n	80178ac <__sflush_r+0x1c>
 801798e:	4407      	add	r7, r0
 8017990:	eba8 0800 	sub.w	r8, r8, r0
 8017994:	e7e9      	b.n	801796a <__sflush_r+0xda>
 8017996:	bf00      	nop
 8017998:	20400001 	.word	0x20400001

0801799c <_fflush_r>:
 801799c:	b538      	push	{r3, r4, r5, lr}
 801799e:	690b      	ldr	r3, [r1, #16]
 80179a0:	4605      	mov	r5, r0
 80179a2:	460c      	mov	r4, r1
 80179a4:	b1db      	cbz	r3, 80179de <_fflush_r+0x42>
 80179a6:	b118      	cbz	r0, 80179b0 <_fflush_r+0x14>
 80179a8:	6983      	ldr	r3, [r0, #24]
 80179aa:	b90b      	cbnz	r3, 80179b0 <_fflush_r+0x14>
 80179ac:	f000 f860 	bl	8017a70 <__sinit>
 80179b0:	4b0c      	ldr	r3, [pc, #48]	; (80179e4 <_fflush_r+0x48>)
 80179b2:	429c      	cmp	r4, r3
 80179b4:	d109      	bne.n	80179ca <_fflush_r+0x2e>
 80179b6:	686c      	ldr	r4, [r5, #4]
 80179b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179bc:	b17b      	cbz	r3, 80179de <_fflush_r+0x42>
 80179be:	4621      	mov	r1, r4
 80179c0:	4628      	mov	r0, r5
 80179c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179c6:	f7ff bf63 	b.w	8017890 <__sflush_r>
 80179ca:	4b07      	ldr	r3, [pc, #28]	; (80179e8 <_fflush_r+0x4c>)
 80179cc:	429c      	cmp	r4, r3
 80179ce:	d101      	bne.n	80179d4 <_fflush_r+0x38>
 80179d0:	68ac      	ldr	r4, [r5, #8]
 80179d2:	e7f1      	b.n	80179b8 <_fflush_r+0x1c>
 80179d4:	4b05      	ldr	r3, [pc, #20]	; (80179ec <_fflush_r+0x50>)
 80179d6:	429c      	cmp	r4, r3
 80179d8:	bf08      	it	eq
 80179da:	68ec      	ldreq	r4, [r5, #12]
 80179dc:	e7ec      	b.n	80179b8 <_fflush_r+0x1c>
 80179de:	2000      	movs	r0, #0
 80179e0:	bd38      	pop	{r3, r4, r5, pc}
 80179e2:	bf00      	nop
 80179e4:	080fd328 	.word	0x080fd328
 80179e8:	080fd348 	.word	0x080fd348
 80179ec:	080fd308 	.word	0x080fd308

080179f0 <std>:
 80179f0:	2300      	movs	r3, #0
 80179f2:	b510      	push	{r4, lr}
 80179f4:	4604      	mov	r4, r0
 80179f6:	e9c0 3300 	strd	r3, r3, [r0]
 80179fa:	6083      	str	r3, [r0, #8]
 80179fc:	8181      	strh	r1, [r0, #12]
 80179fe:	6643      	str	r3, [r0, #100]	; 0x64
 8017a00:	81c2      	strh	r2, [r0, #14]
 8017a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a06:	6183      	str	r3, [r0, #24]
 8017a08:	4619      	mov	r1, r3
 8017a0a:	2208      	movs	r2, #8
 8017a0c:	305c      	adds	r0, #92	; 0x5c
 8017a0e:	f7ff fa2b 	bl	8016e68 <memset>
 8017a12:	4b05      	ldr	r3, [pc, #20]	; (8017a28 <std+0x38>)
 8017a14:	6263      	str	r3, [r4, #36]	; 0x24
 8017a16:	4b05      	ldr	r3, [pc, #20]	; (8017a2c <std+0x3c>)
 8017a18:	62a3      	str	r3, [r4, #40]	; 0x28
 8017a1a:	4b05      	ldr	r3, [pc, #20]	; (8017a30 <std+0x40>)
 8017a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017a1e:	4b05      	ldr	r3, [pc, #20]	; (8017a34 <std+0x44>)
 8017a20:	6224      	str	r4, [r4, #32]
 8017a22:	6323      	str	r3, [r4, #48]	; 0x30
 8017a24:	bd10      	pop	{r4, pc}
 8017a26:	bf00      	nop
 8017a28:	08017c51 	.word	0x08017c51
 8017a2c:	08017c73 	.word	0x08017c73
 8017a30:	08017cab 	.word	0x08017cab
 8017a34:	08017ccf 	.word	0x08017ccf

08017a38 <_cleanup_r>:
 8017a38:	4901      	ldr	r1, [pc, #4]	; (8017a40 <_cleanup_r+0x8>)
 8017a3a:	f000 b885 	b.w	8017b48 <_fwalk_reent>
 8017a3e:	bf00      	nop
 8017a40:	0801799d 	.word	0x0801799d

08017a44 <__sfmoreglue>:
 8017a44:	b570      	push	{r4, r5, r6, lr}
 8017a46:	1e4a      	subs	r2, r1, #1
 8017a48:	2568      	movs	r5, #104	; 0x68
 8017a4a:	4355      	muls	r5, r2
 8017a4c:	460e      	mov	r6, r1
 8017a4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017a52:	f7ff fa5f 	bl	8016f14 <_malloc_r>
 8017a56:	4604      	mov	r4, r0
 8017a58:	b140      	cbz	r0, 8017a6c <__sfmoreglue+0x28>
 8017a5a:	2100      	movs	r1, #0
 8017a5c:	e9c0 1600 	strd	r1, r6, [r0]
 8017a60:	300c      	adds	r0, #12
 8017a62:	60a0      	str	r0, [r4, #8]
 8017a64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017a68:	f7ff f9fe 	bl	8016e68 <memset>
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	bd70      	pop	{r4, r5, r6, pc}

08017a70 <__sinit>:
 8017a70:	6983      	ldr	r3, [r0, #24]
 8017a72:	b510      	push	{r4, lr}
 8017a74:	4604      	mov	r4, r0
 8017a76:	bb33      	cbnz	r3, 8017ac6 <__sinit+0x56>
 8017a78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017a7c:	6503      	str	r3, [r0, #80]	; 0x50
 8017a7e:	4b12      	ldr	r3, [pc, #72]	; (8017ac8 <__sinit+0x58>)
 8017a80:	4a12      	ldr	r2, [pc, #72]	; (8017acc <__sinit+0x5c>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	6282      	str	r2, [r0, #40]	; 0x28
 8017a86:	4298      	cmp	r0, r3
 8017a88:	bf04      	itt	eq
 8017a8a:	2301      	moveq	r3, #1
 8017a8c:	6183      	streq	r3, [r0, #24]
 8017a8e:	f000 f81f 	bl	8017ad0 <__sfp>
 8017a92:	6060      	str	r0, [r4, #4]
 8017a94:	4620      	mov	r0, r4
 8017a96:	f000 f81b 	bl	8017ad0 <__sfp>
 8017a9a:	60a0      	str	r0, [r4, #8]
 8017a9c:	4620      	mov	r0, r4
 8017a9e:	f000 f817 	bl	8017ad0 <__sfp>
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	60e0      	str	r0, [r4, #12]
 8017aa6:	2104      	movs	r1, #4
 8017aa8:	6860      	ldr	r0, [r4, #4]
 8017aaa:	f7ff ffa1 	bl	80179f0 <std>
 8017aae:	2201      	movs	r2, #1
 8017ab0:	2109      	movs	r1, #9
 8017ab2:	68a0      	ldr	r0, [r4, #8]
 8017ab4:	f7ff ff9c 	bl	80179f0 <std>
 8017ab8:	2202      	movs	r2, #2
 8017aba:	2112      	movs	r1, #18
 8017abc:	68e0      	ldr	r0, [r4, #12]
 8017abe:	f7ff ff97 	bl	80179f0 <std>
 8017ac2:	2301      	movs	r3, #1
 8017ac4:	61a3      	str	r3, [r4, #24]
 8017ac6:	bd10      	pop	{r4, pc}
 8017ac8:	080fd2d0 	.word	0x080fd2d0
 8017acc:	08017a39 	.word	0x08017a39

08017ad0 <__sfp>:
 8017ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ad2:	4b1b      	ldr	r3, [pc, #108]	; (8017b40 <__sfp+0x70>)
 8017ad4:	681e      	ldr	r6, [r3, #0]
 8017ad6:	69b3      	ldr	r3, [r6, #24]
 8017ad8:	4607      	mov	r7, r0
 8017ada:	b913      	cbnz	r3, 8017ae2 <__sfp+0x12>
 8017adc:	4630      	mov	r0, r6
 8017ade:	f7ff ffc7 	bl	8017a70 <__sinit>
 8017ae2:	3648      	adds	r6, #72	; 0x48
 8017ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017ae8:	3b01      	subs	r3, #1
 8017aea:	d503      	bpl.n	8017af4 <__sfp+0x24>
 8017aec:	6833      	ldr	r3, [r6, #0]
 8017aee:	b133      	cbz	r3, 8017afe <__sfp+0x2e>
 8017af0:	6836      	ldr	r6, [r6, #0]
 8017af2:	e7f7      	b.n	8017ae4 <__sfp+0x14>
 8017af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017af8:	b16d      	cbz	r5, 8017b16 <__sfp+0x46>
 8017afa:	3468      	adds	r4, #104	; 0x68
 8017afc:	e7f4      	b.n	8017ae8 <__sfp+0x18>
 8017afe:	2104      	movs	r1, #4
 8017b00:	4638      	mov	r0, r7
 8017b02:	f7ff ff9f 	bl	8017a44 <__sfmoreglue>
 8017b06:	6030      	str	r0, [r6, #0]
 8017b08:	2800      	cmp	r0, #0
 8017b0a:	d1f1      	bne.n	8017af0 <__sfp+0x20>
 8017b0c:	230c      	movs	r3, #12
 8017b0e:	603b      	str	r3, [r7, #0]
 8017b10:	4604      	mov	r4, r0
 8017b12:	4620      	mov	r0, r4
 8017b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b16:	4b0b      	ldr	r3, [pc, #44]	; (8017b44 <__sfp+0x74>)
 8017b18:	6665      	str	r5, [r4, #100]	; 0x64
 8017b1a:	e9c4 5500 	strd	r5, r5, [r4]
 8017b1e:	60a5      	str	r5, [r4, #8]
 8017b20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017b24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017b28:	2208      	movs	r2, #8
 8017b2a:	4629      	mov	r1, r5
 8017b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017b30:	f7ff f99a 	bl	8016e68 <memset>
 8017b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017b3c:	e7e9      	b.n	8017b12 <__sfp+0x42>
 8017b3e:	bf00      	nop
 8017b40:	080fd2d0 	.word	0x080fd2d0
 8017b44:	ffff0001 	.word	0xffff0001

08017b48 <_fwalk_reent>:
 8017b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b4c:	4680      	mov	r8, r0
 8017b4e:	4689      	mov	r9, r1
 8017b50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017b54:	2600      	movs	r6, #0
 8017b56:	b914      	cbnz	r4, 8017b5e <_fwalk_reent+0x16>
 8017b58:	4630      	mov	r0, r6
 8017b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017b62:	3f01      	subs	r7, #1
 8017b64:	d501      	bpl.n	8017b6a <_fwalk_reent+0x22>
 8017b66:	6824      	ldr	r4, [r4, #0]
 8017b68:	e7f5      	b.n	8017b56 <_fwalk_reent+0xe>
 8017b6a:	89ab      	ldrh	r3, [r5, #12]
 8017b6c:	2b01      	cmp	r3, #1
 8017b6e:	d907      	bls.n	8017b80 <_fwalk_reent+0x38>
 8017b70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b74:	3301      	adds	r3, #1
 8017b76:	d003      	beq.n	8017b80 <_fwalk_reent+0x38>
 8017b78:	4629      	mov	r1, r5
 8017b7a:	4640      	mov	r0, r8
 8017b7c:	47c8      	blx	r9
 8017b7e:	4306      	orrs	r6, r0
 8017b80:	3568      	adds	r5, #104	; 0x68
 8017b82:	e7ee      	b.n	8017b62 <_fwalk_reent+0x1a>

08017b84 <__swhatbuf_r>:
 8017b84:	b570      	push	{r4, r5, r6, lr}
 8017b86:	460e      	mov	r6, r1
 8017b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b8c:	2900      	cmp	r1, #0
 8017b8e:	b096      	sub	sp, #88	; 0x58
 8017b90:	4614      	mov	r4, r2
 8017b92:	461d      	mov	r5, r3
 8017b94:	da07      	bge.n	8017ba6 <__swhatbuf_r+0x22>
 8017b96:	2300      	movs	r3, #0
 8017b98:	602b      	str	r3, [r5, #0]
 8017b9a:	89b3      	ldrh	r3, [r6, #12]
 8017b9c:	061a      	lsls	r2, r3, #24
 8017b9e:	d410      	bmi.n	8017bc2 <__swhatbuf_r+0x3e>
 8017ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ba4:	e00e      	b.n	8017bc4 <__swhatbuf_r+0x40>
 8017ba6:	466a      	mov	r2, sp
 8017ba8:	f000 f8b8 	bl	8017d1c <_fstat_r>
 8017bac:	2800      	cmp	r0, #0
 8017bae:	dbf2      	blt.n	8017b96 <__swhatbuf_r+0x12>
 8017bb0:	9a01      	ldr	r2, [sp, #4]
 8017bb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017bb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017bba:	425a      	negs	r2, r3
 8017bbc:	415a      	adcs	r2, r3
 8017bbe:	602a      	str	r2, [r5, #0]
 8017bc0:	e7ee      	b.n	8017ba0 <__swhatbuf_r+0x1c>
 8017bc2:	2340      	movs	r3, #64	; 0x40
 8017bc4:	2000      	movs	r0, #0
 8017bc6:	6023      	str	r3, [r4, #0]
 8017bc8:	b016      	add	sp, #88	; 0x58
 8017bca:	bd70      	pop	{r4, r5, r6, pc}

08017bcc <__smakebuf_r>:
 8017bcc:	898b      	ldrh	r3, [r1, #12]
 8017bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017bd0:	079d      	lsls	r5, r3, #30
 8017bd2:	4606      	mov	r6, r0
 8017bd4:	460c      	mov	r4, r1
 8017bd6:	d507      	bpl.n	8017be8 <__smakebuf_r+0x1c>
 8017bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017bdc:	6023      	str	r3, [r4, #0]
 8017bde:	6123      	str	r3, [r4, #16]
 8017be0:	2301      	movs	r3, #1
 8017be2:	6163      	str	r3, [r4, #20]
 8017be4:	b002      	add	sp, #8
 8017be6:	bd70      	pop	{r4, r5, r6, pc}
 8017be8:	ab01      	add	r3, sp, #4
 8017bea:	466a      	mov	r2, sp
 8017bec:	f7ff ffca 	bl	8017b84 <__swhatbuf_r>
 8017bf0:	9900      	ldr	r1, [sp, #0]
 8017bf2:	4605      	mov	r5, r0
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	f7ff f98d 	bl	8016f14 <_malloc_r>
 8017bfa:	b948      	cbnz	r0, 8017c10 <__smakebuf_r+0x44>
 8017bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c00:	059a      	lsls	r2, r3, #22
 8017c02:	d4ef      	bmi.n	8017be4 <__smakebuf_r+0x18>
 8017c04:	f023 0303 	bic.w	r3, r3, #3
 8017c08:	f043 0302 	orr.w	r3, r3, #2
 8017c0c:	81a3      	strh	r3, [r4, #12]
 8017c0e:	e7e3      	b.n	8017bd8 <__smakebuf_r+0xc>
 8017c10:	4b0d      	ldr	r3, [pc, #52]	; (8017c48 <__smakebuf_r+0x7c>)
 8017c12:	62b3      	str	r3, [r6, #40]	; 0x28
 8017c14:	89a3      	ldrh	r3, [r4, #12]
 8017c16:	6020      	str	r0, [r4, #0]
 8017c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c1c:	81a3      	strh	r3, [r4, #12]
 8017c1e:	9b00      	ldr	r3, [sp, #0]
 8017c20:	6163      	str	r3, [r4, #20]
 8017c22:	9b01      	ldr	r3, [sp, #4]
 8017c24:	6120      	str	r0, [r4, #16]
 8017c26:	b15b      	cbz	r3, 8017c40 <__smakebuf_r+0x74>
 8017c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c2c:	4630      	mov	r0, r6
 8017c2e:	f000 f887 	bl	8017d40 <_isatty_r>
 8017c32:	b128      	cbz	r0, 8017c40 <__smakebuf_r+0x74>
 8017c34:	89a3      	ldrh	r3, [r4, #12]
 8017c36:	f023 0303 	bic.w	r3, r3, #3
 8017c3a:	f043 0301 	orr.w	r3, r3, #1
 8017c3e:	81a3      	strh	r3, [r4, #12]
 8017c40:	89a3      	ldrh	r3, [r4, #12]
 8017c42:	431d      	orrs	r5, r3
 8017c44:	81a5      	strh	r5, [r4, #12]
 8017c46:	e7cd      	b.n	8017be4 <__smakebuf_r+0x18>
 8017c48:	08017a39 	.word	0x08017a39

08017c4c <__malloc_lock>:
 8017c4c:	4770      	bx	lr

08017c4e <__malloc_unlock>:
 8017c4e:	4770      	bx	lr

08017c50 <__sread>:
 8017c50:	b510      	push	{r4, lr}
 8017c52:	460c      	mov	r4, r1
 8017c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c58:	f000 f894 	bl	8017d84 <_read_r>
 8017c5c:	2800      	cmp	r0, #0
 8017c5e:	bfab      	itete	ge
 8017c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c62:	89a3      	ldrhlt	r3, [r4, #12]
 8017c64:	181b      	addge	r3, r3, r0
 8017c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c6a:	bfac      	ite	ge
 8017c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c6e:	81a3      	strhlt	r3, [r4, #12]
 8017c70:	bd10      	pop	{r4, pc}

08017c72 <__swrite>:
 8017c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c76:	461f      	mov	r7, r3
 8017c78:	898b      	ldrh	r3, [r1, #12]
 8017c7a:	05db      	lsls	r3, r3, #23
 8017c7c:	4605      	mov	r5, r0
 8017c7e:	460c      	mov	r4, r1
 8017c80:	4616      	mov	r6, r2
 8017c82:	d505      	bpl.n	8017c90 <__swrite+0x1e>
 8017c84:	2302      	movs	r3, #2
 8017c86:	2200      	movs	r2, #0
 8017c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c8c:	f000 f868 	bl	8017d60 <_lseek_r>
 8017c90:	89a3      	ldrh	r3, [r4, #12]
 8017c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c9a:	81a3      	strh	r3, [r4, #12]
 8017c9c:	4632      	mov	r2, r6
 8017c9e:	463b      	mov	r3, r7
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca6:	f000 b817 	b.w	8017cd8 <_write_r>

08017caa <__sseek>:
 8017caa:	b510      	push	{r4, lr}
 8017cac:	460c      	mov	r4, r1
 8017cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cb2:	f000 f855 	bl	8017d60 <_lseek_r>
 8017cb6:	1c43      	adds	r3, r0, #1
 8017cb8:	89a3      	ldrh	r3, [r4, #12]
 8017cba:	bf15      	itete	ne
 8017cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017cc6:	81a3      	strheq	r3, [r4, #12]
 8017cc8:	bf18      	it	ne
 8017cca:	81a3      	strhne	r3, [r4, #12]
 8017ccc:	bd10      	pop	{r4, pc}

08017cce <__sclose>:
 8017cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cd2:	f000 b813 	b.w	8017cfc <_close_r>
	...

08017cd8 <_write_r>:
 8017cd8:	b538      	push	{r3, r4, r5, lr}
 8017cda:	4c07      	ldr	r4, [pc, #28]	; (8017cf8 <_write_r+0x20>)
 8017cdc:	4605      	mov	r5, r0
 8017cde:	4608      	mov	r0, r1
 8017ce0:	4611      	mov	r1, r2
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	6022      	str	r2, [r4, #0]
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	f7ec fc4e 	bl	8004588 <_write>
 8017cec:	1c43      	adds	r3, r0, #1
 8017cee:	d102      	bne.n	8017cf6 <_write_r+0x1e>
 8017cf0:	6823      	ldr	r3, [r4, #0]
 8017cf2:	b103      	cbz	r3, 8017cf6 <_write_r+0x1e>
 8017cf4:	602b      	str	r3, [r5, #0]
 8017cf6:	bd38      	pop	{r3, r4, r5, pc}
 8017cf8:	2004da0c 	.word	0x2004da0c

08017cfc <_close_r>:
 8017cfc:	b538      	push	{r3, r4, r5, lr}
 8017cfe:	4c06      	ldr	r4, [pc, #24]	; (8017d18 <_close_r+0x1c>)
 8017d00:	2300      	movs	r3, #0
 8017d02:	4605      	mov	r5, r0
 8017d04:	4608      	mov	r0, r1
 8017d06:	6023      	str	r3, [r4, #0]
 8017d08:	f7ec fbf2 	bl	80044f0 <_close>
 8017d0c:	1c43      	adds	r3, r0, #1
 8017d0e:	d102      	bne.n	8017d16 <_close_r+0x1a>
 8017d10:	6823      	ldr	r3, [r4, #0]
 8017d12:	b103      	cbz	r3, 8017d16 <_close_r+0x1a>
 8017d14:	602b      	str	r3, [r5, #0]
 8017d16:	bd38      	pop	{r3, r4, r5, pc}
 8017d18:	2004da0c 	.word	0x2004da0c

08017d1c <_fstat_r>:
 8017d1c:	b538      	push	{r3, r4, r5, lr}
 8017d1e:	4c07      	ldr	r4, [pc, #28]	; (8017d3c <_fstat_r+0x20>)
 8017d20:	2300      	movs	r3, #0
 8017d22:	4605      	mov	r5, r0
 8017d24:	4608      	mov	r0, r1
 8017d26:	4611      	mov	r1, r2
 8017d28:	6023      	str	r3, [r4, #0]
 8017d2a:	f7ec fbe4 	bl	80044f6 <_fstat>
 8017d2e:	1c43      	adds	r3, r0, #1
 8017d30:	d102      	bne.n	8017d38 <_fstat_r+0x1c>
 8017d32:	6823      	ldr	r3, [r4, #0]
 8017d34:	b103      	cbz	r3, 8017d38 <_fstat_r+0x1c>
 8017d36:	602b      	str	r3, [r5, #0]
 8017d38:	bd38      	pop	{r3, r4, r5, pc}
 8017d3a:	bf00      	nop
 8017d3c:	2004da0c 	.word	0x2004da0c

08017d40 <_isatty_r>:
 8017d40:	b538      	push	{r3, r4, r5, lr}
 8017d42:	4c06      	ldr	r4, [pc, #24]	; (8017d5c <_isatty_r+0x1c>)
 8017d44:	2300      	movs	r3, #0
 8017d46:	4605      	mov	r5, r0
 8017d48:	4608      	mov	r0, r1
 8017d4a:	6023      	str	r3, [r4, #0]
 8017d4c:	f7ec fbd8 	bl	8004500 <_isatty>
 8017d50:	1c43      	adds	r3, r0, #1
 8017d52:	d102      	bne.n	8017d5a <_isatty_r+0x1a>
 8017d54:	6823      	ldr	r3, [r4, #0]
 8017d56:	b103      	cbz	r3, 8017d5a <_isatty_r+0x1a>
 8017d58:	602b      	str	r3, [r5, #0]
 8017d5a:	bd38      	pop	{r3, r4, r5, pc}
 8017d5c:	2004da0c 	.word	0x2004da0c

08017d60 <_lseek_r>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	4c07      	ldr	r4, [pc, #28]	; (8017d80 <_lseek_r+0x20>)
 8017d64:	4605      	mov	r5, r0
 8017d66:	4608      	mov	r0, r1
 8017d68:	4611      	mov	r1, r2
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	6022      	str	r2, [r4, #0]
 8017d6e:	461a      	mov	r2, r3
 8017d70:	f7ec fbc8 	bl	8004504 <_lseek>
 8017d74:	1c43      	adds	r3, r0, #1
 8017d76:	d102      	bne.n	8017d7e <_lseek_r+0x1e>
 8017d78:	6823      	ldr	r3, [r4, #0]
 8017d7a:	b103      	cbz	r3, 8017d7e <_lseek_r+0x1e>
 8017d7c:	602b      	str	r3, [r5, #0]
 8017d7e:	bd38      	pop	{r3, r4, r5, pc}
 8017d80:	2004da0c 	.word	0x2004da0c

08017d84 <_read_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	4c07      	ldr	r4, [pc, #28]	; (8017da4 <_read_r+0x20>)
 8017d88:	4605      	mov	r5, r0
 8017d8a:	4608      	mov	r0, r1
 8017d8c:	4611      	mov	r1, r2
 8017d8e:	2200      	movs	r2, #0
 8017d90:	6022      	str	r2, [r4, #0]
 8017d92:	461a      	mov	r2, r3
 8017d94:	f7ec fb9e 	bl	80044d4 <_read>
 8017d98:	1c43      	adds	r3, r0, #1
 8017d9a:	d102      	bne.n	8017da2 <_read_r+0x1e>
 8017d9c:	6823      	ldr	r3, [r4, #0]
 8017d9e:	b103      	cbz	r3, 8017da2 <_read_r+0x1e>
 8017da0:	602b      	str	r3, [r5, #0]
 8017da2:	bd38      	pop	{r3, r4, r5, pc}
 8017da4:	2004da0c 	.word	0x2004da0c

08017da8 <_init>:
 8017da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017daa:	bf00      	nop
 8017dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dae:	bc08      	pop	{r3}
 8017db0:	469e      	mov	lr, r3
 8017db2:	4770      	bx	lr

08017db4 <_fini>:
 8017db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017db6:	bf00      	nop
 8017db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dba:	bc08      	pop	{r3}
 8017dbc:	469e      	mov	lr, r3
 8017dbe:	4770      	bx	lr
